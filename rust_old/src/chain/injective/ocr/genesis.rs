// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/ocr/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::ocr::Params>,
    pub feed_configs: ::protobuf::RepeatedField<super::ocr::FeedConfig>,
    pub latest_epoch_and_rounds: ::protobuf::RepeatedField<FeedEpochAndRound>,
    pub feed_transmissions: ::protobuf::RepeatedField<FeedTransmission>,
    pub latest_aggregator_round_ids: ::protobuf::RepeatedField<FeedLatestAggregatorRoundIDs>,
    pub reward_pools: ::protobuf::RepeatedField<RewardPool>,
    pub feed_observation_counts: ::protobuf::RepeatedField<FeedCounts>,
    pub feed_transmission_counts: ::protobuf::RepeatedField<FeedCounts>,
    pub pending_payeeships: ::protobuf::RepeatedField<PendingPayeeship>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .injective.ocr.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::ocr::Params {
        self.params.as_ref().unwrap_or_else(|| <super::ocr::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::ocr::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::ocr::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::ocr::Params {
        self.params.take().unwrap_or_else(|| super::ocr::Params::new())
    }

    // repeated .injective.ocr.v1beta1.FeedConfig feed_configs = 2;


    pub fn get_feed_configs(&self) -> &[super::ocr::FeedConfig] {
        &self.feed_configs
    }
    pub fn clear_feed_configs(&mut self) {
        self.feed_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_configs(&mut self, v: ::protobuf::RepeatedField<super::ocr::FeedConfig>) {
        self.feed_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed_configs(&mut self) -> &mut ::protobuf::RepeatedField<super::ocr::FeedConfig> {
        &mut self.feed_configs
    }

    // Take field
    pub fn take_feed_configs(&mut self) -> ::protobuf::RepeatedField<super::ocr::FeedConfig> {
        ::std::mem::replace(&mut self.feed_configs, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.FeedEpochAndRound latest_epoch_and_rounds = 3;


    pub fn get_latest_epoch_and_rounds(&self) -> &[FeedEpochAndRound] {
        &self.latest_epoch_and_rounds
    }
    pub fn clear_latest_epoch_and_rounds(&mut self) {
        self.latest_epoch_and_rounds.clear();
    }

    // Param is passed by value, moved
    pub fn set_latest_epoch_and_rounds(&mut self, v: ::protobuf::RepeatedField<FeedEpochAndRound>) {
        self.latest_epoch_and_rounds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_latest_epoch_and_rounds(&mut self) -> &mut ::protobuf::RepeatedField<FeedEpochAndRound> {
        &mut self.latest_epoch_and_rounds
    }

    // Take field
    pub fn take_latest_epoch_and_rounds(&mut self) -> ::protobuf::RepeatedField<FeedEpochAndRound> {
        ::std::mem::replace(&mut self.latest_epoch_and_rounds, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.FeedTransmission feed_transmissions = 4;


    pub fn get_feed_transmissions(&self) -> &[FeedTransmission] {
        &self.feed_transmissions
    }
    pub fn clear_feed_transmissions(&mut self) {
        self.feed_transmissions.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_transmissions(&mut self, v: ::protobuf::RepeatedField<FeedTransmission>) {
        self.feed_transmissions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed_transmissions(&mut self) -> &mut ::protobuf::RepeatedField<FeedTransmission> {
        &mut self.feed_transmissions
    }

    // Take field
    pub fn take_feed_transmissions(&mut self) -> ::protobuf::RepeatedField<FeedTransmission> {
        ::std::mem::replace(&mut self.feed_transmissions, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5;


    pub fn get_latest_aggregator_round_ids(&self) -> &[FeedLatestAggregatorRoundIDs] {
        &self.latest_aggregator_round_ids
    }
    pub fn clear_latest_aggregator_round_ids(&mut self) {
        self.latest_aggregator_round_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_latest_aggregator_round_ids(&mut self, v: ::protobuf::RepeatedField<FeedLatestAggregatorRoundIDs>) {
        self.latest_aggregator_round_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_latest_aggregator_round_ids(&mut self) -> &mut ::protobuf::RepeatedField<FeedLatestAggregatorRoundIDs> {
        &mut self.latest_aggregator_round_ids
    }

    // Take field
    pub fn take_latest_aggregator_round_ids(&mut self) -> ::protobuf::RepeatedField<FeedLatestAggregatorRoundIDs> {
        ::std::mem::replace(&mut self.latest_aggregator_round_ids, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.RewardPool reward_pools = 6;


    pub fn get_reward_pools(&self) -> &[RewardPool] {
        &self.reward_pools
    }
    pub fn clear_reward_pools(&mut self) {
        self.reward_pools.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_pools(&mut self, v: ::protobuf::RepeatedField<RewardPool>) {
        self.reward_pools = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reward_pools(&mut self) -> &mut ::protobuf::RepeatedField<RewardPool> {
        &mut self.reward_pools
    }

    // Take field
    pub fn take_reward_pools(&mut self) -> ::protobuf::RepeatedField<RewardPool> {
        ::std::mem::replace(&mut self.reward_pools, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.FeedCounts feed_observation_counts = 7;


    pub fn get_feed_observation_counts(&self) -> &[FeedCounts] {
        &self.feed_observation_counts
    }
    pub fn clear_feed_observation_counts(&mut self) {
        self.feed_observation_counts.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_observation_counts(&mut self, v: ::protobuf::RepeatedField<FeedCounts>) {
        self.feed_observation_counts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed_observation_counts(&mut self) -> &mut ::protobuf::RepeatedField<FeedCounts> {
        &mut self.feed_observation_counts
    }

    // Take field
    pub fn take_feed_observation_counts(&mut self) -> ::protobuf::RepeatedField<FeedCounts> {
        ::std::mem::replace(&mut self.feed_observation_counts, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.FeedCounts feed_transmission_counts = 8;


    pub fn get_feed_transmission_counts(&self) -> &[FeedCounts] {
        &self.feed_transmission_counts
    }
    pub fn clear_feed_transmission_counts(&mut self) {
        self.feed_transmission_counts.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_transmission_counts(&mut self, v: ::protobuf::RepeatedField<FeedCounts>) {
        self.feed_transmission_counts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feed_transmission_counts(&mut self) -> &mut ::protobuf::RepeatedField<FeedCounts> {
        &mut self.feed_transmission_counts
    }

    // Take field
    pub fn take_feed_transmission_counts(&mut self) -> ::protobuf::RepeatedField<FeedCounts> {
        ::std::mem::replace(&mut self.feed_transmission_counts, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.ocr.v1beta1.PendingPayeeship pending_payeeships = 9;


    pub fn get_pending_payeeships(&self) -> &[PendingPayeeship] {
        &self.pending_payeeships
    }
    pub fn clear_pending_payeeships(&mut self) {
        self.pending_payeeships.clear();
    }

    // Param is passed by value, moved
    pub fn set_pending_payeeships(&mut self, v: ::protobuf::RepeatedField<PendingPayeeship>) {
        self.pending_payeeships = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pending_payeeships(&mut self) -> &mut ::protobuf::RepeatedField<PendingPayeeship> {
        &mut self.pending_payeeships
    }

    // Take field
    pub fn take_pending_payeeships(&mut self) -> ::protobuf::RepeatedField<PendingPayeeship> {
        ::std::mem::replace(&mut self.pending_payeeships, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feed_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.latest_epoch_and_rounds {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feed_transmissions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.latest_aggregator_round_ids {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.reward_pools {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feed_observation_counts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.feed_transmission_counts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pending_payeeships {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed_configs)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.latest_epoch_and_rounds)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed_transmissions)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.latest_aggregator_round_ids)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.reward_pools)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed_observation_counts)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feed_transmission_counts)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pending_payeeships)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.feed_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.latest_epoch_and_rounds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.feed_transmissions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.latest_aggregator_round_ids {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.reward_pools {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.feed_observation_counts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.feed_transmission_counts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pending_payeeships {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.feed_configs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.latest_epoch_and_rounds {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.feed_transmissions {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.latest_aggregator_round_ids {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.reward_pools {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.feed_observation_counts {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.feed_transmission_counts {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pending_payeeships {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.feed_configs.clear();
        self.latest_epoch_and_rounds.clear();
        self.feed_transmissions.clear();
        self.latest_aggregator_round_ids.clear();
        self.reward_pools.clear();
        self.feed_observation_counts.clear();
        self.feed_transmission_counts.clear();
        self.pending_payeeships.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeedTransmission {
    // message fields
    pub feed_id: ::std::string::String,
    pub transmission: ::protobuf::SingularPtrField<super::ocr::Transmission>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedTransmission {
    fn default() -> &'a FeedTransmission {
        <FeedTransmission as ::protobuf::Message>::default_instance()
    }
}

impl FeedTransmission {
    pub fn new() -> FeedTransmission {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // .injective.ocr.v1beta1.Transmission transmission = 2;


    pub fn get_transmission(&self) -> &super::ocr::Transmission {
        self.transmission.as_ref().unwrap_or_else(|| <super::ocr::Transmission as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transmission(&mut self) {
        self.transmission.clear();
    }

    pub fn has_transmission(&self) -> bool {
        self.transmission.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transmission(&mut self, v: super::ocr::Transmission) {
        self.transmission = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transmission(&mut self) -> &mut super::ocr::Transmission {
        if self.transmission.is_none() {
            self.transmission.set_default();
        }
        self.transmission.as_mut().unwrap()
    }

    // Take field
    pub fn take_transmission(&mut self) -> super::ocr::Transmission {
        self.transmission.take().unwrap_or_else(|| super::ocr::Transmission::new())
    }
}

impl ::protobuf::Message for FeedTransmission {
    fn is_initialized(&self) -> bool {
        for v in &self.transmission {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transmission)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if let Some(ref v) = self.transmission.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if let Some(ref v) = self.transmission.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedTransmission {
        FeedTransmission::new()
    }

    fn default_instance() -> &'static FeedTransmission {
        static instance: ::protobuf::rt::LazyV2<FeedTransmission> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedTransmission::new)
    }
}

impl ::protobuf::Clear for FeedTransmission {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.transmission.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedTransmission {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeedEpochAndRound {
    // message fields
    pub feed_id: ::std::string::String,
    pub epoch_and_round: ::protobuf::SingularPtrField<super::ocr::EpochAndRound>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedEpochAndRound {
    fn default() -> &'a FeedEpochAndRound {
        <FeedEpochAndRound as ::protobuf::Message>::default_instance()
    }
}

impl FeedEpochAndRound {
    pub fn new() -> FeedEpochAndRound {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // .injective.ocr.v1beta1.EpochAndRound epoch_and_round = 2;


    pub fn get_epoch_and_round(&self) -> &super::ocr::EpochAndRound {
        self.epoch_and_round.as_ref().unwrap_or_else(|| <super::ocr::EpochAndRound as ::protobuf::Message>::default_instance())
    }
    pub fn clear_epoch_and_round(&mut self) {
        self.epoch_and_round.clear();
    }

    pub fn has_epoch_and_round(&self) -> bool {
        self.epoch_and_round.is_some()
    }

    // Param is passed by value, moved
    pub fn set_epoch_and_round(&mut self, v: super::ocr::EpochAndRound) {
        self.epoch_and_round = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_epoch_and_round(&mut self) -> &mut super::ocr::EpochAndRound {
        if self.epoch_and_round.is_none() {
            self.epoch_and_round.set_default();
        }
        self.epoch_and_round.as_mut().unwrap()
    }

    // Take field
    pub fn take_epoch_and_round(&mut self) -> super::ocr::EpochAndRound {
        self.epoch_and_round.take().unwrap_or_else(|| super::ocr::EpochAndRound::new())
    }
}

impl ::protobuf::Message for FeedEpochAndRound {
    fn is_initialized(&self) -> bool {
        for v in &self.epoch_and_round {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.epoch_and_round)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if let Some(ref v) = self.epoch_and_round.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if let Some(ref v) = self.epoch_and_round.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedEpochAndRound {
        FeedEpochAndRound::new()
    }

    fn default_instance() -> &'static FeedEpochAndRound {
        static instance: ::protobuf::rt::LazyV2<FeedEpochAndRound> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedEpochAndRound::new)
    }
}

impl ::protobuf::Clear for FeedEpochAndRound {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.epoch_and_round.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedEpochAndRound {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeedLatestAggregatorRoundIDs {
    // message fields
    pub feed_id: ::std::string::String,
    pub aggregator_round_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedLatestAggregatorRoundIDs {
    fn default() -> &'a FeedLatestAggregatorRoundIDs {
        <FeedLatestAggregatorRoundIDs as ::protobuf::Message>::default_instance()
    }
}

impl FeedLatestAggregatorRoundIDs {
    pub fn new() -> FeedLatestAggregatorRoundIDs {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // uint64 aggregator_round_id = 2;


    pub fn get_aggregator_round_id(&self) -> u64 {
        self.aggregator_round_id
    }
    pub fn clear_aggregator_round_id(&mut self) {
        self.aggregator_round_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_aggregator_round_id(&mut self, v: u64) {
        self.aggregator_round_id = v;
    }
}

impl ::protobuf::Message for FeedLatestAggregatorRoundIDs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.aggregator_round_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if self.aggregator_round_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.aggregator_round_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if self.aggregator_round_id != 0 {
            os.write_uint64(2, self.aggregator_round_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedLatestAggregatorRoundIDs {
        FeedLatestAggregatorRoundIDs::new()
    }

    fn default_instance() -> &'static FeedLatestAggregatorRoundIDs {
        static instance: ::protobuf::rt::LazyV2<FeedLatestAggregatorRoundIDs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedLatestAggregatorRoundIDs::new)
    }
}

impl ::protobuf::Clear for FeedLatestAggregatorRoundIDs {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.aggregator_round_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedLatestAggregatorRoundIDs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RewardPool {
    // message fields
    pub feed_id: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RewardPool {
    fn default() -> &'a RewardPool {
        <RewardPool as ::protobuf::Message>::default_instance()
    }
}

impl RewardPool {
    pub fn new() -> RewardPool {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 2;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for RewardPool {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RewardPool {
        RewardPool::new()
    }

    fn default_instance() -> &'static RewardPool {
        static instance: ::protobuf::rt::LazyV2<RewardPool> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RewardPool::new)
    }
}

impl ::protobuf::Clear for RewardPool {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RewardPool {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FeedCounts {
    // message fields
    pub feed_id: ::std::string::String,
    pub counts: ::protobuf::RepeatedField<Count>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeedCounts {
    fn default() -> &'a FeedCounts {
        <FeedCounts as ::protobuf::Message>::default_instance()
    }
}

impl FeedCounts {
    pub fn new() -> FeedCounts {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // repeated .injective.ocr.v1beta1.Count counts = 2;


    pub fn get_counts(&self) -> &[Count] {
        &self.counts
    }
    pub fn clear_counts(&mut self) {
        self.counts.clear();
    }

    // Param is passed by value, moved
    pub fn set_counts(&mut self, v: ::protobuf::RepeatedField<Count>) {
        self.counts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_counts(&mut self) -> &mut ::protobuf::RepeatedField<Count> {
        &mut self.counts
    }

    // Take field
    pub fn take_counts(&mut self) -> ::protobuf::RepeatedField<Count> {
        ::std::mem::replace(&mut self.counts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeedCounts {
    fn is_initialized(&self) -> bool {
        for v in &self.counts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.counts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        for value in &self.counts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        for v in &self.counts {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeedCounts {
        FeedCounts::new()
    }

    fn default_instance() -> &'static FeedCounts {
        static instance: ::protobuf::rt::LazyV2<FeedCounts> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeedCounts::new)
    }
}

impl ::protobuf::Clear for FeedCounts {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.counts.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FeedCounts {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Count {
    // message fields
    pub address: ::std::string::String,
    pub count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Count {
    fn default() -> &'a Count {
        <Count as ::protobuf::Message>::default_instance()
    }
}

impl Count {
    pub fn new() -> Count {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // uint64 count = 2;


    pub fn get_count(&self) -> u64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }
}

impl ::protobuf::Message for Count {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.count != 0 {
            os.write_uint64(2, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Count {
        Count::new()
    }

    fn default_instance() -> &'static Count {
        static instance: ::protobuf::rt::LazyV2<Count> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Count::new)
    }
}

impl ::protobuf::Clear for Count {
    fn clear(&mut self) {
        self.address.clear();
        self.count = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Count {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PendingPayeeship {
    // message fields
    pub feed_id: ::std::string::String,
    pub transmitter: ::std::string::String,
    pub proposed_payee: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PendingPayeeship {
    fn default() -> &'a PendingPayeeship {
        <PendingPayeeship as ::protobuf::Message>::default_instance()
    }
}

impl PendingPayeeship {
    pub fn new() -> PendingPayeeship {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // string transmitter = 2;


    pub fn get_transmitter(&self) -> &str {
        &self.transmitter
    }
    pub fn clear_transmitter(&mut self) {
        self.transmitter.clear();
    }

    // Param is passed by value, moved
    pub fn set_transmitter(&mut self, v: ::std::string::String) {
        self.transmitter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transmitter(&mut self) -> &mut ::std::string::String {
        &mut self.transmitter
    }

    // Take field
    pub fn take_transmitter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transmitter, ::std::string::String::new())
    }

    // string proposed_payee = 3;


    pub fn get_proposed_payee(&self) -> &str {
        &self.proposed_payee
    }
    pub fn clear_proposed_payee(&mut self) {
        self.proposed_payee.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposed_payee(&mut self, v: ::std::string::String) {
        self.proposed_payee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposed_payee(&mut self) -> &mut ::std::string::String {
        &mut self.proposed_payee
    }

    // Take field
    pub fn take_proposed_payee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proposed_payee, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PendingPayeeship {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transmitter)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proposed_payee)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if !self.transmitter.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.transmitter);
        }
        if !self.proposed_payee.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.proposed_payee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if !self.transmitter.is_empty() {
            os.write_string(2, &self.transmitter)?;
        }
        if !self.proposed_payee.is_empty() {
            os.write_string(3, &self.proposed_payee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PendingPayeeship {
        PendingPayeeship::new()
    }

    fn default_instance() -> &'static PendingPayeeship {
        static instance: ::protobuf::rt::LazyV2<PendingPayeeship> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PendingPayeeship::new)
    }
}

impl ::protobuf::Clear for PendingPayeeship {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.transmitter.clear();
        self.proposed_payee.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PendingPayeeship {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

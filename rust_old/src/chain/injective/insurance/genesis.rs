// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/insurance/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::insurance::Params>,
    pub insurance_funds: ::protobuf::RepeatedField<super::insurance::InsuranceFund>,
    pub redemption_schedule: ::protobuf::RepeatedField<super::insurance::RedemptionSchedule>,
    pub next_share_denom_id: u64,
    pub next_redemption_schedule_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .injective.insurance.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::insurance::Params {
        self.params.as_ref().unwrap_or_else(|| <super::insurance::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::insurance::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::insurance::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::insurance::Params {
        self.params.take().unwrap_or_else(|| super::insurance::Params::new())
    }

    // repeated .injective.insurance.v1beta1.InsuranceFund insurance_funds = 2;


    pub fn get_insurance_funds(&self) -> &[super::insurance::InsuranceFund] {
        &self.insurance_funds
    }
    pub fn clear_insurance_funds(&mut self) {
        self.insurance_funds.clear();
    }

    // Param is passed by value, moved
    pub fn set_insurance_funds(&mut self, v: ::protobuf::RepeatedField<super::insurance::InsuranceFund>) {
        self.insurance_funds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_insurance_funds(&mut self) -> &mut ::protobuf::RepeatedField<super::insurance::InsuranceFund> {
        &mut self.insurance_funds
    }

    // Take field
    pub fn take_insurance_funds(&mut self) -> ::protobuf::RepeatedField<super::insurance::InsuranceFund> {
        ::std::mem::replace(&mut self.insurance_funds, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.insurance.v1beta1.RedemptionSchedule redemption_schedule = 3;


    pub fn get_redemption_schedule(&self) -> &[super::insurance::RedemptionSchedule] {
        &self.redemption_schedule
    }
    pub fn clear_redemption_schedule(&mut self) {
        self.redemption_schedule.clear();
    }

    // Param is passed by value, moved
    pub fn set_redemption_schedule(&mut self, v: ::protobuf::RepeatedField<super::insurance::RedemptionSchedule>) {
        self.redemption_schedule = v;
    }

    // Mutable pointer to the field.
    pub fn mut_redemption_schedule(&mut self) -> &mut ::protobuf::RepeatedField<super::insurance::RedemptionSchedule> {
        &mut self.redemption_schedule
    }

    // Take field
    pub fn take_redemption_schedule(&mut self) -> ::protobuf::RepeatedField<super::insurance::RedemptionSchedule> {
        ::std::mem::replace(&mut self.redemption_schedule, ::protobuf::RepeatedField::new())
    }

    // uint64 next_share_denom_id = 4;


    pub fn get_next_share_denom_id(&self) -> u64 {
        self.next_share_denom_id
    }
    pub fn clear_next_share_denom_id(&mut self) {
        self.next_share_denom_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_share_denom_id(&mut self, v: u64) {
        self.next_share_denom_id = v;
    }

    // uint64 next_redemption_schedule_id = 5;


    pub fn get_next_redemption_schedule_id(&self) -> u64 {
        self.next_redemption_schedule_id
    }
    pub fn clear_next_redemption_schedule_id(&mut self) {
        self.next_redemption_schedule_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_next_redemption_schedule_id(&mut self, v: u64) {
        self.next_redemption_schedule_id = v;
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.insurance_funds {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.redemption_schedule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.insurance_funds)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.redemption_schedule)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.next_share_denom_id = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.next_redemption_schedule_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.insurance_funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.redemption_schedule {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.next_share_denom_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.next_share_denom_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.next_redemption_schedule_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.next_redemption_schedule_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.insurance_funds {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.redemption_schedule {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.next_share_denom_id != 0 {
            os.write_uint64(4, self.next_share_denom_id)?;
        }
        if self.next_redemption_schedule_id != 0 {
            os.write_uint64(5, self.next_redemption_schedule_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.insurance_funds.clear();
        self.redemption_schedule.clear();
        self.next_share_denom_id = 0;
        self.next_redemption_schedule_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

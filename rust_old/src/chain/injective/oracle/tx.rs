// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/oracle/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayProviderPrices {
    // message fields
    pub sender: ::std::string::String,
    pub provider: ::std::string::String,
    pub symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub prices: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayProviderPrices {
    fn default() -> &'a MsgRelayProviderPrices {
        <MsgRelayProviderPrices as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayProviderPrices {
    pub fn new() -> MsgRelayProviderPrices {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string provider = 2;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // repeated string symbols = 3;


    pub fn get_symbols(&self) -> &[::std::string::String] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }

    // repeated string prices = 4;


    pub fn get_prices(&self) -> &[::std::string::String] {
        &self.prices
    }
    pub fn clear_prices(&mut self) {
        self.prices.clear();
    }

    // Param is passed by value, moved
    pub fn set_prices(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.prices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_prices(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.prices
    }

    // Take field
    pub fn take_prices(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.prices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgRelayProviderPrices {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.symbols)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.prices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.provider);
        }
        for value in &self.symbols {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.prices {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.provider.is_empty() {
            os.write_string(2, &self.provider)?;
        }
        for v in &self.symbols {
            os.write_string(3, &v)?;
        };
        for v in &self.prices {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayProviderPrices {
        MsgRelayProviderPrices::new()
    }

    fn default_instance() -> &'static MsgRelayProviderPrices {
        static instance: ::protobuf::rt::LazyV2<MsgRelayProviderPrices> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayProviderPrices::new)
    }
}

impl ::protobuf::Clear for MsgRelayProviderPrices {
    fn clear(&mut self) {
        self.sender.clear();
        self.provider.clear();
        self.symbols.clear();
        self.prices.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayProviderPrices {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayProviderPricesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayProviderPricesResponse {
    fn default() -> &'a MsgRelayProviderPricesResponse {
        <MsgRelayProviderPricesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayProviderPricesResponse {
    pub fn new() -> MsgRelayProviderPricesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRelayProviderPricesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayProviderPricesResponse {
        MsgRelayProviderPricesResponse::new()
    }

    fn default_instance() -> &'static MsgRelayProviderPricesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRelayProviderPricesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayProviderPricesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRelayProviderPricesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayProviderPricesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayPriceFeedPrice {
    // message fields
    pub sender: ::std::string::String,
    pub base: ::protobuf::RepeatedField<::std::string::String>,
    pub quote: ::protobuf::RepeatedField<::std::string::String>,
    pub price: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayPriceFeedPrice {
    fn default() -> &'a MsgRelayPriceFeedPrice {
        <MsgRelayPriceFeedPrice as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayPriceFeedPrice {
    pub fn new() -> MsgRelayPriceFeedPrice {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // repeated string base = 2;


    pub fn get_base(&self) -> &[::std::string::String] {
        &self.base
    }
    pub fn clear_base(&mut self) {
        self.base.clear();
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.base = v;
    }

    // Mutable pointer to the field.
    pub fn mut_base(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.base
    }

    // Take field
    pub fn take_base(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.base, ::protobuf::RepeatedField::new())
    }

    // repeated string quote = 3;


    pub fn get_quote(&self) -> &[::std::string::String] {
        &self.quote
    }
    pub fn clear_quote(&mut self) {
        self.quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.quote = v;
    }

    // Mutable pointer to the field.
    pub fn mut_quote(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.quote
    }

    // Take field
    pub fn take_quote(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.quote, ::protobuf::RepeatedField::new())
    }

    // repeated string price = 4;


    pub fn get_price(&self) -> &[::std::string::String] {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.price = v;
    }

    // Mutable pointer to the field.
    pub fn mut_price(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.price, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgRelayPriceFeedPrice {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.base)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.quote)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        for value in &self.base {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.quote {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.price {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        for v in &self.base {
            os.write_string(2, &v)?;
        };
        for v in &self.quote {
            os.write_string(3, &v)?;
        };
        for v in &self.price {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayPriceFeedPrice {
        MsgRelayPriceFeedPrice::new()
    }

    fn default_instance() -> &'static MsgRelayPriceFeedPrice {
        static instance: ::protobuf::rt::LazyV2<MsgRelayPriceFeedPrice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayPriceFeedPrice::new)
    }
}

impl ::protobuf::Clear for MsgRelayPriceFeedPrice {
    fn clear(&mut self) {
        self.sender.clear();
        self.base.clear();
        self.quote.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayPriceFeedPrice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayPriceFeedPriceResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayPriceFeedPriceResponse {
    fn default() -> &'a MsgRelayPriceFeedPriceResponse {
        <MsgRelayPriceFeedPriceResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayPriceFeedPriceResponse {
    pub fn new() -> MsgRelayPriceFeedPriceResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRelayPriceFeedPriceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayPriceFeedPriceResponse {
        MsgRelayPriceFeedPriceResponse::new()
    }

    fn default_instance() -> &'static MsgRelayPriceFeedPriceResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRelayPriceFeedPriceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayPriceFeedPriceResponse::new)
    }
}

impl ::protobuf::Clear for MsgRelayPriceFeedPriceResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayPriceFeedPriceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayBandRates {
    // message fields
    pub relayer: ::std::string::String,
    pub symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub rates: ::std::vec::Vec<u64>,
    pub resolve_times: ::std::vec::Vec<u64>,
    pub requestIDs: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayBandRates {
    fn default() -> &'a MsgRelayBandRates {
        <MsgRelayBandRates as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayBandRates {
    pub fn new() -> MsgRelayBandRates {
        ::std::default::Default::default()
    }

    // string relayer = 1;


    pub fn get_relayer(&self) -> &str {
        &self.relayer
    }
    pub fn clear_relayer(&mut self) {
        self.relayer.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayer(&mut self, v: ::std::string::String) {
        self.relayer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relayer(&mut self) -> &mut ::std::string::String {
        &mut self.relayer
    }

    // Take field
    pub fn take_relayer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relayer, ::std::string::String::new())
    }

    // repeated string symbols = 2;


    pub fn get_symbols(&self) -> &[::std::string::String] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 rates = 3;


    pub fn get_rates(&self) -> &[u64] {
        &self.rates
    }
    pub fn clear_rates(&mut self) {
        self.rates.clear();
    }

    // Param is passed by value, moved
    pub fn set_rates(&mut self, v: ::std::vec::Vec<u64>) {
        self.rates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rates(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.rates
    }

    // Take field
    pub fn take_rates(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.rates, ::std::vec::Vec::new())
    }

    // repeated uint64 resolve_times = 4;


    pub fn get_resolve_times(&self) -> &[u64] {
        &self.resolve_times
    }
    pub fn clear_resolve_times(&mut self) {
        self.resolve_times.clear();
    }

    // Param is passed by value, moved
    pub fn set_resolve_times(&mut self, v: ::std::vec::Vec<u64>) {
        self.resolve_times = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resolve_times(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.resolve_times
    }

    // Take field
    pub fn take_resolve_times(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.resolve_times, ::std::vec::Vec::new())
    }

    // repeated uint64 requestIDs = 5;


    pub fn get_requestIDs(&self) -> &[u64] {
        &self.requestIDs
    }
    pub fn clear_requestIDs(&mut self) {
        self.requestIDs.clear();
    }

    // Param is passed by value, moved
    pub fn set_requestIDs(&mut self, v: ::std::vec::Vec<u64>) {
        self.requestIDs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_requestIDs(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.requestIDs
    }

    // Take field
    pub fn take_requestIDs(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.requestIDs, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for MsgRelayBandRates {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relayer)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.symbols)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.rates)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.resolve_times)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.requestIDs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relayer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relayer);
        }
        for value in &self.symbols {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.rates {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.resolve_times {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.requestIDs {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relayer.is_empty() {
            os.write_string(1, &self.relayer)?;
        }
        for v in &self.symbols {
            os.write_string(2, &v)?;
        };
        for v in &self.rates {
            os.write_uint64(3, *v)?;
        };
        for v in &self.resolve_times {
            os.write_uint64(4, *v)?;
        };
        for v in &self.requestIDs {
            os.write_uint64(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayBandRates {
        MsgRelayBandRates::new()
    }

    fn default_instance() -> &'static MsgRelayBandRates {
        static instance: ::protobuf::rt::LazyV2<MsgRelayBandRates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayBandRates::new)
    }
}

impl ::protobuf::Clear for MsgRelayBandRates {
    fn clear(&mut self) {
        self.relayer.clear();
        self.symbols.clear();
        self.rates.clear();
        self.resolve_times.clear();
        self.requestIDs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayBandRates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayBandRatesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayBandRatesResponse {
    fn default() -> &'a MsgRelayBandRatesResponse {
        <MsgRelayBandRatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayBandRatesResponse {
    pub fn new() -> MsgRelayBandRatesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRelayBandRatesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayBandRatesResponse {
        MsgRelayBandRatesResponse::new()
    }

    fn default_instance() -> &'static MsgRelayBandRatesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRelayBandRatesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayBandRatesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRelayBandRatesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayBandRatesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayCoinbaseMessages {
    // message fields
    pub sender: ::std::string::String,
    pub messages: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub signatures: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayCoinbaseMessages {
    fn default() -> &'a MsgRelayCoinbaseMessages {
        <MsgRelayCoinbaseMessages as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayCoinbaseMessages {
    pub fn new() -> MsgRelayCoinbaseMessages {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // repeated bytes messages = 2;


    pub fn get_messages(&self) -> &[::std::vec::Vec<u8>] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }

    // repeated bytes signatures = 3;


    pub fn get_signatures(&self) -> &[::std::vec::Vec<u8>] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgRelayCoinbaseMessages {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.messages)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.signatures)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        for value in &self.messages {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        for value in &self.signatures {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        for v in &self.messages {
            os.write_bytes(2, &v)?;
        };
        for v in &self.signatures {
            os.write_bytes(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayCoinbaseMessages {
        MsgRelayCoinbaseMessages::new()
    }

    fn default_instance() -> &'static MsgRelayCoinbaseMessages {
        static instance: ::protobuf::rt::LazyV2<MsgRelayCoinbaseMessages> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayCoinbaseMessages::new)
    }
}

impl ::protobuf::Clear for MsgRelayCoinbaseMessages {
    fn clear(&mut self) {
        self.sender.clear();
        self.messages.clear();
        self.signatures.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayCoinbaseMessages {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayCoinbaseMessagesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayCoinbaseMessagesResponse {
    fn default() -> &'a MsgRelayCoinbaseMessagesResponse {
        <MsgRelayCoinbaseMessagesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayCoinbaseMessagesResponse {
    pub fn new() -> MsgRelayCoinbaseMessagesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRelayCoinbaseMessagesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayCoinbaseMessagesResponse {
        MsgRelayCoinbaseMessagesResponse::new()
    }

    fn default_instance() -> &'static MsgRelayCoinbaseMessagesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRelayCoinbaseMessagesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayCoinbaseMessagesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRelayCoinbaseMessagesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayCoinbaseMessagesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestBandIBCRates {
    // message fields
    pub sender: ::std::string::String,
    pub request_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestBandIBCRates {
    fn default() -> &'a MsgRequestBandIBCRates {
        <MsgRequestBandIBCRates as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestBandIBCRates {
    pub fn new() -> MsgRequestBandIBCRates {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // uint64 request_id = 2;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for MsgRequestBandIBCRates {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if self.request_id != 0 {
            os.write_uint64(2, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestBandIBCRates {
        MsgRequestBandIBCRates::new()
    }

    fn default_instance() -> &'static MsgRequestBandIBCRates {
        static instance: ::protobuf::rt::LazyV2<MsgRequestBandIBCRates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestBandIBCRates::new)
    }
}

impl ::protobuf::Clear for MsgRequestBandIBCRates {
    fn clear(&mut self) {
        self.sender.clear();
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestBandIBCRates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestBandIBCRatesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestBandIBCRatesResponse {
    fn default() -> &'a MsgRequestBandIBCRatesResponse {
        <MsgRequestBandIBCRatesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestBandIBCRatesResponse {
    pub fn new() -> MsgRequestBandIBCRatesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRequestBandIBCRatesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestBandIBCRatesResponse {
        MsgRequestBandIBCRatesResponse::new()
    }

    fn default_instance() -> &'static MsgRequestBandIBCRatesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRequestBandIBCRatesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestBandIBCRatesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRequestBandIBCRatesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestBandIBCRatesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayPythPrices {
    // message fields
    pub sender: ::std::string::String,
    pub price_attestations: ::protobuf::RepeatedField<super::oracle::PriceAttestation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayPythPrices {
    fn default() -> &'a MsgRelayPythPrices {
        <MsgRelayPythPrices as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayPythPrices {
    pub fn new() -> MsgRelayPythPrices {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // repeated .injective.oracle.v1beta1.PriceAttestation price_attestations = 2;


    pub fn get_price_attestations(&self) -> &[super::oracle::PriceAttestation] {
        &self.price_attestations
    }
    pub fn clear_price_attestations(&mut self) {
        self.price_attestations.clear();
    }

    // Param is passed by value, moved
    pub fn set_price_attestations(&mut self, v: ::protobuf::RepeatedField<super::oracle::PriceAttestation>) {
        self.price_attestations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_price_attestations(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::PriceAttestation> {
        &mut self.price_attestations
    }

    // Take field
    pub fn take_price_attestations(&mut self) -> ::protobuf::RepeatedField<super::oracle::PriceAttestation> {
        ::std::mem::replace(&mut self.price_attestations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MsgRelayPythPrices {
    fn is_initialized(&self) -> bool {
        for v in &self.price_attestations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.price_attestations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        for value in &self.price_attestations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        for v in &self.price_attestations {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayPythPrices {
        MsgRelayPythPrices::new()
    }

    fn default_instance() -> &'static MsgRelayPythPrices {
        static instance: ::protobuf::rt::LazyV2<MsgRelayPythPrices> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayPythPrices::new)
    }
}

impl ::protobuf::Clear for MsgRelayPythPrices {
    fn clear(&mut self) {
        self.sender.clear();
        self.price_attestations.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayPythPrices {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRelayPythPricesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRelayPythPricesResponse {
    fn default() -> &'a MsgRelayPythPricesResponse {
        <MsgRelayPythPricesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRelayPythPricesResponse {
    pub fn new() -> MsgRelayPythPricesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRelayPythPricesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRelayPythPricesResponse {
        MsgRelayPythPricesResponse::new()
    }

    fn default_instance() -> &'static MsgRelayPythPricesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRelayPythPricesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRelayPythPricesResponse::new)
    }
}

impl ::protobuf::Clear for MsgRelayPythPricesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRelayPythPricesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParams {
    // message fields
    pub authority: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<super::oracle::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParams {
    fn default() -> &'a MsgUpdateParams {
        <MsgUpdateParams as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParams {
    pub fn new() -> MsgUpdateParams {
        ::std::default::Default::default()
    }

    // string authority = 1;


    pub fn get_authority(&self) -> &str {
        &self.authority
    }
    pub fn clear_authority(&mut self) {
        self.authority.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority(&mut self, v: ::std::string::String) {
        self.authority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority(&mut self) -> &mut ::std::string::String {
        &mut self.authority
    }

    // Take field
    pub fn take_authority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.Params params = 2;


    pub fn get_params(&self) -> &super::oracle::Params {
        self.params.as_ref().unwrap_or_else(|| <super::oracle::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::oracle::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::oracle::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::oracle::Params {
        self.params.take().unwrap_or_else(|| super::oracle::Params::new())
    }
}

impl ::protobuf::Message for MsgUpdateParams {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.authority.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authority);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.authority.is_empty() {
            os.write_string(1, &self.authority)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParams {
        MsgUpdateParams::new()
    }

    fn default_instance() -> &'static MsgUpdateParams {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParams::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParams {
    fn clear(&mut self) {
        self.authority.clear();
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParamsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParamsResponse {
    fn default() -> &'a MsgUpdateParamsResponse {
        <MsgUpdateParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParamsResponse {
    pub fn new() -> MsgUpdateParamsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgUpdateParamsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParamsResponse {
        MsgUpdateParamsResponse::new()
    }

    fn default_instance() -> &'static MsgUpdateParamsResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParamsResponse::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParamsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

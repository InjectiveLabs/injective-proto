// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/oracle/v1beta1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::oracle::Params>,
    pub band_relayers: ::protobuf::RepeatedField<::std::string::String>,
    pub band_price_states: ::protobuf::RepeatedField<super::oracle::BandPriceState>,
    pub price_feed_price_states: ::protobuf::RepeatedField<super::oracle::PriceFeedState>,
    pub coinbase_price_states: ::protobuf::RepeatedField<super::oracle::CoinbasePriceState>,
    pub band_ibc_price_states: ::protobuf::RepeatedField<super::oracle::BandPriceState>,
    pub band_ibc_oracle_requests: ::protobuf::RepeatedField<super::oracle::BandOracleRequest>,
    pub band_ibc_params: ::protobuf::SingularPtrField<super::oracle::BandIBCParams>,
    pub band_ibc_latest_client_id: u64,
    pub calldata_records: ::protobuf::RepeatedField<CalldataRecord>,
    pub band_ibc_latest_request_id: u64,
    pub chainlink_price_states: ::protobuf::RepeatedField<super::oracle::ChainlinkPriceState>,
    pub historical_price_records: ::protobuf::RepeatedField<super::oracle::PriceRecords>,
    pub provider_states: ::protobuf::RepeatedField<super::oracle::ProviderState>,
    pub pyth_price_states: ::protobuf::RepeatedField<super::oracle::PythPriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .injective.oracle.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::oracle::Params {
        self.params.as_ref().unwrap_or_else(|| <super::oracle::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::oracle::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::oracle::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::oracle::Params {
        self.params.take().unwrap_or_else(|| super::oracle::Params::new())
    }

    // repeated string band_relayers = 2;


    pub fn get_band_relayers(&self) -> &[::std::string::String] {
        &self.band_relayers
    }
    pub fn clear_band_relayers(&mut self) {
        self.band_relayers.clear();
    }

    // Param is passed by value, moved
    pub fn set_band_relayers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.band_relayers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_band_relayers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.band_relayers
    }

    // Take field
    pub fn take_band_relayers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.band_relayers, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.BandPriceState band_price_states = 3;


    pub fn get_band_price_states(&self) -> &[super::oracle::BandPriceState] {
        &self.band_price_states
    }
    pub fn clear_band_price_states(&mut self) {
        self.band_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_band_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::BandPriceState>) {
        self.band_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_band_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::BandPriceState> {
        &mut self.band_price_states
    }

    // Take field
    pub fn take_band_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::BandPriceState> {
        ::std::mem::replace(&mut self.band_price_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.PriceFeedState price_feed_price_states = 4;


    pub fn get_price_feed_price_states(&self) -> &[super::oracle::PriceFeedState] {
        &self.price_feed_price_states
    }
    pub fn clear_price_feed_price_states(&mut self) {
        self.price_feed_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_price_feed_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::PriceFeedState>) {
        self.price_feed_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_price_feed_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::PriceFeedState> {
        &mut self.price_feed_price_states
    }

    // Take field
    pub fn take_price_feed_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::PriceFeedState> {
        ::std::mem::replace(&mut self.price_feed_price_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.CoinbasePriceState coinbase_price_states = 5;


    pub fn get_coinbase_price_states(&self) -> &[super::oracle::CoinbasePriceState] {
        &self.coinbase_price_states
    }
    pub fn clear_coinbase_price_states(&mut self) {
        self.coinbase_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_coinbase_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::CoinbasePriceState>) {
        self.coinbase_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_coinbase_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::CoinbasePriceState> {
        &mut self.coinbase_price_states
    }

    // Take field
    pub fn take_coinbase_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::CoinbasePriceState> {
        ::std::mem::replace(&mut self.coinbase_price_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.BandPriceState band_ibc_price_states = 6;


    pub fn get_band_ibc_price_states(&self) -> &[super::oracle::BandPriceState] {
        &self.band_ibc_price_states
    }
    pub fn clear_band_ibc_price_states(&mut self) {
        self.band_ibc_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::BandPriceState>) {
        self.band_ibc_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_band_ibc_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::BandPriceState> {
        &mut self.band_ibc_price_states
    }

    // Take field
    pub fn take_band_ibc_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::BandPriceState> {
        ::std::mem::replace(&mut self.band_ibc_price_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.BandOracleRequest band_ibc_oracle_requests = 7;


    pub fn get_band_ibc_oracle_requests(&self) -> &[super::oracle::BandOracleRequest] {
        &self.band_ibc_oracle_requests
    }
    pub fn clear_band_ibc_oracle_requests(&mut self) {
        self.band_ibc_oracle_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_oracle_requests(&mut self, v: ::protobuf::RepeatedField<super::oracle::BandOracleRequest>) {
        self.band_ibc_oracle_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_band_ibc_oracle_requests(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::BandOracleRequest> {
        &mut self.band_ibc_oracle_requests
    }

    // Take field
    pub fn take_band_ibc_oracle_requests(&mut self) -> ::protobuf::RepeatedField<super::oracle::BandOracleRequest> {
        ::std::mem::replace(&mut self.band_ibc_oracle_requests, ::protobuf::RepeatedField::new())
    }

    // .injective.oracle.v1beta1.BandIBCParams band_ibc_params = 8;


    pub fn get_band_ibc_params(&self) -> &super::oracle::BandIBCParams {
        self.band_ibc_params.as_ref().unwrap_or_else(|| <super::oracle::BandIBCParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_band_ibc_params(&mut self) {
        self.band_ibc_params.clear();
    }

    pub fn has_band_ibc_params(&self) -> bool {
        self.band_ibc_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_params(&mut self, v: super::oracle::BandIBCParams) {
        self.band_ibc_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_band_ibc_params(&mut self) -> &mut super::oracle::BandIBCParams {
        if self.band_ibc_params.is_none() {
            self.band_ibc_params.set_default();
        }
        self.band_ibc_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_band_ibc_params(&mut self) -> super::oracle::BandIBCParams {
        self.band_ibc_params.take().unwrap_or_else(|| super::oracle::BandIBCParams::new())
    }

    // uint64 band_ibc_latest_client_id = 9;


    pub fn get_band_ibc_latest_client_id(&self) -> u64 {
        self.band_ibc_latest_client_id
    }
    pub fn clear_band_ibc_latest_client_id(&mut self) {
        self.band_ibc_latest_client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_latest_client_id(&mut self, v: u64) {
        self.band_ibc_latest_client_id = v;
    }

    // repeated .injective.oracle.v1beta1.CalldataRecord calldata_records = 10;


    pub fn get_calldata_records(&self) -> &[CalldataRecord] {
        &self.calldata_records
    }
    pub fn clear_calldata_records(&mut self) {
        self.calldata_records.clear();
    }

    // Param is passed by value, moved
    pub fn set_calldata_records(&mut self, v: ::protobuf::RepeatedField<CalldataRecord>) {
        self.calldata_records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_calldata_records(&mut self) -> &mut ::protobuf::RepeatedField<CalldataRecord> {
        &mut self.calldata_records
    }

    // Take field
    pub fn take_calldata_records(&mut self) -> ::protobuf::RepeatedField<CalldataRecord> {
        ::std::mem::replace(&mut self.calldata_records, ::protobuf::RepeatedField::new())
    }

    // uint64 band_ibc_latest_request_id = 11;


    pub fn get_band_ibc_latest_request_id(&self) -> u64 {
        self.band_ibc_latest_request_id
    }
    pub fn clear_band_ibc_latest_request_id(&mut self) {
        self.band_ibc_latest_request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_latest_request_id(&mut self, v: u64) {
        self.band_ibc_latest_request_id = v;
    }

    // repeated .injective.oracle.v1beta1.ChainlinkPriceState chainlink_price_states = 12;


    pub fn get_chainlink_price_states(&self) -> &[super::oracle::ChainlinkPriceState] {
        &self.chainlink_price_states
    }
    pub fn clear_chainlink_price_states(&mut self) {
        self.chainlink_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_chainlink_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::ChainlinkPriceState>) {
        self.chainlink_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_chainlink_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::ChainlinkPriceState> {
        &mut self.chainlink_price_states
    }

    // Take field
    pub fn take_chainlink_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::ChainlinkPriceState> {
        ::std::mem::replace(&mut self.chainlink_price_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.PriceRecords historical_price_records = 13;


    pub fn get_historical_price_records(&self) -> &[super::oracle::PriceRecords] {
        &self.historical_price_records
    }
    pub fn clear_historical_price_records(&mut self) {
        self.historical_price_records.clear();
    }

    // Param is passed by value, moved
    pub fn set_historical_price_records(&mut self, v: ::protobuf::RepeatedField<super::oracle::PriceRecords>) {
        self.historical_price_records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_historical_price_records(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::PriceRecords> {
        &mut self.historical_price_records
    }

    // Take field
    pub fn take_historical_price_records(&mut self) -> ::protobuf::RepeatedField<super::oracle::PriceRecords> {
        ::std::mem::replace(&mut self.historical_price_records, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.ProviderState provider_states = 14;


    pub fn get_provider_states(&self) -> &[super::oracle::ProviderState] {
        &self.provider_states
    }
    pub fn clear_provider_states(&mut self) {
        self.provider_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::ProviderState>) {
        self.provider_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_provider_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::ProviderState> {
        &mut self.provider_states
    }

    // Take field
    pub fn take_provider_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::ProviderState> {
        ::std::mem::replace(&mut self.provider_states, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.oracle.v1beta1.PythPriceState pyth_price_states = 15;


    pub fn get_pyth_price_states(&self) -> &[super::oracle::PythPriceState] {
        &self.pyth_price_states
    }
    pub fn clear_pyth_price_states(&mut self) {
        self.pyth_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_pyth_price_states(&mut self, v: ::protobuf::RepeatedField<super::oracle::PythPriceState>) {
        self.pyth_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pyth_price_states(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::PythPriceState> {
        &mut self.pyth_price_states
    }

    // Take field
    pub fn take_pyth_price_states(&mut self) -> ::protobuf::RepeatedField<super::oracle::PythPriceState> {
        ::std::mem::replace(&mut self.pyth_price_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.band_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.price_feed_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.coinbase_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.band_ibc_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.band_ibc_oracle_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.band_ibc_params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.calldata_records {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chainlink_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.historical_price_records {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.provider_states {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pyth_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.band_relayers)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.band_price_states)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.price_feed_price_states)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.coinbase_price_states)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.band_ibc_price_states)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.band_ibc_oracle_requests)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.band_ibc_params)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.band_ibc_latest_client_id = tmp;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.calldata_records)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.band_ibc_latest_request_id = tmp;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.chainlink_price_states)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.historical_price_records)?;
                },
                14 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.provider_states)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pyth_price_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.band_relayers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.band_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.price_feed_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.coinbase_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.band_ibc_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.band_ibc_oracle_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.band_ibc_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.band_ibc_latest_client_id != 0 {
            my_size += ::protobuf::rt::value_size(9, self.band_ibc_latest_client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.calldata_records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.band_ibc_latest_request_id != 0 {
            my_size += ::protobuf::rt::value_size(11, self.band_ibc_latest_request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.chainlink_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.historical_price_records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.provider_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.pyth_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.band_relayers {
            os.write_string(2, &v)?;
        };
        for v in &self.band_price_states {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.price_feed_price_states {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.coinbase_price_states {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.band_ibc_price_states {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.band_ibc_oracle_requests {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.band_ibc_params.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.band_ibc_latest_client_id != 0 {
            os.write_uint64(9, self.band_ibc_latest_client_id)?;
        }
        for v in &self.calldata_records {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.band_ibc_latest_request_id != 0 {
            os.write_uint64(11, self.band_ibc_latest_request_id)?;
        }
        for v in &self.chainlink_price_states {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.historical_price_records {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.provider_states {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.pyth_price_states {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.band_relayers.clear();
        self.band_price_states.clear();
        self.price_feed_price_states.clear();
        self.coinbase_price_states.clear();
        self.band_ibc_price_states.clear();
        self.band_ibc_oracle_requests.clear();
        self.band_ibc_params.clear();
        self.band_ibc_latest_client_id = 0;
        self.calldata_records.clear();
        self.band_ibc_latest_request_id = 0;
        self.chainlink_price_states.clear();
        self.historical_price_records.clear();
        self.provider_states.clear();
        self.pyth_price_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CalldataRecord {
    // message fields
    pub client_id: u64,
    pub calldata: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalldataRecord {
    fn default() -> &'a CalldataRecord {
        <CalldataRecord as ::protobuf::Message>::default_instance()
    }
}

impl CalldataRecord {
    pub fn new() -> CalldataRecord {
        ::std::default::Default::default()
    }

    // uint64 client_id = 1;


    pub fn get_client_id(&self) -> u64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: u64) {
        self.client_id = v;
    }

    // bytes calldata = 2;


    pub fn get_calldata(&self) -> &[u8] {
        &self.calldata
    }
    pub fn clear_calldata(&mut self) {
        self.calldata.clear();
    }

    // Param is passed by value, moved
    pub fn set_calldata(&mut self, v: ::std::vec::Vec<u8>) {
        self.calldata = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_calldata(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.calldata
    }

    // Take field
    pub fn take_calldata(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.calldata, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for CalldataRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.client_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.calldata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.calldata.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.calldata);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_uint64(1, self.client_id)?;
        }
        if !self.calldata.is_empty() {
            os.write_bytes(2, &self.calldata)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalldataRecord {
        CalldataRecord::new()
    }

    fn default_instance() -> &'static CalldataRecord {
        static instance: ::protobuf::rt::LazyV2<CalldataRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CalldataRecord::new)
    }
}

impl ::protobuf::Clear for CalldataRecord {
    fn clear(&mut self) {
        self.client_id = 0;
        self.calldata.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CalldataRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

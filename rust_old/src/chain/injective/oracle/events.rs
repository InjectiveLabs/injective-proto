// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/oracle/v1beta1/events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetChainlinkPriceEvent {
    // message fields
    pub feed_id: ::std::string::String,
    pub answer: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetChainlinkPriceEvent {
    fn default() -> &'a SetChainlinkPriceEvent {
        <SetChainlinkPriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetChainlinkPriceEvent {
    pub fn new() -> SetChainlinkPriceEvent {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // string answer = 2;


    pub fn get_answer(&self) -> &str {
        &self.answer
    }
    pub fn clear_answer(&mut self) {
        self.answer.clear();
    }

    // Param is passed by value, moved
    pub fn set_answer(&mut self, v: ::std::string::String) {
        self.answer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer(&mut self) -> &mut ::std::string::String {
        &mut self.answer
    }

    // Take field
    pub fn take_answer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.answer, ::std::string::String::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SetChainlinkPriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.answer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if !self.answer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.answer);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if !self.answer.is_empty() {
            os.write_string(2, &self.answer)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetChainlinkPriceEvent {
        SetChainlinkPriceEvent::new()
    }

    fn default_instance() -> &'static SetChainlinkPriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetChainlinkPriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetChainlinkPriceEvent::new)
    }
}

impl ::protobuf::Clear for SetChainlinkPriceEvent {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.answer.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetChainlinkPriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetBandPriceEvent {
    // message fields
    pub relayer: ::std::string::String,
    pub symbol: ::std::string::String,
    pub price: ::std::string::String,
    pub resolve_time: u64,
    pub request_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetBandPriceEvent {
    fn default() -> &'a SetBandPriceEvent {
        <SetBandPriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetBandPriceEvent {
    pub fn new() -> SetBandPriceEvent {
        ::std::default::Default::default()
    }

    // string relayer = 1;


    pub fn get_relayer(&self) -> &str {
        &self.relayer
    }
    pub fn clear_relayer(&mut self) {
        self.relayer.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayer(&mut self, v: ::std::string::String) {
        self.relayer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relayer(&mut self) -> &mut ::std::string::String {
        &mut self.relayer
    }

    // Take field
    pub fn take_relayer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relayer, ::std::string::String::new())
    }

    // string symbol = 2;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string price = 3;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }

    // uint64 resolve_time = 4;


    pub fn get_resolve_time(&self) -> u64 {
        self.resolve_time
    }
    pub fn clear_resolve_time(&mut self) {
        self.resolve_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolve_time(&mut self, v: u64) {
        self.resolve_time = v;
    }

    // uint64 request_id = 5;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }
}

impl ::protobuf::Message for SetBandPriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relayer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolve_time = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relayer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relayer);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.price);
        }
        if self.resolve_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.resolve_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relayer.is_empty() {
            os.write_string(1, &self.relayer)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(2, &self.symbol)?;
        }
        if !self.price.is_empty() {
            os.write_string(3, &self.price)?;
        }
        if self.resolve_time != 0 {
            os.write_uint64(4, self.resolve_time)?;
        }
        if self.request_id != 0 {
            os.write_uint64(5, self.request_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetBandPriceEvent {
        SetBandPriceEvent::new()
    }

    fn default_instance() -> &'static SetBandPriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetBandPriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetBandPriceEvent::new)
    }
}

impl ::protobuf::Clear for SetBandPriceEvent {
    fn clear(&mut self) {
        self.relayer.clear();
        self.symbol.clear();
        self.price.clear();
        self.resolve_time = 0;
        self.request_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetBandPriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetBandIBCPriceEvent {
    // message fields
    pub relayer: ::std::string::String,
    pub symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub prices: ::protobuf::RepeatedField<::std::string::String>,
    pub resolve_time: u64,
    pub request_id: u64,
    pub client_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetBandIBCPriceEvent {
    fn default() -> &'a SetBandIBCPriceEvent {
        <SetBandIBCPriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetBandIBCPriceEvent {
    pub fn new() -> SetBandIBCPriceEvent {
        ::std::default::Default::default()
    }

    // string relayer = 1;


    pub fn get_relayer(&self) -> &str {
        &self.relayer
    }
    pub fn clear_relayer(&mut self) {
        self.relayer.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayer(&mut self, v: ::std::string::String) {
        self.relayer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relayer(&mut self) -> &mut ::std::string::String {
        &mut self.relayer
    }

    // Take field
    pub fn take_relayer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relayer, ::std::string::String::new())
    }

    // repeated string symbols = 2;


    pub fn get_symbols(&self) -> &[::std::string::String] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }

    // repeated string prices = 3;


    pub fn get_prices(&self) -> &[::std::string::String] {
        &self.prices
    }
    pub fn clear_prices(&mut self) {
        self.prices.clear();
    }

    // Param is passed by value, moved
    pub fn set_prices(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.prices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_prices(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.prices
    }

    // Take field
    pub fn take_prices(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.prices, ::protobuf::RepeatedField::new())
    }

    // uint64 resolve_time = 4;


    pub fn get_resolve_time(&self) -> u64 {
        self.resolve_time
    }
    pub fn clear_resolve_time(&mut self) {
        self.resolve_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolve_time(&mut self, v: u64) {
        self.resolve_time = v;
    }

    // uint64 request_id = 5;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }

    // int64 client_id = 6;


    pub fn get_client_id(&self) -> i64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: i64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for SetBandIBCPriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relayer)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.symbols)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.prices)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolve_time = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relayer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relayer);
        }
        for value in &self.symbols {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.prices {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.resolve_time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.resolve_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(6, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relayer.is_empty() {
            os.write_string(1, &self.relayer)?;
        }
        for v in &self.symbols {
            os.write_string(2, &v)?;
        };
        for v in &self.prices {
            os.write_string(3, &v)?;
        };
        if self.resolve_time != 0 {
            os.write_uint64(4, self.resolve_time)?;
        }
        if self.request_id != 0 {
            os.write_uint64(5, self.request_id)?;
        }
        if self.client_id != 0 {
            os.write_int64(6, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetBandIBCPriceEvent {
        SetBandIBCPriceEvent::new()
    }

    fn default_instance() -> &'static SetBandIBCPriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetBandIBCPriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetBandIBCPriceEvent::new)
    }
}

impl ::protobuf::Clear for SetBandIBCPriceEvent {
    fn clear(&mut self) {
        self.relayer.clear();
        self.symbols.clear();
        self.prices.clear();
        self.resolve_time = 0;
        self.request_id = 0;
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetBandIBCPriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventBandIBCAckSuccess {
    // message fields
    pub ack_result: ::std::string::String,
    pub client_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventBandIBCAckSuccess {
    fn default() -> &'a EventBandIBCAckSuccess {
        <EventBandIBCAckSuccess as ::protobuf::Message>::default_instance()
    }
}

impl EventBandIBCAckSuccess {
    pub fn new() -> EventBandIBCAckSuccess {
        ::std::default::Default::default()
    }

    // string ack_result = 1;


    pub fn get_ack_result(&self) -> &str {
        &self.ack_result
    }
    pub fn clear_ack_result(&mut self) {
        self.ack_result.clear();
    }

    // Param is passed by value, moved
    pub fn set_ack_result(&mut self, v: ::std::string::String) {
        self.ack_result = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ack_result(&mut self) -> &mut ::std::string::String {
        &mut self.ack_result
    }

    // Take field
    pub fn take_ack_result(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ack_result, ::std::string::String::new())
    }

    // int64 client_id = 2;


    pub fn get_client_id(&self) -> i64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: i64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for EventBandIBCAckSuccess {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ack_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ack_result.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ack_result);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ack_result.is_empty() {
            os.write_string(1, &self.ack_result)?;
        }
        if self.client_id != 0 {
            os.write_int64(2, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventBandIBCAckSuccess {
        EventBandIBCAckSuccess::new()
    }

    fn default_instance() -> &'static EventBandIBCAckSuccess {
        static instance: ::protobuf::rt::LazyV2<EventBandIBCAckSuccess> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventBandIBCAckSuccess::new)
    }
}

impl ::protobuf::Clear for EventBandIBCAckSuccess {
    fn clear(&mut self) {
        self.ack_result.clear();
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventBandIBCAckSuccess {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventBandIBCAckError {
    // message fields
    pub ack_error: ::std::string::String,
    pub client_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventBandIBCAckError {
    fn default() -> &'a EventBandIBCAckError {
        <EventBandIBCAckError as ::protobuf::Message>::default_instance()
    }
}

impl EventBandIBCAckError {
    pub fn new() -> EventBandIBCAckError {
        ::std::default::Default::default()
    }

    // string ack_error = 1;


    pub fn get_ack_error(&self) -> &str {
        &self.ack_error
    }
    pub fn clear_ack_error(&mut self) {
        self.ack_error.clear();
    }

    // Param is passed by value, moved
    pub fn set_ack_error(&mut self, v: ::std::string::String) {
        self.ack_error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ack_error(&mut self) -> &mut ::std::string::String {
        &mut self.ack_error
    }

    // Take field
    pub fn take_ack_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ack_error, ::std::string::String::new())
    }

    // int64 client_id = 2;


    pub fn get_client_id(&self) -> i64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: i64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for EventBandIBCAckError {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ack_error)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ack_error.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ack_error);
        }
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ack_error.is_empty() {
            os.write_string(1, &self.ack_error)?;
        }
        if self.client_id != 0 {
            os.write_int64(2, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventBandIBCAckError {
        EventBandIBCAckError::new()
    }

    fn default_instance() -> &'static EventBandIBCAckError {
        static instance: ::protobuf::rt::LazyV2<EventBandIBCAckError> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventBandIBCAckError::new)
    }
}

impl ::protobuf::Clear for EventBandIBCAckError {
    fn clear(&mut self) {
        self.ack_error.clear();
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventBandIBCAckError {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventBandIBCResponseTimeout {
    // message fields
    pub client_id: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventBandIBCResponseTimeout {
    fn default() -> &'a EventBandIBCResponseTimeout {
        <EventBandIBCResponseTimeout as ::protobuf::Message>::default_instance()
    }
}

impl EventBandIBCResponseTimeout {
    pub fn new() -> EventBandIBCResponseTimeout {
        ::std::default::Default::default()
    }

    // int64 client_id = 1;


    pub fn get_client_id(&self) -> i64 {
        self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: i64) {
        self.client_id = v;
    }
}

impl ::protobuf::Message for EventBandIBCResponseTimeout {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.client_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.client_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.client_id != 0 {
            os.write_int64(1, self.client_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventBandIBCResponseTimeout {
        EventBandIBCResponseTimeout::new()
    }

    fn default_instance() -> &'static EventBandIBCResponseTimeout {
        static instance: ::protobuf::rt::LazyV2<EventBandIBCResponseTimeout> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventBandIBCResponseTimeout::new)
    }
}

impl ::protobuf::Clear for EventBandIBCResponseTimeout {
    fn clear(&mut self) {
        self.client_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventBandIBCResponseTimeout {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetPriceFeedPriceEvent {
    // message fields
    pub relayer: ::std::string::String,
    pub base: ::std::string::String,
    pub quote: ::std::string::String,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetPriceFeedPriceEvent {
    fn default() -> &'a SetPriceFeedPriceEvent {
        <SetPriceFeedPriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetPriceFeedPriceEvent {
    pub fn new() -> SetPriceFeedPriceEvent {
        ::std::default::Default::default()
    }

    // string relayer = 1;


    pub fn get_relayer(&self) -> &str {
        &self.relayer
    }
    pub fn clear_relayer(&mut self) {
        self.relayer.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayer(&mut self, v: ::std::string::String) {
        self.relayer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relayer(&mut self) -> &mut ::std::string::String {
        &mut self.relayer
    }

    // Take field
    pub fn take_relayer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relayer, ::std::string::String::new())
    }

    // string base = 2;


    pub fn get_base(&self) -> &str {
        &self.base
    }
    pub fn clear_base(&mut self) {
        self.base.clear();
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: ::std::string::String) {
        self.base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base(&mut self) -> &mut ::std::string::String {
        &mut self.base
    }

    // Take field
    pub fn take_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base, ::std::string::String::new())
    }

    // string quote = 3;


    pub fn get_quote(&self) -> &str {
        &self.quote
    }
    pub fn clear_quote(&mut self) {
        self.quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote(&mut self, v: ::std::string::String) {
        self.quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote(&mut self) -> &mut ::std::string::String {
        &mut self.quote
    }

    // Take field
    pub fn take_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote, ::std::string::String::new())
    }

    // string price = 4;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetPriceFeedPriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relayer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relayer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relayer);
        }
        if !self.base.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base);
        }
        if !self.quote.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.quote);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relayer.is_empty() {
            os.write_string(1, &self.relayer)?;
        }
        if !self.base.is_empty() {
            os.write_string(2, &self.base)?;
        }
        if !self.quote.is_empty() {
            os.write_string(3, &self.quote)?;
        }
        if !self.price.is_empty() {
            os.write_string(4, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetPriceFeedPriceEvent {
        SetPriceFeedPriceEvent::new()
    }

    fn default_instance() -> &'static SetPriceFeedPriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetPriceFeedPriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetPriceFeedPriceEvent::new)
    }
}

impl ::protobuf::Clear for SetPriceFeedPriceEvent {
    fn clear(&mut self) {
        self.relayer.clear();
        self.base.clear();
        self.quote.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPriceFeedPriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetProviderPriceEvent {
    // message fields
    pub provider: ::std::string::String,
    pub relayer: ::std::string::String,
    pub symbol: ::std::string::String,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetProviderPriceEvent {
    fn default() -> &'a SetProviderPriceEvent {
        <SetProviderPriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetProviderPriceEvent {
    pub fn new() -> SetProviderPriceEvent {
        ::std::default::Default::default()
    }

    // string provider = 1;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // string relayer = 2;


    pub fn get_relayer(&self) -> &str {
        &self.relayer
    }
    pub fn clear_relayer(&mut self) {
        self.relayer.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayer(&mut self, v: ::std::string::String) {
        self.relayer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relayer(&mut self) -> &mut ::std::string::String {
        &mut self.relayer
    }

    // Take field
    pub fn take_relayer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relayer, ::std::string::String::new())
    }

    // string symbol = 3;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string price = 4;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetProviderPriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relayer)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.provider);
        }
        if !self.relayer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.relayer);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.symbol);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.provider.is_empty() {
            os.write_string(1, &self.provider)?;
        }
        if !self.relayer.is_empty() {
            os.write_string(2, &self.relayer)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(3, &self.symbol)?;
        }
        if !self.price.is_empty() {
            os.write_string(4, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetProviderPriceEvent {
        SetProviderPriceEvent::new()
    }

    fn default_instance() -> &'static SetProviderPriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetProviderPriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetProviderPriceEvent::new)
    }
}

impl ::protobuf::Clear for SetProviderPriceEvent {
    fn clear(&mut self) {
        self.provider.clear();
        self.relayer.clear();
        self.symbol.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetProviderPriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SetCoinbasePriceEvent {
    // message fields
    pub symbol: ::std::string::String,
    pub price: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetCoinbasePriceEvent {
    fn default() -> &'a SetCoinbasePriceEvent {
        <SetCoinbasePriceEvent as ::protobuf::Message>::default_instance()
    }
}

impl SetCoinbasePriceEvent {
    pub fn new() -> SetCoinbasePriceEvent {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string price = 2;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SetCoinbasePriceEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.price);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if !self.price.is_empty() {
            os.write_string(2, &self.price)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetCoinbasePriceEvent {
        SetCoinbasePriceEvent::new()
    }

    fn default_instance() -> &'static SetCoinbasePriceEvent {
        static instance: ::protobuf::rt::LazyV2<SetCoinbasePriceEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetCoinbasePriceEvent::new)
    }
}

impl ::protobuf::Clear for SetCoinbasePriceEvent {
    fn clear(&mut self) {
        self.symbol.clear();
        self.price.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SetCoinbasePriceEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventSetPythPrices {
    // message fields
    pub prices: ::protobuf::RepeatedField<super::oracle::PythPriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventSetPythPrices {
    fn default() -> &'a EventSetPythPrices {
        <EventSetPythPrices as ::protobuf::Message>::default_instance()
    }
}

impl EventSetPythPrices {
    pub fn new() -> EventSetPythPrices {
        ::std::default::Default::default()
    }

    // repeated .injective.oracle.v1beta1.PythPriceState prices = 1;


    pub fn get_prices(&self) -> &[super::oracle::PythPriceState] {
        &self.prices
    }
    pub fn clear_prices(&mut self) {
        self.prices.clear();
    }

    // Param is passed by value, moved
    pub fn set_prices(&mut self, v: ::protobuf::RepeatedField<super::oracle::PythPriceState>) {
        self.prices = v;
    }

    // Mutable pointer to the field.
    pub fn mut_prices(&mut self) -> &mut ::protobuf::RepeatedField<super::oracle::PythPriceState> {
        &mut self.prices
    }

    // Take field
    pub fn take_prices(&mut self) -> ::protobuf::RepeatedField<super::oracle::PythPriceState> {
        ::std::mem::replace(&mut self.prices, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EventSetPythPrices {
    fn is_initialized(&self) -> bool {
        for v in &self.prices {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.prices)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.prices {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.prices {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventSetPythPrices {
        EventSetPythPrices::new()
    }

    fn default_instance() -> &'static EventSetPythPrices {
        static instance: ::protobuf::rt::LazyV2<EventSetPythPrices> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventSetPythPrices::new)
    }
}

impl ::protobuf::Clear for EventSetPythPrices {
    fn clear(&mut self) {
        self.prices.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventSetPythPrices {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

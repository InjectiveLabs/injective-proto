// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/ethereum_signer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SignType {
    SIGN_TYPE_UNKNOWN = 0,
    SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE = 1,
    SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH = 2,
}

impl ::protobuf::ProtobufEnum for SignType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignType> {
        match value {
            0 => ::std::option::Option::Some(SignType::SIGN_TYPE_UNKNOWN),
            1 => ::std::option::Option::Some(SignType::SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE),
            2 => ::std::option::Option::Some(SignType::SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SignType] = &[
            SignType::SIGN_TYPE_UNKNOWN,
            SignType::SIGN_TYPE_ORCHESTRATOR_SIGNED_MULTI_SIG_UPDATE,
            SignType::SIGN_TYPE_ORCHESTRATOR_SIGNED_WITHDRAW_BATCH,
        ];
        values
    }
}

impl ::std::marker::Copy for SignType {
}

impl ::std::default::Default for SignType {
    fn default() -> Self {
        SignType::SIGN_TYPE_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for SignType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

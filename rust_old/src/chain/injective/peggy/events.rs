// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventAttestationObserved {
    // message fields
    pub attestation_type: super::attestation::ClaimType,
    pub bridge_contract: ::std::string::String,
    pub bridge_chain_id: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub nonce: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventAttestationObserved {
    fn default() -> &'a EventAttestationObserved {
        <EventAttestationObserved as ::protobuf::Message>::default_instance()
    }
}

impl EventAttestationObserved {
    pub fn new() -> EventAttestationObserved {
        ::std::default::Default::default()
    }

    // .injective.peggy.v1.ClaimType attestation_type = 1;


    pub fn get_attestation_type(&self) -> super::attestation::ClaimType {
        self.attestation_type
    }
    pub fn clear_attestation_type(&mut self) {
        self.attestation_type = super::attestation::ClaimType::CLAIM_TYPE_UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_attestation_type(&mut self, v: super::attestation::ClaimType) {
        self.attestation_type = v;
    }

    // string bridge_contract = 2;


    pub fn get_bridge_contract(&self) -> &str {
        &self.bridge_contract
    }
    pub fn clear_bridge_contract(&mut self) {
        self.bridge_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridge_contract(&mut self, v: ::std::string::String) {
        self.bridge_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_contract(&mut self) -> &mut ::std::string::String {
        &mut self.bridge_contract
    }

    // Take field
    pub fn take_bridge_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridge_contract, ::std::string::String::new())
    }

    // uint64 bridge_chain_id = 3;


    pub fn get_bridge_chain_id(&self) -> u64 {
        self.bridge_chain_id
    }
    pub fn clear_bridge_chain_id(&mut self) {
        self.bridge_chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bridge_chain_id(&mut self, v: u64) {
        self.bridge_chain_id = v;
    }

    // bytes attestation_id = 4;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // uint64 nonce = 5;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }
}

impl ::protobuf::Message for EventAttestationObserved {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.attestation_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridge_contract)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bridge_chain_id = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.attestation_type != super::attestation::ClaimType::CLAIM_TYPE_UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.attestation_type);
        }
        if !self.bridge_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bridge_contract);
        }
        if self.bridge_chain_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.bridge_chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.attestation_id);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(5, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.attestation_type != super::attestation::ClaimType::CLAIM_TYPE_UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.attestation_type))?;
        }
        if !self.bridge_contract.is_empty() {
            os.write_string(2, &self.bridge_contract)?;
        }
        if self.bridge_chain_id != 0 {
            os.write_uint64(3, self.bridge_chain_id)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(4, &self.attestation_id)?;
        }
        if self.nonce != 0 {
            os.write_uint64(5, self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventAttestationObserved {
        EventAttestationObserved::new()
    }

    fn default_instance() -> &'static EventAttestationObserved {
        static instance: ::protobuf::rt::LazyV2<EventAttestationObserved> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventAttestationObserved::new)
    }
}

impl ::protobuf::Clear for EventAttestationObserved {
    fn clear(&mut self) {
        self.attestation_type = super::attestation::ClaimType::CLAIM_TYPE_UNKNOWN;
        self.bridge_contract.clear();
        self.bridge_chain_id = 0;
        self.attestation_id.clear();
        self.nonce = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventAttestationObserved {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventBridgeWithdrawCanceled {
    // message fields
    pub bridge_contract: ::std::string::String,
    pub bridge_chain_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventBridgeWithdrawCanceled {
    fn default() -> &'a EventBridgeWithdrawCanceled {
        <EventBridgeWithdrawCanceled as ::protobuf::Message>::default_instance()
    }
}

impl EventBridgeWithdrawCanceled {
    pub fn new() -> EventBridgeWithdrawCanceled {
        ::std::default::Default::default()
    }

    // string bridge_contract = 1;


    pub fn get_bridge_contract(&self) -> &str {
        &self.bridge_contract
    }
    pub fn clear_bridge_contract(&mut self) {
        self.bridge_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridge_contract(&mut self, v: ::std::string::String) {
        self.bridge_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_contract(&mut self) -> &mut ::std::string::String {
        &mut self.bridge_contract
    }

    // Take field
    pub fn take_bridge_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridge_contract, ::std::string::String::new())
    }

    // uint64 bridge_chain_id = 2;


    pub fn get_bridge_chain_id(&self) -> u64 {
        self.bridge_chain_id
    }
    pub fn clear_bridge_chain_id(&mut self) {
        self.bridge_chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bridge_chain_id(&mut self, v: u64) {
        self.bridge_chain_id = v;
    }
}

impl ::protobuf::Message for EventBridgeWithdrawCanceled {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridge_contract)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bridge_chain_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bridge_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bridge_contract);
        }
        if self.bridge_chain_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.bridge_chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bridge_contract.is_empty() {
            os.write_string(1, &self.bridge_contract)?;
        }
        if self.bridge_chain_id != 0 {
            os.write_uint64(2, self.bridge_chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventBridgeWithdrawCanceled {
        EventBridgeWithdrawCanceled::new()
    }

    fn default_instance() -> &'static EventBridgeWithdrawCanceled {
        static instance: ::protobuf::rt::LazyV2<EventBridgeWithdrawCanceled> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventBridgeWithdrawCanceled::new)
    }
}

impl ::protobuf::Clear for EventBridgeWithdrawCanceled {
    fn clear(&mut self) {
        self.bridge_contract.clear();
        self.bridge_chain_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventBridgeWithdrawCanceled {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventOutgoingBatch {
    // message fields
    pub denom: ::std::string::String,
    pub orchestrator_address: ::std::string::String,
    pub batch_nonce: u64,
    pub batch_timeout: u64,
    pub batch_tx_ids: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventOutgoingBatch {
    fn default() -> &'a EventOutgoingBatch {
        <EventOutgoingBatch as ::protobuf::Message>::default_instance()
    }
}

impl EventOutgoingBatch {
    pub fn new() -> EventOutgoingBatch {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string orchestrator_address = 2;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }

    // uint64 batch_nonce = 3;


    pub fn get_batch_nonce(&self) -> u64 {
        self.batch_nonce
    }
    pub fn clear_batch_nonce(&mut self) {
        self.batch_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_nonce(&mut self, v: u64) {
        self.batch_nonce = v;
    }

    // uint64 batch_timeout = 4;


    pub fn get_batch_timeout(&self) -> u64 {
        self.batch_timeout
    }
    pub fn clear_batch_timeout(&mut self) {
        self.batch_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_timeout(&mut self, v: u64) {
        self.batch_timeout = v;
    }

    // repeated uint64 batch_tx_ids = 5;


    pub fn get_batch_tx_ids(&self) -> &[u64] {
        &self.batch_tx_ids
    }
    pub fn clear_batch_tx_ids(&mut self) {
        self.batch_tx_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_tx_ids(&mut self, v: ::std::vec::Vec<u64>) {
        self.batch_tx_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch_tx_ids(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.batch_tx_ids
    }

    // Take field
    pub fn take_batch_tx_ids(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.batch_tx_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EventOutgoingBatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_nonce = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_timeout = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.batch_tx_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator_address);
        }
        if self.batch_nonce != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.batch_timeout != 0 {
            my_size += ::protobuf::rt::value_size(4, self.batch_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.batch_tx_ids {
            my_size += ::protobuf::rt::value_size(5, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(2, &self.orchestrator_address)?;
        }
        if self.batch_nonce != 0 {
            os.write_uint64(3, self.batch_nonce)?;
        }
        if self.batch_timeout != 0 {
            os.write_uint64(4, self.batch_timeout)?;
        }
        for v in &self.batch_tx_ids {
            os.write_uint64(5, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventOutgoingBatch {
        EventOutgoingBatch::new()
    }

    fn default_instance() -> &'static EventOutgoingBatch {
        static instance: ::protobuf::rt::LazyV2<EventOutgoingBatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventOutgoingBatch::new)
    }
}

impl ::protobuf::Clear for EventOutgoingBatch {
    fn clear(&mut self) {
        self.denom.clear();
        self.orchestrator_address.clear();
        self.batch_nonce = 0;
        self.batch_timeout = 0;
        self.batch_tx_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventOutgoingBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventOutgoingBatchCanceled {
    // message fields
    pub bridge_contract: ::std::string::String,
    pub bridge_chain_id: u64,
    pub batch_id: u64,
    pub nonce: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventOutgoingBatchCanceled {
    fn default() -> &'a EventOutgoingBatchCanceled {
        <EventOutgoingBatchCanceled as ::protobuf::Message>::default_instance()
    }
}

impl EventOutgoingBatchCanceled {
    pub fn new() -> EventOutgoingBatchCanceled {
        ::std::default::Default::default()
    }

    // string bridge_contract = 1;


    pub fn get_bridge_contract(&self) -> &str {
        &self.bridge_contract
    }
    pub fn clear_bridge_contract(&mut self) {
        self.bridge_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridge_contract(&mut self, v: ::std::string::String) {
        self.bridge_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_contract(&mut self) -> &mut ::std::string::String {
        &mut self.bridge_contract
    }

    // Take field
    pub fn take_bridge_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridge_contract, ::std::string::String::new())
    }

    // uint64 bridge_chain_id = 2;


    pub fn get_bridge_chain_id(&self) -> u64 {
        self.bridge_chain_id
    }
    pub fn clear_bridge_chain_id(&mut self) {
        self.bridge_chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bridge_chain_id(&mut self, v: u64) {
        self.bridge_chain_id = v;
    }

    // uint64 batch_id = 3;


    pub fn get_batch_id(&self) -> u64 {
        self.batch_id
    }
    pub fn clear_batch_id(&mut self) {
        self.batch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_id(&mut self, v: u64) {
        self.batch_id = v;
    }

    // uint64 nonce = 4;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }
}

impl ::protobuf::Message for EventOutgoingBatchCanceled {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridge_contract)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bridge_chain_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_id = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bridge_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bridge_contract);
        }
        if self.bridge_chain_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.bridge_chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.batch_id != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(4, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bridge_contract.is_empty() {
            os.write_string(1, &self.bridge_contract)?;
        }
        if self.bridge_chain_id != 0 {
            os.write_uint64(2, self.bridge_chain_id)?;
        }
        if self.batch_id != 0 {
            os.write_uint64(3, self.batch_id)?;
        }
        if self.nonce != 0 {
            os.write_uint64(4, self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventOutgoingBatchCanceled {
        EventOutgoingBatchCanceled::new()
    }

    fn default_instance() -> &'static EventOutgoingBatchCanceled {
        static instance: ::protobuf::rt::LazyV2<EventOutgoingBatchCanceled> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventOutgoingBatchCanceled::new)
    }
}

impl ::protobuf::Clear for EventOutgoingBatchCanceled {
    fn clear(&mut self) {
        self.bridge_contract.clear();
        self.bridge_chain_id = 0;
        self.batch_id = 0;
        self.nonce = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventOutgoingBatchCanceled {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventValsetUpdateRequest {
    // message fields
    pub valset_nonce: u64,
    pub valset_height: u64,
    pub valset_members: ::protobuf::RepeatedField<super::types::BridgeValidator>,
    pub reward_amount: ::std::string::String,
    pub reward_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventValsetUpdateRequest {
    fn default() -> &'a EventValsetUpdateRequest {
        <EventValsetUpdateRequest as ::protobuf::Message>::default_instance()
    }
}

impl EventValsetUpdateRequest {
    pub fn new() -> EventValsetUpdateRequest {
        ::std::default::Default::default()
    }

    // uint64 valset_nonce = 1;


    pub fn get_valset_nonce(&self) -> u64 {
        self.valset_nonce
    }
    pub fn clear_valset_nonce(&mut self) {
        self.valset_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_valset_nonce(&mut self, v: u64) {
        self.valset_nonce = v;
    }

    // uint64 valset_height = 2;


    pub fn get_valset_height(&self) -> u64 {
        self.valset_height
    }
    pub fn clear_valset_height(&mut self) {
        self.valset_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_valset_height(&mut self, v: u64) {
        self.valset_height = v;
    }

    // repeated .injective.peggy.v1.BridgeValidator valset_members = 3;


    pub fn get_valset_members(&self) -> &[super::types::BridgeValidator] {
        &self.valset_members
    }
    pub fn clear_valset_members(&mut self) {
        self.valset_members.clear();
    }

    // Param is passed by value, moved
    pub fn set_valset_members(&mut self, v: ::protobuf::RepeatedField<super::types::BridgeValidator>) {
        self.valset_members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_valset_members(&mut self) -> &mut ::protobuf::RepeatedField<super::types::BridgeValidator> {
        &mut self.valset_members
    }

    // Take field
    pub fn take_valset_members(&mut self) -> ::protobuf::RepeatedField<super::types::BridgeValidator> {
        ::std::mem::replace(&mut self.valset_members, ::protobuf::RepeatedField::new())
    }

    // string reward_amount = 4;


    pub fn get_reward_amount(&self) -> &str {
        &self.reward_amount
    }
    pub fn clear_reward_amount(&mut self) {
        self.reward_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_amount(&mut self, v: ::std::string::String) {
        self.reward_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_amount(&mut self) -> &mut ::std::string::String {
        &mut self.reward_amount
    }

    // Take field
    pub fn take_reward_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_amount, ::std::string::String::new())
    }

    // string reward_token = 5;


    pub fn get_reward_token(&self) -> &str {
        &self.reward_token
    }
    pub fn clear_reward_token(&mut self) {
        self.reward_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_token(&mut self, v: ::std::string::String) {
        self.reward_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_token(&mut self) -> &mut ::std::string::String {
        &mut self.reward_token
    }

    // Take field
    pub fn take_reward_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventValsetUpdateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.valset_members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.valset_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.valset_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.valset_members)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.valset_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.valset_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.valset_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.valset_height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.valset_members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.reward_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reward_amount);
        }
        if !self.reward_token.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reward_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.valset_nonce != 0 {
            os.write_uint64(1, self.valset_nonce)?;
        }
        if self.valset_height != 0 {
            os.write_uint64(2, self.valset_height)?;
        }
        for v in &self.valset_members {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.reward_amount.is_empty() {
            os.write_string(4, &self.reward_amount)?;
        }
        if !self.reward_token.is_empty() {
            os.write_string(5, &self.reward_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventValsetUpdateRequest {
        EventValsetUpdateRequest::new()
    }

    fn default_instance() -> &'static EventValsetUpdateRequest {
        static instance: ::protobuf::rt::LazyV2<EventValsetUpdateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventValsetUpdateRequest::new)
    }
}

impl ::protobuf::Clear for EventValsetUpdateRequest {
    fn clear(&mut self) {
        self.valset_nonce = 0;
        self.valset_height = 0;
        self.valset_members.clear();
        self.reward_amount.clear();
        self.reward_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventValsetUpdateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventSetOrchestratorAddresses {
    // message fields
    pub validator_address: ::std::string::String,
    pub orchestrator_address: ::std::string::String,
    pub operator_eth_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventSetOrchestratorAddresses {
    fn default() -> &'a EventSetOrchestratorAddresses {
        <EventSetOrchestratorAddresses as ::protobuf::Message>::default_instance()
    }
}

impl EventSetOrchestratorAddresses {
    pub fn new() -> EventSetOrchestratorAddresses {
        ::std::default::Default::default()
    }

    // string validator_address = 1;


    pub fn get_validator_address(&self) -> &str {
        &self.validator_address
    }
    pub fn clear_validator_address(&mut self) {
        self.validator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_validator_address(&mut self, v: ::std::string::String) {
        self.validator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validator_address(&mut self) -> &mut ::std::string::String {
        &mut self.validator_address
    }

    // Take field
    pub fn take_validator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.validator_address, ::std::string::String::new())
    }

    // string orchestrator_address = 2;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }

    // string operator_eth_address = 3;


    pub fn get_operator_eth_address(&self) -> &str {
        &self.operator_eth_address
    }
    pub fn clear_operator_eth_address(&mut self) {
        self.operator_eth_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_operator_eth_address(&mut self, v: ::std::string::String) {
        self.operator_eth_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operator_eth_address(&mut self) -> &mut ::std::string::String {
        &mut self.operator_eth_address
    }

    // Take field
    pub fn take_operator_eth_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.operator_eth_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventSetOrchestratorAddresses {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.validator_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.operator_eth_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.validator_address);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator_address);
        }
        if !self.operator_eth_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.operator_eth_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.validator_address.is_empty() {
            os.write_string(1, &self.validator_address)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(2, &self.orchestrator_address)?;
        }
        if !self.operator_eth_address.is_empty() {
            os.write_string(3, &self.operator_eth_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventSetOrchestratorAddresses {
        EventSetOrchestratorAddresses::new()
    }

    fn default_instance() -> &'static EventSetOrchestratorAddresses {
        static instance: ::protobuf::rt::LazyV2<EventSetOrchestratorAddresses> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventSetOrchestratorAddresses::new)
    }
}

impl ::protobuf::Clear for EventSetOrchestratorAddresses {
    fn clear(&mut self) {
        self.validator_address.clear();
        self.orchestrator_address.clear();
        self.operator_eth_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventSetOrchestratorAddresses {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventValsetConfirm {
    // message fields
    pub valset_nonce: u64,
    pub orchestrator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventValsetConfirm {
    fn default() -> &'a EventValsetConfirm {
        <EventValsetConfirm as ::protobuf::Message>::default_instance()
    }
}

impl EventValsetConfirm {
    pub fn new() -> EventValsetConfirm {
        ::std::default::Default::default()
    }

    // uint64 valset_nonce = 1;


    pub fn get_valset_nonce(&self) -> u64 {
        self.valset_nonce
    }
    pub fn clear_valset_nonce(&mut self) {
        self.valset_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_valset_nonce(&mut self, v: u64) {
        self.valset_nonce = v;
    }

    // string orchestrator_address = 2;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventValsetConfirm {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.valset_nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.valset_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.valset_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.valset_nonce != 0 {
            os.write_uint64(1, self.valset_nonce)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(2, &self.orchestrator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventValsetConfirm {
        EventValsetConfirm::new()
    }

    fn default_instance() -> &'static EventValsetConfirm {
        static instance: ::protobuf::rt::LazyV2<EventValsetConfirm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventValsetConfirm::new)
    }
}

impl ::protobuf::Clear for EventValsetConfirm {
    fn clear(&mut self) {
        self.valset_nonce = 0;
        self.orchestrator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventValsetConfirm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventSendToEth {
    // message fields
    pub outgoing_tx_id: u64,
    pub sender: ::std::string::String,
    pub receiver: ::std::string::String,
    pub amount: ::std::string::String,
    pub bridge_fee: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventSendToEth {
    fn default() -> &'a EventSendToEth {
        <EventSendToEth as ::protobuf::Message>::default_instance()
    }
}

impl EventSendToEth {
    pub fn new() -> EventSendToEth {
        ::std::default::Default::default()
    }

    // uint64 outgoing_tx_id = 1;


    pub fn get_outgoing_tx_id(&self) -> u64 {
        self.outgoing_tx_id
    }
    pub fn clear_outgoing_tx_id(&mut self) {
        self.outgoing_tx_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_outgoing_tx_id(&mut self, v: u64) {
        self.outgoing_tx_id = v;
    }

    // string sender = 2;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string receiver = 3;


    pub fn get_receiver(&self) -> &str {
        &self.receiver
    }
    pub fn clear_receiver(&mut self) {
        self.receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiver(&mut self, v: ::std::string::String) {
        self.receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.receiver
    }

    // Take field
    pub fn take_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiver, ::std::string::String::new())
    }

    // string amount = 4;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string bridge_fee = 5;


    pub fn get_bridge_fee(&self) -> &str {
        &self.bridge_fee
    }
    pub fn clear_bridge_fee(&mut self) {
        self.bridge_fee.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridge_fee(&mut self, v: ::std::string::String) {
        self.bridge_fee = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_fee(&mut self) -> &mut ::std::string::String {
        &mut self.bridge_fee
    }

    // Take field
    pub fn take_bridge_fee(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridge_fee, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventSendToEth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.outgoing_tx_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiver)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridge_fee)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.outgoing_tx_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.outgoing_tx_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sender);
        }
        if !self.receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receiver);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.amount);
        }
        if !self.bridge_fee.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.bridge_fee);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.outgoing_tx_id != 0 {
            os.write_uint64(1, self.outgoing_tx_id)?;
        }
        if !self.sender.is_empty() {
            os.write_string(2, &self.sender)?;
        }
        if !self.receiver.is_empty() {
            os.write_string(3, &self.receiver)?;
        }
        if !self.amount.is_empty() {
            os.write_string(4, &self.amount)?;
        }
        if !self.bridge_fee.is_empty() {
            os.write_string(5, &self.bridge_fee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventSendToEth {
        EventSendToEth::new()
    }

    fn default_instance() -> &'static EventSendToEth {
        static instance: ::protobuf::rt::LazyV2<EventSendToEth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventSendToEth::new)
    }
}

impl ::protobuf::Clear for EventSendToEth {
    fn clear(&mut self) {
        self.outgoing_tx_id = 0;
        self.sender.clear();
        self.receiver.clear();
        self.amount.clear();
        self.bridge_fee.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventSendToEth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventConfirmBatch {
    // message fields
    pub batch_nonce: u64,
    pub orchestrator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventConfirmBatch {
    fn default() -> &'a EventConfirmBatch {
        <EventConfirmBatch as ::protobuf::Message>::default_instance()
    }
}

impl EventConfirmBatch {
    pub fn new() -> EventConfirmBatch {
        ::std::default::Default::default()
    }

    // uint64 batch_nonce = 1;


    pub fn get_batch_nonce(&self) -> u64 {
        self.batch_nonce
    }
    pub fn clear_batch_nonce(&mut self) {
        self.batch_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_nonce(&mut self, v: u64) {
        self.batch_nonce = v;
    }

    // string orchestrator_address = 2;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventConfirmBatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.batch_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.batch_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.batch_nonce != 0 {
            os.write_uint64(1, self.batch_nonce)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(2, &self.orchestrator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventConfirmBatch {
        EventConfirmBatch::new()
    }

    fn default_instance() -> &'static EventConfirmBatch {
        static instance: ::protobuf::rt::LazyV2<EventConfirmBatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventConfirmBatch::new)
    }
}

impl ::protobuf::Clear for EventConfirmBatch {
    fn clear(&mut self) {
        self.batch_nonce = 0;
        self.orchestrator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventConfirmBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventAttestationVote {
    // message fields
    pub event_nonce: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub voter: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventAttestationVote {
    fn default() -> &'a EventAttestationVote {
        <EventAttestationVote as ::protobuf::Message>::default_instance()
    }
}

impl EventAttestationVote {
    pub fn new() -> EventAttestationVote {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // bytes attestation_id = 2;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // string voter = 3;


    pub fn get_voter(&self) -> &str {
        &self.voter
    }
    pub fn clear_voter(&mut self) {
        self.voter.clear();
    }

    // Param is passed by value, moved
    pub fn set_voter(&mut self, v: ::std::string::String) {
        self.voter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_voter(&mut self) -> &mut ::std::string::String {
        &mut self.voter
    }

    // Take field
    pub fn take_voter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.voter, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventAttestationVote {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.voter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.attestation_id);
        }
        if !self.voter.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.voter);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(2, &self.attestation_id)?;
        }
        if !self.voter.is_empty() {
            os.write_string(3, &self.voter)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventAttestationVote {
        EventAttestationVote::new()
    }

    fn default_instance() -> &'static EventAttestationVote {
        static instance: ::protobuf::rt::LazyV2<EventAttestationVote> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventAttestationVote::new)
    }
}

impl ::protobuf::Clear for EventAttestationVote {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.attestation_id.clear();
        self.voter.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventAttestationVote {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventDepositClaim {
    // message fields
    pub event_nonce: u64,
    pub event_height: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub ethereum_sender: ::std::string::String,
    pub cosmos_receiver: ::std::string::String,
    pub token_contract: ::std::string::String,
    pub amount: ::std::string::String,
    pub orchestrator_address: ::std::string::String,
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventDepositClaim {
    fn default() -> &'a EventDepositClaim {
        <EventDepositClaim as ::protobuf::Message>::default_instance()
    }
}

impl EventDepositClaim {
    pub fn new() -> EventDepositClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 event_height = 2;


    pub fn get_event_height(&self) -> u64 {
        self.event_height
    }
    pub fn clear_event_height(&mut self) {
        self.event_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_height(&mut self, v: u64) {
        self.event_height = v;
    }

    // bytes attestation_id = 3;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // string ethereum_sender = 4;


    pub fn get_ethereum_sender(&self) -> &str {
        &self.ethereum_sender
    }
    pub fn clear_ethereum_sender(&mut self) {
        self.ethereum_sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_ethereum_sender(&mut self, v: ::std::string::String) {
        self.ethereum_sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ethereum_sender(&mut self) -> &mut ::std::string::String {
        &mut self.ethereum_sender
    }

    // Take field
    pub fn take_ethereum_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ethereum_sender, ::std::string::String::new())
    }

    // string cosmos_receiver = 5;


    pub fn get_cosmos_receiver(&self) -> &str {
        &self.cosmos_receiver
    }
    pub fn clear_cosmos_receiver(&mut self) {
        self.cosmos_receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_receiver(&mut self, v: ::std::string::String) {
        self.cosmos_receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_receiver
    }

    // Take field
    pub fn take_cosmos_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_receiver, ::std::string::String::new())
    }

    // string token_contract = 6;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string amount = 7;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string orchestrator_address = 8;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }

    // string data = 9;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventDepositClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ethereum_sender)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_receiver)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.event_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.attestation_id);
        }
        if !self.ethereum_sender.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ethereum_sender);
        }
        if !self.cosmos_receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.cosmos_receiver);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.token_contract);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.amount);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.orchestrator_address);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.event_height != 0 {
            os.write_uint64(2, self.event_height)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(3, &self.attestation_id)?;
        }
        if !self.ethereum_sender.is_empty() {
            os.write_string(4, &self.ethereum_sender)?;
        }
        if !self.cosmos_receiver.is_empty() {
            os.write_string(5, &self.cosmos_receiver)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(6, &self.token_contract)?;
        }
        if !self.amount.is_empty() {
            os.write_string(7, &self.amount)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(8, &self.orchestrator_address)?;
        }
        if !self.data.is_empty() {
            os.write_string(9, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventDepositClaim {
        EventDepositClaim::new()
    }

    fn default_instance() -> &'static EventDepositClaim {
        static instance: ::protobuf::rt::LazyV2<EventDepositClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventDepositClaim::new)
    }
}

impl ::protobuf::Clear for EventDepositClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.event_height = 0;
        self.attestation_id.clear();
        self.ethereum_sender.clear();
        self.cosmos_receiver.clear();
        self.token_contract.clear();
        self.amount.clear();
        self.orchestrator_address.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventDepositClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventWithdrawClaim {
    // message fields
    pub event_nonce: u64,
    pub event_height: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub batch_nonce: u64,
    pub token_contract: ::std::string::String,
    pub orchestrator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventWithdrawClaim {
    fn default() -> &'a EventWithdrawClaim {
        <EventWithdrawClaim as ::protobuf::Message>::default_instance()
    }
}

impl EventWithdrawClaim {
    pub fn new() -> EventWithdrawClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 event_height = 2;


    pub fn get_event_height(&self) -> u64 {
        self.event_height
    }
    pub fn clear_event_height(&mut self) {
        self.event_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_height(&mut self, v: u64) {
        self.event_height = v;
    }

    // bytes attestation_id = 3;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // uint64 batch_nonce = 4;


    pub fn get_batch_nonce(&self) -> u64 {
        self.batch_nonce
    }
    pub fn clear_batch_nonce(&mut self) {
        self.batch_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_nonce(&mut self, v: u64) {
        self.batch_nonce = v;
    }

    // string token_contract = 5;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string orchestrator_address = 6;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventWithdrawClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_nonce = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.event_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.attestation_id);
        }
        if self.batch_nonce != 0 {
            my_size += ::protobuf::rt::value_size(4, self.batch_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.token_contract);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.orchestrator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.event_height != 0 {
            os.write_uint64(2, self.event_height)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(3, &self.attestation_id)?;
        }
        if self.batch_nonce != 0 {
            os.write_uint64(4, self.batch_nonce)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(5, &self.token_contract)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(6, &self.orchestrator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventWithdrawClaim {
        EventWithdrawClaim::new()
    }

    fn default_instance() -> &'static EventWithdrawClaim {
        static instance: ::protobuf::rt::LazyV2<EventWithdrawClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventWithdrawClaim::new)
    }
}

impl ::protobuf::Clear for EventWithdrawClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.event_height = 0;
        self.attestation_id.clear();
        self.batch_nonce = 0;
        self.token_contract.clear();
        self.orchestrator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventWithdrawClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventERC20DeployedClaim {
    // message fields
    pub event_nonce: u64,
    pub event_height: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub cosmos_denom: ::std::string::String,
    pub token_contract: ::std::string::String,
    pub name: ::std::string::String,
    pub symbol: ::std::string::String,
    pub decimals: u64,
    pub orchestrator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventERC20DeployedClaim {
    fn default() -> &'a EventERC20DeployedClaim {
        <EventERC20DeployedClaim as ::protobuf::Message>::default_instance()
    }
}

impl EventERC20DeployedClaim {
    pub fn new() -> EventERC20DeployedClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 event_height = 2;


    pub fn get_event_height(&self) -> u64 {
        self.event_height
    }
    pub fn clear_event_height(&mut self) {
        self.event_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_height(&mut self, v: u64) {
        self.event_height = v;
    }

    // bytes attestation_id = 3;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // string cosmos_denom = 4;


    pub fn get_cosmos_denom(&self) -> &str {
        &self.cosmos_denom
    }
    pub fn clear_cosmos_denom(&mut self) {
        self.cosmos_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_denom(&mut self, v: ::std::string::String) {
        self.cosmos_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_denom(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_denom
    }

    // Take field
    pub fn take_cosmos_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_denom, ::std::string::String::new())
    }

    // string token_contract = 5;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string name = 6;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string symbol = 7;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // uint64 decimals = 8;


    pub fn get_decimals(&self) -> u64 {
        self.decimals
    }
    pub fn clear_decimals(&mut self) {
        self.decimals = 0;
    }

    // Param is passed by value, moved
    pub fn set_decimals(&mut self, v: u64) {
        self.decimals = v;
    }

    // string orchestrator_address = 9;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventERC20DeployedClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_denom)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.decimals = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.event_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.attestation_id);
        }
        if !self.cosmos_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.cosmos_denom);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.token_contract);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.name);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.symbol);
        }
        if self.decimals != 0 {
            my_size += ::protobuf::rt::value_size(8, self.decimals, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.orchestrator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.event_height != 0 {
            os.write_uint64(2, self.event_height)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(3, &self.attestation_id)?;
        }
        if !self.cosmos_denom.is_empty() {
            os.write_string(4, &self.cosmos_denom)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(5, &self.token_contract)?;
        }
        if !self.name.is_empty() {
            os.write_string(6, &self.name)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(7, &self.symbol)?;
        }
        if self.decimals != 0 {
            os.write_uint64(8, self.decimals)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(9, &self.orchestrator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventERC20DeployedClaim {
        EventERC20DeployedClaim::new()
    }

    fn default_instance() -> &'static EventERC20DeployedClaim {
        static instance: ::protobuf::rt::LazyV2<EventERC20DeployedClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventERC20DeployedClaim::new)
    }
}

impl ::protobuf::Clear for EventERC20DeployedClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.event_height = 0;
        self.attestation_id.clear();
        self.cosmos_denom.clear();
        self.token_contract.clear();
        self.name.clear();
        self.symbol.clear();
        self.decimals = 0;
        self.orchestrator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventERC20DeployedClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventValsetUpdateClaim {
    // message fields
    pub event_nonce: u64,
    pub event_height: u64,
    pub attestation_id: ::std::vec::Vec<u8>,
    pub valset_nonce: u64,
    pub valset_members: ::protobuf::RepeatedField<super::types::BridgeValidator>,
    pub reward_amount: ::std::string::String,
    pub reward_token: ::std::string::String,
    pub orchestrator_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventValsetUpdateClaim {
    fn default() -> &'a EventValsetUpdateClaim {
        <EventValsetUpdateClaim as ::protobuf::Message>::default_instance()
    }
}

impl EventValsetUpdateClaim {
    pub fn new() -> EventValsetUpdateClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 event_height = 2;


    pub fn get_event_height(&self) -> u64 {
        self.event_height
    }
    pub fn clear_event_height(&mut self) {
        self.event_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_height(&mut self, v: u64) {
        self.event_height = v;
    }

    // bytes attestation_id = 3;


    pub fn get_attestation_id(&self) -> &[u8] {
        &self.attestation_id
    }
    pub fn clear_attestation_id(&mut self) {
        self.attestation_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestation_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.attestation_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attestation_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.attestation_id
    }

    // Take field
    pub fn take_attestation_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.attestation_id, ::std::vec::Vec::new())
    }

    // uint64 valset_nonce = 4;


    pub fn get_valset_nonce(&self) -> u64 {
        self.valset_nonce
    }
    pub fn clear_valset_nonce(&mut self) {
        self.valset_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_valset_nonce(&mut self, v: u64) {
        self.valset_nonce = v;
    }

    // repeated .injective.peggy.v1.BridgeValidator valset_members = 5;


    pub fn get_valset_members(&self) -> &[super::types::BridgeValidator] {
        &self.valset_members
    }
    pub fn clear_valset_members(&mut self) {
        self.valset_members.clear();
    }

    // Param is passed by value, moved
    pub fn set_valset_members(&mut self, v: ::protobuf::RepeatedField<super::types::BridgeValidator>) {
        self.valset_members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_valset_members(&mut self) -> &mut ::protobuf::RepeatedField<super::types::BridgeValidator> {
        &mut self.valset_members
    }

    // Take field
    pub fn take_valset_members(&mut self) -> ::protobuf::RepeatedField<super::types::BridgeValidator> {
        ::std::mem::replace(&mut self.valset_members, ::protobuf::RepeatedField::new())
    }

    // string reward_amount = 6;


    pub fn get_reward_amount(&self) -> &str {
        &self.reward_amount
    }
    pub fn clear_reward_amount(&mut self) {
        self.reward_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_amount(&mut self, v: ::std::string::String) {
        self.reward_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_amount(&mut self) -> &mut ::std::string::String {
        &mut self.reward_amount
    }

    // Take field
    pub fn take_reward_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_amount, ::std::string::String::new())
    }

    // string reward_token = 7;


    pub fn get_reward_token(&self) -> &str {
        &self.reward_token
    }
    pub fn clear_reward_token(&mut self) {
        self.reward_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_token(&mut self, v: ::std::string::String) {
        self.reward_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_token(&mut self) -> &mut ::std::string::String {
        &mut self.reward_token
    }

    // Take field
    pub fn take_reward_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_token, ::std::string::String::new())
    }

    // string orchestrator_address = 8;


    pub fn get_orchestrator_address(&self) -> &str {
        &self.orchestrator_address
    }
    pub fn clear_orchestrator_address(&mut self) {
        self.orchestrator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_address(&mut self, v: ::std::string::String) {
        self.orchestrator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator_address(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator_address
    }

    // Take field
    pub fn take_orchestrator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventValsetUpdateClaim {
    fn is_initialized(&self) -> bool {
        for v in &self.valset_members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.attestation_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.valset_nonce = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.valset_members)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_amount)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_token)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.event_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.attestation_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.attestation_id);
        }
        if self.valset_nonce != 0 {
            my_size += ::protobuf::rt::value_size(4, self.valset_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.valset_members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.reward_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.reward_amount);
        }
        if !self.reward_token.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.reward_token);
        }
        if !self.orchestrator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.orchestrator_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.event_height != 0 {
            os.write_uint64(2, self.event_height)?;
        }
        if !self.attestation_id.is_empty() {
            os.write_bytes(3, &self.attestation_id)?;
        }
        if self.valset_nonce != 0 {
            os.write_uint64(4, self.valset_nonce)?;
        }
        for v in &self.valset_members {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.reward_amount.is_empty() {
            os.write_string(6, &self.reward_amount)?;
        }
        if !self.reward_token.is_empty() {
            os.write_string(7, &self.reward_token)?;
        }
        if !self.orchestrator_address.is_empty() {
            os.write_string(8, &self.orchestrator_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventValsetUpdateClaim {
        EventValsetUpdateClaim::new()
    }

    fn default_instance() -> &'static EventValsetUpdateClaim {
        static instance: ::protobuf::rt::LazyV2<EventValsetUpdateClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventValsetUpdateClaim::new)
    }
}

impl ::protobuf::Clear for EventValsetUpdateClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.event_height = 0;
        self.attestation_id.clear();
        self.valset_nonce = 0;
        self.valset_members.clear();
        self.reward_amount.clear();
        self.reward_token.clear();
        self.orchestrator_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventValsetUpdateClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventCancelSendToEth {
    // message fields
    pub outgoing_tx_id: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventCancelSendToEth {
    fn default() -> &'a EventCancelSendToEth {
        <EventCancelSendToEth as ::protobuf::Message>::default_instance()
    }
}

impl EventCancelSendToEth {
    pub fn new() -> EventCancelSendToEth {
        ::std::default::Default::default()
    }

    // uint64 outgoing_tx_id = 1;


    pub fn get_outgoing_tx_id(&self) -> u64 {
        self.outgoing_tx_id
    }
    pub fn clear_outgoing_tx_id(&mut self) {
        self.outgoing_tx_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_outgoing_tx_id(&mut self, v: u64) {
        self.outgoing_tx_id = v;
    }
}

impl ::protobuf::Message for EventCancelSendToEth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.outgoing_tx_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.outgoing_tx_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.outgoing_tx_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.outgoing_tx_id != 0 {
            os.write_uint64(1, self.outgoing_tx_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventCancelSendToEth {
        EventCancelSendToEth::new()
    }

    fn default_instance() -> &'static EventCancelSendToEth {
        static instance: ::protobuf::rt::LazyV2<EventCancelSendToEth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventCancelSendToEth::new)
    }
}

impl ::protobuf::Clear for EventCancelSendToEth {
    fn clear(&mut self) {
        self.outgoing_tx_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventCancelSendToEth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventSubmitBadSignatureEvidence {
    // message fields
    pub bad_eth_signature: ::std::string::String,
    pub bad_eth_signature_subject: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventSubmitBadSignatureEvidence {
    fn default() -> &'a EventSubmitBadSignatureEvidence {
        <EventSubmitBadSignatureEvidence as ::protobuf::Message>::default_instance()
    }
}

impl EventSubmitBadSignatureEvidence {
    pub fn new() -> EventSubmitBadSignatureEvidence {
        ::std::default::Default::default()
    }

    // string bad_eth_signature = 1;


    pub fn get_bad_eth_signature(&self) -> &str {
        &self.bad_eth_signature
    }
    pub fn clear_bad_eth_signature(&mut self) {
        self.bad_eth_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_bad_eth_signature(&mut self, v: ::std::string::String) {
        self.bad_eth_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bad_eth_signature(&mut self) -> &mut ::std::string::String {
        &mut self.bad_eth_signature
    }

    // Take field
    pub fn take_bad_eth_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bad_eth_signature, ::std::string::String::new())
    }

    // string bad_eth_signature_subject = 2;


    pub fn get_bad_eth_signature_subject(&self) -> &str {
        &self.bad_eth_signature_subject
    }
    pub fn clear_bad_eth_signature_subject(&mut self) {
        self.bad_eth_signature_subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_bad_eth_signature_subject(&mut self, v: ::std::string::String) {
        self.bad_eth_signature_subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bad_eth_signature_subject(&mut self) -> &mut ::std::string::String {
        &mut self.bad_eth_signature_subject
    }

    // Take field
    pub fn take_bad_eth_signature_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bad_eth_signature_subject, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventSubmitBadSignatureEvidence {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bad_eth_signature)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bad_eth_signature_subject)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.bad_eth_signature.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.bad_eth_signature);
        }
        if !self.bad_eth_signature_subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.bad_eth_signature_subject);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.bad_eth_signature.is_empty() {
            os.write_string(1, &self.bad_eth_signature)?;
        }
        if !self.bad_eth_signature_subject.is_empty() {
            os.write_string(2, &self.bad_eth_signature_subject)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventSubmitBadSignatureEvidence {
        EventSubmitBadSignatureEvidence::new()
    }

    fn default_instance() -> &'static EventSubmitBadSignatureEvidence {
        static instance: ::protobuf::rt::LazyV2<EventSubmitBadSignatureEvidence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventSubmitBadSignatureEvidence::new)
    }
}

impl ::protobuf::Clear for EventSubmitBadSignatureEvidence {
    fn clear(&mut self) {
        self.bad_eth_signature.clear();
        self.bad_eth_signature_subject.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventSubmitBadSignatureEvidence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventValidatorSlash {
    // message fields
    pub power: i64,
    pub reason: ::std::string::String,
    pub consensus_address: ::std::string::String,
    pub operator_address: ::std::string::String,
    pub moniker: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventValidatorSlash {
    fn default() -> &'a EventValidatorSlash {
        <EventValidatorSlash as ::protobuf::Message>::default_instance()
    }
}

impl EventValidatorSlash {
    pub fn new() -> EventValidatorSlash {
        ::std::default::Default::default()
    }

    // int64 power = 1;


    pub fn get_power(&self) -> i64 {
        self.power
    }
    pub fn clear_power(&mut self) {
        self.power = 0;
    }

    // Param is passed by value, moved
    pub fn set_power(&mut self, v: i64) {
        self.power = v;
    }

    // string reason = 2;


    pub fn get_reason(&self) -> &str {
        &self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ::std::string::String) {
        self.reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reason(&mut self) -> &mut ::std::string::String {
        &mut self.reason
    }

    // Take field
    pub fn take_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reason, ::std::string::String::new())
    }

    // string consensus_address = 3;


    pub fn get_consensus_address(&self) -> &str {
        &self.consensus_address
    }
    pub fn clear_consensus_address(&mut self) {
        self.consensus_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensus_address(&mut self, v: ::std::string::String) {
        self.consensus_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensus_address(&mut self) -> &mut ::std::string::String {
        &mut self.consensus_address
    }

    // Take field
    pub fn take_consensus_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consensus_address, ::std::string::String::new())
    }

    // string operator_address = 4;


    pub fn get_operator_address(&self) -> &str {
        &self.operator_address
    }
    pub fn clear_operator_address(&mut self) {
        self.operator_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_operator_address(&mut self, v: ::std::string::String) {
        self.operator_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operator_address(&mut self) -> &mut ::std::string::String {
        &mut self.operator_address
    }

    // Take field
    pub fn take_operator_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.operator_address, ::std::string::String::new())
    }

    // string moniker = 5;


    pub fn get_moniker(&self) -> &str {
        &self.moniker
    }
    pub fn clear_moniker(&mut self) {
        self.moniker.clear();
    }

    // Param is passed by value, moved
    pub fn set_moniker(&mut self, v: ::std::string::String) {
        self.moniker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_moniker(&mut self) -> &mut ::std::string::String {
        &mut self.moniker
    }

    // Take field
    pub fn take_moniker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.moniker, ::std::string::String::new())
    }
}

impl ::protobuf::Message for EventValidatorSlash {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.power = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reason)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consensus_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.operator_address)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.moniker)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.power != 0 {
            my_size += ::protobuf::rt::value_size(1, self.power, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reason.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reason);
        }
        if !self.consensus_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.consensus_address);
        }
        if !self.operator_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.operator_address);
        }
        if !self.moniker.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.moniker);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.power != 0 {
            os.write_int64(1, self.power)?;
        }
        if !self.reason.is_empty() {
            os.write_string(2, &self.reason)?;
        }
        if !self.consensus_address.is_empty() {
            os.write_string(3, &self.consensus_address)?;
        }
        if !self.operator_address.is_empty() {
            os.write_string(4, &self.operator_address)?;
        }
        if !self.moniker.is_empty() {
            os.write_string(5, &self.moniker)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventValidatorSlash {
        EventValidatorSlash::new()
    }

    fn default_instance() -> &'static EventValidatorSlash {
        static instance: ::protobuf::rt::LazyV2<EventValidatorSlash> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventValidatorSlash::new)
    }
}

impl ::protobuf::Clear for EventValidatorSlash {
    fn clear(&mut self) {
        self.power = 0;
        self.reason.clear();
        self.consensus_address.clear();
        self.operator_address.clear();
        self.moniker.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventValidatorSlash {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

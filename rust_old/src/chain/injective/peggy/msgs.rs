// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/msgs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSetOrchestratorAddresses {
    // message fields
    pub sender: ::std::string::String,
    pub orchestrator: ::std::string::String,
    pub eth_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSetOrchestratorAddresses {
    fn default() -> &'a MsgSetOrchestratorAddresses {
        <MsgSetOrchestratorAddresses as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetOrchestratorAddresses {
    pub fn new() -> MsgSetOrchestratorAddresses {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string orchestrator = 2;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }

    // string eth_address = 3;


    pub fn get_eth_address(&self) -> &str {
        &self.eth_address
    }
    pub fn clear_eth_address(&mut self) {
        self.eth_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_eth_address(&mut self, v: ::std::string::String) {
        self.eth_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eth_address(&mut self) -> &mut ::std::string::String {
        &mut self.eth_address
    }

    // Take field
    pub fn take_eth_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eth_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgSetOrchestratorAddresses {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eth_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator);
        }
        if !self.eth_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.eth_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(2, &self.orchestrator)?;
        }
        if !self.eth_address.is_empty() {
            os.write_string(3, &self.eth_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSetOrchestratorAddresses {
        MsgSetOrchestratorAddresses::new()
    }

    fn default_instance() -> &'static MsgSetOrchestratorAddresses {
        static instance: ::protobuf::rt::LazyV2<MsgSetOrchestratorAddresses> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSetOrchestratorAddresses::new)
    }
}

impl ::protobuf::Clear for MsgSetOrchestratorAddresses {
    fn clear(&mut self) {
        self.sender.clear();
        self.orchestrator.clear();
        self.eth_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetOrchestratorAddresses {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSetOrchestratorAddressesResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSetOrchestratorAddressesResponse {
    fn default() -> &'a MsgSetOrchestratorAddressesResponse {
        <MsgSetOrchestratorAddressesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSetOrchestratorAddressesResponse {
    pub fn new() -> MsgSetOrchestratorAddressesResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgSetOrchestratorAddressesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSetOrchestratorAddressesResponse {
        MsgSetOrchestratorAddressesResponse::new()
    }

    fn default_instance() -> &'static MsgSetOrchestratorAddressesResponse {
        static instance: ::protobuf::rt::LazyV2<MsgSetOrchestratorAddressesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSetOrchestratorAddressesResponse::new)
    }
}

impl ::protobuf::Clear for MsgSetOrchestratorAddressesResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSetOrchestratorAddressesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgValsetConfirm {
    // message fields
    pub nonce: u64,
    pub orchestrator: ::std::string::String,
    pub eth_address: ::std::string::String,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgValsetConfirm {
    fn default() -> &'a MsgValsetConfirm {
        <MsgValsetConfirm as ::protobuf::Message>::default_instance()
    }
}

impl MsgValsetConfirm {
    pub fn new() -> MsgValsetConfirm {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // string orchestrator = 2;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }

    // string eth_address = 3;


    pub fn get_eth_address(&self) -> &str {
        &self.eth_address
    }
    pub fn clear_eth_address(&mut self) {
        self.eth_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_eth_address(&mut self, v: ::std::string::String) {
        self.eth_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eth_address(&mut self) -> &mut ::std::string::String {
        &mut self.eth_address
    }

    // Take field
    pub fn take_eth_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eth_address, ::std::string::String::new())
    }

    // string signature = 4;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgValsetConfirm {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eth_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.orchestrator);
        }
        if !self.eth_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.eth_address);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(2, &self.orchestrator)?;
        }
        if !self.eth_address.is_empty() {
            os.write_string(3, &self.eth_address)?;
        }
        if !self.signature.is_empty() {
            os.write_string(4, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgValsetConfirm {
        MsgValsetConfirm::new()
    }

    fn default_instance() -> &'static MsgValsetConfirm {
        static instance: ::protobuf::rt::LazyV2<MsgValsetConfirm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgValsetConfirm::new)
    }
}

impl ::protobuf::Clear for MsgValsetConfirm {
    fn clear(&mut self) {
        self.nonce = 0;
        self.orchestrator.clear();
        self.eth_address.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgValsetConfirm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgValsetConfirmResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgValsetConfirmResponse {
    fn default() -> &'a MsgValsetConfirmResponse {
        <MsgValsetConfirmResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgValsetConfirmResponse {
    pub fn new() -> MsgValsetConfirmResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgValsetConfirmResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgValsetConfirmResponse {
        MsgValsetConfirmResponse::new()
    }

    fn default_instance() -> &'static MsgValsetConfirmResponse {
        static instance: ::protobuf::rt::LazyV2<MsgValsetConfirmResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgValsetConfirmResponse::new)
    }
}

impl ::protobuf::Clear for MsgValsetConfirmResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgValsetConfirmResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSendToEth {
    // message fields
    pub sender: ::std::string::String,
    pub eth_dest: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    pub bridge_fee: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSendToEth {
    fn default() -> &'a MsgSendToEth {
        <MsgSendToEth as ::protobuf::Message>::default_instance()
    }
}

impl MsgSendToEth {
    pub fn new() -> MsgSendToEth {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string eth_dest = 2;


    pub fn get_eth_dest(&self) -> &str {
        &self.eth_dest
    }
    pub fn clear_eth_dest(&mut self) {
        self.eth_dest.clear();
    }

    // Param is passed by value, moved
    pub fn set_eth_dest(&mut self, v: ::std::string::String) {
        self.eth_dest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eth_dest(&mut self) -> &mut ::std::string::String {
        &mut self.eth_dest
    }

    // Take field
    pub fn take_eth_dest(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eth_dest, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }

    // .cosmos.base.v1beta1.Coin bridge_fee = 4;


    pub fn get_bridge_fee(&self) -> &super::coin::Coin {
        self.bridge_fee.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bridge_fee(&mut self) {
        self.bridge_fee.clear();
    }

    pub fn has_bridge_fee(&self) -> bool {
        self.bridge_fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bridge_fee(&mut self, v: super::coin::Coin) {
        self.bridge_fee = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_fee(&mut self) -> &mut super::coin::Coin {
        if self.bridge_fee.is_none() {
            self.bridge_fee.set_default();
        }
        self.bridge_fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_bridge_fee(&mut self) -> super::coin::Coin {
        self.bridge_fee.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgSendToEth {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.bridge_fee {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eth_dest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bridge_fee)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.eth_dest.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.eth_dest);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.bridge_fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.eth_dest.is_empty() {
            os.write_string(2, &self.eth_dest)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.bridge_fee.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSendToEth {
        MsgSendToEth::new()
    }

    fn default_instance() -> &'static MsgSendToEth {
        static instance: ::protobuf::rt::LazyV2<MsgSendToEth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSendToEth::new)
    }
}

impl ::protobuf::Clear for MsgSendToEth {
    fn clear(&mut self) {
        self.sender.clear();
        self.eth_dest.clear();
        self.amount.clear();
        self.bridge_fee.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSendToEth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSendToEthResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSendToEthResponse {
    fn default() -> &'a MsgSendToEthResponse {
        <MsgSendToEthResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSendToEthResponse {
    pub fn new() -> MsgSendToEthResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgSendToEthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSendToEthResponse {
        MsgSendToEthResponse::new()
    }

    fn default_instance() -> &'static MsgSendToEthResponse {
        static instance: ::protobuf::rt::LazyV2<MsgSendToEthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSendToEthResponse::new)
    }
}

impl ::protobuf::Clear for MsgSendToEthResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSendToEthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestBatch {
    // message fields
    pub orchestrator: ::std::string::String,
    pub denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestBatch {
    fn default() -> &'a MsgRequestBatch {
        <MsgRequestBatch as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestBatch {
    pub fn new() -> MsgRequestBatch {
        ::std::default::Default::default()
    }

    // string orchestrator = 1;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }

    // string denom = 2;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgRequestBatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.orchestrator);
        }
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.orchestrator.is_empty() {
            os.write_string(1, &self.orchestrator)?;
        }
        if !self.denom.is_empty() {
            os.write_string(2, &self.denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestBatch {
        MsgRequestBatch::new()
    }

    fn default_instance() -> &'static MsgRequestBatch {
        static instance: ::protobuf::rt::LazyV2<MsgRequestBatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestBatch::new)
    }
}

impl ::protobuf::Clear for MsgRequestBatch {
    fn clear(&mut self) {
        self.orchestrator.clear();
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestBatchResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestBatchResponse {
    fn default() -> &'a MsgRequestBatchResponse {
        <MsgRequestBatchResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestBatchResponse {
    pub fn new() -> MsgRequestBatchResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRequestBatchResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestBatchResponse {
        MsgRequestBatchResponse::new()
    }

    fn default_instance() -> &'static MsgRequestBatchResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRequestBatchResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestBatchResponse::new)
    }
}

impl ::protobuf::Clear for MsgRequestBatchResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestBatchResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgConfirmBatch {
    // message fields
    pub nonce: u64,
    pub token_contract: ::std::string::String,
    pub eth_signer: ::std::string::String,
    pub orchestrator: ::std::string::String,
    pub signature: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConfirmBatch {
    fn default() -> &'a MsgConfirmBatch {
        <MsgConfirmBatch as ::protobuf::Message>::default_instance()
    }
}

impl MsgConfirmBatch {
    pub fn new() -> MsgConfirmBatch {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // string token_contract = 2;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string eth_signer = 3;


    pub fn get_eth_signer(&self) -> &str {
        &self.eth_signer
    }
    pub fn clear_eth_signer(&mut self) {
        self.eth_signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_eth_signer(&mut self, v: ::std::string::String) {
        self.eth_signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eth_signer(&mut self) -> &mut ::std::string::String {
        &mut self.eth_signer
    }

    // Take field
    pub fn take_eth_signer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.eth_signer, ::std::string::String::new())
    }

    // string orchestrator = 4;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }

    // string signature = 5;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgConfirmBatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.eth_signer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token_contract);
        }
        if !self.eth_signer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.eth_signer);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.orchestrator);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(2, &self.token_contract)?;
        }
        if !self.eth_signer.is_empty() {
            os.write_string(3, &self.eth_signer)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(4, &self.orchestrator)?;
        }
        if !self.signature.is_empty() {
            os.write_string(5, &self.signature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConfirmBatch {
        MsgConfirmBatch::new()
    }

    fn default_instance() -> &'static MsgConfirmBatch {
        static instance: ::protobuf::rt::LazyV2<MsgConfirmBatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConfirmBatch::new)
    }
}

impl ::protobuf::Clear for MsgConfirmBatch {
    fn clear(&mut self) {
        self.nonce = 0;
        self.token_contract.clear();
        self.eth_signer.clear();
        self.orchestrator.clear();
        self.signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConfirmBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgConfirmBatchResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgConfirmBatchResponse {
    fn default() -> &'a MsgConfirmBatchResponse {
        <MsgConfirmBatchResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgConfirmBatchResponse {
    pub fn new() -> MsgConfirmBatchResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgConfirmBatchResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgConfirmBatchResponse {
        MsgConfirmBatchResponse::new()
    }

    fn default_instance() -> &'static MsgConfirmBatchResponse {
        static instance: ::protobuf::rt::LazyV2<MsgConfirmBatchResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgConfirmBatchResponse::new)
    }
}

impl ::protobuf::Clear for MsgConfirmBatchResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgConfirmBatchResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgDepositClaim {
    // message fields
    pub event_nonce: u64,
    pub block_height: u64,
    pub token_contract: ::std::string::String,
    pub amount: ::std::string::String,
    pub ethereum_sender: ::std::string::String,
    pub cosmos_receiver: ::std::string::String,
    pub orchestrator: ::std::string::String,
    pub data: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDepositClaim {
    fn default() -> &'a MsgDepositClaim {
        <MsgDepositClaim as ::protobuf::Message>::default_instance()
    }
}

impl MsgDepositClaim {
    pub fn new() -> MsgDepositClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 block_height = 2;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // string token_contract = 3;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string amount = 4;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string ethereum_sender = 5;


    pub fn get_ethereum_sender(&self) -> &str {
        &self.ethereum_sender
    }
    pub fn clear_ethereum_sender(&mut self) {
        self.ethereum_sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_ethereum_sender(&mut self, v: ::std::string::String) {
        self.ethereum_sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ethereum_sender(&mut self) -> &mut ::std::string::String {
        &mut self.ethereum_sender
    }

    // Take field
    pub fn take_ethereum_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ethereum_sender, ::std::string::String::new())
    }

    // string cosmos_receiver = 6;


    pub fn get_cosmos_receiver(&self) -> &str {
        &self.cosmos_receiver
    }
    pub fn clear_cosmos_receiver(&mut self) {
        self.cosmos_receiver.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_receiver(&mut self, v: ::std::string::String) {
        self.cosmos_receiver = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_receiver(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_receiver
    }

    // Take field
    pub fn take_cosmos_receiver(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_receiver, ::std::string::String::new())
    }

    // string orchestrator = 7;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }

    // string data = 8;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgDepositClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ethereum_sender)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_receiver)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.token_contract);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.amount);
        }
        if !self.ethereum_sender.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ethereum_sender);
        }
        if !self.cosmos_receiver.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.cosmos_receiver);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.orchestrator);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.block_height != 0 {
            os.write_uint64(2, self.block_height)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(3, &self.token_contract)?;
        }
        if !self.amount.is_empty() {
            os.write_string(4, &self.amount)?;
        }
        if !self.ethereum_sender.is_empty() {
            os.write_string(5, &self.ethereum_sender)?;
        }
        if !self.cosmos_receiver.is_empty() {
            os.write_string(6, &self.cosmos_receiver)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(7, &self.orchestrator)?;
        }
        if !self.data.is_empty() {
            os.write_string(8, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDepositClaim {
        MsgDepositClaim::new()
    }

    fn default_instance() -> &'static MsgDepositClaim {
        static instance: ::protobuf::rt::LazyV2<MsgDepositClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDepositClaim::new)
    }
}

impl ::protobuf::Clear for MsgDepositClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.block_height = 0;
        self.token_contract.clear();
        self.amount.clear();
        self.ethereum_sender.clear();
        self.cosmos_receiver.clear();
        self.orchestrator.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDepositClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgDepositClaimResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgDepositClaimResponse {
    fn default() -> &'a MsgDepositClaimResponse {
        <MsgDepositClaimResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgDepositClaimResponse {
    pub fn new() -> MsgDepositClaimResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgDepositClaimResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgDepositClaimResponse {
        MsgDepositClaimResponse::new()
    }

    fn default_instance() -> &'static MsgDepositClaimResponse {
        static instance: ::protobuf::rt::LazyV2<MsgDepositClaimResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgDepositClaimResponse::new)
    }
}

impl ::protobuf::Clear for MsgDepositClaimResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgDepositClaimResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgWithdrawClaim {
    // message fields
    pub event_nonce: u64,
    pub block_height: u64,
    pub batch_nonce: u64,
    pub token_contract: ::std::string::String,
    pub orchestrator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawClaim {
    fn default() -> &'a MsgWithdrawClaim {
        <MsgWithdrawClaim as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawClaim {
    pub fn new() -> MsgWithdrawClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 block_height = 2;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // uint64 batch_nonce = 3;


    pub fn get_batch_nonce(&self) -> u64 {
        self.batch_nonce
    }
    pub fn clear_batch_nonce(&mut self) {
        self.batch_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_batch_nonce(&mut self, v: u64) {
        self.batch_nonce = v;
    }

    // string token_contract = 4;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string orchestrator = 5;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgWithdrawClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.batch_nonce = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.batch_nonce != 0 {
            my_size += ::protobuf::rt::value_size(3, self.batch_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token_contract);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.orchestrator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.block_height != 0 {
            os.write_uint64(2, self.block_height)?;
        }
        if self.batch_nonce != 0 {
            os.write_uint64(3, self.batch_nonce)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(4, &self.token_contract)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(5, &self.orchestrator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawClaim {
        MsgWithdrawClaim::new()
    }

    fn default_instance() -> &'static MsgWithdrawClaim {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawClaim::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.block_height = 0;
        self.batch_nonce = 0;
        self.token_contract.clear();
        self.orchestrator.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgWithdrawClaimResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgWithdrawClaimResponse {
    fn default() -> &'a MsgWithdrawClaimResponse {
        <MsgWithdrawClaimResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgWithdrawClaimResponse {
    pub fn new() -> MsgWithdrawClaimResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgWithdrawClaimResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgWithdrawClaimResponse {
        MsgWithdrawClaimResponse::new()
    }

    fn default_instance() -> &'static MsgWithdrawClaimResponse {
        static instance: ::protobuf::rt::LazyV2<MsgWithdrawClaimResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgWithdrawClaimResponse::new)
    }
}

impl ::protobuf::Clear for MsgWithdrawClaimResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgWithdrawClaimResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgERC20DeployedClaim {
    // message fields
    pub event_nonce: u64,
    pub block_height: u64,
    pub cosmos_denom: ::std::string::String,
    pub token_contract: ::std::string::String,
    pub name: ::std::string::String,
    pub symbol: ::std::string::String,
    pub decimals: u64,
    pub orchestrator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgERC20DeployedClaim {
    fn default() -> &'a MsgERC20DeployedClaim {
        <MsgERC20DeployedClaim as ::protobuf::Message>::default_instance()
    }
}

impl MsgERC20DeployedClaim {
    pub fn new() -> MsgERC20DeployedClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 block_height = 2;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // string cosmos_denom = 3;


    pub fn get_cosmos_denom(&self) -> &str {
        &self.cosmos_denom
    }
    pub fn clear_cosmos_denom(&mut self) {
        self.cosmos_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_denom(&mut self, v: ::std::string::String) {
        self.cosmos_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_denom(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_denom
    }

    // Take field
    pub fn take_cosmos_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_denom, ::std::string::String::new())
    }

    // string token_contract = 4;


    pub fn get_token_contract(&self) -> &str {
        &self.token_contract
    }
    pub fn clear_token_contract(&mut self) {
        self.token_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_contract(&mut self, v: ::std::string::String) {
        self.token_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_contract(&mut self) -> &mut ::std::string::String {
        &mut self.token_contract
    }

    // Take field
    pub fn take_token_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_contract, ::std::string::String::new())
    }

    // string name = 5;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string symbol = 6;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // uint64 decimals = 7;


    pub fn get_decimals(&self) -> u64 {
        self.decimals
    }
    pub fn clear_decimals(&mut self) {
        self.decimals = 0;
    }

    // Param is passed by value, moved
    pub fn set_decimals(&mut self, v: u64) {
        self.decimals = v;
    }

    // string orchestrator = 8;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgERC20DeployedClaim {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_denom)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_contract)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.decimals = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.cosmos_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cosmos_denom);
        }
        if !self.token_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.token_contract);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.name);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.symbol);
        }
        if self.decimals != 0 {
            my_size += ::protobuf::rt::value_size(7, self.decimals, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.orchestrator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.block_height != 0 {
            os.write_uint64(2, self.block_height)?;
        }
        if !self.cosmos_denom.is_empty() {
            os.write_string(3, &self.cosmos_denom)?;
        }
        if !self.token_contract.is_empty() {
            os.write_string(4, &self.token_contract)?;
        }
        if !self.name.is_empty() {
            os.write_string(5, &self.name)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(6, &self.symbol)?;
        }
        if self.decimals != 0 {
            os.write_uint64(7, self.decimals)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(8, &self.orchestrator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgERC20DeployedClaim {
        MsgERC20DeployedClaim::new()
    }

    fn default_instance() -> &'static MsgERC20DeployedClaim {
        static instance: ::protobuf::rt::LazyV2<MsgERC20DeployedClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgERC20DeployedClaim::new)
    }
}

impl ::protobuf::Clear for MsgERC20DeployedClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.block_height = 0;
        self.cosmos_denom.clear();
        self.token_contract.clear();
        self.name.clear();
        self.symbol.clear();
        self.decimals = 0;
        self.orchestrator.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgERC20DeployedClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgERC20DeployedClaimResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgERC20DeployedClaimResponse {
    fn default() -> &'a MsgERC20DeployedClaimResponse {
        <MsgERC20DeployedClaimResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgERC20DeployedClaimResponse {
    pub fn new() -> MsgERC20DeployedClaimResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgERC20DeployedClaimResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgERC20DeployedClaimResponse {
        MsgERC20DeployedClaimResponse::new()
    }

    fn default_instance() -> &'static MsgERC20DeployedClaimResponse {
        static instance: ::protobuf::rt::LazyV2<MsgERC20DeployedClaimResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgERC20DeployedClaimResponse::new)
    }
}

impl ::protobuf::Clear for MsgERC20DeployedClaimResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgERC20DeployedClaimResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgCancelSendToEth {
    // message fields
    pub transaction_id: u64,
    pub sender: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCancelSendToEth {
    fn default() -> &'a MsgCancelSendToEth {
        <MsgCancelSendToEth as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelSendToEth {
    pub fn new() -> MsgCancelSendToEth {
        ::std::default::Default::default()
    }

    // uint64 transaction_id = 1;


    pub fn get_transaction_id(&self) -> u64 {
        self.transaction_id
    }
    pub fn clear_transaction_id(&mut self) {
        self.transaction_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_transaction_id(&mut self, v: u64) {
        self.transaction_id = v;
    }

    // string sender = 2;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgCancelSendToEth {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.transaction_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.transaction_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.transaction_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sender);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.transaction_id != 0 {
            os.write_uint64(1, self.transaction_id)?;
        }
        if !self.sender.is_empty() {
            os.write_string(2, &self.sender)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCancelSendToEth {
        MsgCancelSendToEth::new()
    }

    fn default_instance() -> &'static MsgCancelSendToEth {
        static instance: ::protobuf::rt::LazyV2<MsgCancelSendToEth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCancelSendToEth::new)
    }
}

impl ::protobuf::Clear for MsgCancelSendToEth {
    fn clear(&mut self) {
        self.transaction_id = 0;
        self.sender.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelSendToEth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgCancelSendToEthResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCancelSendToEthResponse {
    fn default() -> &'a MsgCancelSendToEthResponse {
        <MsgCancelSendToEthResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCancelSendToEthResponse {
    pub fn new() -> MsgCancelSendToEthResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgCancelSendToEthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCancelSendToEthResponse {
        MsgCancelSendToEthResponse::new()
    }

    fn default_instance() -> &'static MsgCancelSendToEthResponse {
        static instance: ::protobuf::rt::LazyV2<MsgCancelSendToEthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCancelSendToEthResponse::new)
    }
}

impl ::protobuf::Clear for MsgCancelSendToEthResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCancelSendToEthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSubmitBadSignatureEvidence {
    // message fields
    pub subject: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub signature: ::std::string::String,
    pub sender: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSubmitBadSignatureEvidence {
    fn default() -> &'a MsgSubmitBadSignatureEvidence {
        <MsgSubmitBadSignatureEvidence as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitBadSignatureEvidence {
    pub fn new() -> MsgSubmitBadSignatureEvidence {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any subject = 1;


    pub fn get_subject(&self) -> &::protobuf::well_known_types::Any {
        self.subject.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    pub fn has_subject(&self) -> bool {
        self.subject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::protobuf::well_known_types::Any) {
        self.subject = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.subject.is_none() {
            self.subject.set_default();
        }
        self.subject.as_mut().unwrap()
    }

    // Take field
    pub fn take_subject(&mut self) -> ::protobuf::well_known_types::Any {
        self.subject.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // string signature = 2;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // string sender = 3;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgSubmitBadSignatureEvidence {
    fn is_initialized(&self) -> bool {
        for v in &self.subject {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.subject)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.subject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.signature);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sender);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.subject.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(2, &self.signature)?;
        }
        if !self.sender.is_empty() {
            os.write_string(3, &self.sender)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSubmitBadSignatureEvidence {
        MsgSubmitBadSignatureEvidence::new()
    }

    fn default_instance() -> &'static MsgSubmitBadSignatureEvidence {
        static instance: ::protobuf::rt::LazyV2<MsgSubmitBadSignatureEvidence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSubmitBadSignatureEvidence::new)
    }
}

impl ::protobuf::Clear for MsgSubmitBadSignatureEvidence {
    fn clear(&mut self) {
        self.subject.clear();
        self.signature.clear();
        self.sender.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitBadSignatureEvidence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgSubmitBadSignatureEvidenceResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgSubmitBadSignatureEvidenceResponse {
    fn default() -> &'a MsgSubmitBadSignatureEvidenceResponse {
        <MsgSubmitBadSignatureEvidenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgSubmitBadSignatureEvidenceResponse {
    pub fn new() -> MsgSubmitBadSignatureEvidenceResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgSubmitBadSignatureEvidenceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgSubmitBadSignatureEvidenceResponse {
        MsgSubmitBadSignatureEvidenceResponse::new()
    }

    fn default_instance() -> &'static MsgSubmitBadSignatureEvidenceResponse {
        static instance: ::protobuf::rt::LazyV2<MsgSubmitBadSignatureEvidenceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgSubmitBadSignatureEvidenceResponse::new)
    }
}

impl ::protobuf::Clear for MsgSubmitBadSignatureEvidenceResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgSubmitBadSignatureEvidenceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgValsetUpdatedClaim {
    // message fields
    pub event_nonce: u64,
    pub valset_nonce: u64,
    pub block_height: u64,
    pub members: ::protobuf::RepeatedField<super::types::BridgeValidator>,
    pub reward_amount: ::std::string::String,
    pub reward_token: ::std::string::String,
    pub orchestrator: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgValsetUpdatedClaim {
    fn default() -> &'a MsgValsetUpdatedClaim {
        <MsgValsetUpdatedClaim as ::protobuf::Message>::default_instance()
    }
}

impl MsgValsetUpdatedClaim {
    pub fn new() -> MsgValsetUpdatedClaim {
        ::std::default::Default::default()
    }

    // uint64 event_nonce = 1;


    pub fn get_event_nonce(&self) -> u64 {
        self.event_nonce
    }
    pub fn clear_event_nonce(&mut self) {
        self.event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_event_nonce(&mut self, v: u64) {
        self.event_nonce = v;
    }

    // uint64 valset_nonce = 2;


    pub fn get_valset_nonce(&self) -> u64 {
        self.valset_nonce
    }
    pub fn clear_valset_nonce(&mut self) {
        self.valset_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_valset_nonce(&mut self, v: u64) {
        self.valset_nonce = v;
    }

    // uint64 block_height = 3;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // repeated .injective.peggy.v1.BridgeValidator members = 4;


    pub fn get_members(&self) -> &[super::types::BridgeValidator] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<super::types::BridgeValidator>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<super::types::BridgeValidator> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<super::types::BridgeValidator> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }

    // string reward_amount = 5;


    pub fn get_reward_amount(&self) -> &str {
        &self.reward_amount
    }
    pub fn clear_reward_amount(&mut self) {
        self.reward_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_amount(&mut self, v: ::std::string::String) {
        self.reward_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_amount(&mut self) -> &mut ::std::string::String {
        &mut self.reward_amount
    }

    // Take field
    pub fn take_reward_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_amount, ::std::string::String::new())
    }

    // string reward_token = 6;


    pub fn get_reward_token(&self) -> &str {
        &self.reward_token
    }
    pub fn clear_reward_token(&mut self) {
        self.reward_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_token(&mut self, v: ::std::string::String) {
        self.reward_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_token(&mut self) -> &mut ::std::string::String {
        &mut self.reward_token
    }

    // Take field
    pub fn take_reward_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_token, ::std::string::String::new())
    }

    // string orchestrator = 7;


    pub fn get_orchestrator(&self) -> &str {
        &self.orchestrator
    }
    pub fn clear_orchestrator(&mut self) {
        self.orchestrator.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator(&mut self, v: ::std::string::String) {
        self.orchestrator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_orchestrator(&mut self) -> &mut ::std::string::String {
        &mut self.orchestrator
    }

    // Take field
    pub fn take_orchestrator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.orchestrator, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MsgValsetUpdatedClaim {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.valset_nonce = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_amount)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_token)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.orchestrator)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.valset_nonce != 0 {
            my_size += ::protobuf::rt::value_size(2, self.valset_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.reward_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reward_amount);
        }
        if !self.reward_token.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.reward_token);
        }
        if !self.orchestrator.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.orchestrator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.event_nonce != 0 {
            os.write_uint64(1, self.event_nonce)?;
        }
        if self.valset_nonce != 0 {
            os.write_uint64(2, self.valset_nonce)?;
        }
        if self.block_height != 0 {
            os.write_uint64(3, self.block_height)?;
        }
        for v in &self.members {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.reward_amount.is_empty() {
            os.write_string(5, &self.reward_amount)?;
        }
        if !self.reward_token.is_empty() {
            os.write_string(6, &self.reward_token)?;
        }
        if !self.orchestrator.is_empty() {
            os.write_string(7, &self.orchestrator)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgValsetUpdatedClaim {
        MsgValsetUpdatedClaim::new()
    }

    fn default_instance() -> &'static MsgValsetUpdatedClaim {
        static instance: ::protobuf::rt::LazyV2<MsgValsetUpdatedClaim> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgValsetUpdatedClaim::new)
    }
}

impl ::protobuf::Clear for MsgValsetUpdatedClaim {
    fn clear(&mut self) {
        self.event_nonce = 0;
        self.valset_nonce = 0;
        self.block_height = 0;
        self.members.clear();
        self.reward_amount.clear();
        self.reward_token.clear();
        self.orchestrator.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgValsetUpdatedClaim {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgValsetUpdatedClaimResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgValsetUpdatedClaimResponse {
    fn default() -> &'a MsgValsetUpdatedClaimResponse {
        <MsgValsetUpdatedClaimResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgValsetUpdatedClaimResponse {
    pub fn new() -> MsgValsetUpdatedClaimResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgValsetUpdatedClaimResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgValsetUpdatedClaimResponse {
        MsgValsetUpdatedClaimResponse::new()
    }

    fn default_instance() -> &'static MsgValsetUpdatedClaimResponse {
        static instance: ::protobuf::rt::LazyV2<MsgValsetUpdatedClaimResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgValsetUpdatedClaimResponse::new)
    }
}

impl ::protobuf::Clear for MsgValsetUpdatedClaimResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgValsetUpdatedClaimResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParams {
    // message fields
    pub authority: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<super::params::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParams {
    fn default() -> &'a MsgUpdateParams {
        <MsgUpdateParams as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParams {
    pub fn new() -> MsgUpdateParams {
        ::std::default::Default::default()
    }

    // string authority = 1;


    pub fn get_authority(&self) -> &str {
        &self.authority
    }
    pub fn clear_authority(&mut self) {
        self.authority.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority(&mut self, v: ::std::string::String) {
        self.authority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority(&mut self) -> &mut ::std::string::String {
        &mut self.authority
    }

    // Take field
    pub fn take_authority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority, ::std::string::String::new())
    }

    // .injective.peggy.v1.Params params = 2;


    pub fn get_params(&self) -> &super::params::Params {
        self.params.as_ref().unwrap_or_else(|| <super::params::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::params::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::params::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::params::Params {
        self.params.take().unwrap_or_else(|| super::params::Params::new())
    }
}

impl ::protobuf::Message for MsgUpdateParams {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.authority.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authority);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.authority.is_empty() {
            os.write_string(1, &self.authority)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParams {
        MsgUpdateParams::new()
    }

    fn default_instance() -> &'static MsgUpdateParams {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParams::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParams {
    fn clear(&mut self) {
        self.authority.clear();
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParamsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParamsResponse {
    fn default() -> &'a MsgUpdateParamsResponse {
        <MsgUpdateParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParamsResponse {
    pub fn new() -> MsgUpdateParamsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgUpdateParamsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParamsResponse {
        MsgUpdateParamsResponse::new()
    }

    fn default_instance() -> &'static MsgUpdateParamsResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParamsResponse::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParamsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

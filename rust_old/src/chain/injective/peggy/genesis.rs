// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/genesis.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GenesisState {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::params::Params>,
    pub last_observed_nonce: u64,
    pub valsets: ::protobuf::RepeatedField<super::types::Valset>,
    pub valset_confirms: ::protobuf::RepeatedField<super::msgs::MsgValsetConfirm>,
    pub batches: ::protobuf::RepeatedField<super::batch::OutgoingTxBatch>,
    pub batch_confirms: ::protobuf::RepeatedField<super::msgs::MsgConfirmBatch>,
    pub attestations: ::protobuf::RepeatedField<super::attestation::Attestation>,
    pub orchestrator_addresses: ::protobuf::RepeatedField<super::msgs::MsgSetOrchestratorAddresses>,
    pub erc20_to_denoms: ::protobuf::RepeatedField<super::types::ERC20ToDenom>,
    pub unbatched_transfers: ::protobuf::RepeatedField<super::batch::OutgoingTransferTx>,
    pub last_observed_ethereum_height: u64,
    pub last_outgoing_batch_id: u64,
    pub last_outgoing_pool_id: u64,
    pub last_observed_valset: ::protobuf::SingularPtrField<super::types::Valset>,
    pub ethereum_blacklist: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenesisState {
    fn default() -> &'a GenesisState {
        <GenesisState as ::protobuf::Message>::default_instance()
    }
}

impl GenesisState {
    pub fn new() -> GenesisState {
        ::std::default::Default::default()
    }

    // .injective.peggy.v1.Params params = 1;


    pub fn get_params(&self) -> &super::params::Params {
        self.params.as_ref().unwrap_or_else(|| <super::params::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::params::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::params::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::params::Params {
        self.params.take().unwrap_or_else(|| super::params::Params::new())
    }

    // uint64 last_observed_nonce = 2;


    pub fn get_last_observed_nonce(&self) -> u64 {
        self.last_observed_nonce
    }
    pub fn clear_last_observed_nonce(&mut self) {
        self.last_observed_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_observed_nonce(&mut self, v: u64) {
        self.last_observed_nonce = v;
    }

    // repeated .injective.peggy.v1.Valset valsets = 3;


    pub fn get_valsets(&self) -> &[super::types::Valset] {
        &self.valsets
    }
    pub fn clear_valsets(&mut self) {
        self.valsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_valsets(&mut self, v: ::protobuf::RepeatedField<super::types::Valset>) {
        self.valsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_valsets(&mut self) -> &mut ::protobuf::RepeatedField<super::types::Valset> {
        &mut self.valsets
    }

    // Take field
    pub fn take_valsets(&mut self) -> ::protobuf::RepeatedField<super::types::Valset> {
        ::std::mem::replace(&mut self.valsets, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.MsgValsetConfirm valset_confirms = 4;


    pub fn get_valset_confirms(&self) -> &[super::msgs::MsgValsetConfirm] {
        &self.valset_confirms
    }
    pub fn clear_valset_confirms(&mut self) {
        self.valset_confirms.clear();
    }

    // Param is passed by value, moved
    pub fn set_valset_confirms(&mut self, v: ::protobuf::RepeatedField<super::msgs::MsgValsetConfirm>) {
        self.valset_confirms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_valset_confirms(&mut self) -> &mut ::protobuf::RepeatedField<super::msgs::MsgValsetConfirm> {
        &mut self.valset_confirms
    }

    // Take field
    pub fn take_valset_confirms(&mut self) -> ::protobuf::RepeatedField<super::msgs::MsgValsetConfirm> {
        ::std::mem::replace(&mut self.valset_confirms, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.OutgoingTxBatch batches = 5;


    pub fn get_batches(&self) -> &[super::batch::OutgoingTxBatch] {
        &self.batches
    }
    pub fn clear_batches(&mut self) {
        self.batches.clear();
    }

    // Param is passed by value, moved
    pub fn set_batches(&mut self, v: ::protobuf::RepeatedField<super::batch::OutgoingTxBatch>) {
        self.batches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batches(&mut self) -> &mut ::protobuf::RepeatedField<super::batch::OutgoingTxBatch> {
        &mut self.batches
    }

    // Take field
    pub fn take_batches(&mut self) -> ::protobuf::RepeatedField<super::batch::OutgoingTxBatch> {
        ::std::mem::replace(&mut self.batches, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.MsgConfirmBatch batch_confirms = 6;


    pub fn get_batch_confirms(&self) -> &[super::msgs::MsgConfirmBatch] {
        &self.batch_confirms
    }
    pub fn clear_batch_confirms(&mut self) {
        self.batch_confirms.clear();
    }

    // Param is passed by value, moved
    pub fn set_batch_confirms(&mut self, v: ::protobuf::RepeatedField<super::msgs::MsgConfirmBatch>) {
        self.batch_confirms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_batch_confirms(&mut self) -> &mut ::protobuf::RepeatedField<super::msgs::MsgConfirmBatch> {
        &mut self.batch_confirms
    }

    // Take field
    pub fn take_batch_confirms(&mut self) -> ::protobuf::RepeatedField<super::msgs::MsgConfirmBatch> {
        ::std::mem::replace(&mut self.batch_confirms, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.Attestation attestations = 7;


    pub fn get_attestations(&self) -> &[super::attestation::Attestation] {
        &self.attestations
    }
    pub fn clear_attestations(&mut self) {
        self.attestations.clear();
    }

    // Param is passed by value, moved
    pub fn set_attestations(&mut self, v: ::protobuf::RepeatedField<super::attestation::Attestation>) {
        self.attestations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attestations(&mut self) -> &mut ::protobuf::RepeatedField<super::attestation::Attestation> {
        &mut self.attestations
    }

    // Take field
    pub fn take_attestations(&mut self) -> ::protobuf::RepeatedField<super::attestation::Attestation> {
        ::std::mem::replace(&mut self.attestations, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.MsgSetOrchestratorAddresses orchestrator_addresses = 8;


    pub fn get_orchestrator_addresses(&self) -> &[super::msgs::MsgSetOrchestratorAddresses] {
        &self.orchestrator_addresses
    }
    pub fn clear_orchestrator_addresses(&mut self) {
        self.orchestrator_addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_orchestrator_addresses(&mut self, v: ::protobuf::RepeatedField<super::msgs::MsgSetOrchestratorAddresses>) {
        self.orchestrator_addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_orchestrator_addresses(&mut self) -> &mut ::protobuf::RepeatedField<super::msgs::MsgSetOrchestratorAddresses> {
        &mut self.orchestrator_addresses
    }

    // Take field
    pub fn take_orchestrator_addresses(&mut self) -> ::protobuf::RepeatedField<super::msgs::MsgSetOrchestratorAddresses> {
        ::std::mem::replace(&mut self.orchestrator_addresses, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.ERC20ToDenom erc20_to_denoms = 9;


    pub fn get_erc20_to_denoms(&self) -> &[super::types::ERC20ToDenom] {
        &self.erc20_to_denoms
    }
    pub fn clear_erc20_to_denoms(&mut self) {
        self.erc20_to_denoms.clear();
    }

    // Param is passed by value, moved
    pub fn set_erc20_to_denoms(&mut self, v: ::protobuf::RepeatedField<super::types::ERC20ToDenom>) {
        self.erc20_to_denoms = v;
    }

    // Mutable pointer to the field.
    pub fn mut_erc20_to_denoms(&mut self) -> &mut ::protobuf::RepeatedField<super::types::ERC20ToDenom> {
        &mut self.erc20_to_denoms
    }

    // Take field
    pub fn take_erc20_to_denoms(&mut self) -> ::protobuf::RepeatedField<super::types::ERC20ToDenom> {
        ::std::mem::replace(&mut self.erc20_to_denoms, ::protobuf::RepeatedField::new())
    }

    // repeated .injective.peggy.v1.OutgoingTransferTx unbatched_transfers = 10;


    pub fn get_unbatched_transfers(&self) -> &[super::batch::OutgoingTransferTx] {
        &self.unbatched_transfers
    }
    pub fn clear_unbatched_transfers(&mut self) {
        self.unbatched_transfers.clear();
    }

    // Param is passed by value, moved
    pub fn set_unbatched_transfers(&mut self, v: ::protobuf::RepeatedField<super::batch::OutgoingTransferTx>) {
        self.unbatched_transfers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_unbatched_transfers(&mut self) -> &mut ::protobuf::RepeatedField<super::batch::OutgoingTransferTx> {
        &mut self.unbatched_transfers
    }

    // Take field
    pub fn take_unbatched_transfers(&mut self) -> ::protobuf::RepeatedField<super::batch::OutgoingTransferTx> {
        ::std::mem::replace(&mut self.unbatched_transfers, ::protobuf::RepeatedField::new())
    }

    // uint64 last_observed_ethereum_height = 11;


    pub fn get_last_observed_ethereum_height(&self) -> u64 {
        self.last_observed_ethereum_height
    }
    pub fn clear_last_observed_ethereum_height(&mut self) {
        self.last_observed_ethereum_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_observed_ethereum_height(&mut self, v: u64) {
        self.last_observed_ethereum_height = v;
    }

    // uint64 last_outgoing_batch_id = 12;


    pub fn get_last_outgoing_batch_id(&self) -> u64 {
        self.last_outgoing_batch_id
    }
    pub fn clear_last_outgoing_batch_id(&mut self) {
        self.last_outgoing_batch_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_outgoing_batch_id(&mut self, v: u64) {
        self.last_outgoing_batch_id = v;
    }

    // uint64 last_outgoing_pool_id = 13;


    pub fn get_last_outgoing_pool_id(&self) -> u64 {
        self.last_outgoing_pool_id
    }
    pub fn clear_last_outgoing_pool_id(&mut self) {
        self.last_outgoing_pool_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_outgoing_pool_id(&mut self, v: u64) {
        self.last_outgoing_pool_id = v;
    }

    // .injective.peggy.v1.Valset last_observed_valset = 14;


    pub fn get_last_observed_valset(&self) -> &super::types::Valset {
        self.last_observed_valset.as_ref().unwrap_or_else(|| <super::types::Valset as ::protobuf::Message>::default_instance())
    }
    pub fn clear_last_observed_valset(&mut self) {
        self.last_observed_valset.clear();
    }

    pub fn has_last_observed_valset(&self) -> bool {
        self.last_observed_valset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_last_observed_valset(&mut self, v: super::types::Valset) {
        self.last_observed_valset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_last_observed_valset(&mut self) -> &mut super::types::Valset {
        if self.last_observed_valset.is_none() {
            self.last_observed_valset.set_default();
        }
        self.last_observed_valset.as_mut().unwrap()
    }

    // Take field
    pub fn take_last_observed_valset(&mut self) -> super::types::Valset {
        self.last_observed_valset.take().unwrap_or_else(|| super::types::Valset::new())
    }

    // repeated string ethereum_blacklist = 15;


    pub fn get_ethereum_blacklist(&self) -> &[::std::string::String] {
        &self.ethereum_blacklist
    }
    pub fn clear_ethereum_blacklist(&mut self) {
        self.ethereum_blacklist.clear();
    }

    // Param is passed by value, moved
    pub fn set_ethereum_blacklist(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.ethereum_blacklist = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ethereum_blacklist(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.ethereum_blacklist
    }

    // Take field
    pub fn take_ethereum_blacklist(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.ethereum_blacklist, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GenesisState {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.valsets {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.valset_confirms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.batches {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.batch_confirms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.attestations {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.orchestrator_addresses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.erc20_to_denoms {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.unbatched_transfers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.last_observed_valset {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_observed_nonce = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.valsets)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.valset_confirms)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batches)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.batch_confirms)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.attestations)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.orchestrator_addresses)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.erc20_to_denoms)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.unbatched_transfers)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_observed_ethereum_height = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_outgoing_batch_id = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_outgoing_pool_id = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.last_observed_valset)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.ethereum_blacklist)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.last_observed_nonce != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_observed_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.valsets {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.valset_confirms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.batches {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.batch_confirms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.attestations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.orchestrator_addresses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.erc20_to_denoms {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.unbatched_transfers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.last_observed_ethereum_height != 0 {
            my_size += ::protobuf::rt::value_size(11, self.last_observed_ethereum_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_outgoing_batch_id != 0 {
            my_size += ::protobuf::rt::value_size(12, self.last_outgoing_batch_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_outgoing_pool_id != 0 {
            my_size += ::protobuf::rt::value_size(13, self.last_outgoing_pool_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.last_observed_valset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.ethereum_blacklist {
            my_size += ::protobuf::rt::string_size(15, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.last_observed_nonce != 0 {
            os.write_uint64(2, self.last_observed_nonce)?;
        }
        for v in &self.valsets {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.valset_confirms {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.batches {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.batch_confirms {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.attestations {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.orchestrator_addresses {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.erc20_to_denoms {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.unbatched_transfers {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.last_observed_ethereum_height != 0 {
            os.write_uint64(11, self.last_observed_ethereum_height)?;
        }
        if self.last_outgoing_batch_id != 0 {
            os.write_uint64(12, self.last_outgoing_batch_id)?;
        }
        if self.last_outgoing_pool_id != 0 {
            os.write_uint64(13, self.last_outgoing_pool_id)?;
        }
        if let Some(ref v) = self.last_observed_valset.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.ethereum_blacklist {
            os.write_string(15, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenesisState {
        GenesisState::new()
    }

    fn default_instance() -> &'static GenesisState {
        static instance: ::protobuf::rt::LazyV2<GenesisState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenesisState::new)
    }
}

impl ::protobuf::Clear for GenesisState {
    fn clear(&mut self) {
        self.params.clear();
        self.last_observed_nonce = 0;
        self.valsets.clear();
        self.valset_confirms.clear();
        self.batches.clear();
        self.batch_confirms.clear();
        self.attestations.clear();
        self.orchestrator_addresses.clear();
        self.erc20_to_denoms.clear();
        self.unbatched_transfers.clear();
        self.last_observed_ethereum_height = 0;
        self.last_outgoing_batch_id = 0;
        self.last_outgoing_pool_id = 0;
        self.last_observed_valset.clear();
        self.ethereum_blacklist.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GenesisState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

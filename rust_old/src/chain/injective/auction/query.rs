// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/auction/v1beta1/query.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryAuctionParamsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryAuctionParamsRequest {
    fn default() -> &'a QueryAuctionParamsRequest {
        <QueryAuctionParamsRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryAuctionParamsRequest {
    pub fn new() -> QueryAuctionParamsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryAuctionParamsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryAuctionParamsRequest {
        QueryAuctionParamsRequest::new()
    }

    fn default_instance() -> &'static QueryAuctionParamsRequest {
        static instance: ::protobuf::rt::LazyV2<QueryAuctionParamsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryAuctionParamsRequest::new)
    }
}

impl ::protobuf::Clear for QueryAuctionParamsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAuctionParamsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryAuctionParamsResponse {
    // message fields
    pub params: ::protobuf::SingularPtrField<super::auction::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryAuctionParamsResponse {
    fn default() -> &'a QueryAuctionParamsResponse {
        <QueryAuctionParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAuctionParamsResponse {
    pub fn new() -> QueryAuctionParamsResponse {
        ::std::default::Default::default()
    }

    // .injective.auction.v1beta1.Params params = 1;


    pub fn get_params(&self) -> &super::auction::Params {
        self.params.as_ref().unwrap_or_else(|| <super::auction::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::auction::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::auction::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::auction::Params {
        self.params.take().unwrap_or_else(|| super::auction::Params::new())
    }
}

impl ::protobuf::Message for QueryAuctionParamsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryAuctionParamsResponse {
        QueryAuctionParamsResponse::new()
    }

    fn default_instance() -> &'static QueryAuctionParamsResponse {
        static instance: ::protobuf::rt::LazyV2<QueryAuctionParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryAuctionParamsResponse::new)
    }
}

impl ::protobuf::Clear for QueryAuctionParamsResponse {
    fn clear(&mut self) {
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAuctionParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryCurrentAuctionBasketRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCurrentAuctionBasketRequest {
    fn default() -> &'a QueryCurrentAuctionBasketRequest {
        <QueryCurrentAuctionBasketRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryCurrentAuctionBasketRequest {
    pub fn new() -> QueryCurrentAuctionBasketRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryCurrentAuctionBasketRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCurrentAuctionBasketRequest {
        QueryCurrentAuctionBasketRequest::new()
    }

    fn default_instance() -> &'static QueryCurrentAuctionBasketRequest {
        static instance: ::protobuf::rt::LazyV2<QueryCurrentAuctionBasketRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCurrentAuctionBasketRequest::new)
    }
}

impl ::protobuf::Clear for QueryCurrentAuctionBasketRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCurrentAuctionBasketRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryCurrentAuctionBasketResponse {
    // message fields
    pub amount: ::protobuf::RepeatedField<super::coin::Coin>,
    pub auctionRound: u64,
    pub auctionClosingTime: i64,
    pub highestBidder: ::std::string::String,
    pub highestBidAmount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryCurrentAuctionBasketResponse {
    fn default() -> &'a QueryCurrentAuctionBasketResponse {
        <QueryCurrentAuctionBasketResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryCurrentAuctionBasketResponse {
    pub fn new() -> QueryCurrentAuctionBasketResponse {
        ::std::default::Default::default()
    }

    // repeated .cosmos.base.v1beta1.Coin amount = 1;


    pub fn get_amount(&self) -> &[super::coin::Coin] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    pub fn mut_amount(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.amount, ::protobuf::RepeatedField::new())
    }

    // uint64 auctionRound = 2;


    pub fn get_auctionRound(&self) -> u64 {
        self.auctionRound
    }
    pub fn clear_auctionRound(&mut self) {
        self.auctionRound = 0;
    }

    // Param is passed by value, moved
    pub fn set_auctionRound(&mut self, v: u64) {
        self.auctionRound = v;
    }

    // int64 auctionClosingTime = 3;


    pub fn get_auctionClosingTime(&self) -> i64 {
        self.auctionClosingTime
    }
    pub fn clear_auctionClosingTime(&mut self) {
        self.auctionClosingTime = 0;
    }

    // Param is passed by value, moved
    pub fn set_auctionClosingTime(&mut self, v: i64) {
        self.auctionClosingTime = v;
    }

    // string highestBidder = 4;


    pub fn get_highestBidder(&self) -> &str {
        &self.highestBidder
    }
    pub fn clear_highestBidder(&mut self) {
        self.highestBidder.clear();
    }

    // Param is passed by value, moved
    pub fn set_highestBidder(&mut self, v: ::std::string::String) {
        self.highestBidder = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_highestBidder(&mut self) -> &mut ::std::string::String {
        &mut self.highestBidder
    }

    // Take field
    pub fn take_highestBidder(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.highestBidder, ::std::string::String::new())
    }

    // string highestBidAmount = 5;


    pub fn get_highestBidAmount(&self) -> &str {
        &self.highestBidAmount
    }
    pub fn clear_highestBidAmount(&mut self) {
        self.highestBidAmount.clear();
    }

    // Param is passed by value, moved
    pub fn set_highestBidAmount(&mut self, v: ::std::string::String) {
        self.highestBidAmount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_highestBidAmount(&mut self) -> &mut ::std::string::String {
        &mut self.highestBidAmount
    }

    // Take field
    pub fn take_highestBidAmount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.highestBidAmount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for QueryCurrentAuctionBasketResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.amount)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.auctionRound = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.auctionClosingTime = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.highestBidder)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.highestBidAmount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.amount {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.auctionRound != 0 {
            my_size += ::protobuf::rt::value_size(2, self.auctionRound, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.auctionClosingTime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.auctionClosingTime, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.highestBidder.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.highestBidder);
        }
        if !self.highestBidAmount.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.highestBidAmount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.amount {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.auctionRound != 0 {
            os.write_uint64(2, self.auctionRound)?;
        }
        if self.auctionClosingTime != 0 {
            os.write_int64(3, self.auctionClosingTime)?;
        }
        if !self.highestBidder.is_empty() {
            os.write_string(4, &self.highestBidder)?;
        }
        if !self.highestBidAmount.is_empty() {
            os.write_string(5, &self.highestBidAmount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryCurrentAuctionBasketResponse {
        QueryCurrentAuctionBasketResponse::new()
    }

    fn default_instance() -> &'static QueryCurrentAuctionBasketResponse {
        static instance: ::protobuf::rt::LazyV2<QueryCurrentAuctionBasketResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryCurrentAuctionBasketResponse::new)
    }
}

impl ::protobuf::Clear for QueryCurrentAuctionBasketResponse {
    fn clear(&mut self) {
        self.amount.clear();
        self.auctionRound = 0;
        self.auctionClosingTime = 0;
        self.highestBidder.clear();
        self.highestBidAmount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryCurrentAuctionBasketResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryModuleStateRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryModuleStateRequest {
    fn default() -> &'a QueryModuleStateRequest {
        <QueryModuleStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryModuleStateRequest {
    pub fn new() -> QueryModuleStateRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for QueryModuleStateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryModuleStateRequest {
        QueryModuleStateRequest::new()
    }

    fn default_instance() -> &'static QueryModuleStateRequest {
        static instance: ::protobuf::rt::LazyV2<QueryModuleStateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryModuleStateRequest::new)
    }
}

impl ::protobuf::Clear for QueryModuleStateRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryModuleStateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryModuleStateResponse {
    // message fields
    pub state: ::protobuf::SingularPtrField<super::genesis::GenesisState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryModuleStateResponse {
    fn default() -> &'a QueryModuleStateResponse {
        <QueryModuleStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryModuleStateResponse {
    pub fn new() -> QueryModuleStateResponse {
        ::std::default::Default::default()
    }

    // .injective.auction.v1beta1.GenesisState state = 1;


    pub fn get_state(&self) -> &super::genesis::GenesisState {
        self.state.as_ref().unwrap_or_else(|| <super::genesis::GenesisState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: super::genesis::GenesisState) {
        self.state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut super::genesis::GenesisState {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> super::genesis::GenesisState {
        self.state.take().unwrap_or_else(|| super::genesis::GenesisState::new())
    }
}

impl ::protobuf::Message for QueryModuleStateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryModuleStateResponse {
        QueryModuleStateResponse::new()
    }

    fn default_instance() -> &'static QueryModuleStateResponse {
        static instance: ::protobuf::rt::LazyV2<QueryModuleStateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryModuleStateResponse::new)
    }
}

impl ::protobuf::Clear for QueryModuleStateResponse {
    fn clear(&mut self) {
        self.state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryModuleStateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

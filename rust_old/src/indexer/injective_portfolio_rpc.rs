// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective_portfolio_rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AccountPortfolioRequest {
    // message fields
    pub account_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountPortfolioRequest {
    fn default() -> &'a AccountPortfolioRequest {
        <AccountPortfolioRequest as ::protobuf::Message>::default_instance()
    }
}

impl AccountPortfolioRequest {
    pub fn new() -> AccountPortfolioRequest {
        ::std::default::Default::default()
    }

    // string account_address = 1;


    pub fn get_account_address(&self) -> &str {
        &self.account_address
    }
    pub fn clear_account_address(&mut self) {
        self.account_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_address(&mut self, v: ::std::string::String) {
        self.account_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_address(&mut self) -> &mut ::std::string::String {
        &mut self.account_address
    }

    // Take field
    pub fn take_account_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AccountPortfolioRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_address.is_empty() {
            os.write_string(1, &self.account_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountPortfolioRequest {
        AccountPortfolioRequest::new()
    }

    fn default_instance() -> &'static AccountPortfolioRequest {
        static instance: ::protobuf::rt::LazyV2<AccountPortfolioRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountPortfolioRequest::new)
    }
}

impl ::protobuf::Clear for AccountPortfolioRequest {
    fn clear(&mut self) {
        self.account_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountPortfolioRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct AccountPortfolioResponse {
    // message fields
    pub portfolio: ::protobuf::SingularPtrField<Portfolio>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccountPortfolioResponse {
    fn default() -> &'a AccountPortfolioResponse {
        <AccountPortfolioResponse as ::protobuf::Message>::default_instance()
    }
}

impl AccountPortfolioResponse {
    pub fn new() -> AccountPortfolioResponse {
        ::std::default::Default::default()
    }

    // .injective_portfolio_rpc.Portfolio portfolio = 1;


    pub fn get_portfolio(&self) -> &Portfolio {
        self.portfolio.as_ref().unwrap_or_else(|| <Portfolio as ::protobuf::Message>::default_instance())
    }
    pub fn clear_portfolio(&mut self) {
        self.portfolio.clear();
    }

    pub fn has_portfolio(&self) -> bool {
        self.portfolio.is_some()
    }

    // Param is passed by value, moved
    pub fn set_portfolio(&mut self, v: Portfolio) {
        self.portfolio = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_portfolio(&mut self) -> &mut Portfolio {
        if self.portfolio.is_none() {
            self.portfolio.set_default();
        }
        self.portfolio.as_mut().unwrap()
    }

    // Take field
    pub fn take_portfolio(&mut self) -> Portfolio {
        self.portfolio.take().unwrap_or_else(|| Portfolio::new())
    }
}

impl ::protobuf::Message for AccountPortfolioResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.portfolio {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.portfolio)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.portfolio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.portfolio.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccountPortfolioResponse {
        AccountPortfolioResponse::new()
    }

    fn default_instance() -> &'static AccountPortfolioResponse {
        static instance: ::protobuf::rt::LazyV2<AccountPortfolioResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccountPortfolioResponse::new)
    }
}

impl ::protobuf::Clear for AccountPortfolioResponse {
    fn clear(&mut self) {
        self.portfolio.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountPortfolioResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Portfolio {
    // message fields
    pub account_address: ::std::string::String,
    pub bank_balances: ::protobuf::RepeatedField<Coin>,
    pub subaccounts: ::protobuf::RepeatedField<SubaccountBalanceV2>,
    pub positions_with_upnl: ::protobuf::RepeatedField<PositionsWithUPNL>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Portfolio {
    fn default() -> &'a Portfolio {
        <Portfolio as ::protobuf::Message>::default_instance()
    }
}

impl Portfolio {
    pub fn new() -> Portfolio {
        ::std::default::Default::default()
    }

    // string account_address = 1;


    pub fn get_account_address(&self) -> &str {
        &self.account_address
    }
    pub fn clear_account_address(&mut self) {
        self.account_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_address(&mut self, v: ::std::string::String) {
        self.account_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_address(&mut self) -> &mut ::std::string::String {
        &mut self.account_address
    }

    // Take field
    pub fn take_account_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_address, ::std::string::String::new())
    }

    // repeated .injective_portfolio_rpc.Coin bank_balances = 2;


    pub fn get_bank_balances(&self) -> &[Coin] {
        &self.bank_balances
    }
    pub fn clear_bank_balances(&mut self) {
        self.bank_balances.clear();
    }

    // Param is passed by value, moved
    pub fn set_bank_balances(&mut self, v: ::protobuf::RepeatedField<Coin>) {
        self.bank_balances = v;
    }

    // Mutable pointer to the field.
    pub fn mut_bank_balances(&mut self) -> &mut ::protobuf::RepeatedField<Coin> {
        &mut self.bank_balances
    }

    // Take field
    pub fn take_bank_balances(&mut self) -> ::protobuf::RepeatedField<Coin> {
        ::std::mem::replace(&mut self.bank_balances, ::protobuf::RepeatedField::new())
    }

    // repeated .injective_portfolio_rpc.SubaccountBalanceV2 subaccounts = 3;


    pub fn get_subaccounts(&self) -> &[SubaccountBalanceV2] {
        &self.subaccounts
    }
    pub fn clear_subaccounts(&mut self) {
        self.subaccounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccounts(&mut self, v: ::protobuf::RepeatedField<SubaccountBalanceV2>) {
        self.subaccounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subaccounts(&mut self) -> &mut ::protobuf::RepeatedField<SubaccountBalanceV2> {
        &mut self.subaccounts
    }

    // Take field
    pub fn take_subaccounts(&mut self) -> ::protobuf::RepeatedField<SubaccountBalanceV2> {
        ::std::mem::replace(&mut self.subaccounts, ::protobuf::RepeatedField::new())
    }

    // repeated .injective_portfolio_rpc.PositionsWithUPNL positions_with_upnl = 4;


    pub fn get_positions_with_upnl(&self) -> &[PositionsWithUPNL] {
        &self.positions_with_upnl
    }
    pub fn clear_positions_with_upnl(&mut self) {
        self.positions_with_upnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_positions_with_upnl(&mut self, v: ::protobuf::RepeatedField<PositionsWithUPNL>) {
        self.positions_with_upnl = v;
    }

    // Mutable pointer to the field.
    pub fn mut_positions_with_upnl(&mut self) -> &mut ::protobuf::RepeatedField<PositionsWithUPNL> {
        &mut self.positions_with_upnl
    }

    // Take field
    pub fn take_positions_with_upnl(&mut self) -> ::protobuf::RepeatedField<PositionsWithUPNL> {
        ::std::mem::replace(&mut self.positions_with_upnl, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Portfolio {
    fn is_initialized(&self) -> bool {
        for v in &self.bank_balances {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.subaccounts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.positions_with_upnl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.bank_balances)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subaccounts)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.positions_with_upnl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_address);
        }
        for value in &self.bank_balances {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.subaccounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.positions_with_upnl {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_address.is_empty() {
            os.write_string(1, &self.account_address)?;
        }
        for v in &self.bank_balances {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.subaccounts {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.positions_with_upnl {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Portfolio {
        Portfolio::new()
    }

    fn default_instance() -> &'static Portfolio {
        static instance: ::protobuf::rt::LazyV2<Portfolio> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Portfolio::new)
    }
}

impl ::protobuf::Clear for Portfolio {
    fn clear(&mut self) {
        self.account_address.clear();
        self.bank_balances.clear();
        self.subaccounts.clear();
        self.positions_with_upnl.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Portfolio {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Coin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Coin {
    fn default() -> &'a Coin {
        <Coin as ::protobuf::Message>::default_instance()
    }
}

impl Coin {
    pub fn new() -> Coin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Coin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Coin {
        Coin::new()
    }

    fn default_instance() -> &'static Coin {
        static instance: ::protobuf::rt::LazyV2<Coin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Coin::new)
    }
}

impl ::protobuf::Clear for Coin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Coin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubaccountBalanceV2 {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub denom: ::std::string::String,
    pub deposit: ::protobuf::SingularPtrField<SubaccountDeposit>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubaccountBalanceV2 {
    fn default() -> &'a SubaccountBalanceV2 {
        <SubaccountBalanceV2 as ::protobuf::Message>::default_instance()
    }
}

impl SubaccountBalanceV2 {
    pub fn new() -> SubaccountBalanceV2 {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // string denom = 2;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // .injective_portfolio_rpc.SubaccountDeposit deposit = 3;


    pub fn get_deposit(&self) -> &SubaccountDeposit {
        self.deposit.as_ref().unwrap_or_else(|| <SubaccountDeposit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    pub fn has_deposit(&self) -> bool {
        self.deposit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: SubaccountDeposit) {
        self.deposit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut SubaccountDeposit {
        if self.deposit.is_none() {
            self.deposit.set_default();
        }
        self.deposit.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit(&mut self) -> SubaccountDeposit {
        self.deposit.take().unwrap_or_else(|| SubaccountDeposit::new())
    }
}

impl ::protobuf::Message for SubaccountBalanceV2 {
    fn is_initialized(&self) -> bool {
        for v in &self.deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.denom);
        }
        if let Some(ref v) = self.deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        if !self.denom.is_empty() {
            os.write_string(2, &self.denom)?;
        }
        if let Some(ref v) = self.deposit.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubaccountBalanceV2 {
        SubaccountBalanceV2::new()
    }

    fn default_instance() -> &'static SubaccountBalanceV2 {
        static instance: ::protobuf::rt::LazyV2<SubaccountBalanceV2> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubaccountBalanceV2::new)
    }
}

impl ::protobuf::Clear for SubaccountBalanceV2 {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.denom.clear();
        self.deposit.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SubaccountBalanceV2 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SubaccountDeposit {
    // message fields
    pub total_balance: ::std::string::String,
    pub available_balance: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubaccountDeposit {
    fn default() -> &'a SubaccountDeposit {
        <SubaccountDeposit as ::protobuf::Message>::default_instance()
    }
}

impl SubaccountDeposit {
    pub fn new() -> SubaccountDeposit {
        ::std::default::Default::default()
    }

    // string total_balance = 1;


    pub fn get_total_balance(&self) -> &str {
        &self.total_balance
    }
    pub fn clear_total_balance(&mut self) {
        self.total_balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_balance(&mut self, v: ::std::string::String) {
        self.total_balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_total_balance(&mut self) -> &mut ::std::string::String {
        &mut self.total_balance
    }

    // Take field
    pub fn take_total_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.total_balance, ::std::string::String::new())
    }

    // string available_balance = 2;


    pub fn get_available_balance(&self) -> &str {
        &self.available_balance
    }
    pub fn clear_available_balance(&mut self) {
        self.available_balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_available_balance(&mut self, v: ::std::string::String) {
        self.available_balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_available_balance(&mut self) -> &mut ::std::string::String {
        &mut self.available_balance
    }

    // Take field
    pub fn take_available_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.available_balance, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SubaccountDeposit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.total_balance)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.available_balance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.total_balance.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.total_balance);
        }
        if !self.available_balance.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.available_balance);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.total_balance.is_empty() {
            os.write_string(1, &self.total_balance)?;
        }
        if !self.available_balance.is_empty() {
            os.write_string(2, &self.available_balance)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubaccountDeposit {
        SubaccountDeposit::new()
    }

    fn default_instance() -> &'static SubaccountDeposit {
        static instance: ::protobuf::rt::LazyV2<SubaccountDeposit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubaccountDeposit::new)
    }
}

impl ::protobuf::Clear for SubaccountDeposit {
    fn clear(&mut self) {
        self.total_balance.clear();
        self.available_balance.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SubaccountDeposit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PositionsWithUPNL {
    // message fields
    pub position: ::protobuf::SingularPtrField<DerivativePosition>,
    pub unrealized_pnl: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PositionsWithUPNL {
    fn default() -> &'a PositionsWithUPNL {
        <PositionsWithUPNL as ::protobuf::Message>::default_instance()
    }
}

impl PositionsWithUPNL {
    pub fn new() -> PositionsWithUPNL {
        ::std::default::Default::default()
    }

    // .injective_portfolio_rpc.DerivativePosition position = 1;


    pub fn get_position(&self) -> &DerivativePosition {
        self.position.as_ref().unwrap_or_else(|| <DerivativePosition as ::protobuf::Message>::default_instance())
    }
    pub fn clear_position(&mut self) {
        self.position.clear();
    }

    pub fn has_position(&self) -> bool {
        self.position.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position(&mut self, v: DerivativePosition) {
        self.position = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position(&mut self) -> &mut DerivativePosition {
        if self.position.is_none() {
            self.position.set_default();
        }
        self.position.as_mut().unwrap()
    }

    // Take field
    pub fn take_position(&mut self) -> DerivativePosition {
        self.position.take().unwrap_or_else(|| DerivativePosition::new())
    }

    // string unrealized_pnl = 2;


    pub fn get_unrealized_pnl(&self) -> &str {
        &self.unrealized_pnl
    }
    pub fn clear_unrealized_pnl(&mut self) {
        self.unrealized_pnl.clear();
    }

    // Param is passed by value, moved
    pub fn set_unrealized_pnl(&mut self, v: ::std::string::String) {
        self.unrealized_pnl = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unrealized_pnl(&mut self) -> &mut ::std::string::String {
        &mut self.unrealized_pnl
    }

    // Take field
    pub fn take_unrealized_pnl(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unrealized_pnl, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PositionsWithUPNL {
    fn is_initialized(&self) -> bool {
        for v in &self.position {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unrealized_pnl)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.position.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.unrealized_pnl.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.unrealized_pnl);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.position.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.unrealized_pnl.is_empty() {
            os.write_string(2, &self.unrealized_pnl)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PositionsWithUPNL {
        PositionsWithUPNL::new()
    }

    fn default_instance() -> &'static PositionsWithUPNL {
        static instance: ::protobuf::rt::LazyV2<PositionsWithUPNL> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PositionsWithUPNL::new)
    }
}

impl ::protobuf::Clear for PositionsWithUPNL {
    fn clear(&mut self) {
        self.position.clear();
        self.unrealized_pnl.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PositionsWithUPNL {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct DerivativePosition {
    // message fields
    pub ticker: ::std::string::String,
    pub market_id: ::std::string::String,
    pub subaccount_id: ::std::string::String,
    pub direction: ::std::string::String,
    pub quantity: ::std::string::String,
    pub entry_price: ::std::string::String,
    pub margin: ::std::string::String,
    pub liquidation_price: ::std::string::String,
    pub mark_price: ::std::string::String,
    pub aggregate_reduce_only_quantity: ::std::string::String,
    pub updated_at: i64,
    pub created_at: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DerivativePosition {
    fn default() -> &'a DerivativePosition {
        <DerivativePosition as ::protobuf::Message>::default_instance()
    }
}

impl DerivativePosition {
    pub fn new() -> DerivativePosition {
        ::std::default::Default::default()
    }

    // string ticker = 1;


    pub fn get_ticker(&self) -> &str {
        &self.ticker
    }
    pub fn clear_ticker(&mut self) {
        self.ticker.clear();
    }

    // Param is passed by value, moved
    pub fn set_ticker(&mut self, v: ::std::string::String) {
        self.ticker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticker(&mut self) -> &mut ::std::string::String {
        &mut self.ticker
    }

    // Take field
    pub fn take_ticker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ticker, ::std::string::String::new())
    }

    // string market_id = 2;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }

    // string subaccount_id = 3;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // string direction = 4;


    pub fn get_direction(&self) -> &str {
        &self.direction
    }
    pub fn clear_direction(&mut self) {
        self.direction.clear();
    }

    // Param is passed by value, moved
    pub fn set_direction(&mut self, v: ::std::string::String) {
        self.direction = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_direction(&mut self) -> &mut ::std::string::String {
        &mut self.direction
    }

    // Take field
    pub fn take_direction(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.direction, ::std::string::String::new())
    }

    // string quantity = 5;


    pub fn get_quantity(&self) -> &str {
        &self.quantity
    }
    pub fn clear_quantity(&mut self) {
        self.quantity.clear();
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: ::std::string::String) {
        self.quantity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quantity(&mut self) -> &mut ::std::string::String {
        &mut self.quantity
    }

    // Take field
    pub fn take_quantity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quantity, ::std::string::String::new())
    }

    // string entry_price = 6;


    pub fn get_entry_price(&self) -> &str {
        &self.entry_price
    }
    pub fn clear_entry_price(&mut self) {
        self.entry_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_entry_price(&mut self, v: ::std::string::String) {
        self.entry_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entry_price(&mut self) -> &mut ::std::string::String {
        &mut self.entry_price
    }

    // Take field
    pub fn take_entry_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entry_price, ::std::string::String::new())
    }

    // string margin = 7;


    pub fn get_margin(&self) -> &str {
        &self.margin
    }
    pub fn clear_margin(&mut self) {
        self.margin.clear();
    }

    // Param is passed by value, moved
    pub fn set_margin(&mut self, v: ::std::string::String) {
        self.margin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_margin(&mut self) -> &mut ::std::string::String {
        &mut self.margin
    }

    // Take field
    pub fn take_margin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.margin, ::std::string::String::new())
    }

    // string liquidation_price = 8;


    pub fn get_liquidation_price(&self) -> &str {
        &self.liquidation_price
    }
    pub fn clear_liquidation_price(&mut self) {
        self.liquidation_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_liquidation_price(&mut self, v: ::std::string::String) {
        self.liquidation_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_liquidation_price(&mut self) -> &mut ::std::string::String {
        &mut self.liquidation_price
    }

    // Take field
    pub fn take_liquidation_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.liquidation_price, ::std::string::String::new())
    }

    // string mark_price = 9;


    pub fn get_mark_price(&self) -> &str {
        &self.mark_price
    }
    pub fn clear_mark_price(&mut self) {
        self.mark_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_mark_price(&mut self, v: ::std::string::String) {
        self.mark_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mark_price(&mut self) -> &mut ::std::string::String {
        &mut self.mark_price
    }

    // Take field
    pub fn take_mark_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mark_price, ::std::string::String::new())
    }

    // string aggregate_reduce_only_quantity = 11;


    pub fn get_aggregate_reduce_only_quantity(&self) -> &str {
        &self.aggregate_reduce_only_quantity
    }
    pub fn clear_aggregate_reduce_only_quantity(&mut self) {
        self.aggregate_reduce_only_quantity.clear();
    }

    // Param is passed by value, moved
    pub fn set_aggregate_reduce_only_quantity(&mut self, v: ::std::string::String) {
        self.aggregate_reduce_only_quantity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aggregate_reduce_only_quantity(&mut self) -> &mut ::std::string::String {
        &mut self.aggregate_reduce_only_quantity
    }

    // Take field
    pub fn take_aggregate_reduce_only_quantity(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.aggregate_reduce_only_quantity, ::std::string::String::new())
    }

    // sint64 updated_at = 12;


    pub fn get_updated_at(&self) -> i64 {
        self.updated_at
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: i64) {
        self.updated_at = v;
    }

    // sint64 created_at = 13;


    pub fn get_created_at(&self) -> i64 {
        self.created_at
    }
    pub fn clear_created_at(&mut self) {
        self.created_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_created_at(&mut self, v: i64) {
        self.created_at = v;
    }
}

impl ::protobuf::Message for DerivativePosition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ticker)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.direction)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quantity)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entry_price)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.margin)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.liquidation_price)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mark_price)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.aggregate_reduce_only_quantity)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.updated_at = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.created_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ticker.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ticker);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.market_id);
        }
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.subaccount_id);
        }
        if !self.direction.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.direction);
        }
        if !self.quantity.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.quantity);
        }
        if !self.entry_price.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.entry_price);
        }
        if !self.margin.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.margin);
        }
        if !self.liquidation_price.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.liquidation_price);
        }
        if !self.mark_price.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.mark_price);
        }
        if !self.aggregate_reduce_only_quantity.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.aggregate_reduce_only_quantity);
        }
        if self.updated_at != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(12, self.updated_at);
        }
        if self.created_at != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(13, self.created_at);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ticker.is_empty() {
            os.write_string(1, &self.ticker)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(2, &self.market_id)?;
        }
        if !self.subaccount_id.is_empty() {
            os.write_string(3, &self.subaccount_id)?;
        }
        if !self.direction.is_empty() {
            os.write_string(4, &self.direction)?;
        }
        if !self.quantity.is_empty() {
            os.write_string(5, &self.quantity)?;
        }
        if !self.entry_price.is_empty() {
            os.write_string(6, &self.entry_price)?;
        }
        if !self.margin.is_empty() {
            os.write_string(7, &self.margin)?;
        }
        if !self.liquidation_price.is_empty() {
            os.write_string(8, &self.liquidation_price)?;
        }
        if !self.mark_price.is_empty() {
            os.write_string(9, &self.mark_price)?;
        }
        if !self.aggregate_reduce_only_quantity.is_empty() {
            os.write_string(11, &self.aggregate_reduce_only_quantity)?;
        }
        if self.updated_at != 0 {
            os.write_sint64(12, self.updated_at)?;
        }
        if self.created_at != 0 {
            os.write_sint64(13, self.created_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DerivativePosition {
        DerivativePosition::new()
    }

    fn default_instance() -> &'static DerivativePosition {
        static instance: ::protobuf::rt::LazyV2<DerivativePosition> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DerivativePosition::new)
    }
}

impl ::protobuf::Clear for DerivativePosition {
    fn clear(&mut self) {
        self.ticker.clear();
        self.market_id.clear();
        self.subaccount_id.clear();
        self.direction.clear();
        self.quantity.clear();
        self.entry_price.clear();
        self.margin.clear();
        self.liquidation_price.clear();
        self.mark_price.clear();
        self.aggregate_reduce_only_quantity.clear();
        self.updated_at = 0;
        self.created_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for DerivativePosition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamAccountPortfolioRequest {
    // message fields
    pub account_address: ::std::string::String,
    pub subaccount_id: ::std::string::String,
    pub field_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamAccountPortfolioRequest {
    fn default() -> &'a StreamAccountPortfolioRequest {
        <StreamAccountPortfolioRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamAccountPortfolioRequest {
    pub fn new() -> StreamAccountPortfolioRequest {
        ::std::default::Default::default()
    }

    // string account_address = 1;


    pub fn get_account_address(&self) -> &str {
        &self.account_address
    }
    pub fn clear_account_address(&mut self) {
        self.account_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_account_address(&mut self, v: ::std::string::String) {
        self.account_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account_address(&mut self) -> &mut ::std::string::String {
        &mut self.account_address
    }

    // Take field
    pub fn take_account_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.account_address, ::std::string::String::new())
    }

    // string subaccount_id = 2;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // string type = 3;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StreamAccountPortfolioRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.account_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.account_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.account_address);
        }
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subaccount_id);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.account_address.is_empty() {
            os.write_string(1, &self.account_address)?;
        }
        if !self.subaccount_id.is_empty() {
            os.write_string(2, &self.subaccount_id)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(3, &self.field_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamAccountPortfolioRequest {
        StreamAccountPortfolioRequest::new()
    }

    fn default_instance() -> &'static StreamAccountPortfolioRequest {
        static instance: ::protobuf::rt::LazyV2<StreamAccountPortfolioRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamAccountPortfolioRequest::new)
    }
}

impl ::protobuf::Clear for StreamAccountPortfolioRequest {
    fn clear(&mut self) {
        self.account_address.clear();
        self.subaccount_id.clear();
        self.field_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamAccountPortfolioRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamAccountPortfolioResponse {
    // message fields
    pub field_type: ::std::string::String,
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    pub subaccount_id: ::std::string::String,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamAccountPortfolioResponse {
    fn default() -> &'a StreamAccountPortfolioResponse {
        <StreamAccountPortfolioResponse as ::protobuf::Message>::default_instance()
    }
}

impl StreamAccountPortfolioResponse {
    pub fn new() -> StreamAccountPortfolioResponse {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string denom = 2;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 3;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }

    // string subaccount_id = 4;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // sint64 timestamp = 5;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for StreamAccountPortfolioResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.amount);
        }
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.subaccount_id);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.denom.is_empty() {
            os.write_string(2, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(3, &self.amount)?;
        }
        if !self.subaccount_id.is_empty() {
            os.write_string(4, &self.subaccount_id)?;
        }
        if self.timestamp != 0 {
            os.write_sint64(5, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamAccountPortfolioResponse {
        StreamAccountPortfolioResponse::new()
    }

    fn default_instance() -> &'static StreamAccountPortfolioResponse {
        static instance: ::protobuf::rt::LazyV2<StreamAccountPortfolioResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamAccountPortfolioResponse::new)
    }
}

impl ::protobuf::Clear for StreamAccountPortfolioResponse {
    fn clear(&mut self) {
        self.field_type.clear();
        self.denom.clear();
        self.amount.clear();
        self.subaccount_id.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamAccountPortfolioResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

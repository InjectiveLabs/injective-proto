// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective_exchange_rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTxRequest {
    // message fields
    pub hash: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxRequest {
    fn default() -> &'a GetTxRequest {
        <GetTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTxRequest {
    pub fn new() -> GetTxRequest {
        ::std::default::Default::default()
    }

    // string hash = 1;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetTxRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxRequest {
        GetTxRequest::new()
    }

    fn default_instance() -> &'static GetTxRequest {
        static instance: ::protobuf::rt::LazyV2<GetTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxRequest::new)
    }
}

impl ::protobuf::Clear for GetTxRequest {
    fn clear(&mut self) {
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetTxResponse {
    // message fields
    pub tx_hash: ::std::string::String,
    pub height: i64,
    pub index: u32,
    pub codespace: ::std::string::String,
    pub code: u32,
    pub data: ::std::vec::Vec<u8>,
    pub raw_log: ::std::string::String,
    pub timestamp: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTxResponse {
    fn default() -> &'a GetTxResponse {
        <GetTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTxResponse {
    pub fn new() -> GetTxResponse {
        ::std::default::Default::default()
    }

    // string tx_hash = 1;


    pub fn get_tx_hash(&self) -> &str {
        &self.tx_hash
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::string::String) {
        self.tx_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::string::String {
        &mut self.tx_hash
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_hash, ::std::string::String::new())
    }

    // sint64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // uint32 index = 3;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // string codespace = 4;


    pub fn get_codespace(&self) -> &str {
        &self.codespace
    }
    pub fn clear_codespace(&mut self) {
        self.codespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_codespace(&mut self, v: ::std::string::String) {
        self.codespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codespace(&mut self) -> &mut ::std::string::String {
        &mut self.codespace
    }

    // Take field
    pub fn take_codespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codespace, ::std::string::String::new())
    }

    // uint32 code = 5;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // bytes data = 6;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string raw_log = 7;


    pub fn get_raw_log(&self) -> &str {
        &self.raw_log
    }
    pub fn clear_raw_log(&mut self) {
        self.raw_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_log(&mut self, v: ::std::string::String) {
        self.raw_log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_log(&mut self) -> &mut ::std::string::String {
        &mut self.raw_log
    }

    // Take field
    pub fn take_raw_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raw_log, ::std::string::String::new())
    }

    // string timestamp = 8;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetTxResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codespace)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raw_log)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.height);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.codespace.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.codespace);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(5, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if !self.raw_log.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.raw_log);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_hash.is_empty() {
            os.write_string(1, &self.tx_hash)?;
        }
        if self.height != 0 {
            os.write_sint64(2, self.height)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        if !self.codespace.is_empty() {
            os.write_string(4, &self.codespace)?;
        }
        if self.code != 0 {
            os.write_uint32(5, self.code)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if !self.raw_log.is_empty() {
            os.write_string(7, &self.raw_log)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(8, &self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTxResponse {
        GetTxResponse::new()
    }

    fn default_instance() -> &'static GetTxResponse {
        static instance: ::protobuf::rt::LazyV2<GetTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetTxResponse::new)
    }
}

impl ::protobuf::Clear for GetTxResponse {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.height = 0;
        self.index = 0;
        self.codespace.clear();
        self.code = 0;
        self.data.clear();
        self.raw_log.clear();
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PrepareTxRequest {
    // message fields
    pub chain_id: u64,
    pub signer_address: ::std::string::String,
    pub sequence: u64,
    pub memo: ::std::string::String,
    pub timeout_height: u64,
    pub fee: ::protobuf::SingularPtrField<CosmosTxFee>,
    pub msgs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrepareTxRequest {
    fn default() -> &'a PrepareTxRequest {
        <PrepareTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl PrepareTxRequest {
    pub fn new() -> PrepareTxRequest {
        ::std::default::Default::default()
    }

    // uint64 chain_id = 1;


    pub fn get_chain_id(&self) -> u64 {
        self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u64) {
        self.chain_id = v;
    }

    // string signer_address = 2;


    pub fn get_signer_address(&self) -> &str {
        &self.signer_address
    }
    pub fn clear_signer_address(&mut self) {
        self.signer_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_address(&mut self, v: ::std::string::String) {
        self.signer_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_address(&mut self) -> &mut ::std::string::String {
        &mut self.signer_address
    }

    // Take field
    pub fn take_signer_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signer_address, ::std::string::String::new())
    }

    // uint64 sequence = 3;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // string memo = 4;


    pub fn get_memo(&self) -> &str {
        &self.memo
    }
    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }

    // uint64 timeout_height = 5;


    pub fn get_timeout_height(&self) -> u64 {
        self.timeout_height
    }
    pub fn clear_timeout_height(&mut self) {
        self.timeout_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_height(&mut self, v: u64) {
        self.timeout_height = v;
    }

    // .injective_exchange_rpc.CosmosTxFee fee = 6;


    pub fn get_fee(&self) -> &CosmosTxFee {
        self.fee.as_ref().unwrap_or_else(|| <CosmosTxFee as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee(&mut self) {
        self.fee.clear();
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: CosmosTxFee) {
        self.fee = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee(&mut self) -> &mut CosmosTxFee {
        if self.fee.is_none() {
            self.fee.set_default();
        }
        self.fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee(&mut self) -> CosmosTxFee {
        self.fee.take().unwrap_or_else(|| CosmosTxFee::new())
    }

    // repeated bytes msgs = 7;


    pub fn get_msgs(&self) -> &[::std::vec::Vec<u8>] {
        &self.msgs
    }
    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PrepareTxRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fee {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.chain_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signer_address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_height = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signer_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.signer_address);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(3, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.memo);
        }
        if self.timeout_height != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timeout_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.msgs {
            my_size += ::protobuf::rt::bytes_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.chain_id != 0 {
            os.write_uint64(1, self.chain_id)?;
        }
        if !self.signer_address.is_empty() {
            os.write_string(2, &self.signer_address)?;
        }
        if self.sequence != 0 {
            os.write_uint64(3, self.sequence)?;
        }
        if !self.memo.is_empty() {
            os.write_string(4, &self.memo)?;
        }
        if self.timeout_height != 0 {
            os.write_uint64(5, self.timeout_height)?;
        }
        if let Some(ref v) = self.fee.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.msgs {
            os.write_bytes(7, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrepareTxRequest {
        PrepareTxRequest::new()
    }

    fn default_instance() -> &'static PrepareTxRequest {
        static instance: ::protobuf::rt::LazyV2<PrepareTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrepareTxRequest::new)
    }
}

impl ::protobuf::Clear for PrepareTxRequest {
    fn clear(&mut self) {
        self.chain_id = 0;
        self.signer_address.clear();
        self.sequence = 0;
        self.memo.clear();
        self.timeout_height = 0;
        self.fee.clear();
        self.msgs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosTxFee {
    // message fields
    pub price: ::protobuf::RepeatedField<CosmosCoin>,
    pub gas: u64,
    pub delegate_fee: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CosmosTxFee {
    fn default() -> &'a CosmosTxFee {
        <CosmosTxFee as ::protobuf::Message>::default_instance()
    }
}

impl CosmosTxFee {
    pub fn new() -> CosmosTxFee {
        ::std::default::Default::default()
    }

    // repeated .injective_exchange_rpc.CosmosCoin price = 1;


    pub fn get_price(&self) -> &[CosmosCoin] {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::protobuf::RepeatedField<CosmosCoin>) {
        self.price = v;
    }

    // Mutable pointer to the field.
    pub fn mut_price(&mut self) -> &mut ::protobuf::RepeatedField<CosmosCoin> {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::protobuf::RepeatedField<CosmosCoin> {
        ::std::mem::replace(&mut self.price, ::protobuf::RepeatedField::new())
    }

    // uint64 gas = 2;


    pub fn get_gas(&self) -> u64 {
        self.gas
    }
    pub fn clear_gas(&mut self) {
        self.gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas(&mut self, v: u64) {
        self.gas = v;
    }

    // bool delegate_fee = 3;


    pub fn get_delegate_fee(&self) -> bool {
        self.delegate_fee
    }
    pub fn clear_delegate_fee(&mut self) {
        self.delegate_fee = false;
    }

    // Param is passed by value, moved
    pub fn set_delegate_fee(&mut self, v: bool) {
        self.delegate_fee = v;
    }
}

impl ::protobuf::Message for CosmosTxFee {
    fn is_initialized(&self) -> bool {
        for v in &self.price {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.price)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.delegate_fee = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.price {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.gas != 0 {
            my_size += ::protobuf::rt::value_size(2, self.gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.delegate_fee != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.price {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.gas != 0 {
            os.write_uint64(2, self.gas)?;
        }
        if self.delegate_fee != false {
            os.write_bool(3, self.delegate_fee)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CosmosTxFee {
        CosmosTxFee::new()
    }

    fn default_instance() -> &'static CosmosTxFee {
        static instance: ::protobuf::rt::LazyV2<CosmosTxFee> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CosmosTxFee::new)
    }
}

impl ::protobuf::Clear for CosmosTxFee {
    fn clear(&mut self) {
        self.price.clear();
        self.gas = 0;
        self.delegate_fee = false;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosTxFee {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosCoin {
    // message fields
    pub denom: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CosmosCoin {
    fn default() -> &'a CosmosCoin {
        <CosmosCoin as ::protobuf::Message>::default_instance()
    }
}

impl CosmosCoin {
    pub fn new() -> CosmosCoin {
        ::std::default::Default::default()
    }

    // string denom = 1;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CosmosCoin {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.denom);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.denom.is_empty() {
            os.write_string(1, &self.denom)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CosmosCoin {
        CosmosCoin::new()
    }

    fn default_instance() -> &'static CosmosCoin {
        static instance: ::protobuf::rt::LazyV2<CosmosCoin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CosmosCoin::new)
    }
}

impl ::protobuf::Clear for CosmosCoin {
    fn clear(&mut self) {
        self.denom.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosCoin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PrepareTxResponse {
    // message fields
    pub data: ::std::string::String,
    pub sequence: u64,
    pub sign_mode: ::std::string::String,
    pub pub_key_type: ::std::string::String,
    pub fee_payer: ::std::string::String,
    pub fee_payer_sig: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrepareTxResponse {
    fn default() -> &'a PrepareTxResponse {
        <PrepareTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl PrepareTxResponse {
    pub fn new() -> PrepareTxResponse {
        ::std::default::Default::default()
    }

    // string data = 1;


    pub fn get_data(&self) -> &str {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::string::String) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::string::String {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data, ::std::string::String::new())
    }

    // uint64 sequence = 2;


    pub fn get_sequence(&self) -> u64 {
        self.sequence
    }
    pub fn clear_sequence(&mut self) {
        self.sequence = 0;
    }

    // Param is passed by value, moved
    pub fn set_sequence(&mut self, v: u64) {
        self.sequence = v;
    }

    // string sign_mode = 3;


    pub fn get_sign_mode(&self) -> &str {
        &self.sign_mode
    }
    pub fn clear_sign_mode(&mut self) {
        self.sign_mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign_mode(&mut self, v: ::std::string::String) {
        self.sign_mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign_mode(&mut self) -> &mut ::std::string::String {
        &mut self.sign_mode
    }

    // Take field
    pub fn take_sign_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sign_mode, ::std::string::String::new())
    }

    // string pub_key_type = 4;


    pub fn get_pub_key_type(&self) -> &str {
        &self.pub_key_type
    }
    pub fn clear_pub_key_type(&mut self) {
        self.pub_key_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_pub_key_type(&mut self, v: ::std::string::String) {
        self.pub_key_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key_type(&mut self) -> &mut ::std::string::String {
        &mut self.pub_key_type
    }

    // Take field
    pub fn take_pub_key_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pub_key_type, ::std::string::String::new())
    }

    // string fee_payer = 5;


    pub fn get_fee_payer(&self) -> &str {
        &self.fee_payer
    }
    pub fn clear_fee_payer(&mut self) {
        self.fee_payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer(&mut self, v: ::std::string::String) {
        self.fee_payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer
    }

    // Take field
    pub fn take_fee_payer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer, ::std::string::String::new())
    }

    // string fee_payer_sig = 6;


    pub fn get_fee_payer_sig(&self) -> &str {
        &self.fee_payer_sig
    }
    pub fn clear_fee_payer_sig(&mut self) {
        self.fee_payer_sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer_sig(&mut self, v: ::std::string::String) {
        self.fee_payer_sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer_sig(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer_sig
    }

    // Take field
    pub fn take_fee_payer_sig(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer_sig, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PrepareTxResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sequence = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sign_mode)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pub_key_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer_sig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.data);
        }
        if self.sequence != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sequence, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sign_mode.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sign_mode);
        }
        if !self.pub_key_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.pub_key_type);
        }
        if !self.fee_payer.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.fee_payer);
        }
        if !self.fee_payer_sig.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.fee_payer_sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_string(1, &self.data)?;
        }
        if self.sequence != 0 {
            os.write_uint64(2, self.sequence)?;
        }
        if !self.sign_mode.is_empty() {
            os.write_string(3, &self.sign_mode)?;
        }
        if !self.pub_key_type.is_empty() {
            os.write_string(4, &self.pub_key_type)?;
        }
        if !self.fee_payer.is_empty() {
            os.write_string(5, &self.fee_payer)?;
        }
        if !self.fee_payer_sig.is_empty() {
            os.write_string(6, &self.fee_payer_sig)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrepareTxResponse {
        PrepareTxResponse::new()
    }

    fn default_instance() -> &'static PrepareTxResponse {
        static instance: ::protobuf::rt::LazyV2<PrepareTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrepareTxResponse::new)
    }
}

impl ::protobuf::Clear for PrepareTxResponse {
    fn clear(&mut self) {
        self.data.clear();
        self.sequence = 0;
        self.sign_mode.clear();
        self.pub_key_type.clear();
        self.fee_payer.clear();
        self.fee_payer_sig.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BroadcastTxRequest {
    // message fields
    pub chain_id: u64,
    pub tx: ::std::vec::Vec<u8>,
    pub msgs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub pub_key: ::protobuf::SingularPtrField<CosmosPubKey>,
    pub signature: ::std::string::String,
    pub fee_payer: ::std::string::String,
    pub fee_payer_sig: ::std::string::String,
    pub mode: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxRequest {
    fn default() -> &'a BroadcastTxRequest {
        <BroadcastTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxRequest {
    pub fn new() -> BroadcastTxRequest {
        ::std::default::Default::default()
    }

    // uint64 chain_id = 1;


    pub fn get_chain_id(&self) -> u64 {
        self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u64) {
        self.chain_id = v;
    }

    // bytes tx = 2;


    pub fn get_tx(&self) -> &[u8] {
        &self.tx
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx
    }

    // Take field
    pub fn take_tx(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx, ::std::vec::Vec::new())
    }

    // repeated bytes msgs = 3;


    pub fn get_msgs(&self) -> &[::std::vec::Vec<u8>] {
        &self.msgs
    }
    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }

    // .injective_exchange_rpc.CosmosPubKey pub_key = 4;


    pub fn get_pub_key(&self) -> &CosmosPubKey {
        self.pub_key.as_ref().unwrap_or_else(|| <CosmosPubKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: CosmosPubKey) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut CosmosPubKey {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> CosmosPubKey {
        self.pub_key.take().unwrap_or_else(|| CosmosPubKey::new())
    }

    // string signature = 5;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // string fee_payer = 6;


    pub fn get_fee_payer(&self) -> &str {
        &self.fee_payer
    }
    pub fn clear_fee_payer(&mut self) {
        self.fee_payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer(&mut self, v: ::std::string::String) {
        self.fee_payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer
    }

    // Take field
    pub fn take_fee_payer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer, ::std::string::String::new())
    }

    // string fee_payer_sig = 7;


    pub fn get_fee_payer_sig(&self) -> &str {
        &self.fee_payer_sig
    }
    pub fn clear_fee_payer_sig(&mut self) {
        self.fee_payer_sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer_sig(&mut self, v: ::std::string::String) {
        self.fee_payer_sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer_sig(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer_sig
    }

    // Take field
    pub fn take_fee_payer_sig(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer_sig, ::std::string::String::new())
    }

    // string mode = 8;


    pub fn get_mode(&self) -> &str {
        &self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: ::std::string::String) {
        self.mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mode(&mut self) -> &mut ::std::string::String {
        &mut self.mode
    }

    // Take field
    pub fn take_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mode, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BroadcastTxRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.chain_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.msgs)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer_sig)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mode)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tx.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx);
        }
        for value in &self.msgs {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.signature);
        }
        if !self.fee_payer.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.fee_payer);
        }
        if !self.fee_payer_sig.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.fee_payer_sig);
        }
        if !self.mode.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.chain_id != 0 {
            os.write_uint64(1, self.chain_id)?;
        }
        if !self.tx.is_empty() {
            os.write_bytes(2, &self.tx)?;
        }
        for v in &self.msgs {
            os.write_bytes(3, &v)?;
        };
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(5, &self.signature)?;
        }
        if !self.fee_payer.is_empty() {
            os.write_string(6, &self.fee_payer)?;
        }
        if !self.fee_payer_sig.is_empty() {
            os.write_string(7, &self.fee_payer_sig)?;
        }
        if !self.mode.is_empty() {
            os.write_string(8, &self.mode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxRequest {
        BroadcastTxRequest::new()
    }

    fn default_instance() -> &'static BroadcastTxRequest {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxRequest::new)
    }
}

impl ::protobuf::Clear for BroadcastTxRequest {
    fn clear(&mut self) {
        self.chain_id = 0;
        self.tx.clear();
        self.msgs.clear();
        self.pub_key.clear();
        self.signature.clear();
        self.fee_payer.clear();
        self.fee_payer_sig.clear();
        self.mode.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CosmosPubKey {
    // message fields
    pub field_type: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CosmosPubKey {
    fn default() -> &'a CosmosPubKey {
        <CosmosPubKey as ::protobuf::Message>::default_instance()
    }
}

impl CosmosPubKey {
    pub fn new() -> CosmosPubKey {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CosmosPubKey {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CosmosPubKey {
        CosmosPubKey::new()
    }

    fn default_instance() -> &'static CosmosPubKey {
        static instance: ::protobuf::rt::LazyV2<CosmosPubKey> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CosmosPubKey::new)
    }
}

impl ::protobuf::Clear for CosmosPubKey {
    fn clear(&mut self) {
        self.field_type.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CosmosPubKey {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BroadcastTxResponse {
    // message fields
    pub tx_hash: ::std::string::String,
    pub height: i64,
    pub index: u32,
    pub codespace: ::std::string::String,
    pub code: u32,
    pub data: ::std::vec::Vec<u8>,
    pub raw_log: ::std::string::String,
    pub timestamp: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastTxResponse {
    fn default() -> &'a BroadcastTxResponse {
        <BroadcastTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastTxResponse {
    pub fn new() -> BroadcastTxResponse {
        ::std::default::Default::default()
    }

    // string tx_hash = 1;


    pub fn get_tx_hash(&self) -> &str {
        &self.tx_hash
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::string::String) {
        self.tx_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::string::String {
        &mut self.tx_hash
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_hash, ::std::string::String::new())
    }

    // sint64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // uint32 index = 3;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // string codespace = 4;


    pub fn get_codespace(&self) -> &str {
        &self.codespace
    }
    pub fn clear_codespace(&mut self) {
        self.codespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_codespace(&mut self, v: ::std::string::String) {
        self.codespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codespace(&mut self) -> &mut ::std::string::String {
        &mut self.codespace
    }

    // Take field
    pub fn take_codespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codespace, ::std::string::String::new())
    }

    // uint32 code = 5;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // bytes data = 6;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string raw_log = 7;


    pub fn get_raw_log(&self) -> &str {
        &self.raw_log
    }
    pub fn clear_raw_log(&mut self) {
        self.raw_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_log(&mut self, v: ::std::string::String) {
        self.raw_log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_log(&mut self) -> &mut ::std::string::String {
        &mut self.raw_log
    }

    // Take field
    pub fn take_raw_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raw_log, ::std::string::String::new())
    }

    // string timestamp = 8;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BroadcastTxResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codespace)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raw_log)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.height);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.codespace.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.codespace);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(5, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if !self.raw_log.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.raw_log);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_hash.is_empty() {
            os.write_string(1, &self.tx_hash)?;
        }
        if self.height != 0 {
            os.write_sint64(2, self.height)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        if !self.codespace.is_empty() {
            os.write_string(4, &self.codespace)?;
        }
        if self.code != 0 {
            os.write_uint32(5, self.code)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if !self.raw_log.is_empty() {
            os.write_string(7, &self.raw_log)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(8, &self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastTxResponse {
        BroadcastTxResponse::new()
    }

    fn default_instance() -> &'static BroadcastTxResponse {
        static instance: ::protobuf::rt::LazyV2<BroadcastTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastTxResponse::new)
    }
}

impl ::protobuf::Clear for BroadcastTxResponse {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.height = 0;
        self.index = 0;
        self.codespace.clear();
        self.code = 0;
        self.data.clear();
        self.raw_log.clear();
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PrepareCosmosTxRequest {
    // message fields
    pub chain_id: u64,
    pub sender_address: ::std::string::String,
    pub memo: ::std::string::String,
    pub timeout_height: u64,
    pub fee: ::protobuf::SingularPtrField<CosmosTxFee>,
    pub msgs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrepareCosmosTxRequest {
    fn default() -> &'a PrepareCosmosTxRequest {
        <PrepareCosmosTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl PrepareCosmosTxRequest {
    pub fn new() -> PrepareCosmosTxRequest {
        ::std::default::Default::default()
    }

    // uint64 chain_id = 1;


    pub fn get_chain_id(&self) -> u64 {
        self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u64) {
        self.chain_id = v;
    }

    // string sender_address = 2;


    pub fn get_sender_address(&self) -> &str {
        &self.sender_address
    }
    pub fn clear_sender_address(&mut self) {
        self.sender_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_address(&mut self, v: ::std::string::String) {
        self.sender_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_address(&mut self) -> &mut ::std::string::String {
        &mut self.sender_address
    }

    // Take field
    pub fn take_sender_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender_address, ::std::string::String::new())
    }

    // string memo = 3;


    pub fn get_memo(&self) -> &str {
        &self.memo
    }
    pub fn clear_memo(&mut self) {
        self.memo.clear();
    }

    // Param is passed by value, moved
    pub fn set_memo(&mut self, v: ::std::string::String) {
        self.memo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memo(&mut self) -> &mut ::std::string::String {
        &mut self.memo
    }

    // Take field
    pub fn take_memo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.memo, ::std::string::String::new())
    }

    // uint64 timeout_height = 4;


    pub fn get_timeout_height(&self) -> u64 {
        self.timeout_height
    }
    pub fn clear_timeout_height(&mut self) {
        self.timeout_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_timeout_height(&mut self, v: u64) {
        self.timeout_height = v;
    }

    // .injective_exchange_rpc.CosmosTxFee fee = 5;


    pub fn get_fee(&self) -> &CosmosTxFee {
        self.fee.as_ref().unwrap_or_else(|| <CosmosTxFee as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee(&mut self) {
        self.fee.clear();
    }

    pub fn has_fee(&self) -> bool {
        self.fee.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee(&mut self, v: CosmosTxFee) {
        self.fee = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee(&mut self) -> &mut CosmosTxFee {
        if self.fee.is_none() {
            self.fee.set_default();
        }
        self.fee.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee(&mut self) -> CosmosTxFee {
        self.fee.take().unwrap_or_else(|| CosmosTxFee::new())
    }

    // repeated bytes msgs = 6;


    pub fn get_msgs(&self) -> &[::std::vec::Vec<u8>] {
        &self.msgs
    }
    pub fn clear_msgs(&mut self) {
        self.msgs.clear();
    }

    // Param is passed by value, moved
    pub fn set_msgs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.msgs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_msgs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.msgs
    }

    // Take field
    pub fn take_msgs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.msgs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PrepareCosmosTxRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fee {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.chain_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.memo)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timeout_height = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.msgs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sender_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sender_address);
        }
        if !self.memo.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.memo);
        }
        if self.timeout_height != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timeout_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.fee.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.msgs {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.chain_id != 0 {
            os.write_uint64(1, self.chain_id)?;
        }
        if !self.sender_address.is_empty() {
            os.write_string(2, &self.sender_address)?;
        }
        if !self.memo.is_empty() {
            os.write_string(3, &self.memo)?;
        }
        if self.timeout_height != 0 {
            os.write_uint64(4, self.timeout_height)?;
        }
        if let Some(ref v) = self.fee.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.msgs {
            os.write_bytes(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrepareCosmosTxRequest {
        PrepareCosmosTxRequest::new()
    }

    fn default_instance() -> &'static PrepareCosmosTxRequest {
        static instance: ::protobuf::rt::LazyV2<PrepareCosmosTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrepareCosmosTxRequest::new)
    }
}

impl ::protobuf::Clear for PrepareCosmosTxRequest {
    fn clear(&mut self) {
        self.chain_id = 0;
        self.sender_address.clear();
        self.memo.clear();
        self.timeout_height = 0;
        self.fee.clear();
        self.msgs.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareCosmosTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PrepareCosmosTxResponse {
    // message fields
    pub tx: ::std::vec::Vec<u8>,
    pub sign_mode: ::std::string::String,
    pub pub_key_type: ::std::string::String,
    pub fee_payer: ::std::string::String,
    pub fee_payer_sig: ::std::string::String,
    pub fee_payer_pub_key: ::protobuf::SingularPtrField<CosmosPubKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrepareCosmosTxResponse {
    fn default() -> &'a PrepareCosmosTxResponse {
        <PrepareCosmosTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl PrepareCosmosTxResponse {
    pub fn new() -> PrepareCosmosTxResponse {
        ::std::default::Default::default()
    }

    // bytes tx = 1;


    pub fn get_tx(&self) -> &[u8] {
        &self.tx
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx
    }

    // Take field
    pub fn take_tx(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx, ::std::vec::Vec::new())
    }

    // string sign_mode = 2;


    pub fn get_sign_mode(&self) -> &str {
        &self.sign_mode
    }
    pub fn clear_sign_mode(&mut self) {
        self.sign_mode.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign_mode(&mut self, v: ::std::string::String) {
        self.sign_mode = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign_mode(&mut self) -> &mut ::std::string::String {
        &mut self.sign_mode
    }

    // Take field
    pub fn take_sign_mode(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sign_mode, ::std::string::String::new())
    }

    // string pub_key_type = 3;


    pub fn get_pub_key_type(&self) -> &str {
        &self.pub_key_type
    }
    pub fn clear_pub_key_type(&mut self) {
        self.pub_key_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_pub_key_type(&mut self, v: ::std::string::String) {
        self.pub_key_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key_type(&mut self) -> &mut ::std::string::String {
        &mut self.pub_key_type
    }

    // Take field
    pub fn take_pub_key_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pub_key_type, ::std::string::String::new())
    }

    // string fee_payer = 4;


    pub fn get_fee_payer(&self) -> &str {
        &self.fee_payer
    }
    pub fn clear_fee_payer(&mut self) {
        self.fee_payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer(&mut self, v: ::std::string::String) {
        self.fee_payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer
    }

    // Take field
    pub fn take_fee_payer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer, ::std::string::String::new())
    }

    // string fee_payer_sig = 5;


    pub fn get_fee_payer_sig(&self) -> &str {
        &self.fee_payer_sig
    }
    pub fn clear_fee_payer_sig(&mut self) {
        self.fee_payer_sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer_sig(&mut self, v: ::std::string::String) {
        self.fee_payer_sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer_sig(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer_sig
    }

    // Take field
    pub fn take_fee_payer_sig(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer_sig, ::std::string::String::new())
    }

    // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 6;


    pub fn get_fee_payer_pub_key(&self) -> &CosmosPubKey {
        self.fee_payer_pub_key.as_ref().unwrap_or_else(|| <CosmosPubKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee_payer_pub_key(&mut self) {
        self.fee_payer_pub_key.clear();
    }

    pub fn has_fee_payer_pub_key(&self) -> bool {
        self.fee_payer_pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee_payer_pub_key(&mut self, v: CosmosPubKey) {
        self.fee_payer_pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer_pub_key(&mut self) -> &mut CosmosPubKey {
        if self.fee_payer_pub_key.is_none() {
            self.fee_payer_pub_key.set_default();
        }
        self.fee_payer_pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee_payer_pub_key(&mut self) -> CosmosPubKey {
        self.fee_payer_pub_key.take().unwrap_or_else(|| CosmosPubKey::new())
    }
}

impl ::protobuf::Message for PrepareCosmosTxResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.fee_payer_pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sign_mode)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pub_key_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer_sig)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee_payer_pub_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.tx);
        }
        if !self.sign_mode.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sign_mode);
        }
        if !self.pub_key_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.pub_key_type);
        }
        if !self.fee_payer.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.fee_payer);
        }
        if !self.fee_payer_sig.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.fee_payer_sig);
        }
        if let Some(ref v) = self.fee_payer_pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx.is_empty() {
            os.write_bytes(1, &self.tx)?;
        }
        if !self.sign_mode.is_empty() {
            os.write_string(2, &self.sign_mode)?;
        }
        if !self.pub_key_type.is_empty() {
            os.write_string(3, &self.pub_key_type)?;
        }
        if !self.fee_payer.is_empty() {
            os.write_string(4, &self.fee_payer)?;
        }
        if !self.fee_payer_sig.is_empty() {
            os.write_string(5, &self.fee_payer_sig)?;
        }
        if let Some(ref v) = self.fee_payer_pub_key.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrepareCosmosTxResponse {
        PrepareCosmosTxResponse::new()
    }

    fn default_instance() -> &'static PrepareCosmosTxResponse {
        static instance: ::protobuf::rt::LazyV2<PrepareCosmosTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrepareCosmosTxResponse::new)
    }
}

impl ::protobuf::Clear for PrepareCosmosTxResponse {
    fn clear(&mut self) {
        self.tx.clear();
        self.sign_mode.clear();
        self.pub_key_type.clear();
        self.fee_payer.clear();
        self.fee_payer_sig.clear();
        self.fee_payer_pub_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PrepareCosmosTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BroadcastCosmosTxRequest {
    // message fields
    pub tx: ::std::vec::Vec<u8>,
    pub pub_key: ::protobuf::SingularPtrField<CosmosPubKey>,
    pub signature: ::std::string::String,
    pub sender_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastCosmosTxRequest {
    fn default() -> &'a BroadcastCosmosTxRequest {
        <BroadcastCosmosTxRequest as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastCosmosTxRequest {
    pub fn new() -> BroadcastCosmosTxRequest {
        ::std::default::Default::default()
    }

    // bytes tx = 1;


    pub fn get_tx(&self) -> &[u8] {
        &self.tx
    }
    pub fn clear_tx(&mut self) {
        self.tx.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx
    }

    // Take field
    pub fn take_tx(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx, ::std::vec::Vec::new())
    }

    // .injective_exchange_rpc.CosmosPubKey pub_key = 2;


    pub fn get_pub_key(&self) -> &CosmosPubKey {
        self.pub_key.as_ref().unwrap_or_else(|| <CosmosPubKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pub_key(&mut self) {
        self.pub_key.clear();
    }

    pub fn has_pub_key(&self) -> bool {
        self.pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pub_key(&mut self, v: CosmosPubKey) {
        self.pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pub_key(&mut self) -> &mut CosmosPubKey {
        if self.pub_key.is_none() {
            self.pub_key.set_default();
        }
        self.pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_pub_key(&mut self) -> CosmosPubKey {
        self.pub_key.take().unwrap_or_else(|| CosmosPubKey::new())
    }

    // string signature = 3;


    pub fn get_signature(&self) -> &str {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::string::String) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::string::String {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.signature, ::std::string::String::new())
    }

    // string sender_address = 4;


    pub fn get_sender_address(&self) -> &str {
        &self.sender_address
    }
    pub fn clear_sender_address(&mut self) {
        self.sender_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender_address(&mut self, v: ::std::string::String) {
        self.sender_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender_address(&mut self) -> &mut ::std::string::String {
        &mut self.sender_address
    }

    // Take field
    pub fn take_sender_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BroadcastCosmosTxRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pub_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.signature)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.tx);
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.signature);
        }
        if !self.sender_address.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sender_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx.is_empty() {
            os.write_bytes(1, &self.tx)?;
        }
        if let Some(ref v) = self.pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_string(3, &self.signature)?;
        }
        if !self.sender_address.is_empty() {
            os.write_string(4, &self.sender_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastCosmosTxRequest {
        BroadcastCosmosTxRequest::new()
    }

    fn default_instance() -> &'static BroadcastCosmosTxRequest {
        static instance: ::protobuf::rt::LazyV2<BroadcastCosmosTxRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastCosmosTxRequest::new)
    }
}

impl ::protobuf::Clear for BroadcastCosmosTxRequest {
    fn clear(&mut self) {
        self.tx.clear();
        self.pub_key.clear();
        self.signature.clear();
        self.sender_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastCosmosTxRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BroadcastCosmosTxResponse {
    // message fields
    pub tx_hash: ::std::string::String,
    pub height: i64,
    pub index: u32,
    pub codespace: ::std::string::String,
    pub code: u32,
    pub data: ::std::vec::Vec<u8>,
    pub raw_log: ::std::string::String,
    pub timestamp: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BroadcastCosmosTxResponse {
    fn default() -> &'a BroadcastCosmosTxResponse {
        <BroadcastCosmosTxResponse as ::protobuf::Message>::default_instance()
    }
}

impl BroadcastCosmosTxResponse {
    pub fn new() -> BroadcastCosmosTxResponse {
        ::std::default::Default::default()
    }

    // string tx_hash = 1;


    pub fn get_tx_hash(&self) -> &str {
        &self.tx_hash
    }
    pub fn clear_tx_hash(&mut self) {
        self.tx_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_hash(&mut self, v: ::std::string::String) {
        self.tx_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_hash(&mut self) -> &mut ::std::string::String {
        &mut self.tx_hash
    }

    // Take field
    pub fn take_tx_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tx_hash, ::std::string::String::new())
    }

    // sint64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // uint32 index = 3;


    pub fn get_index(&self) -> u32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    // string codespace = 4;


    pub fn get_codespace(&self) -> &str {
        &self.codespace
    }
    pub fn clear_codespace(&mut self) {
        self.codespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_codespace(&mut self, v: ::std::string::String) {
        self.codespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_codespace(&mut self) -> &mut ::std::string::String {
        &mut self.codespace
    }

    // Take field
    pub fn take_codespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.codespace, ::std::string::String::new())
    }

    // uint32 code = 5;


    pub fn get_code(&self) -> u32 {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = 0;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: u32) {
        self.code = v;
    }

    // bytes data = 6;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string raw_log = 7;


    pub fn get_raw_log(&self) -> &str {
        &self.raw_log
    }
    pub fn clear_raw_log(&mut self) {
        self.raw_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_log(&mut self, v: ::std::string::String) {
        self.raw_log = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_log(&mut self) -> &mut ::std::string::String {
        &mut self.raw_log
    }

    // Take field
    pub fn take_raw_log(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.raw_log, ::std::string::String::new())
    }

    // string timestamp = 8;


    pub fn get_timestamp(&self) -> &str {
        &self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::std::string::String) {
        self.timestamp = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BroadcastCosmosTxResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tx_hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.height = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.codespace)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.code = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.raw_log)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tx_hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.height);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.codespace.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.codespace);
        }
        if self.code != 0 {
            my_size += ::protobuf::rt::value_size(5, self.code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.data);
        }
        if !self.raw_log.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.raw_log);
        }
        if !self.timestamp.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tx_hash.is_empty() {
            os.write_string(1, &self.tx_hash)?;
        }
        if self.height != 0 {
            os.write_sint64(2, self.height)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        if !self.codespace.is_empty() {
            os.write_string(4, &self.codespace)?;
        }
        if self.code != 0 {
            os.write_uint32(5, self.code)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(6, &self.data)?;
        }
        if !self.raw_log.is_empty() {
            os.write_string(7, &self.raw_log)?;
        }
        if !self.timestamp.is_empty() {
            os.write_string(8, &self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BroadcastCosmosTxResponse {
        BroadcastCosmosTxResponse::new()
    }

    fn default_instance() -> &'static BroadcastCosmosTxResponse {
        static instance: ::protobuf::rt::LazyV2<BroadcastCosmosTxResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BroadcastCosmosTxResponse::new)
    }
}

impl ::protobuf::Clear for BroadcastCosmosTxResponse {
    fn clear(&mut self) {
        self.tx_hash.clear();
        self.height = 0;
        self.index = 0;
        self.codespace.clear();
        self.code = 0;
        self.data.clear();
        self.raw_log.clear();
        self.timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastCosmosTxResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetFeePayerRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFeePayerRequest {
    fn default() -> &'a GetFeePayerRequest {
        <GetFeePayerRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetFeePayerRequest {
    pub fn new() -> GetFeePayerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetFeePayerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFeePayerRequest {
        GetFeePayerRequest::new()
    }

    fn default_instance() -> &'static GetFeePayerRequest {
        static instance: ::protobuf::rt::LazyV2<GetFeePayerRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetFeePayerRequest::new)
    }
}

impl ::protobuf::Clear for GetFeePayerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFeePayerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct GetFeePayerResponse {
    // message fields
    pub fee_payer: ::std::string::String,
    pub fee_payer_pub_key: ::protobuf::SingularPtrField<CosmosPubKey>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFeePayerResponse {
    fn default() -> &'a GetFeePayerResponse {
        <GetFeePayerResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetFeePayerResponse {
    pub fn new() -> GetFeePayerResponse {
        ::std::default::Default::default()
    }

    // string fee_payer = 1;


    pub fn get_fee_payer(&self) -> &str {
        &self.fee_payer
    }
    pub fn clear_fee_payer(&mut self) {
        self.fee_payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_payer(&mut self, v: ::std::string::String) {
        self.fee_payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer(&mut self) -> &mut ::std::string::String {
        &mut self.fee_payer
    }

    // Take field
    pub fn take_fee_payer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fee_payer, ::std::string::String::new())
    }

    // .injective_exchange_rpc.CosmosPubKey fee_payer_pub_key = 2;


    pub fn get_fee_payer_pub_key(&self) -> &CosmosPubKey {
        self.fee_payer_pub_key.as_ref().unwrap_or_else(|| <CosmosPubKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fee_payer_pub_key(&mut self) {
        self.fee_payer_pub_key.clear();
    }

    pub fn has_fee_payer_pub_key(&self) -> bool {
        self.fee_payer_pub_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fee_payer_pub_key(&mut self, v: CosmosPubKey) {
        self.fee_payer_pub_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fee_payer_pub_key(&mut self) -> &mut CosmosPubKey {
        if self.fee_payer_pub_key.is_none() {
            self.fee_payer_pub_key.set_default();
        }
        self.fee_payer_pub_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_fee_payer_pub_key(&mut self) -> CosmosPubKey {
        self.fee_payer_pub_key.take().unwrap_or_else(|| CosmosPubKey::new())
    }
}

impl ::protobuf::Message for GetFeePayerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.fee_payer_pub_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fee_payer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fee_payer_pub_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.fee_payer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.fee_payer);
        }
        if let Some(ref v) = self.fee_payer_pub_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.fee_payer.is_empty() {
            os.write_string(1, &self.fee_payer)?;
        }
        if let Some(ref v) = self.fee_payer_pub_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFeePayerResponse {
        GetFeePayerResponse::new()
    }

    fn default_instance() -> &'static GetFeePayerResponse {
        static instance: ::protobuf::rt::LazyV2<GetFeePayerResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetFeePayerResponse::new)
    }
}

impl ::protobuf::Clear for GetFeePayerResponse {
    fn clear(&mut self) {
        self.fee_payer.clear();
        self.fee_payer_pub_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFeePayerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

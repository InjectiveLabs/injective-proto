// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/wasmx/v1/wasmx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub is_execution_enabled: bool,
    pub max_begin_block_total_gas: u64,
    pub max_contract_gas_limit: u64,
    pub min_gas_price: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // bool is_execution_enabled = 1;


    pub fn get_is_execution_enabled(&self) -> bool {
        self.is_execution_enabled
    }
    pub fn clear_is_execution_enabled(&mut self) {
        self.is_execution_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_is_execution_enabled(&mut self, v: bool) {
        self.is_execution_enabled = v;
    }

    // uint64 max_begin_block_total_gas = 2;


    pub fn get_max_begin_block_total_gas(&self) -> u64 {
        self.max_begin_block_total_gas
    }
    pub fn clear_max_begin_block_total_gas(&mut self) {
        self.max_begin_block_total_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_begin_block_total_gas(&mut self, v: u64) {
        self.max_begin_block_total_gas = v;
    }

    // uint64 max_contract_gas_limit = 3;


    pub fn get_max_contract_gas_limit(&self) -> u64 {
        self.max_contract_gas_limit
    }
    pub fn clear_max_contract_gas_limit(&mut self) {
        self.max_contract_gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_contract_gas_limit(&mut self, v: u64) {
        self.max_contract_gas_limit = v;
    }

    // uint64 min_gas_price = 4;


    pub fn get_min_gas_price(&self) -> u64 {
        self.min_gas_price
    }
    pub fn clear_min_gas_price(&mut self) {
        self.min_gas_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_gas_price(&mut self, v: u64) {
        self.min_gas_price = v;
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_execution_enabled = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_begin_block_total_gas = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_contract_gas_limit = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_gas_price = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.is_execution_enabled != false {
            my_size += 2;
        }
        if self.max_begin_block_total_gas != 0 {
            my_size += ::protobuf::rt::value_size(2, self.max_begin_block_total_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.max_contract_gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(3, self.max_contract_gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_gas_price != 0 {
            my_size += ::protobuf::rt::value_size(4, self.min_gas_price, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.is_execution_enabled != false {
            os.write_bool(1, self.is_execution_enabled)?;
        }
        if self.max_begin_block_total_gas != 0 {
            os.write_uint64(2, self.max_begin_block_total_gas)?;
        }
        if self.max_contract_gas_limit != 0 {
            os.write_uint64(3, self.max_contract_gas_limit)?;
        }
        if self.min_gas_price != 0 {
            os.write_uint64(4, self.min_gas_price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.is_execution_enabled = false;
        self.max_begin_block_total_gas = 0;
        self.max_contract_gas_limit = 0;
        self.min_gas_price = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RegisteredContract {
    // message fields
    pub gas_limit: u64,
    pub gas_price: u64,
    pub is_executable: bool,
    pub code_id: u64,
    pub admin_address: ::std::string::String,
    pub granter_address: ::std::string::String,
    pub fund_mode: super::proposal::FundingMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RegisteredContract {
    fn default() -> &'a RegisteredContract {
        <RegisteredContract as ::protobuf::Message>::default_instance()
    }
}

impl RegisteredContract {
    pub fn new() -> RegisteredContract {
        ::std::default::Default::default()
    }

    // uint64 gas_limit = 1;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = v;
    }

    // uint64 gas_price = 2;


    pub fn get_gas_price(&self) -> u64 {
        self.gas_price
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: u64) {
        self.gas_price = v;
    }

    // bool is_executable = 3;


    pub fn get_is_executable(&self) -> bool {
        self.is_executable
    }
    pub fn clear_is_executable(&mut self) {
        self.is_executable = false;
    }

    // Param is passed by value, moved
    pub fn set_is_executable(&mut self, v: bool) {
        self.is_executable = v;
    }

    // uint64 code_id = 4;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }

    // string admin_address = 5;


    pub fn get_admin_address(&self) -> &str {
        &self.admin_address
    }
    pub fn clear_admin_address(&mut self) {
        self.admin_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_address(&mut self, v: ::std::string::String) {
        self.admin_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_address(&mut self) -> &mut ::std::string::String {
        &mut self.admin_address
    }

    // Take field
    pub fn take_admin_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin_address, ::std::string::String::new())
    }

    // string granter_address = 6;


    pub fn get_granter_address(&self) -> &str {
        &self.granter_address
    }
    pub fn clear_granter_address(&mut self) {
        self.granter_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter_address(&mut self, v: ::std::string::String) {
        self.granter_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter_address(&mut self) -> &mut ::std::string::String {
        &mut self.granter_address
    }

    // Take field
    pub fn take_granter_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter_address, ::std::string::String::new())
    }

    // .injective.wasmx.v1.FundingMode fund_mode = 7;


    pub fn get_fund_mode(&self) -> super::proposal::FundingMode {
        self.fund_mode
    }
    pub fn clear_fund_mode(&mut self) {
        self.fund_mode = super::proposal::FundingMode::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_fund_mode(&mut self, v: super::proposal::FundingMode) {
        self.fund_mode = v;
    }
}

impl ::protobuf::Message for RegisteredContract {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_price = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_executable = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin_address)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter_address)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.fund_mode, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_price != 0 {
            my_size += ::protobuf::rt::value_size(2, self.gas_price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_executable != false {
            my_size += 2;
        }
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.admin_address.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.admin_address);
        }
        if !self.granter_address.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.granter_address);
        }
        if self.fund_mode != super::proposal::FundingMode::Unspecified {
            my_size += ::protobuf::rt::enum_size(7, self.fund_mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.gas_limit != 0 {
            os.write_uint64(1, self.gas_limit)?;
        }
        if self.gas_price != 0 {
            os.write_uint64(2, self.gas_price)?;
        }
        if self.is_executable != false {
            os.write_bool(3, self.is_executable)?;
        }
        if self.code_id != 0 {
            os.write_uint64(4, self.code_id)?;
        }
        if !self.admin_address.is_empty() {
            os.write_string(5, &self.admin_address)?;
        }
        if !self.granter_address.is_empty() {
            os.write_string(6, &self.granter_address)?;
        }
        if self.fund_mode != super::proposal::FundingMode::Unspecified {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.fund_mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RegisteredContract {
        RegisteredContract::new()
    }

    fn default_instance() -> &'static RegisteredContract {
        static instance: ::protobuf::rt::LazyV2<RegisteredContract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RegisteredContract::new)
    }
}

impl ::protobuf::Clear for RegisteredContract {
    fn clear(&mut self) {
        self.gas_limit = 0;
        self.gas_price = 0;
        self.is_executable = false;
        self.code_id = 0;
        self.admin_address.clear();
        self.granter_address.clear();
        self.fund_mode = super::proposal::FundingMode::Unspecified;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RegisteredContract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/params.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub peggy_id: ::std::string::String,
    pub contract_source_hash: ::std::string::String,
    pub bridge_ethereum_address: ::std::string::String,
    pub bridge_chain_id: u64,
    pub signed_valsets_window: u64,
    pub signed_batches_window: u64,
    pub signed_claims_window: u64,
    pub target_batch_timeout: u64,
    pub average_block_time: u64,
    pub average_ethereum_block_time: u64,
    pub slash_fraction_valset: ::std::vec::Vec<u8>,
    pub slash_fraction_batch: ::std::vec::Vec<u8>,
    pub slash_fraction_claim: ::std::vec::Vec<u8>,
    pub slash_fraction_conflicting_claim: ::std::vec::Vec<u8>,
    pub unbond_slashing_valsets_window: u64,
    pub slash_fraction_bad_eth_signature: ::std::vec::Vec<u8>,
    pub cosmos_coin_denom: ::std::string::String,
    pub cosmos_coin_erc20_contract: ::std::string::String,
    pub claim_slashing_enabled: bool,
    pub bridge_contract_start_height: u64,
    pub valset_reward: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // string peggy_id = 1;


    pub fn get_peggy_id(&self) -> &str {
        &self.peggy_id
    }
    pub fn clear_peggy_id(&mut self) {
        self.peggy_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peggy_id(&mut self, v: ::std::string::String) {
        self.peggy_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peggy_id(&mut self) -> &mut ::std::string::String {
        &mut self.peggy_id
    }

    // Take field
    pub fn take_peggy_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peggy_id, ::std::string::String::new())
    }

    // string contract_source_hash = 2;


    pub fn get_contract_source_hash(&self) -> &str {
        &self.contract_source_hash
    }
    pub fn clear_contract_source_hash(&mut self) {
        self.contract_source_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_source_hash(&mut self, v: ::std::string::String) {
        self.contract_source_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_source_hash(&mut self) -> &mut ::std::string::String {
        &mut self.contract_source_hash
    }

    // Take field
    pub fn take_contract_source_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_source_hash, ::std::string::String::new())
    }

    // string bridge_ethereum_address = 3;


    pub fn get_bridge_ethereum_address(&self) -> &str {
        &self.bridge_ethereum_address
    }
    pub fn clear_bridge_ethereum_address(&mut self) {
        self.bridge_ethereum_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_bridge_ethereum_address(&mut self, v: ::std::string::String) {
        self.bridge_ethereum_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bridge_ethereum_address(&mut self) -> &mut ::std::string::String {
        &mut self.bridge_ethereum_address
    }

    // Take field
    pub fn take_bridge_ethereum_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.bridge_ethereum_address, ::std::string::String::new())
    }

    // uint64 bridge_chain_id = 4;


    pub fn get_bridge_chain_id(&self) -> u64 {
        self.bridge_chain_id
    }
    pub fn clear_bridge_chain_id(&mut self) {
        self.bridge_chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_bridge_chain_id(&mut self, v: u64) {
        self.bridge_chain_id = v;
    }

    // uint64 signed_valsets_window = 5;


    pub fn get_signed_valsets_window(&self) -> u64 {
        self.signed_valsets_window
    }
    pub fn clear_signed_valsets_window(&mut self) {
        self.signed_valsets_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_signed_valsets_window(&mut self, v: u64) {
        self.signed_valsets_window = v;
    }

    // uint64 signed_batches_window = 6;


    pub fn get_signed_batches_window(&self) -> u64 {
        self.signed_batches_window
    }
    pub fn clear_signed_batches_window(&mut self) {
        self.signed_batches_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_signed_batches_window(&mut self, v: u64) {
        self.signed_batches_window = v;
    }

    // uint64 signed_claims_window = 7;


    pub fn get_signed_claims_window(&self) -> u64 {
        self.signed_claims_window
    }
    pub fn clear_signed_claims_window(&mut self) {
        self.signed_claims_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_signed_claims_window(&mut self, v: u64) {
        self.signed_claims_window = v;
    }

    // uint64 target_batch_timeout = 8;


    pub fn get_target_batch_timeout(&self) -> u64 {
        self.target_batch_timeout
    }
    pub fn clear_target_batch_timeout(&mut self) {
        self.target_batch_timeout = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_batch_timeout(&mut self, v: u64) {
        self.target_batch_timeout = v;
    }

    // uint64 average_block_time = 9;


    pub fn get_average_block_time(&self) -> u64 {
        self.average_block_time
    }
    pub fn clear_average_block_time(&mut self) {
        self.average_block_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_average_block_time(&mut self, v: u64) {
        self.average_block_time = v;
    }

    // uint64 average_ethereum_block_time = 10;


    pub fn get_average_ethereum_block_time(&self) -> u64 {
        self.average_ethereum_block_time
    }
    pub fn clear_average_ethereum_block_time(&mut self) {
        self.average_ethereum_block_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_average_ethereum_block_time(&mut self, v: u64) {
        self.average_ethereum_block_time = v;
    }

    // bytes slash_fraction_valset = 11;


    pub fn get_slash_fraction_valset(&self) -> &[u8] {
        &self.slash_fraction_valset
    }
    pub fn clear_slash_fraction_valset(&mut self) {
        self.slash_fraction_valset.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction_valset(&mut self, v: ::std::vec::Vec<u8>) {
        self.slash_fraction_valset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction_valset(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.slash_fraction_valset
    }

    // Take field
    pub fn take_slash_fraction_valset(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.slash_fraction_valset, ::std::vec::Vec::new())
    }

    // bytes slash_fraction_batch = 12;


    pub fn get_slash_fraction_batch(&self) -> &[u8] {
        &self.slash_fraction_batch
    }
    pub fn clear_slash_fraction_batch(&mut self) {
        self.slash_fraction_batch.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction_batch(&mut self, v: ::std::vec::Vec<u8>) {
        self.slash_fraction_batch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction_batch(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.slash_fraction_batch
    }

    // Take field
    pub fn take_slash_fraction_batch(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.slash_fraction_batch, ::std::vec::Vec::new())
    }

    // bytes slash_fraction_claim = 13;


    pub fn get_slash_fraction_claim(&self) -> &[u8] {
        &self.slash_fraction_claim
    }
    pub fn clear_slash_fraction_claim(&mut self) {
        self.slash_fraction_claim.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction_claim(&mut self, v: ::std::vec::Vec<u8>) {
        self.slash_fraction_claim = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction_claim(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.slash_fraction_claim
    }

    // Take field
    pub fn take_slash_fraction_claim(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.slash_fraction_claim, ::std::vec::Vec::new())
    }

    // bytes slash_fraction_conflicting_claim = 14;


    pub fn get_slash_fraction_conflicting_claim(&self) -> &[u8] {
        &self.slash_fraction_conflicting_claim
    }
    pub fn clear_slash_fraction_conflicting_claim(&mut self) {
        self.slash_fraction_conflicting_claim.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction_conflicting_claim(&mut self, v: ::std::vec::Vec<u8>) {
        self.slash_fraction_conflicting_claim = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction_conflicting_claim(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.slash_fraction_conflicting_claim
    }

    // Take field
    pub fn take_slash_fraction_conflicting_claim(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.slash_fraction_conflicting_claim, ::std::vec::Vec::new())
    }

    // uint64 unbond_slashing_valsets_window = 15;


    pub fn get_unbond_slashing_valsets_window(&self) -> u64 {
        self.unbond_slashing_valsets_window
    }
    pub fn clear_unbond_slashing_valsets_window(&mut self) {
        self.unbond_slashing_valsets_window = 0;
    }

    // Param is passed by value, moved
    pub fn set_unbond_slashing_valsets_window(&mut self, v: u64) {
        self.unbond_slashing_valsets_window = v;
    }

    // bytes slash_fraction_bad_eth_signature = 16;


    pub fn get_slash_fraction_bad_eth_signature(&self) -> &[u8] {
        &self.slash_fraction_bad_eth_signature
    }
    pub fn clear_slash_fraction_bad_eth_signature(&mut self) {
        self.slash_fraction_bad_eth_signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_slash_fraction_bad_eth_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.slash_fraction_bad_eth_signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_slash_fraction_bad_eth_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.slash_fraction_bad_eth_signature
    }

    // Take field
    pub fn take_slash_fraction_bad_eth_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.slash_fraction_bad_eth_signature, ::std::vec::Vec::new())
    }

    // string cosmos_coin_denom = 17;


    pub fn get_cosmos_coin_denom(&self) -> &str {
        &self.cosmos_coin_denom
    }
    pub fn clear_cosmos_coin_denom(&mut self) {
        self.cosmos_coin_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_coin_denom(&mut self, v: ::std::string::String) {
        self.cosmos_coin_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_coin_denom(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_coin_denom
    }

    // Take field
    pub fn take_cosmos_coin_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_coin_denom, ::std::string::String::new())
    }

    // string cosmos_coin_erc20_contract = 18;


    pub fn get_cosmos_coin_erc20_contract(&self) -> &str {
        &self.cosmos_coin_erc20_contract
    }
    pub fn clear_cosmos_coin_erc20_contract(&mut self) {
        self.cosmos_coin_erc20_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_cosmos_coin_erc20_contract(&mut self, v: ::std::string::String) {
        self.cosmos_coin_erc20_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cosmos_coin_erc20_contract(&mut self) -> &mut ::std::string::String {
        &mut self.cosmos_coin_erc20_contract
    }

    // Take field
    pub fn take_cosmos_coin_erc20_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cosmos_coin_erc20_contract, ::std::string::String::new())
    }

    // bool claim_slashing_enabled = 19;


    pub fn get_claim_slashing_enabled(&self) -> bool {
        self.claim_slashing_enabled
    }
    pub fn clear_claim_slashing_enabled(&mut self) {
        self.claim_slashing_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_claim_slashing_enabled(&mut self, v: bool) {
        self.claim_slashing_enabled = v;
    }

    // uint64 bridge_contract_start_height = 20;


    pub fn get_bridge_contract_start_height(&self) -> u64 {
        self.bridge_contract_start_height
    }
    pub fn clear_bridge_contract_start_height(&mut self) {
        self.bridge_contract_start_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_bridge_contract_start_height(&mut self, v: u64) {
        self.bridge_contract_start_height = v;
    }

    // .cosmos.base.v1beta1.Coin valset_reward = 21;


    pub fn get_valset_reward(&self) -> &super::coin::Coin {
        self.valset_reward.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_valset_reward(&mut self) {
        self.valset_reward.clear();
    }

    pub fn has_valset_reward(&self) -> bool {
        self.valset_reward.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valset_reward(&mut self, v: super::coin::Coin) {
        self.valset_reward = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_valset_reward(&mut self) -> &mut super::coin::Coin {
        if self.valset_reward.is_none() {
            self.valset_reward.set_default();
        }
        self.valset_reward.as_mut().unwrap()
    }

    // Take field
    pub fn take_valset_reward(&mut self) -> super::coin::Coin {
        self.valset_reward.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.valset_reward {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peggy_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_source_hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.bridge_ethereum_address)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bridge_chain_id = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.signed_valsets_window = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.signed_batches_window = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.signed_claims_window = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.target_batch_timeout = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.average_block_time = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.average_ethereum_block_time = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.slash_fraction_valset)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.slash_fraction_batch)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.slash_fraction_claim)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.slash_fraction_conflicting_claim)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.unbond_slashing_valsets_window = tmp;
                },
                16 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.slash_fraction_bad_eth_signature)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_coin_denom)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cosmos_coin_erc20_contract)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.claim_slashing_enabled = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.bridge_contract_start_height = tmp;
                },
                21 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.valset_reward)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.peggy_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.peggy_id);
        }
        if !self.contract_source_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.contract_source_hash);
        }
        if !self.bridge_ethereum_address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.bridge_ethereum_address);
        }
        if self.bridge_chain_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.bridge_chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signed_valsets_window != 0 {
            my_size += ::protobuf::rt::value_size(5, self.signed_valsets_window, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signed_batches_window != 0 {
            my_size += ::protobuf::rt::value_size(6, self.signed_batches_window, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signed_claims_window != 0 {
            my_size += ::protobuf::rt::value_size(7, self.signed_claims_window, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.target_batch_timeout != 0 {
            my_size += ::protobuf::rt::value_size(8, self.target_batch_timeout, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.average_block_time != 0 {
            my_size += ::protobuf::rt::value_size(9, self.average_block_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.average_ethereum_block_time != 0 {
            my_size += ::protobuf::rt::value_size(10, self.average_ethereum_block_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slash_fraction_valset.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.slash_fraction_valset);
        }
        if !self.slash_fraction_batch.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.slash_fraction_batch);
        }
        if !self.slash_fraction_claim.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.slash_fraction_claim);
        }
        if !self.slash_fraction_conflicting_claim.is_empty() {
            my_size += ::protobuf::rt::bytes_size(14, &self.slash_fraction_conflicting_claim);
        }
        if self.unbond_slashing_valsets_window != 0 {
            my_size += ::protobuf::rt::value_size(15, self.unbond_slashing_valsets_window, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.slash_fraction_bad_eth_signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(16, &self.slash_fraction_bad_eth_signature);
        }
        if !self.cosmos_coin_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(17, &self.cosmos_coin_denom);
        }
        if !self.cosmos_coin_erc20_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.cosmos_coin_erc20_contract);
        }
        if self.claim_slashing_enabled != false {
            my_size += 3;
        }
        if self.bridge_contract_start_height != 0 {
            my_size += ::protobuf::rt::value_size(20, self.bridge_contract_start_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.valset_reward.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.peggy_id.is_empty() {
            os.write_string(1, &self.peggy_id)?;
        }
        if !self.contract_source_hash.is_empty() {
            os.write_string(2, &self.contract_source_hash)?;
        }
        if !self.bridge_ethereum_address.is_empty() {
            os.write_string(3, &self.bridge_ethereum_address)?;
        }
        if self.bridge_chain_id != 0 {
            os.write_uint64(4, self.bridge_chain_id)?;
        }
        if self.signed_valsets_window != 0 {
            os.write_uint64(5, self.signed_valsets_window)?;
        }
        if self.signed_batches_window != 0 {
            os.write_uint64(6, self.signed_batches_window)?;
        }
        if self.signed_claims_window != 0 {
            os.write_uint64(7, self.signed_claims_window)?;
        }
        if self.target_batch_timeout != 0 {
            os.write_uint64(8, self.target_batch_timeout)?;
        }
        if self.average_block_time != 0 {
            os.write_uint64(9, self.average_block_time)?;
        }
        if self.average_ethereum_block_time != 0 {
            os.write_uint64(10, self.average_ethereum_block_time)?;
        }
        if !self.slash_fraction_valset.is_empty() {
            os.write_bytes(11, &self.slash_fraction_valset)?;
        }
        if !self.slash_fraction_batch.is_empty() {
            os.write_bytes(12, &self.slash_fraction_batch)?;
        }
        if !self.slash_fraction_claim.is_empty() {
            os.write_bytes(13, &self.slash_fraction_claim)?;
        }
        if !self.slash_fraction_conflicting_claim.is_empty() {
            os.write_bytes(14, &self.slash_fraction_conflicting_claim)?;
        }
        if self.unbond_slashing_valsets_window != 0 {
            os.write_uint64(15, self.unbond_slashing_valsets_window)?;
        }
        if !self.slash_fraction_bad_eth_signature.is_empty() {
            os.write_bytes(16, &self.slash_fraction_bad_eth_signature)?;
        }
        if !self.cosmos_coin_denom.is_empty() {
            os.write_string(17, &self.cosmos_coin_denom)?;
        }
        if !self.cosmos_coin_erc20_contract.is_empty() {
            os.write_string(18, &self.cosmos_coin_erc20_contract)?;
        }
        if self.claim_slashing_enabled != false {
            os.write_bool(19, self.claim_slashing_enabled)?;
        }
        if self.bridge_contract_start_height != 0 {
            os.write_uint64(20, self.bridge_contract_start_height)?;
        }
        if let Some(ref v) = self.valset_reward.as_ref() {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.peggy_id.clear();
        self.contract_source_hash.clear();
        self.bridge_ethereum_address.clear();
        self.bridge_chain_id = 0;
        self.signed_valsets_window = 0;
        self.signed_batches_window = 0;
        self.signed_claims_window = 0;
        self.target_batch_timeout = 0;
        self.average_block_time = 0;
        self.average_ethereum_block_time = 0;
        self.slash_fraction_valset.clear();
        self.slash_fraction_batch.clear();
        self.slash_fraction_claim.clear();
        self.slash_fraction_conflicting_claim.clear();
        self.unbond_slashing_valsets_window = 0;
        self.slash_fraction_bad_eth_signature.clear();
        self.cosmos_coin_denom.clear();
        self.cosmos_coin_erc20_contract.clear();
        self.claim_slashing_enabled = false;
        self.bridge_contract_start_height = 0;
        self.valset_reward.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

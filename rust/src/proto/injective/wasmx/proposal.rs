// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/wasmx/v1/proposal.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContractRegistrationRequestProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub contract_registration_request: ::protobuf::SingularPtrField<ContractRegistrationRequest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContractRegistrationRequestProposal {
    fn default() -> &'a ContractRegistrationRequestProposal {
        <ContractRegistrationRequestProposal as ::protobuf::Message>::default_instance()
    }
}

impl ContractRegistrationRequestProposal {
    pub fn new() -> ContractRegistrationRequestProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // .injective.wasmx.v1.ContractRegistrationRequest contract_registration_request = 3;


    pub fn get_contract_registration_request(&self) -> &ContractRegistrationRequest {
        self.contract_registration_request.as_ref().unwrap_or_else(|| <ContractRegistrationRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_contract_registration_request(&mut self) {
        self.contract_registration_request.clear();
    }

    pub fn has_contract_registration_request(&self) -> bool {
        self.contract_registration_request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract_registration_request(&mut self, v: ContractRegistrationRequest) {
        self.contract_registration_request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_registration_request(&mut self) -> &mut ContractRegistrationRequest {
        if self.contract_registration_request.is_none() {
            self.contract_registration_request.set_default();
        }
        self.contract_registration_request.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract_registration_request(&mut self) -> ContractRegistrationRequest {
        self.contract_registration_request.take().unwrap_or_else(|| ContractRegistrationRequest::new())
    }
}

impl ::protobuf::Message for ContractRegistrationRequestProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_registration_request {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract_registration_request)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if let Some(ref v) = self.contract_registration_request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if let Some(ref v) = self.contract_registration_request.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractRegistrationRequestProposal {
        ContractRegistrationRequestProposal::new()
    }

    fn default_instance() -> &'static ContractRegistrationRequestProposal {
        static instance: ::protobuf::rt::LazyV2<ContractRegistrationRequestProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContractRegistrationRequestProposal::new)
    }
}

impl ::protobuf::Clear for ContractRegistrationRequestProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.contract_registration_request.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractRegistrationRequestProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchContractRegistrationRequestProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub contract_registration_requests: ::protobuf::RepeatedField<ContractRegistrationRequest>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchContractRegistrationRequestProposal {
    fn default() -> &'a BatchContractRegistrationRequestProposal {
        <BatchContractRegistrationRequestProposal as ::protobuf::Message>::default_instance()
    }
}

impl BatchContractRegistrationRequestProposal {
    pub fn new() -> BatchContractRegistrationRequestProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .injective.wasmx.v1.ContractRegistrationRequest contract_registration_requests = 3;


    pub fn get_contract_registration_requests(&self) -> &[ContractRegistrationRequest] {
        &self.contract_registration_requests
    }
    pub fn clear_contract_registration_requests(&mut self) {
        self.contract_registration_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_registration_requests(&mut self, v: ::protobuf::RepeatedField<ContractRegistrationRequest>) {
        self.contract_registration_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_contract_registration_requests(&mut self) -> &mut ::protobuf::RepeatedField<ContractRegistrationRequest> {
        &mut self.contract_registration_requests
    }

    // Take field
    pub fn take_contract_registration_requests(&mut self) -> ::protobuf::RepeatedField<ContractRegistrationRequest> {
        ::std::mem::replace(&mut self.contract_registration_requests, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchContractRegistrationRequestProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.contract_registration_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.contract_registration_requests)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.contract_registration_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.contract_registration_requests {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchContractRegistrationRequestProposal {
        BatchContractRegistrationRequestProposal::new()
    }

    fn default_instance() -> &'static BatchContractRegistrationRequestProposal {
        static instance: ::protobuf::rt::LazyV2<BatchContractRegistrationRequestProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchContractRegistrationRequestProposal::new)
    }
}

impl ::protobuf::Clear for BatchContractRegistrationRequestProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.contract_registration_requests.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchContractRegistrationRequestProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchContractDeregistrationProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub contracts: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchContractDeregistrationProposal {
    fn default() -> &'a BatchContractDeregistrationProposal {
        <BatchContractDeregistrationProposal as ::protobuf::Message>::default_instance()
    }
}

impl BatchContractDeregistrationProposal {
    pub fn new() -> BatchContractDeregistrationProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated string contracts = 3;


    pub fn get_contracts(&self) -> &[::std::string::String] {
        &self.contracts
    }
    pub fn clear_contracts(&mut self) {
        self.contracts.clear();
    }

    // Param is passed by value, moved
    pub fn set_contracts(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.contracts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_contracts(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.contracts
    }

    // Take field
    pub fn take_contracts(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.contracts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchContractDeregistrationProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.contracts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.contracts {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.contracts {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchContractDeregistrationProposal {
        BatchContractDeregistrationProposal::new()
    }

    fn default_instance() -> &'static BatchContractDeregistrationProposal {
        static instance: ::protobuf::rt::LazyV2<BatchContractDeregistrationProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchContractDeregistrationProposal::new)
    }
}

impl ::protobuf::Clear for BatchContractDeregistrationProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.contracts.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchContractDeregistrationProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ContractRegistrationRequest {
    // message fields
    pub contract_address: ::std::string::String,
    pub gas_limit: u64,
    pub gas_price: u64,
    pub should_pin_contract: bool,
    pub is_migration_allowed: bool,
    pub code_id: u64,
    pub admin_address: ::std::string::String,
    pub granter_address: ::std::string::String,
    pub funding_mode: FundingMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContractRegistrationRequest {
    fn default() -> &'a ContractRegistrationRequest {
        <ContractRegistrationRequest as ::protobuf::Message>::default_instance()
    }
}

impl ContractRegistrationRequest {
    pub fn new() -> ContractRegistrationRequest {
        ::std::default::Default::default()
    }

    // string contract_address = 1;


    pub fn get_contract_address(&self) -> &str {
        &self.contract_address
    }
    pub fn clear_contract_address(&mut self) {
        self.contract_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract_address(&mut self, v: ::std::string::String) {
        self.contract_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract_address(&mut self) -> &mut ::std::string::String {
        &mut self.contract_address
    }

    // Take field
    pub fn take_contract_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract_address, ::std::string::String::new())
    }

    // uint64 gas_limit = 2;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = v;
    }

    // uint64 gas_price = 3;


    pub fn get_gas_price(&self) -> u64 {
        self.gas_price
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: u64) {
        self.gas_price = v;
    }

    // bool should_pin_contract = 4;


    pub fn get_should_pin_contract(&self) -> bool {
        self.should_pin_contract
    }
    pub fn clear_should_pin_contract(&mut self) {
        self.should_pin_contract = false;
    }

    // Param is passed by value, moved
    pub fn set_should_pin_contract(&mut self, v: bool) {
        self.should_pin_contract = v;
    }

    // bool is_migration_allowed = 5;


    pub fn get_is_migration_allowed(&self) -> bool {
        self.is_migration_allowed
    }
    pub fn clear_is_migration_allowed(&mut self) {
        self.is_migration_allowed = false;
    }

    // Param is passed by value, moved
    pub fn set_is_migration_allowed(&mut self, v: bool) {
        self.is_migration_allowed = v;
    }

    // uint64 code_id = 6;


    pub fn get_code_id(&self) -> u64 {
        self.code_id
    }
    pub fn clear_code_id(&mut self) {
        self.code_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_code_id(&mut self, v: u64) {
        self.code_id = v;
    }

    // string admin_address = 7;


    pub fn get_admin_address(&self) -> &str {
        &self.admin_address
    }
    pub fn clear_admin_address(&mut self) {
        self.admin_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_address(&mut self, v: ::std::string::String) {
        self.admin_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_address(&mut self) -> &mut ::std::string::String {
        &mut self.admin_address
    }

    // Take field
    pub fn take_admin_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin_address, ::std::string::String::new())
    }

    // string granter_address = 8;


    pub fn get_granter_address(&self) -> &str {
        &self.granter_address
    }
    pub fn clear_granter_address(&mut self) {
        self.granter_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_granter_address(&mut self, v: ::std::string::String) {
        self.granter_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_granter_address(&mut self) -> &mut ::std::string::String {
        &mut self.granter_address
    }

    // Take field
    pub fn take_granter_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.granter_address, ::std::string::String::new())
    }

    // .injective.wasmx.v1.FundingMode funding_mode = 9;


    pub fn get_funding_mode(&self) -> FundingMode {
        self.funding_mode
    }
    pub fn clear_funding_mode(&mut self) {
        self.funding_mode = FundingMode::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_funding_mode(&mut self, v: FundingMode) {
        self.funding_mode = v;
    }
}

impl ::protobuf::Message for ContractRegistrationRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract_address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_price = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.should_pin_contract = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_migration_allowed = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.code_id = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin_address)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.granter_address)?;
                },
                9 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.funding_mode, 9, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract_address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract_address);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gas_price != 0 {
            my_size += ::protobuf::rt::value_size(3, self.gas_price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.should_pin_contract != false {
            my_size += 2;
        }
        if self.is_migration_allowed != false {
            my_size += 2;
        }
        if self.code_id != 0 {
            my_size += ::protobuf::rt::value_size(6, self.code_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.admin_address.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.admin_address);
        }
        if !self.granter_address.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.granter_address);
        }
        if self.funding_mode != FundingMode::Unspecified {
            my_size += ::protobuf::rt::enum_size(9, self.funding_mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract_address.is_empty() {
            os.write_string(1, &self.contract_address)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(2, self.gas_limit)?;
        }
        if self.gas_price != 0 {
            os.write_uint64(3, self.gas_price)?;
        }
        if self.should_pin_contract != false {
            os.write_bool(4, self.should_pin_contract)?;
        }
        if self.is_migration_allowed != false {
            os.write_bool(5, self.is_migration_allowed)?;
        }
        if self.code_id != 0 {
            os.write_uint64(6, self.code_id)?;
        }
        if !self.admin_address.is_empty() {
            os.write_string(7, &self.admin_address)?;
        }
        if !self.granter_address.is_empty() {
            os.write_string(8, &self.granter_address)?;
        }
        if self.funding_mode != FundingMode::Unspecified {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(&self.funding_mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContractRegistrationRequest {
        ContractRegistrationRequest::new()
    }

    fn default_instance() -> &'static ContractRegistrationRequest {
        static instance: ::protobuf::rt::LazyV2<ContractRegistrationRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContractRegistrationRequest::new)
    }
}

impl ::protobuf::Clear for ContractRegistrationRequest {
    fn clear(&mut self) {
        self.contract_address.clear();
        self.gas_limit = 0;
        self.gas_price = 0;
        self.should_pin_contract = false;
        self.is_migration_allowed = false;
        self.code_id = 0;
        self.admin_address.clear();
        self.granter_address.clear();
        self.funding_mode = FundingMode::Unspecified;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ContractRegistrationRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchStoreCodeProposal {
    // message fields
    pub title: ::std::string::String,
    pub description: ::std::string::String,
    pub proposals: ::protobuf::RepeatedField<super::proposal::StoreCodeProposal>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchStoreCodeProposal {
    fn default() -> &'a BatchStoreCodeProposal {
        <BatchStoreCodeProposal as ::protobuf::Message>::default_instance()
    }
}

impl BatchStoreCodeProposal {
    pub fn new() -> BatchStoreCodeProposal {
        ::std::default::Default::default()
    }

    // string title = 1;


    pub fn get_title(&self) -> &str {
        &self.title
    }
    pub fn clear_title(&mut self) {
        self.title.clear();
    }

    // Param is passed by value, moved
    pub fn set_title(&mut self, v: ::std::string::String) {
        self.title = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_title(&mut self) -> &mut ::std::string::String {
        &mut self.title
    }

    // Take field
    pub fn take_title(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.title, ::std::string::String::new())
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // repeated .cosmwasm.wasm.v1.StoreCodeProposal proposals = 3;


    pub fn get_proposals(&self) -> &[super::proposal::StoreCodeProposal] {
        &self.proposals
    }
    pub fn clear_proposals(&mut self) {
        self.proposals.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposals(&mut self, v: ::protobuf::RepeatedField<super::proposal::StoreCodeProposal>) {
        self.proposals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_proposals(&mut self) -> &mut ::protobuf::RepeatedField<super::proposal::StoreCodeProposal> {
        &mut self.proposals
    }

    // Take field
    pub fn take_proposals(&mut self) -> ::protobuf::RepeatedField<super::proposal::StoreCodeProposal> {
        ::std::mem::replace(&mut self.proposals, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchStoreCodeProposal {
    fn is_initialized(&self) -> bool {
        for v in &self.proposals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.title)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.proposals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.title);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.proposals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.title.is_empty() {
            os.write_string(1, &self.title)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.proposals {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchStoreCodeProposal {
        BatchStoreCodeProposal::new()
    }

    fn default_instance() -> &'static BatchStoreCodeProposal {
        static instance: ::protobuf::rt::LazyV2<BatchStoreCodeProposal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchStoreCodeProposal::new)
    }
}

impl ::protobuf::Clear for BatchStoreCodeProposal {
    fn clear(&mut self) {
        self.title.clear();
        self.description.clear();
        self.proposals.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchStoreCodeProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FundingMode {
    Unspecified = 0,
    SelfFunded = 1,
    GrantOnly = 2,
    Dual = 3,
}

impl ::protobuf::ProtobufEnum for FundingMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FundingMode> {
        match value {
            0 => ::std::option::Option::Some(FundingMode::Unspecified),
            1 => ::std::option::Option::Some(FundingMode::SelfFunded),
            2 => ::std::option::Option::Some(FundingMode::GrantOnly),
            3 => ::std::option::Option::Some(FundingMode::Dual),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FundingMode] = &[
            FundingMode::Unspecified,
            FundingMode::SelfFunded,
            FundingMode::GrantOnly,
            FundingMode::Dual,
        ];
        values
    }
}

impl ::std::marker::Copy for FundingMode {
}

impl ::std::default::Default for FundingMode {
    fn default() -> Self {
        FundingMode::Unspecified
    }
}

impl ::protobuf::reflect::ProtobufValue for FundingMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/insurance/v1beta1/insurance.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub default_redemption_notice_period_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration default_redemption_notice_period_duration = 1;


    pub fn get_default_redemption_notice_period_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.default_redemption_notice_period_duration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_default_redemption_notice_period_duration(&mut self) {
        self.default_redemption_notice_period_duration.clear();
    }

    pub fn has_default_redemption_notice_period_duration(&self) -> bool {
        self.default_redemption_notice_period_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_redemption_notice_period_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.default_redemption_notice_period_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_redemption_notice_period_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.default_redemption_notice_period_duration.is_none() {
            self.default_redemption_notice_period_duration.set_default();
        }
        self.default_redemption_notice_period_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_redemption_notice_period_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.default_redemption_notice_period_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        for v in &self.default_redemption_notice_period_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_redemption_notice_period_duration)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.default_redemption_notice_period_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.default_redemption_notice_period_duration.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.default_redemption_notice_period_duration.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsuranceFund {
    // message fields
    pub deposit_denom: ::std::string::String,
    pub insurance_pool_token_denom: ::std::string::String,
    pub redemption_notice_period_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub balance: ::std::string::String,
    pub total_share: ::std::string::String,
    pub market_id: ::std::string::String,
    pub market_ticker: ::std::string::String,
    pub oracle_base: ::std::string::String,
    pub oracle_quote: ::std::string::String,
    pub oracle_type: super::oracle::OracleType,
    pub expiry: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsuranceFund {
    fn default() -> &'a InsuranceFund {
        <InsuranceFund as ::protobuf::Message>::default_instance()
    }
}

impl InsuranceFund {
    pub fn new() -> InsuranceFund {
        ::std::default::Default::default()
    }

    // string deposit_denom = 1;


    pub fn get_deposit_denom(&self) -> &str {
        &self.deposit_denom
    }
    pub fn clear_deposit_denom(&mut self) {
        self.deposit_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_denom(&mut self, v: ::std::string::String) {
        self.deposit_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_denom(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_denom
    }

    // Take field
    pub fn take_deposit_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_denom, ::std::string::String::new())
    }

    // string insurance_pool_token_denom = 2;


    pub fn get_insurance_pool_token_denom(&self) -> &str {
        &self.insurance_pool_token_denom
    }
    pub fn clear_insurance_pool_token_denom(&mut self) {
        self.insurance_pool_token_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_insurance_pool_token_denom(&mut self, v: ::std::string::String) {
        self.insurance_pool_token_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_insurance_pool_token_denom(&mut self) -> &mut ::std::string::String {
        &mut self.insurance_pool_token_denom
    }

    // Take field
    pub fn take_insurance_pool_token_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.insurance_pool_token_denom, ::std::string::String::new())
    }

    // .google.protobuf.Duration redemption_notice_period_duration = 3;


    pub fn get_redemption_notice_period_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.redemption_notice_period_duration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_redemption_notice_period_duration(&mut self) {
        self.redemption_notice_period_duration.clear();
    }

    pub fn has_redemption_notice_period_duration(&self) -> bool {
        self.redemption_notice_period_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redemption_notice_period_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.redemption_notice_period_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redemption_notice_period_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.redemption_notice_period_duration.is_none() {
            self.redemption_notice_period_duration.set_default();
        }
        self.redemption_notice_period_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_redemption_notice_period_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.redemption_notice_period_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // string balance = 4;


    pub fn get_balance(&self) -> &str {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::string::String) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::string::String {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balance, ::std::string::String::new())
    }

    // string total_share = 5;


    pub fn get_total_share(&self) -> &str {
        &self.total_share
    }
    pub fn clear_total_share(&mut self) {
        self.total_share.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_share(&mut self, v: ::std::string::String) {
        self.total_share = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_total_share(&mut self) -> &mut ::std::string::String {
        &mut self.total_share
    }

    // Take field
    pub fn take_total_share(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.total_share, ::std::string::String::new())
    }

    // string market_id = 6;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }

    // string market_ticker = 7;


    pub fn get_market_ticker(&self) -> &str {
        &self.market_ticker
    }
    pub fn clear_market_ticker(&mut self) {
        self.market_ticker.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ticker(&mut self, v: ::std::string::String) {
        self.market_ticker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_ticker(&mut self) -> &mut ::std::string::String {
        &mut self.market_ticker
    }

    // Take field
    pub fn take_market_ticker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_ticker, ::std::string::String::new())
    }

    // string oracle_base = 8;


    pub fn get_oracle_base(&self) -> &str {
        &self.oracle_base
    }
    pub fn clear_oracle_base(&mut self) {
        self.oracle_base.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_base(&mut self, v: ::std::string::String) {
        self.oracle_base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_base(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_base
    }

    // Take field
    pub fn take_oracle_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_base, ::std::string::String::new())
    }

    // string oracle_quote = 9;


    pub fn get_oracle_quote(&self) -> &str {
        &self.oracle_quote
    }
    pub fn clear_oracle_quote(&mut self) {
        self.oracle_quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_quote(&mut self, v: ::std::string::String) {
        self.oracle_quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_quote(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_quote
    }

    // Take field
    pub fn take_oracle_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_quote, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.OracleType oracle_type = 10;


    pub fn get_oracle_type(&self) -> super::oracle::OracleType {
        self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type = super::oracle::OracleType::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: super::oracle::OracleType) {
        self.oracle_type = v;
    }

    // int64 expiry = 11;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }
}

impl ::protobuf::Message for InsuranceFund {
    fn is_initialized(&self) -> bool {
        for v in &self.redemption_notice_period_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_denom)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.insurance_pool_token_denom)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.redemption_notice_period_duration)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balance)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.total_share)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_ticker)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_base)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_quote)?;
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.oracle_type, 10, &mut self.unknown_fields)?
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.deposit_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.deposit_denom);
        }
        if !self.insurance_pool_token_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.insurance_pool_token_denom);
        }
        if let Some(ref v) = self.redemption_notice_period_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.balance);
        }
        if !self.total_share.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.total_share);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.market_id);
        }
        if !self.market_ticker.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.market_ticker);
        }
        if !self.oracle_base.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.oracle_base);
        }
        if !self.oracle_quote.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.oracle_quote);
        }
        if self.oracle_type != super::oracle::OracleType::Unspecified {
            my_size += ::protobuf::rt::enum_size(10, self.oracle_type);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(11, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.deposit_denom.is_empty() {
            os.write_string(1, &self.deposit_denom)?;
        }
        if !self.insurance_pool_token_denom.is_empty() {
            os.write_string(2, &self.insurance_pool_token_denom)?;
        }
        if let Some(ref v) = self.redemption_notice_period_duration.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.balance.is_empty() {
            os.write_string(4, &self.balance)?;
        }
        if !self.total_share.is_empty() {
            os.write_string(5, &self.total_share)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(6, &self.market_id)?;
        }
        if !self.market_ticker.is_empty() {
            os.write_string(7, &self.market_ticker)?;
        }
        if !self.oracle_base.is_empty() {
            os.write_string(8, &self.oracle_base)?;
        }
        if !self.oracle_quote.is_empty() {
            os.write_string(9, &self.oracle_quote)?;
        }
        if self.oracle_type != super::oracle::OracleType::Unspecified {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(&self.oracle_type))?;
        }
        if self.expiry != 0 {
            os.write_int64(11, self.expiry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsuranceFund {
        InsuranceFund::new()
    }

    fn default_instance() -> &'static InsuranceFund {
        static instance: ::protobuf::rt::LazyV2<InsuranceFund> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsuranceFund::new)
    }
}

impl ::protobuf::Clear for InsuranceFund {
    fn clear(&mut self) {
        self.deposit_denom.clear();
        self.insurance_pool_token_denom.clear();
        self.redemption_notice_period_duration.clear();
        self.balance.clear();
        self.total_share.clear();
        self.market_id.clear();
        self.market_ticker.clear();
        self.oracle_base.clear();
        self.oracle_quote.clear();
        self.oracle_type = super::oracle::OracleType::Unspecified;
        self.expiry = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for InsuranceFund {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RedemptionSchedule {
    // message fields
    pub id: u64,
    pub marketId: ::std::string::String,
    pub redeemer: ::std::string::String,
    pub claimable_redemption_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub redemption_amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedemptionSchedule {
    fn default() -> &'a RedemptionSchedule {
        <RedemptionSchedule as ::protobuf::Message>::default_instance()
    }
}

impl RedemptionSchedule {
    pub fn new() -> RedemptionSchedule {
        ::std::default::Default::default()
    }

    // uint64 id = 1;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // string marketId = 2;


    pub fn get_marketId(&self) -> &str {
        &self.marketId
    }
    pub fn clear_marketId(&mut self) {
        self.marketId.clear();
    }

    // Param is passed by value, moved
    pub fn set_marketId(&mut self, v: ::std::string::String) {
        self.marketId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_marketId(&mut self) -> &mut ::std::string::String {
        &mut self.marketId
    }

    // Take field
    pub fn take_marketId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.marketId, ::std::string::String::new())
    }

    // string redeemer = 3;


    pub fn get_redeemer(&self) -> &str {
        &self.redeemer
    }
    pub fn clear_redeemer(&mut self) {
        self.redeemer.clear();
    }

    // Param is passed by value, moved
    pub fn set_redeemer(&mut self, v: ::std::string::String) {
        self.redeemer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redeemer(&mut self) -> &mut ::std::string::String {
        &mut self.redeemer
    }

    // Take field
    pub fn take_redeemer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redeemer, ::std::string::String::new())
    }

    // .google.protobuf.Timestamp claimable_redemption_time = 4;


    pub fn get_claimable_redemption_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.claimable_redemption_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_claimable_redemption_time(&mut self) {
        self.claimable_redemption_time.clear();
    }

    pub fn has_claimable_redemption_time(&self) -> bool {
        self.claimable_redemption_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claimable_redemption_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.claimable_redemption_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_claimable_redemption_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.claimable_redemption_time.is_none() {
            self.claimable_redemption_time.set_default();
        }
        self.claimable_redemption_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_claimable_redemption_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.claimable_redemption_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .cosmos.base.v1beta1.Coin redemption_amount = 5;


    pub fn get_redemption_amount(&self) -> &super::coin::Coin {
        self.redemption_amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_redemption_amount(&mut self) {
        self.redemption_amount.clear();
    }

    pub fn has_redemption_amount(&self) -> bool {
        self.redemption_amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redemption_amount(&mut self, v: super::coin::Coin) {
        self.redemption_amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redemption_amount(&mut self) -> &mut super::coin::Coin {
        if self.redemption_amount.is_none() {
            self.redemption_amount.set_default();
        }
        self.redemption_amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_redemption_amount(&mut self) -> super::coin::Coin {
        self.redemption_amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for RedemptionSchedule {
    fn is_initialized(&self) -> bool {
        for v in &self.claimable_redemption_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.redemption_amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.marketId)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redeemer)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.claimable_redemption_time)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.redemption_amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.marketId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.marketId);
        }
        if !self.redeemer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.redeemer);
        }
        if let Some(ref v) = self.claimable_redemption_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.redemption_amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint64(1, self.id)?;
        }
        if !self.marketId.is_empty() {
            os.write_string(2, &self.marketId)?;
        }
        if !self.redeemer.is_empty() {
            os.write_string(3, &self.redeemer)?;
        }
        if let Some(ref v) = self.claimable_redemption_time.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.redemption_amount.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedemptionSchedule {
        RedemptionSchedule::new()
    }

    fn default_instance() -> &'static RedemptionSchedule {
        static instance: ::protobuf::rt::LazyV2<RedemptionSchedule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedemptionSchedule::new)
    }
}

impl ::protobuf::Clear for RedemptionSchedule {
    fn clear(&mut self) {
        self.id = 0;
        self.marketId.clear();
        self.redeemer.clear();
        self.claimable_redemption_time.clear();
        self.redemption_amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RedemptionSchedule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventInsuranceFundUpdate {
    // message fields
    pub fund: ::protobuf::SingularPtrField<InsuranceFund>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventInsuranceFundUpdate {
    fn default() -> &'a EventInsuranceFundUpdate {
        <EventInsuranceFundUpdate as ::protobuf::Message>::default_instance()
    }
}

impl EventInsuranceFundUpdate {
    pub fn new() -> EventInsuranceFundUpdate {
        ::std::default::Default::default()
    }

    // .injective.insurance.v1beta1.InsuranceFund fund = 1;


    pub fn get_fund(&self) -> &InsuranceFund {
        self.fund.as_ref().unwrap_or_else(|| <InsuranceFund as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fund(&mut self) {
        self.fund.clear();
    }

    pub fn has_fund(&self) -> bool {
        self.fund.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fund(&mut self, v: InsuranceFund) {
        self.fund = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fund(&mut self) -> &mut InsuranceFund {
        if self.fund.is_none() {
            self.fund.set_default();
        }
        self.fund.as_mut().unwrap()
    }

    // Take field
    pub fn take_fund(&mut self) -> InsuranceFund {
        self.fund.take().unwrap_or_else(|| InsuranceFund::new())
    }
}

impl ::protobuf::Message for EventInsuranceFundUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.fund {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fund)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.fund.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.fund.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventInsuranceFundUpdate {
        EventInsuranceFundUpdate::new()
    }

    fn default_instance() -> &'static EventInsuranceFundUpdate {
        static instance: ::protobuf::rt::LazyV2<EventInsuranceFundUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventInsuranceFundUpdate::new)
    }
}

impl ::protobuf::Clear for EventInsuranceFundUpdate {
    fn clear(&mut self) {
        self.fund.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventInsuranceFundUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventRequestRedemption {
    // message fields
    pub schedule: ::protobuf::SingularPtrField<RedemptionSchedule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventRequestRedemption {
    fn default() -> &'a EventRequestRedemption {
        <EventRequestRedemption as ::protobuf::Message>::default_instance()
    }
}

impl EventRequestRedemption {
    pub fn new() -> EventRequestRedemption {
        ::std::default::Default::default()
    }

    // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1;


    pub fn get_schedule(&self) -> &RedemptionSchedule {
        self.schedule.as_ref().unwrap_or_else(|| <RedemptionSchedule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schedule(&mut self) {
        self.schedule.clear();
    }

    pub fn has_schedule(&self) -> bool {
        self.schedule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule(&mut self, v: RedemptionSchedule) {
        self.schedule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule(&mut self) -> &mut RedemptionSchedule {
        if self.schedule.is_none() {
            self.schedule.set_default();
        }
        self.schedule.as_mut().unwrap()
    }

    // Take field
    pub fn take_schedule(&mut self) -> RedemptionSchedule {
        self.schedule.take().unwrap_or_else(|| RedemptionSchedule::new())
    }
}

impl ::protobuf::Message for EventRequestRedemption {
    fn is_initialized(&self) -> bool {
        for v in &self.schedule {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schedule)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schedule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schedule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventRequestRedemption {
        EventRequestRedemption::new()
    }

    fn default_instance() -> &'static EventRequestRedemption {
        static instance: ::protobuf::rt::LazyV2<EventRequestRedemption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventRequestRedemption::new)
    }
}

impl ::protobuf::Clear for EventRequestRedemption {
    fn clear(&mut self) {
        self.schedule.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventRequestRedemption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventWithdrawRedemption {
    // message fields
    pub schedule: ::protobuf::SingularPtrField<RedemptionSchedule>,
    pub redeem_coin: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventWithdrawRedemption {
    fn default() -> &'a EventWithdrawRedemption {
        <EventWithdrawRedemption as ::protobuf::Message>::default_instance()
    }
}

impl EventWithdrawRedemption {
    pub fn new() -> EventWithdrawRedemption {
        ::std::default::Default::default()
    }

    // .injective.insurance.v1beta1.RedemptionSchedule schedule = 1;


    pub fn get_schedule(&self) -> &RedemptionSchedule {
        self.schedule.as_ref().unwrap_or_else(|| <RedemptionSchedule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_schedule(&mut self) {
        self.schedule.clear();
    }

    pub fn has_schedule(&self) -> bool {
        self.schedule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schedule(&mut self, v: RedemptionSchedule) {
        self.schedule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schedule(&mut self) -> &mut RedemptionSchedule {
        if self.schedule.is_none() {
            self.schedule.set_default();
        }
        self.schedule.as_mut().unwrap()
    }

    // Take field
    pub fn take_schedule(&mut self) -> RedemptionSchedule {
        self.schedule.take().unwrap_or_else(|| RedemptionSchedule::new())
    }

    // .cosmos.base.v1beta1.Coin redeem_coin = 2;


    pub fn get_redeem_coin(&self) -> &super::coin::Coin {
        self.redeem_coin.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_redeem_coin(&mut self) {
        self.redeem_coin.clear();
    }

    pub fn has_redeem_coin(&self) -> bool {
        self.redeem_coin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redeem_coin(&mut self, v: super::coin::Coin) {
        self.redeem_coin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redeem_coin(&mut self) -> &mut super::coin::Coin {
        if self.redeem_coin.is_none() {
            self.redeem_coin.set_default();
        }
        self.redeem_coin.as_mut().unwrap()
    }

    // Take field
    pub fn take_redeem_coin(&mut self) -> super::coin::Coin {
        self.redeem_coin.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for EventWithdrawRedemption {
    fn is_initialized(&self) -> bool {
        for v in &self.schedule {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.redeem_coin {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schedule)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.redeem_coin)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schedule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.redeem_coin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schedule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.redeem_coin.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventWithdrawRedemption {
        EventWithdrawRedemption::new()
    }

    fn default_instance() -> &'static EventWithdrawRedemption {
        static instance: ::protobuf::rt::LazyV2<EventWithdrawRedemption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventWithdrawRedemption::new)
    }
}

impl ::protobuf::Clear for EventWithdrawRedemption {
    fn clear(&mut self) {
        self.schedule.clear();
        self.redeem_coin.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventWithdrawRedemption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct EventUnderwrite {
    // message fields
    pub underwriter: ::std::string::String,
    pub marketId: ::std::string::String,
    pub deposit: ::protobuf::SingularPtrField<super::coin::Coin>,
    pub shares: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EventUnderwrite {
    fn default() -> &'a EventUnderwrite {
        <EventUnderwrite as ::protobuf::Message>::default_instance()
    }
}

impl EventUnderwrite {
    pub fn new() -> EventUnderwrite {
        ::std::default::Default::default()
    }

    // string underwriter = 1;


    pub fn get_underwriter(&self) -> &str {
        &self.underwriter
    }
    pub fn clear_underwriter(&mut self) {
        self.underwriter.clear();
    }

    // Param is passed by value, moved
    pub fn set_underwriter(&mut self, v: ::std::string::String) {
        self.underwriter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_underwriter(&mut self) -> &mut ::std::string::String {
        &mut self.underwriter
    }

    // Take field
    pub fn take_underwriter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.underwriter, ::std::string::String::new())
    }

    // string marketId = 2;


    pub fn get_marketId(&self) -> &str {
        &self.marketId
    }
    pub fn clear_marketId(&mut self) {
        self.marketId.clear();
    }

    // Param is passed by value, moved
    pub fn set_marketId(&mut self, v: ::std::string::String) {
        self.marketId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_marketId(&mut self) -> &mut ::std::string::String {
        &mut self.marketId
    }

    // Take field
    pub fn take_marketId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.marketId, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin deposit = 3;


    pub fn get_deposit(&self) -> &super::coin::Coin {
        self.deposit.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    pub fn has_deposit(&self) -> bool {
        self.deposit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: super::coin::Coin) {
        self.deposit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut super::coin::Coin {
        if self.deposit.is_none() {
            self.deposit.set_default();
        }
        self.deposit.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit(&mut self) -> super::coin::Coin {
        self.deposit.take().unwrap_or_else(|| super::coin::Coin::new())
    }

    // .cosmos.base.v1beta1.Coin shares = 4;


    pub fn get_shares(&self) -> &super::coin::Coin {
        self.shares.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shares(&mut self) {
        self.shares.clear();
    }

    pub fn has_shares(&self) -> bool {
        self.shares.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shares(&mut self, v: super::coin::Coin) {
        self.shares = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shares(&mut self) -> &mut super::coin::Coin {
        if self.shares.is_none() {
            self.shares.set_default();
        }
        self.shares.as_mut().unwrap()
    }

    // Take field
    pub fn take_shares(&mut self) -> super::coin::Coin {
        self.shares.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for EventUnderwrite {
    fn is_initialized(&self) -> bool {
        for v in &self.deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shares {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.underwriter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.marketId)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shares)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.underwriter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.underwriter);
        }
        if !self.marketId.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.marketId);
        }
        if let Some(ref v) = self.deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.shares.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.underwriter.is_empty() {
            os.write_string(1, &self.underwriter)?;
        }
        if !self.marketId.is_empty() {
            os.write_string(2, &self.marketId)?;
        }
        if let Some(ref v) = self.deposit.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.shares.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EventUnderwrite {
        EventUnderwrite::new()
    }

    fn default_instance() -> &'static EventUnderwrite {
        static instance: ::protobuf::rt::LazyV2<EventUnderwrite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EventUnderwrite::new)
    }
}

impl ::protobuf::Clear for EventUnderwrite {
    fn clear(&mut self) {
        self.underwriter.clear();
        self.marketId.clear();
        self.deposit.clear();
        self.shares.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for EventUnderwrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

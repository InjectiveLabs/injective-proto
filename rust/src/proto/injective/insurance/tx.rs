// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/insurance/v1beta1/tx.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgCreateInsuranceFund {
    // message fields
    pub sender: ::std::string::String,
    pub ticker: ::std::string::String,
    pub quote_denom: ::std::string::String,
    pub oracle_base: ::std::string::String,
    pub oracle_quote: ::std::string::String,
    pub oracle_type: super::oracle::OracleType,
    pub expiry: i64,
    pub initial_deposit: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateInsuranceFund {
    fn default() -> &'a MsgCreateInsuranceFund {
        <MsgCreateInsuranceFund as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateInsuranceFund {
    pub fn new() -> MsgCreateInsuranceFund {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string ticker = 2;


    pub fn get_ticker(&self) -> &str {
        &self.ticker
    }
    pub fn clear_ticker(&mut self) {
        self.ticker.clear();
    }

    // Param is passed by value, moved
    pub fn set_ticker(&mut self, v: ::std::string::String) {
        self.ticker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticker(&mut self) -> &mut ::std::string::String {
        &mut self.ticker
    }

    // Take field
    pub fn take_ticker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ticker, ::std::string::String::new())
    }

    // string quote_denom = 3;


    pub fn get_quote_denom(&self) -> &str {
        &self.quote_denom
    }
    pub fn clear_quote_denom(&mut self) {
        self.quote_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote_denom(&mut self, v: ::std::string::String) {
        self.quote_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote_denom(&mut self) -> &mut ::std::string::String {
        &mut self.quote_denom
    }

    // Take field
    pub fn take_quote_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote_denom, ::std::string::String::new())
    }

    // string oracle_base = 4;


    pub fn get_oracle_base(&self) -> &str {
        &self.oracle_base
    }
    pub fn clear_oracle_base(&mut self) {
        self.oracle_base.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_base(&mut self, v: ::std::string::String) {
        self.oracle_base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_base(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_base
    }

    // Take field
    pub fn take_oracle_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_base, ::std::string::String::new())
    }

    // string oracle_quote = 5;


    pub fn get_oracle_quote(&self) -> &str {
        &self.oracle_quote
    }
    pub fn clear_oracle_quote(&mut self) {
        self.oracle_quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_quote(&mut self, v: ::std::string::String) {
        self.oracle_quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_quote(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_quote
    }

    // Take field
    pub fn take_oracle_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_quote, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.OracleType oracle_type = 6;


    pub fn get_oracle_type(&self) -> super::oracle::OracleType {
        self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type = super::oracle::OracleType::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: super::oracle::OracleType) {
        self.oracle_type = v;
    }

    // int64 expiry = 7;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }

    // .cosmos.base.v1beta1.Coin initial_deposit = 8;


    pub fn get_initial_deposit(&self) -> &super::coin::Coin {
        self.initial_deposit.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_initial_deposit(&mut self) {
        self.initial_deposit.clear();
    }

    pub fn has_initial_deposit(&self) -> bool {
        self.initial_deposit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_deposit(&mut self, v: super::coin::Coin) {
        self.initial_deposit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_deposit(&mut self) -> &mut super::coin::Coin {
        if self.initial_deposit.is_none() {
            self.initial_deposit.set_default();
        }
        self.initial_deposit.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_deposit(&mut self) -> super::coin::Coin {
        self.initial_deposit.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgCreateInsuranceFund {
    fn is_initialized(&self) -> bool {
        for v in &self.initial_deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ticker)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote_denom)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_base)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_quote)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.oracle_type, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_deposit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.ticker.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ticker);
        }
        if !self.quote_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.quote_denom);
        }
        if !self.oracle_base.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.oracle_base);
        }
        if !self.oracle_quote.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.oracle_quote);
        }
        if self.oracle_type != super::oracle::OracleType::Unspecified {
            my_size += ::protobuf::rt::enum_size(6, self.oracle_type);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(7, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.initial_deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.ticker.is_empty() {
            os.write_string(2, &self.ticker)?;
        }
        if !self.quote_denom.is_empty() {
            os.write_string(3, &self.quote_denom)?;
        }
        if !self.oracle_base.is_empty() {
            os.write_string(4, &self.oracle_base)?;
        }
        if !self.oracle_quote.is_empty() {
            os.write_string(5, &self.oracle_quote)?;
        }
        if self.oracle_type != super::oracle::OracleType::Unspecified {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.oracle_type))?;
        }
        if self.expiry != 0 {
            os.write_int64(7, self.expiry)?;
        }
        if let Some(ref v) = self.initial_deposit.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateInsuranceFund {
        MsgCreateInsuranceFund::new()
    }

    fn default_instance() -> &'static MsgCreateInsuranceFund {
        static instance: ::protobuf::rt::LazyV2<MsgCreateInsuranceFund> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateInsuranceFund::new)
    }
}

impl ::protobuf::Clear for MsgCreateInsuranceFund {
    fn clear(&mut self) {
        self.sender.clear();
        self.ticker.clear();
        self.quote_denom.clear();
        self.oracle_base.clear();
        self.oracle_quote.clear();
        self.oracle_type = super::oracle::OracleType::Unspecified;
        self.expiry = 0;
        self.initial_deposit.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateInsuranceFund {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgCreateInsuranceFundResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgCreateInsuranceFundResponse {
    fn default() -> &'a MsgCreateInsuranceFundResponse {
        <MsgCreateInsuranceFundResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgCreateInsuranceFundResponse {
    pub fn new() -> MsgCreateInsuranceFundResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgCreateInsuranceFundResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgCreateInsuranceFundResponse {
        MsgCreateInsuranceFundResponse::new()
    }

    fn default_instance() -> &'static MsgCreateInsuranceFundResponse {
        static instance: ::protobuf::rt::LazyV2<MsgCreateInsuranceFundResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgCreateInsuranceFundResponse::new)
    }
}

impl ::protobuf::Clear for MsgCreateInsuranceFundResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgCreateInsuranceFundResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUnderwrite {
    // message fields
    pub sender: ::std::string::String,
    pub market_id: ::std::string::String,
    pub deposit: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUnderwrite {
    fn default() -> &'a MsgUnderwrite {
        <MsgUnderwrite as ::protobuf::Message>::default_instance()
    }
}

impl MsgUnderwrite {
    pub fn new() -> MsgUnderwrite {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string market_id = 2;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin deposit = 3;


    pub fn get_deposit(&self) -> &super::coin::Coin {
        self.deposit.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit(&mut self) {
        self.deposit.clear();
    }

    pub fn has_deposit(&self) -> bool {
        self.deposit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit(&mut self, v: super::coin::Coin) {
        self.deposit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit(&mut self) -> &mut super::coin::Coin {
        if self.deposit.is_none() {
            self.deposit.set_default();
        }
        self.deposit.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit(&mut self) -> super::coin::Coin {
        self.deposit.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgUnderwrite {
    fn is_initialized(&self) -> bool {
        for v in &self.deposit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.market_id);
        }
        if let Some(ref v) = self.deposit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(2, &self.market_id)?;
        }
        if let Some(ref v) = self.deposit.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUnderwrite {
        MsgUnderwrite::new()
    }

    fn default_instance() -> &'static MsgUnderwrite {
        static instance: ::protobuf::rt::LazyV2<MsgUnderwrite> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUnderwrite::new)
    }
}

impl ::protobuf::Clear for MsgUnderwrite {
    fn clear(&mut self) {
        self.sender.clear();
        self.market_id.clear();
        self.deposit.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUnderwrite {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUnderwriteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUnderwriteResponse {
    fn default() -> &'a MsgUnderwriteResponse {
        <MsgUnderwriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUnderwriteResponse {
    pub fn new() -> MsgUnderwriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgUnderwriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUnderwriteResponse {
        MsgUnderwriteResponse::new()
    }

    fn default_instance() -> &'static MsgUnderwriteResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUnderwriteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUnderwriteResponse::new)
    }
}

impl ::protobuf::Clear for MsgUnderwriteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUnderwriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestRedemption {
    // message fields
    pub sender: ::std::string::String,
    pub market_id: ::std::string::String,
    pub amount: ::protobuf::SingularPtrField<super::coin::Coin>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestRedemption {
    fn default() -> &'a MsgRequestRedemption {
        <MsgRequestRedemption as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestRedemption {
    pub fn new() -> MsgRequestRedemption {
        ::std::default::Default::default()
    }

    // string sender = 1;


    pub fn get_sender(&self) -> &str {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::string::String) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::string::String {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sender, ::std::string::String::new())
    }

    // string market_id = 2;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }

    // .cosmos.base.v1beta1.Coin amount = 3;


    pub fn get_amount(&self) -> &super::coin::Coin {
        self.amount.as_ref().unwrap_or_else(|| <super::coin::Coin as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: super::coin::Coin) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut super::coin::Coin {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> super::coin::Coin {
        self.amount.take().unwrap_or_else(|| super::coin::Coin::new())
    }
}

impl ::protobuf::Message for MsgRequestRedemption {
    fn is_initialized(&self) -> bool {
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.sender);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.market_id);
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.sender.is_empty() {
            os.write_string(1, &self.sender)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(2, &self.market_id)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestRedemption {
        MsgRequestRedemption::new()
    }

    fn default_instance() -> &'static MsgRequestRedemption {
        static instance: ::protobuf::rt::LazyV2<MsgRequestRedemption> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestRedemption::new)
    }
}

impl ::protobuf::Clear for MsgRequestRedemption {
    fn clear(&mut self) {
        self.sender.clear();
        self.market_id.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestRedemption {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgRequestRedemptionResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgRequestRedemptionResponse {
    fn default() -> &'a MsgRequestRedemptionResponse {
        <MsgRequestRedemptionResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgRequestRedemptionResponse {
    pub fn new() -> MsgRequestRedemptionResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgRequestRedemptionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgRequestRedemptionResponse {
        MsgRequestRedemptionResponse::new()
    }

    fn default_instance() -> &'static MsgRequestRedemptionResponse {
        static instance: ::protobuf::rt::LazyV2<MsgRequestRedemptionResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgRequestRedemptionResponse::new)
    }
}

impl ::protobuf::Clear for MsgRequestRedemptionResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgRequestRedemptionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParams {
    // message fields
    pub authority: ::std::string::String,
    pub params: ::protobuf::SingularPtrField<super::insurance::Params>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParams {
    fn default() -> &'a MsgUpdateParams {
        <MsgUpdateParams as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParams {
    pub fn new() -> MsgUpdateParams {
        ::std::default::Default::default()
    }

    // string authority = 1;


    pub fn get_authority(&self) -> &str {
        &self.authority
    }
    pub fn clear_authority(&mut self) {
        self.authority.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority(&mut self, v: ::std::string::String) {
        self.authority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority(&mut self) -> &mut ::std::string::String {
        &mut self.authority
    }

    // Take field
    pub fn take_authority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority, ::std::string::String::new())
    }

    // .injective.insurance.v1beta1.Params params = 2;


    pub fn get_params(&self) -> &super::insurance::Params {
        self.params.as_ref().unwrap_or_else(|| <super::insurance::Params as ::protobuf::Message>::default_instance())
    }
    pub fn clear_params(&mut self) {
        self.params.clear();
    }

    pub fn has_params(&self) -> bool {
        self.params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_params(&mut self, v: super::insurance::Params) {
        self.params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_params(&mut self) -> &mut super::insurance::Params {
        if self.params.is_none() {
            self.params.set_default();
        }
        self.params.as_mut().unwrap()
    }

    // Take field
    pub fn take_params(&mut self) -> super::insurance::Params {
        self.params.take().unwrap_or_else(|| super::insurance::Params::new())
    }
}

impl ::protobuf::Message for MsgUpdateParams {
    fn is_initialized(&self) -> bool {
        for v in &self.params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.authority.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authority);
        }
        if let Some(ref v) = self.params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.authority.is_empty() {
            os.write_string(1, &self.authority)?;
        }
        if let Some(ref v) = self.params.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParams {
        MsgUpdateParams::new()
    }

    fn default_instance() -> &'static MsgUpdateParams {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParams::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParams {
    fn clear(&mut self) {
        self.authority.clear();
        self.params.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MsgUpdateParamsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MsgUpdateParamsResponse {
    fn default() -> &'a MsgUpdateParamsResponse {
        <MsgUpdateParamsResponse as ::protobuf::Message>::default_instance()
    }
}

impl MsgUpdateParamsResponse {
    pub fn new() -> MsgUpdateParamsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for MsgUpdateParamsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MsgUpdateParamsResponse {
        MsgUpdateParamsResponse::new()
    }

    fn default_instance() -> &'static MsgUpdateParamsResponse {
        static instance: ::protobuf::rt::LazyV2<MsgUpdateParamsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MsgUpdateParamsResponse::new)
    }
}

impl ::protobuf::Clear for MsgUpdateParamsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MsgUpdateParamsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

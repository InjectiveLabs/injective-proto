// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/attestation.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Attestation {
    // message fields
    pub observed: bool,
    pub votes: ::protobuf::RepeatedField<::std::string::String>,
    pub height: u64,
    pub claim: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Attestation {
    fn default() -> &'a Attestation {
        <Attestation as ::protobuf::Message>::default_instance()
    }
}

impl Attestation {
    pub fn new() -> Attestation {
        ::std::default::Default::default()
    }

    // bool observed = 1;


    pub fn get_observed(&self) -> bool {
        self.observed
    }
    pub fn clear_observed(&mut self) {
        self.observed = false;
    }

    // Param is passed by value, moved
    pub fn set_observed(&mut self, v: bool) {
        self.observed = v;
    }

    // repeated string votes = 2;


    pub fn get_votes(&self) -> &[::std::string::String] {
        &self.votes
    }
    pub fn clear_votes(&mut self) {
        self.votes.clear();
    }

    // Param is passed by value, moved
    pub fn set_votes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.votes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_votes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.votes
    }

    // Take field
    pub fn take_votes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.votes, ::protobuf::RepeatedField::new())
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // .google.protobuf.Any claim = 4;


    pub fn get_claim(&self) -> &::protobuf::well_known_types::Any {
        self.claim.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_claim(&mut self) {
        self.claim.clear();
    }

    pub fn has_claim(&self) -> bool {
        self.claim.is_some()
    }

    // Param is passed by value, moved
    pub fn set_claim(&mut self, v: ::protobuf::well_known_types::Any) {
        self.claim = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_claim(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.claim.is_none() {
            self.claim.set_default();
        }
        self.claim.as_mut().unwrap()
    }

    // Take field
    pub fn take_claim(&mut self) -> ::protobuf::well_known_types::Any {
        self.claim.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for Attestation {
    fn is_initialized(&self) -> bool {
        for v in &self.claim {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.observed = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.votes)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.claim)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.observed != false {
            my_size += 2;
        }
        for value in &self.votes {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.claim.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.observed != false {
            os.write_bool(1, self.observed)?;
        }
        for v in &self.votes {
            os.write_string(2, &v)?;
        };
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        if let Some(ref v) = self.claim.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Attestation {
        Attestation::new()
    }

    fn default_instance() -> &'static Attestation {
        static instance: ::protobuf::rt::LazyV2<Attestation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Attestation::new)
    }
}

impl ::protobuf::Clear for Attestation {
    fn clear(&mut self) {
        self.observed = false;
        self.votes.clear();
        self.height = 0;
        self.claim.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Attestation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ERC20Token {
    // message fields
    pub contract: ::std::string::String,
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ERC20Token {
    fn default() -> &'a ERC20Token {
        <ERC20Token as ::protobuf::Message>::default_instance()
    }
}

impl ERC20Token {
    pub fn new() -> ERC20Token {
        ::std::default::Default::default()
    }

    // string contract = 1;


    pub fn get_contract(&self) -> &str {
        &self.contract
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: ::std::string::String) {
        self.contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut ::std::string::String {
        &mut self.contract
    }

    // Take field
    pub fn take_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.contract, ::std::string::String::new())
    }

    // string amount = 2;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ERC20Token {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.contract)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.contract.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.contract);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.contract.is_empty() {
            os.write_string(1, &self.contract)?;
        }
        if !self.amount.is_empty() {
            os.write_string(2, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ERC20Token {
        ERC20Token::new()
    }

    fn default_instance() -> &'static ERC20Token {
        static instance: ::protobuf::rt::LazyV2<ERC20Token> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ERC20Token::new)
    }
}

impl ::protobuf::Clear for ERC20Token {
    fn clear(&mut self) {
        self.contract.clear();
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ERC20Token {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClaimType {
    CLAIM_TYPE_UNKNOWN = 0,
    CLAIM_TYPE_DEPOSIT = 1,
    CLAIM_TYPE_WITHDRAW = 2,
    CLAIM_TYPE_ERC20_DEPLOYED = 3,
    CLAIM_TYPE_VALSET_UPDATED = 4,
}

impl ::protobuf::ProtobufEnum for ClaimType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClaimType> {
        match value {
            0 => ::std::option::Option::Some(ClaimType::CLAIM_TYPE_UNKNOWN),
            1 => ::std::option::Option::Some(ClaimType::CLAIM_TYPE_DEPOSIT),
            2 => ::std::option::Option::Some(ClaimType::CLAIM_TYPE_WITHDRAW),
            3 => ::std::option::Option::Some(ClaimType::CLAIM_TYPE_ERC20_DEPLOYED),
            4 => ::std::option::Option::Some(ClaimType::CLAIM_TYPE_VALSET_UPDATED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClaimType] = &[
            ClaimType::CLAIM_TYPE_UNKNOWN,
            ClaimType::CLAIM_TYPE_DEPOSIT,
            ClaimType::CLAIM_TYPE_WITHDRAW,
            ClaimType::CLAIM_TYPE_ERC20_DEPLOYED,
            ClaimType::CLAIM_TYPE_VALSET_UPDATED,
        ];
        values
    }
}

impl ::std::marker::Copy for ClaimType {
}

impl ::std::default::Default for ClaimType {
    fn default() -> Self {
        ClaimType::CLAIM_TYPE_UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ClaimType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

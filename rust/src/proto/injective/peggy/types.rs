// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/peggy/v1/types.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BridgeValidator {
    // message fields
    pub power: u64,
    pub ethereum_address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BridgeValidator {
    fn default() -> &'a BridgeValidator {
        <BridgeValidator as ::protobuf::Message>::default_instance()
    }
}

impl BridgeValidator {
    pub fn new() -> BridgeValidator {
        ::std::default::Default::default()
    }

    // uint64 power = 1;


    pub fn get_power(&self) -> u64 {
        self.power
    }
    pub fn clear_power(&mut self) {
        self.power = 0;
    }

    // Param is passed by value, moved
    pub fn set_power(&mut self, v: u64) {
        self.power = v;
    }

    // string ethereum_address = 2;


    pub fn get_ethereum_address(&self) -> &str {
        &self.ethereum_address
    }
    pub fn clear_ethereum_address(&mut self) {
        self.ethereum_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_ethereum_address(&mut self, v: ::std::string::String) {
        self.ethereum_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ethereum_address(&mut self) -> &mut ::std::string::String {
        &mut self.ethereum_address
    }

    // Take field
    pub fn take_ethereum_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ethereum_address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for BridgeValidator {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.power = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ethereum_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.power != 0 {
            my_size += ::protobuf::rt::value_size(1, self.power, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ethereum_address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ethereum_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.power != 0 {
            os.write_uint64(1, self.power)?;
        }
        if !self.ethereum_address.is_empty() {
            os.write_string(2, &self.ethereum_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BridgeValidator {
        BridgeValidator::new()
    }

    fn default_instance() -> &'static BridgeValidator {
        static instance: ::protobuf::rt::LazyV2<BridgeValidator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BridgeValidator::new)
    }
}

impl ::protobuf::Clear for BridgeValidator {
    fn clear(&mut self) {
        self.power = 0;
        self.ethereum_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BridgeValidator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Valset {
    // message fields
    pub nonce: u64,
    pub members: ::protobuf::RepeatedField<BridgeValidator>,
    pub height: u64,
    pub reward_amount: ::std::string::String,
    pub reward_token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Valset {
    fn default() -> &'a Valset {
        <Valset as ::protobuf::Message>::default_instance()
    }
}

impl Valset {
    pub fn new() -> Valset {
        ::std::default::Default::default()
    }

    // uint64 nonce = 1;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // repeated .injective.peggy.v1.BridgeValidator members = 2;


    pub fn get_members(&self) -> &[BridgeValidator] {
        &self.members
    }
    pub fn clear_members(&mut self) {
        self.members.clear();
    }

    // Param is passed by value, moved
    pub fn set_members(&mut self, v: ::protobuf::RepeatedField<BridgeValidator>) {
        self.members = v;
    }

    // Mutable pointer to the field.
    pub fn mut_members(&mut self) -> &mut ::protobuf::RepeatedField<BridgeValidator> {
        &mut self.members
    }

    // Take field
    pub fn take_members(&mut self) -> ::protobuf::RepeatedField<BridgeValidator> {
        ::std::mem::replace(&mut self.members, ::protobuf::RepeatedField::new())
    }

    // uint64 height = 3;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // string reward_amount = 4;


    pub fn get_reward_amount(&self) -> &str {
        &self.reward_amount
    }
    pub fn clear_reward_amount(&mut self) {
        self.reward_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_amount(&mut self, v: ::std::string::String) {
        self.reward_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_amount(&mut self) -> &mut ::std::string::String {
        &mut self.reward_amount
    }

    // Take field
    pub fn take_reward_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_amount, ::std::string::String::new())
    }

    // string reward_token = 5;


    pub fn get_reward_token(&self) -> &str {
        &self.reward_token
    }
    pub fn clear_reward_token(&mut self) {
        self.reward_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_reward_token(&mut self, v: ::std::string::String) {
        self.reward_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reward_token(&mut self) -> &mut ::std::string::String {
        &mut self.reward_token
    }

    // Take field
    pub fn take_reward_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reward_token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Valset {
    fn is_initialized(&self) -> bool {
        for v in &self.members {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.members)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reward_token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.members {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(3, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.reward_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.reward_amount);
        }
        if !self.reward_token.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.reward_token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.nonce != 0 {
            os.write_uint64(1, self.nonce)?;
        }
        for v in &self.members {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        if !self.reward_amount.is_empty() {
            os.write_string(4, &self.reward_amount)?;
        }
        if !self.reward_token.is_empty() {
            os.write_string(5, &self.reward_token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Valset {
        Valset::new()
    }

    fn default_instance() -> &'static Valset {
        static instance: ::protobuf::rt::LazyV2<Valset> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Valset::new)
    }
}

impl ::protobuf::Clear for Valset {
    fn clear(&mut self) {
        self.nonce = 0;
        self.members.clear();
        self.height = 0;
        self.reward_amount.clear();
        self.reward_token.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Valset {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct LastObservedEthereumBlockHeight {
    // message fields
    pub cosmos_block_height: u64,
    pub ethereum_block_height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LastObservedEthereumBlockHeight {
    fn default() -> &'a LastObservedEthereumBlockHeight {
        <LastObservedEthereumBlockHeight as ::protobuf::Message>::default_instance()
    }
}

impl LastObservedEthereumBlockHeight {
    pub fn new() -> LastObservedEthereumBlockHeight {
        ::std::default::Default::default()
    }

    // uint64 cosmos_block_height = 1;


    pub fn get_cosmos_block_height(&self) -> u64 {
        self.cosmos_block_height
    }
    pub fn clear_cosmos_block_height(&mut self) {
        self.cosmos_block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_cosmos_block_height(&mut self, v: u64) {
        self.cosmos_block_height = v;
    }

    // uint64 ethereum_block_height = 2;


    pub fn get_ethereum_block_height(&self) -> u64 {
        self.ethereum_block_height
    }
    pub fn clear_ethereum_block_height(&mut self) {
        self.ethereum_block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_ethereum_block_height(&mut self, v: u64) {
        self.ethereum_block_height = v;
    }
}

impl ::protobuf::Message for LastObservedEthereumBlockHeight {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.cosmos_block_height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ethereum_block_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cosmos_block_height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.cosmos_block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ethereum_block_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ethereum_block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cosmos_block_height != 0 {
            os.write_uint64(1, self.cosmos_block_height)?;
        }
        if self.ethereum_block_height != 0 {
            os.write_uint64(2, self.ethereum_block_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LastObservedEthereumBlockHeight {
        LastObservedEthereumBlockHeight::new()
    }

    fn default_instance() -> &'static LastObservedEthereumBlockHeight {
        static instance: ::protobuf::rt::LazyV2<LastObservedEthereumBlockHeight> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LastObservedEthereumBlockHeight::new)
    }
}

impl ::protobuf::Clear for LastObservedEthereumBlockHeight {
    fn clear(&mut self) {
        self.cosmos_block_height = 0;
        self.ethereum_block_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for LastObservedEthereumBlockHeight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct LastClaimEvent {
    // message fields
    pub ethereum_event_nonce: u64,
    pub ethereum_event_height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LastClaimEvent {
    fn default() -> &'a LastClaimEvent {
        <LastClaimEvent as ::protobuf::Message>::default_instance()
    }
}

impl LastClaimEvent {
    pub fn new() -> LastClaimEvent {
        ::std::default::Default::default()
    }

    // uint64 ethereum_event_nonce = 1;


    pub fn get_ethereum_event_nonce(&self) -> u64 {
        self.ethereum_event_nonce
    }
    pub fn clear_ethereum_event_nonce(&mut self) {
        self.ethereum_event_nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_ethereum_event_nonce(&mut self, v: u64) {
        self.ethereum_event_nonce = v;
    }

    // uint64 ethereum_event_height = 2;


    pub fn get_ethereum_event_height(&self) -> u64 {
        self.ethereum_event_height
    }
    pub fn clear_ethereum_event_height(&mut self) {
        self.ethereum_event_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_ethereum_event_height(&mut self, v: u64) {
        self.ethereum_event_height = v;
    }
}

impl ::protobuf::Message for LastClaimEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ethereum_event_nonce = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ethereum_event_height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ethereum_event_nonce != 0 {
            my_size += ::protobuf::rt::value_size(1, self.ethereum_event_nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ethereum_event_height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ethereum_event_height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ethereum_event_nonce != 0 {
            os.write_uint64(1, self.ethereum_event_nonce)?;
        }
        if self.ethereum_event_height != 0 {
            os.write_uint64(2, self.ethereum_event_height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LastClaimEvent {
        LastClaimEvent::new()
    }

    fn default_instance() -> &'static LastClaimEvent {
        static instance: ::protobuf::rt::LazyV2<LastClaimEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LastClaimEvent::new)
    }
}

impl ::protobuf::Clear for LastClaimEvent {
    fn clear(&mut self) {
        self.ethereum_event_nonce = 0;
        self.ethereum_event_height = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for LastClaimEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ERC20ToDenom {
    // message fields
    pub erc20: ::std::string::String,
    pub denom: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ERC20ToDenom {
    fn default() -> &'a ERC20ToDenom {
        <ERC20ToDenom as ::protobuf::Message>::default_instance()
    }
}

impl ERC20ToDenom {
    pub fn new() -> ERC20ToDenom {
        ::std::default::Default::default()
    }

    // string erc20 = 1;


    pub fn get_erc20(&self) -> &str {
        &self.erc20
    }
    pub fn clear_erc20(&mut self) {
        self.erc20.clear();
    }

    // Param is passed by value, moved
    pub fn set_erc20(&mut self, v: ::std::string::String) {
        self.erc20 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_erc20(&mut self) -> &mut ::std::string::String {
        &mut self.erc20
    }

    // Take field
    pub fn take_erc20(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.erc20, ::std::string::String::new())
    }

    // string denom = 2;


    pub fn get_denom(&self) -> &str {
        &self.denom
    }
    pub fn clear_denom(&mut self) {
        self.denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_denom(&mut self, v: ::std::string::String) {
        self.denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_denom(&mut self) -> &mut ::std::string::String {
        &mut self.denom
    }

    // Take field
    pub fn take_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.denom, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ERC20ToDenom {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.erc20)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.denom)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.erc20.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.erc20);
        }
        if !self.denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.denom);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.erc20.is_empty() {
            os.write_string(1, &self.erc20)?;
        }
        if !self.denom.is_empty() {
            os.write_string(2, &self.denom)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ERC20ToDenom {
        ERC20ToDenom::new()
    }

    fn default_instance() -> &'static ERC20ToDenom {
        static instance: ::protobuf::rt::LazyV2<ERC20ToDenom> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ERC20ToDenom::new)
    }
}

impl ::protobuf::Clear for ERC20ToDenom {
    fn clear(&mut self) {
        self.erc20.clear();
        self.denom.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ERC20ToDenom {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

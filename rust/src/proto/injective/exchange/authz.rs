// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/exchange/v1beta1/authz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateSpotLimitOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSpotLimitOrderAuthz {
    fn default() -> &'a CreateSpotLimitOrderAuthz {
        <CreateSpotLimitOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CreateSpotLimitOrderAuthz {
    pub fn new() -> CreateSpotLimitOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateSpotLimitOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSpotLimitOrderAuthz {
        CreateSpotLimitOrderAuthz::new()
    }

    fn default_instance() -> &'static CreateSpotLimitOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CreateSpotLimitOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateSpotLimitOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CreateSpotLimitOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSpotLimitOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateSpotMarketOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateSpotMarketOrderAuthz {
    fn default() -> &'a CreateSpotMarketOrderAuthz {
        <CreateSpotMarketOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CreateSpotMarketOrderAuthz {
    pub fn new() -> CreateSpotMarketOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateSpotMarketOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateSpotMarketOrderAuthz {
        CreateSpotMarketOrderAuthz::new()
    }

    fn default_instance() -> &'static CreateSpotMarketOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CreateSpotMarketOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateSpotMarketOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CreateSpotMarketOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateSpotMarketOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchCreateSpotLimitOrdersAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateSpotLimitOrdersAuthz {
    fn default() -> &'a BatchCreateSpotLimitOrdersAuthz {
        <BatchCreateSpotLimitOrdersAuthz as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateSpotLimitOrdersAuthz {
    pub fn new() -> BatchCreateSpotLimitOrdersAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCreateSpotLimitOrdersAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateSpotLimitOrdersAuthz {
        BatchCreateSpotLimitOrdersAuthz::new()
    }

    fn default_instance() -> &'static BatchCreateSpotLimitOrdersAuthz {
        static instance: ::protobuf::rt::LazyV2<BatchCreateSpotLimitOrdersAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchCreateSpotLimitOrdersAuthz::new)
    }
}

impl ::protobuf::Clear for BatchCreateSpotLimitOrdersAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateSpotLimitOrdersAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CancelSpotOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelSpotOrderAuthz {
    fn default() -> &'a CancelSpotOrderAuthz {
        <CancelSpotOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CancelSpotOrderAuthz {
    pub fn new() -> CancelSpotOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CancelSpotOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelSpotOrderAuthz {
        CancelSpotOrderAuthz::new()
    }

    fn default_instance() -> &'static CancelSpotOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CancelSpotOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelSpotOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CancelSpotOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelSpotOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchCancelSpotOrdersAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCancelSpotOrdersAuthz {
    fn default() -> &'a BatchCancelSpotOrdersAuthz {
        <BatchCancelSpotOrdersAuthz as ::protobuf::Message>::default_instance()
    }
}

impl BatchCancelSpotOrdersAuthz {
    pub fn new() -> BatchCancelSpotOrdersAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCancelSpotOrdersAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCancelSpotOrdersAuthz {
        BatchCancelSpotOrdersAuthz::new()
    }

    fn default_instance() -> &'static BatchCancelSpotOrdersAuthz {
        static instance: ::protobuf::rt::LazyV2<BatchCancelSpotOrdersAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchCancelSpotOrdersAuthz::new)
    }
}

impl ::protobuf::Clear for BatchCancelSpotOrdersAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCancelSpotOrdersAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateDerivativeLimitOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDerivativeLimitOrderAuthz {
    fn default() -> &'a CreateDerivativeLimitOrderAuthz {
        <CreateDerivativeLimitOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CreateDerivativeLimitOrderAuthz {
    pub fn new() -> CreateDerivativeLimitOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateDerivativeLimitOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDerivativeLimitOrderAuthz {
        CreateDerivativeLimitOrderAuthz::new()
    }

    fn default_instance() -> &'static CreateDerivativeLimitOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CreateDerivativeLimitOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDerivativeLimitOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CreateDerivativeLimitOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDerivativeLimitOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CreateDerivativeMarketOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateDerivativeMarketOrderAuthz {
    fn default() -> &'a CreateDerivativeMarketOrderAuthz {
        <CreateDerivativeMarketOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CreateDerivativeMarketOrderAuthz {
    pub fn new() -> CreateDerivativeMarketOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateDerivativeMarketOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateDerivativeMarketOrderAuthz {
        CreateDerivativeMarketOrderAuthz::new()
    }

    fn default_instance() -> &'static CreateDerivativeMarketOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CreateDerivativeMarketOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateDerivativeMarketOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CreateDerivativeMarketOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateDerivativeMarketOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchCreateDerivativeLimitOrdersAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCreateDerivativeLimitOrdersAuthz {
    fn default() -> &'a BatchCreateDerivativeLimitOrdersAuthz {
        <BatchCreateDerivativeLimitOrdersAuthz as ::protobuf::Message>::default_instance()
    }
}

impl BatchCreateDerivativeLimitOrdersAuthz {
    pub fn new() -> BatchCreateDerivativeLimitOrdersAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCreateDerivativeLimitOrdersAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCreateDerivativeLimitOrdersAuthz {
        BatchCreateDerivativeLimitOrdersAuthz::new()
    }

    fn default_instance() -> &'static BatchCreateDerivativeLimitOrdersAuthz {
        static instance: ::protobuf::rt::LazyV2<BatchCreateDerivativeLimitOrdersAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchCreateDerivativeLimitOrdersAuthz::new)
    }
}

impl ::protobuf::Clear for BatchCreateDerivativeLimitOrdersAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCreateDerivativeLimitOrdersAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CancelDerivativeOrderAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelDerivativeOrderAuthz {
    fn default() -> &'a CancelDerivativeOrderAuthz {
        <CancelDerivativeOrderAuthz as ::protobuf::Message>::default_instance()
    }
}

impl CancelDerivativeOrderAuthz {
    pub fn new() -> CancelDerivativeOrderAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CancelDerivativeOrderAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelDerivativeOrderAuthz {
        CancelDerivativeOrderAuthz::new()
    }

    fn default_instance() -> &'static CancelDerivativeOrderAuthz {
        static instance: ::protobuf::rt::LazyV2<CancelDerivativeOrderAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CancelDerivativeOrderAuthz::new)
    }
}

impl ::protobuf::Clear for CancelDerivativeOrderAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelDerivativeOrderAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchCancelDerivativeOrdersAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchCancelDerivativeOrdersAuthz {
    fn default() -> &'a BatchCancelDerivativeOrdersAuthz {
        <BatchCancelDerivativeOrdersAuthz as ::protobuf::Message>::default_instance()
    }
}

impl BatchCancelDerivativeOrdersAuthz {
    pub fn new() -> BatchCancelDerivativeOrdersAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string market_ids = 2;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchCancelDerivativeOrdersAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.market_ids {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchCancelDerivativeOrdersAuthz {
        BatchCancelDerivativeOrdersAuthz::new()
    }

    fn default_instance() -> &'static BatchCancelDerivativeOrdersAuthz {
        static instance: ::protobuf::rt::LazyV2<BatchCancelDerivativeOrdersAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchCancelDerivativeOrdersAuthz::new)
    }
}

impl ::protobuf::Clear for BatchCancelDerivativeOrdersAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchCancelDerivativeOrdersAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BatchUpdateOrdersAuthz {
    // message fields
    pub subaccount_id: ::std::string::String,
    pub spot_markets: ::protobuf::RepeatedField<::std::string::String>,
    pub derivative_markets: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BatchUpdateOrdersAuthz {
    fn default() -> &'a BatchUpdateOrdersAuthz {
        <BatchUpdateOrdersAuthz as ::protobuf::Message>::default_instance()
    }
}

impl BatchUpdateOrdersAuthz {
    pub fn new() -> BatchUpdateOrdersAuthz {
        ::std::default::Default::default()
    }

    // string subaccount_id = 1;


    pub fn get_subaccount_id(&self) -> &str {
        &self.subaccount_id
    }
    pub fn clear_subaccount_id(&mut self) {
        self.subaccount_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_subaccount_id(&mut self, v: ::std::string::String) {
        self.subaccount_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subaccount_id(&mut self) -> &mut ::std::string::String {
        &mut self.subaccount_id
    }

    // Take field
    pub fn take_subaccount_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subaccount_id, ::std::string::String::new())
    }

    // repeated string spot_markets = 2;


    pub fn get_spot_markets(&self) -> &[::std::string::String] {
        &self.spot_markets
    }
    pub fn clear_spot_markets(&mut self) {
        self.spot_markets.clear();
    }

    // Param is passed by value, moved
    pub fn set_spot_markets(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.spot_markets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spot_markets(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.spot_markets
    }

    // Take field
    pub fn take_spot_markets(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.spot_markets, ::protobuf::RepeatedField::new())
    }

    // repeated string derivative_markets = 3;


    pub fn get_derivative_markets(&self) -> &[::std::string::String] {
        &self.derivative_markets
    }
    pub fn clear_derivative_markets(&mut self) {
        self.derivative_markets.clear();
    }

    // Param is passed by value, moved
    pub fn set_derivative_markets(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.derivative_markets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_derivative_markets(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.derivative_markets
    }

    // Take field
    pub fn take_derivative_markets(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.derivative_markets, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BatchUpdateOrdersAuthz {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subaccount_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.spot_markets)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.derivative_markets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.subaccount_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.subaccount_id);
        }
        for value in &self.spot_markets {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.derivative_markets {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.subaccount_id.is_empty() {
            os.write_string(1, &self.subaccount_id)?;
        }
        for v in &self.spot_markets {
            os.write_string(2, &v)?;
        };
        for v in &self.derivative_markets {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BatchUpdateOrdersAuthz {
        BatchUpdateOrdersAuthz::new()
    }

    fn default_instance() -> &'static BatchUpdateOrdersAuthz {
        static instance: ::protobuf::rt::LazyV2<BatchUpdateOrdersAuthz> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BatchUpdateOrdersAuthz::new)
    }
}

impl ::protobuf::Clear for BatchUpdateOrdersAuthz {
    fn clear(&mut self) {
        self.subaccount_id.clear();
        self.spot_markets.clear();
        self.derivative_markets.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BatchUpdateOrdersAuthz {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

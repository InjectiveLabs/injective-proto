// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective/oracle/v1beta1/oracle.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Params {
    // message fields
    pub pyth_contract: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Params {
    fn default() -> &'a Params {
        <Params as ::protobuf::Message>::default_instance()
    }
}

impl Params {
    pub fn new() -> Params {
        ::std::default::Default::default()
    }

    // string pyth_contract = 1;


    pub fn get_pyth_contract(&self) -> &str {
        &self.pyth_contract
    }
    pub fn clear_pyth_contract(&mut self) {
        self.pyth_contract.clear();
    }

    // Param is passed by value, moved
    pub fn set_pyth_contract(&mut self, v: ::std::string::String) {
        self.pyth_contract = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pyth_contract(&mut self) -> &mut ::std::string::String {
        &mut self.pyth_contract
    }

    // Take field
    pub fn take_pyth_contract(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pyth_contract, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Params {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pyth_contract)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.pyth_contract.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.pyth_contract);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.pyth_contract.is_empty() {
            os.write_string(1, &self.pyth_contract)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Params {
        Params::new()
    }

    fn default_instance() -> &'static Params {
        static instance: ::protobuf::rt::LazyV2<Params> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Params::new)
    }
}

impl ::protobuf::Clear for Params {
    fn clear(&mut self) {
        self.pyth_contract.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Params {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OracleInfo {
    // message fields
    pub symbol: ::std::string::String,
    pub oracle_type: OracleType,
    pub scale_factor: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OracleInfo {
    fn default() -> &'a OracleInfo {
        <OracleInfo as ::protobuf::Message>::default_instance()
    }
}

impl OracleInfo {
    pub fn new() -> OracleInfo {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.OracleType oracle_type = 2;


    pub fn get_oracle_type(&self) -> OracleType {
        self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type = OracleType::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: OracleType) {
        self.oracle_type = v;
    }

    // uint32 scale_factor = 3;


    pub fn get_scale_factor(&self) -> u32 {
        self.scale_factor
    }
    pub fn clear_scale_factor(&mut self) {
        self.scale_factor = 0;
    }

    // Param is passed by value, moved
    pub fn set_scale_factor(&mut self, v: u32) {
        self.scale_factor = v;
    }
}

impl ::protobuf::Message for OracleInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.oracle_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.scale_factor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if self.oracle_type != OracleType::Unspecified {
            my_size += ::protobuf::rt::enum_size(2, self.oracle_type);
        }
        if self.scale_factor != 0 {
            my_size += ::protobuf::rt::value_size(3, self.scale_factor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if self.oracle_type != OracleType::Unspecified {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.oracle_type))?;
        }
        if self.scale_factor != 0 {
            os.write_uint32(3, self.scale_factor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OracleInfo {
        OracleInfo::new()
    }

    fn default_instance() -> &'static OracleInfo {
        static instance: ::protobuf::rt::LazyV2<OracleInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OracleInfo::new)
    }
}

impl ::protobuf::Clear for OracleInfo {
    fn clear(&mut self) {
        self.symbol.clear();
        self.oracle_type = OracleType::Unspecified;
        self.scale_factor = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OracleInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ChainlinkPriceState {
    // message fields
    pub feed_id: ::std::string::String,
    pub answer: ::std::string::String,
    pub timestamp: u64,
    pub price_state: ::protobuf::SingularPtrField<PriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainlinkPriceState {
    fn default() -> &'a ChainlinkPriceState {
        <ChainlinkPriceState as ::protobuf::Message>::default_instance()
    }
}

impl ChainlinkPriceState {
    pub fn new() -> ChainlinkPriceState {
        ::std::default::Default::default()
    }

    // string feed_id = 1;


    pub fn get_feed_id(&self) -> &str {
        &self.feed_id
    }
    pub fn clear_feed_id(&mut self) {
        self.feed_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_feed_id(&mut self, v: ::std::string::String) {
        self.feed_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_feed_id(&mut self) -> &mut ::std::string::String {
        &mut self.feed_id
    }

    // Take field
    pub fn take_feed_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.feed_id, ::std::string::String::new())
    }

    // string answer = 2;


    pub fn get_answer(&self) -> &str {
        &self.answer
    }
    pub fn clear_answer(&mut self) {
        self.answer.clear();
    }

    // Param is passed by value, moved
    pub fn set_answer(&mut self, v: ::std::string::String) {
        self.answer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer(&mut self) -> &mut ::std::string::String {
        &mut self.answer
    }

    // Take field
    pub fn take_answer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.answer, ::std::string::String::new())
    }

    // uint64 timestamp = 3;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // .injective.oracle.v1beta1.PriceState price_state = 4;


    pub fn get_price_state(&self) -> &PriceState {
        self.price_state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_price_state(&mut self) {
        self.price_state.clear();
    }

    pub fn has_price_state(&self) -> bool {
        self.price_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_state(&mut self, v: PriceState) {
        self.price_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_state(&mut self) -> &mut PriceState {
        if self.price_state.is_none() {
            self.price_state.set_default();
        }
        self.price_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_price_state(&mut self) -> PriceState {
        self.price_state.take().unwrap_or_else(|| PriceState::new())
    }
}

impl ::protobuf::Message for ChainlinkPriceState {
    fn is_initialized(&self) -> bool {
        for v in &self.price_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.feed_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.answer)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.price_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.feed_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.feed_id);
        }
        if !self.answer.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.answer);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.price_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.feed_id.is_empty() {
            os.write_string(1, &self.feed_id)?;
        }
        if !self.answer.is_empty() {
            os.write_string(2, &self.answer)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(3, self.timestamp)?;
        }
        if let Some(ref v) = self.price_state.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainlinkPriceState {
        ChainlinkPriceState::new()
    }

    fn default_instance() -> &'static ChainlinkPriceState {
        static instance: ::protobuf::rt::LazyV2<ChainlinkPriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChainlinkPriceState::new)
    }
}

impl ::protobuf::Clear for ChainlinkPriceState {
    fn clear(&mut self) {
        self.feed_id.clear();
        self.answer.clear();
        self.timestamp = 0;
        self.price_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainlinkPriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BandPriceState {
    // message fields
    pub symbol: ::std::string::String,
    pub rate: ::std::string::String,
    pub resolve_time: u64,
    pub request_ID: u64,
    pub price_state: ::protobuf::SingularPtrField<PriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BandPriceState {
    fn default() -> &'a BandPriceState {
        <BandPriceState as ::protobuf::Message>::default_instance()
    }
}

impl BandPriceState {
    pub fn new() -> BandPriceState {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string rate = 2;


    pub fn get_rate(&self) -> &str {
        &self.rate
    }
    pub fn clear_rate(&mut self) {
        self.rate.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate(&mut self, v: ::std::string::String) {
        self.rate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate(&mut self) -> &mut ::std::string::String {
        &mut self.rate
    }

    // Take field
    pub fn take_rate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rate, ::std::string::String::new())
    }

    // uint64 resolve_time = 3;


    pub fn get_resolve_time(&self) -> u64 {
        self.resolve_time
    }
    pub fn clear_resolve_time(&mut self) {
        self.resolve_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_resolve_time(&mut self, v: u64) {
        self.resolve_time = v;
    }

    // uint64 request_ID = 4;


    pub fn get_request_ID(&self) -> u64 {
        self.request_ID
    }
    pub fn clear_request_ID(&mut self) {
        self.request_ID = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_ID(&mut self, v: u64) {
        self.request_ID = v;
    }

    // .injective.oracle.v1beta1.PriceState price_state = 5;


    pub fn get_price_state(&self) -> &PriceState {
        self.price_state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_price_state(&mut self) {
        self.price_state.clear();
    }

    pub fn has_price_state(&self) -> bool {
        self.price_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_state(&mut self, v: PriceState) {
        self.price_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_state(&mut self) -> &mut PriceState {
        if self.price_state.is_none() {
            self.price_state.set_default();
        }
        self.price_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_price_state(&mut self) -> PriceState {
        self.price_state.take().unwrap_or_else(|| PriceState::new())
    }
}

impl ::protobuf::Message for BandPriceState {
    fn is_initialized(&self) -> bool {
        for v in &self.price_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rate)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.resolve_time = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_ID = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.price_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if !self.rate.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.rate);
        }
        if self.resolve_time != 0 {
            my_size += ::protobuf::rt::value_size(3, self.resolve_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_ID != 0 {
            my_size += ::protobuf::rt::value_size(4, self.request_ID, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.price_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if !self.rate.is_empty() {
            os.write_string(2, &self.rate)?;
        }
        if self.resolve_time != 0 {
            os.write_uint64(3, self.resolve_time)?;
        }
        if self.request_ID != 0 {
            os.write_uint64(4, self.request_ID)?;
        }
        if let Some(ref v) = self.price_state.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BandPriceState {
        BandPriceState::new()
    }

    fn default_instance() -> &'static BandPriceState {
        static instance: ::protobuf::rt::LazyV2<BandPriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BandPriceState::new)
    }
}

impl ::protobuf::Clear for BandPriceState {
    fn clear(&mut self) {
        self.symbol.clear();
        self.rate.clear();
        self.resolve_time = 0;
        self.request_ID = 0;
        self.price_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BandPriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceFeedState {
    // message fields
    pub base: ::std::string::String,
    pub quote: ::std::string::String,
    pub price_state: ::protobuf::SingularPtrField<PriceState>,
    pub relayers: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceFeedState {
    fn default() -> &'a PriceFeedState {
        <PriceFeedState as ::protobuf::Message>::default_instance()
    }
}

impl PriceFeedState {
    pub fn new() -> PriceFeedState {
        ::std::default::Default::default()
    }

    // string base = 1;


    pub fn get_base(&self) -> &str {
        &self.base
    }
    pub fn clear_base(&mut self) {
        self.base.clear();
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: ::std::string::String) {
        self.base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base(&mut self) -> &mut ::std::string::String {
        &mut self.base
    }

    // Take field
    pub fn take_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base, ::std::string::String::new())
    }

    // string quote = 2;


    pub fn get_quote(&self) -> &str {
        &self.quote
    }
    pub fn clear_quote(&mut self) {
        self.quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote(&mut self, v: ::std::string::String) {
        self.quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote(&mut self) -> &mut ::std::string::String {
        &mut self.quote
    }

    // Take field
    pub fn take_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.PriceState price_state = 3;


    pub fn get_price_state(&self) -> &PriceState {
        self.price_state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_price_state(&mut self) {
        self.price_state.clear();
    }

    pub fn has_price_state(&self) -> bool {
        self.price_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_state(&mut self, v: PriceState) {
        self.price_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_state(&mut self) -> &mut PriceState {
        if self.price_state.is_none() {
            self.price_state.set_default();
        }
        self.price_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_price_state(&mut self) -> PriceState {
        self.price_state.take().unwrap_or_else(|| PriceState::new())
    }

    // repeated string relayers = 4;


    pub fn get_relayers(&self) -> &[::std::string::String] {
        &self.relayers
    }
    pub fn clear_relayers(&mut self) {
        self.relayers.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.relayers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relayers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.relayers
    }

    // Take field
    pub fn take_relayers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.relayers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PriceFeedState {
    fn is_initialized(&self) -> bool {
        for v in &self.price_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.price_state)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.relayers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.base);
        }
        if !self.quote.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.quote);
        }
        if let Some(ref v) = self.price_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.relayers {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base.is_empty() {
            os.write_string(1, &self.base)?;
        }
        if !self.quote.is_empty() {
            os.write_string(2, &self.quote)?;
        }
        if let Some(ref v) = self.price_state.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.relayers {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceFeedState {
        PriceFeedState::new()
    }

    fn default_instance() -> &'static PriceFeedState {
        static instance: ::protobuf::rt::LazyV2<PriceFeedState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceFeedState::new)
    }
}

impl ::protobuf::Clear for PriceFeedState {
    fn clear(&mut self) {
        self.base.clear();
        self.quote.clear();
        self.price_state.clear();
        self.relayers.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceFeedState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProviderInfo {
    // message fields
    pub provider: ::std::string::String,
    pub relayers: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProviderInfo {
    fn default() -> &'a ProviderInfo {
        <ProviderInfo as ::protobuf::Message>::default_instance()
    }
}

impl ProviderInfo {
    pub fn new() -> ProviderInfo {
        ::std::default::Default::default()
    }

    // string provider = 1;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // repeated string relayers = 2;


    pub fn get_relayers(&self) -> &[::std::string::String] {
        &self.relayers
    }
    pub fn clear_relayers(&mut self) {
        self.relayers.clear();
    }

    // Param is passed by value, moved
    pub fn set_relayers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.relayers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_relayers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.relayers
    }

    // Take field
    pub fn take_relayers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.relayers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProviderInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.relayers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.provider);
        }
        for value in &self.relayers {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.provider.is_empty() {
            os.write_string(1, &self.provider)?;
        }
        for v in &self.relayers {
            os.write_string(2, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProviderInfo {
        ProviderInfo::new()
    }

    fn default_instance() -> &'static ProviderInfo {
        static instance: ::protobuf::rt::LazyV2<ProviderInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProviderInfo::new)
    }
}

impl ::protobuf::Clear for ProviderInfo {
    fn clear(&mut self) {
        self.provider.clear();
        self.relayers.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ProviderInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProviderState {
    // message fields
    pub provider_info: ::protobuf::SingularPtrField<ProviderInfo>,
    pub provider_price_states: ::protobuf::RepeatedField<ProviderPriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProviderState {
    fn default() -> &'a ProviderState {
        <ProviderState as ::protobuf::Message>::default_instance()
    }
}

impl ProviderState {
    pub fn new() -> ProviderState {
        ::std::default::Default::default()
    }

    // .injective.oracle.v1beta1.ProviderInfo provider_info = 1;


    pub fn get_provider_info(&self) -> &ProviderInfo {
        self.provider_info.as_ref().unwrap_or_else(|| <ProviderInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_provider_info(&mut self) {
        self.provider_info.clear();
    }

    pub fn has_provider_info(&self) -> bool {
        self.provider_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider_info(&mut self, v: ProviderInfo) {
        self.provider_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_info(&mut self) -> &mut ProviderInfo {
        if self.provider_info.is_none() {
            self.provider_info.set_default();
        }
        self.provider_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_provider_info(&mut self) -> ProviderInfo {
        self.provider_info.take().unwrap_or_else(|| ProviderInfo::new())
    }

    // repeated .injective.oracle.v1beta1.ProviderPriceState provider_price_states = 2;


    pub fn get_provider_price_states(&self) -> &[ProviderPriceState] {
        &self.provider_price_states
    }
    pub fn clear_provider_price_states(&mut self) {
        self.provider_price_states.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider_price_states(&mut self, v: ::protobuf::RepeatedField<ProviderPriceState>) {
        self.provider_price_states = v;
    }

    // Mutable pointer to the field.
    pub fn mut_provider_price_states(&mut self) -> &mut ::protobuf::RepeatedField<ProviderPriceState> {
        &mut self.provider_price_states
    }

    // Take field
    pub fn take_provider_price_states(&mut self) -> ::protobuf::RepeatedField<ProviderPriceState> {
        ::std::mem::replace(&mut self.provider_price_states, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProviderState {
    fn is_initialized(&self) -> bool {
        for v in &self.provider_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.provider_price_states {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.provider_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.provider_price_states)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.provider_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.provider_price_states {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.provider_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.provider_price_states {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProviderState {
        ProviderState::new()
    }

    fn default_instance() -> &'static ProviderState {
        static instance: ::protobuf::rt::LazyV2<ProviderState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProviderState::new)
    }
}

impl ::protobuf::Clear for ProviderState {
    fn clear(&mut self) {
        self.provider_info.clear();
        self.provider_price_states.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ProviderState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct ProviderPriceState {
    // message fields
    pub symbol: ::std::string::String,
    pub state: ::protobuf::SingularPtrField<PriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProviderPriceState {
    fn default() -> &'a ProviderPriceState {
        <ProviderPriceState as ::protobuf::Message>::default_instance()
    }
}

impl ProviderPriceState {
    pub fn new() -> ProviderPriceState {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // .injective.oracle.v1beta1.PriceState state = 2;


    pub fn get_state(&self) -> &PriceState {
        self.state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_state(&mut self) {
        self.state.clear();
    }

    pub fn has_state(&self) -> bool {
        self.state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: PriceState) {
        self.state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state(&mut self) -> &mut PriceState {
        if self.state.is_none() {
            self.state.set_default();
        }
        self.state.as_mut().unwrap()
    }

    // Take field
    pub fn take_state(&mut self) -> PriceState {
        self.state.take().unwrap_or_else(|| PriceState::new())
    }
}

impl ::protobuf::Message for ProviderPriceState {
    fn is_initialized(&self) -> bool {
        for v in &self.state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if let Some(ref v) = self.state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if let Some(ref v) = self.state.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProviderPriceState {
        ProviderPriceState::new()
    }

    fn default_instance() -> &'static ProviderPriceState {
        static instance: ::protobuf::rt::LazyV2<ProviderPriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProviderPriceState::new)
    }
}

impl ::protobuf::Clear for ProviderPriceState {
    fn clear(&mut self) {
        self.symbol.clear();
        self.state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for ProviderPriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceFeedInfo {
    // message fields
    pub base: ::std::string::String,
    pub quote: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceFeedInfo {
    fn default() -> &'a PriceFeedInfo {
        <PriceFeedInfo as ::protobuf::Message>::default_instance()
    }
}

impl PriceFeedInfo {
    pub fn new() -> PriceFeedInfo {
        ::std::default::Default::default()
    }

    // string base = 1;


    pub fn get_base(&self) -> &str {
        &self.base
    }
    pub fn clear_base(&mut self) {
        self.base.clear();
    }

    // Param is passed by value, moved
    pub fn set_base(&mut self, v: ::std::string::String) {
        self.base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base(&mut self) -> &mut ::std::string::String {
        &mut self.base
    }

    // Take field
    pub fn take_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base, ::std::string::String::new())
    }

    // string quote = 2;


    pub fn get_quote(&self) -> &str {
        &self.quote
    }
    pub fn clear_quote(&mut self) {
        self.quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote(&mut self, v: ::std::string::String) {
        self.quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote(&mut self) -> &mut ::std::string::String {
        &mut self.quote
    }

    // Take field
    pub fn take_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PriceFeedInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.base);
        }
        if !self.quote.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.quote);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base.is_empty() {
            os.write_string(1, &self.base)?;
        }
        if !self.quote.is_empty() {
            os.write_string(2, &self.quote)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceFeedInfo {
        PriceFeedInfo::new()
    }

    fn default_instance() -> &'static PriceFeedInfo {
        static instance: ::protobuf::rt::LazyV2<PriceFeedInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceFeedInfo::new)
    }
}

impl ::protobuf::Clear for PriceFeedInfo {
    fn clear(&mut self) {
        self.base.clear();
        self.quote.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceFeedInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceFeedPrice {
    // message fields
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceFeedPrice {
    fn default() -> &'a PriceFeedPrice {
        <PriceFeedPrice as ::protobuf::Message>::default_instance()
    }
}

impl PriceFeedPrice {
    pub fn new() -> PriceFeedPrice {
        ::std::default::Default::default()
    }

    // string price = 1;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PriceFeedPrice {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceFeedPrice {
        PriceFeedPrice::new()
    }

    fn default_instance() -> &'static PriceFeedPrice {
        static instance: ::protobuf::rt::LazyV2<PriceFeedPrice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceFeedPrice::new)
    }
}

impl ::protobuf::Clear for PriceFeedPrice {
    fn clear(&mut self) {
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceFeedPrice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct CoinbasePriceState {
    // message fields
    pub kind: ::std::string::String,
    pub timestamp: u64,
    pub key: ::std::string::String,
    pub value: u64,
    pub price_state: ::protobuf::SingularPtrField<PriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CoinbasePriceState {
    fn default() -> &'a CoinbasePriceState {
        <CoinbasePriceState as ::protobuf::Message>::default_instance()
    }
}

impl CoinbasePriceState {
    pub fn new() -> CoinbasePriceState {
        ::std::default::Default::default()
    }

    // string kind = 1;


    pub fn get_kind(&self) -> &str {
        &self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: ::std::string::String) {
        self.kind = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut ::std::string::String {
        &mut self.kind
    }

    // Take field
    pub fn take_kind(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.kind, ::std::string::String::new())
    }

    // uint64 timestamp = 2;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // string key = 3;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // uint64 value = 4;


    pub fn get_value(&self) -> u64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = v;
    }

    // .injective.oracle.v1beta1.PriceState price_state = 5;


    pub fn get_price_state(&self) -> &PriceState {
        self.price_state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_price_state(&mut self) {
        self.price_state.clear();
    }

    pub fn has_price_state(&self) -> bool {
        self.price_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_state(&mut self, v: PriceState) {
        self.price_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_state(&mut self) -> &mut PriceState {
        if self.price_state.is_none() {
            self.price_state.set_default();
        }
        self.price_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_price_state(&mut self) -> PriceState {
        self.price_state.take().unwrap_or_else(|| PriceState::new())
    }
}

impl ::protobuf::Message for CoinbasePriceState {
    fn is_initialized(&self) -> bool {
        for v in &self.price_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.price_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.kind.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.kind);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.key);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(4, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.price_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.kind.is_empty() {
            os.write_string(1, &self.kind)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.key.is_empty() {
            os.write_string(3, &self.key)?;
        }
        if self.value != 0 {
            os.write_uint64(4, self.value)?;
        }
        if let Some(ref v) = self.price_state.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CoinbasePriceState {
        CoinbasePriceState::new()
    }

    fn default_instance() -> &'static CoinbasePriceState {
        static instance: ::protobuf::rt::LazyV2<CoinbasePriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CoinbasePriceState::new)
    }
}

impl ::protobuf::Clear for CoinbasePriceState {
    fn clear(&mut self) {
        self.kind.clear();
        self.timestamp = 0;
        self.key.clear();
        self.value = 0;
        self.price_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for CoinbasePriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceState {
    // message fields
    pub price: ::std::string::String,
    pub cumulative_price: ::std::string::String,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceState {
    fn default() -> &'a PriceState {
        <PriceState as ::protobuf::Message>::default_instance()
    }
}

impl PriceState {
    pub fn new() -> PriceState {
        ::std::default::Default::default()
    }

    // string price = 1;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }

    // string cumulative_price = 2;


    pub fn get_cumulative_price(&self) -> &str {
        &self.cumulative_price
    }
    pub fn clear_cumulative_price(&mut self) {
        self.cumulative_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_cumulative_price(&mut self, v: ::std::string::String) {
        self.cumulative_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cumulative_price(&mut self) -> &mut ::std::string::String {
        &mut self.cumulative_price
    }

    // Take field
    pub fn take_cumulative_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cumulative_price, ::std::string::String::new())
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for PriceState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cumulative_price)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        if !self.cumulative_price.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cumulative_price);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        if !self.cumulative_price.is_empty() {
            os.write_string(2, &self.cumulative_price)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceState {
        PriceState::new()
    }

    fn default_instance() -> &'static PriceState {
        static instance: ::protobuf::rt::LazyV2<PriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceState::new)
    }
}

impl ::protobuf::Clear for PriceState {
    fn clear(&mut self) {
        self.price.clear();
        self.cumulative_price.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PythPriceState {
    // message fields
    pub price_id: ::std::string::String,
    pub ema_price: ::std::string::String,
    pub ema_conf: ::std::string::String,
    pub conf: ::std::string::String,
    pub publish_time: u64,
    pub price_state: ::protobuf::SingularPtrField<PriceState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PythPriceState {
    fn default() -> &'a PythPriceState {
        <PythPriceState as ::protobuf::Message>::default_instance()
    }
}

impl PythPriceState {
    pub fn new() -> PythPriceState {
        ::std::default::Default::default()
    }

    // string price_id = 1;


    pub fn get_price_id(&self) -> &str {
        &self.price_id
    }
    pub fn clear_price_id(&mut self) {
        self.price_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_price_id(&mut self, v: ::std::string::String) {
        self.price_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_id(&mut self) -> &mut ::std::string::String {
        &mut self.price_id
    }

    // Take field
    pub fn take_price_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price_id, ::std::string::String::new())
    }

    // string ema_price = 2;


    pub fn get_ema_price(&self) -> &str {
        &self.ema_price
    }
    pub fn clear_ema_price(&mut self) {
        self.ema_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_ema_price(&mut self, v: ::std::string::String) {
        self.ema_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ema_price(&mut self) -> &mut ::std::string::String {
        &mut self.ema_price
    }

    // Take field
    pub fn take_ema_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ema_price, ::std::string::String::new())
    }

    // string ema_conf = 3;


    pub fn get_ema_conf(&self) -> &str {
        &self.ema_conf
    }
    pub fn clear_ema_conf(&mut self) {
        self.ema_conf.clear();
    }

    // Param is passed by value, moved
    pub fn set_ema_conf(&mut self, v: ::std::string::String) {
        self.ema_conf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ema_conf(&mut self) -> &mut ::std::string::String {
        &mut self.ema_conf
    }

    // Take field
    pub fn take_ema_conf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ema_conf, ::std::string::String::new())
    }

    // string conf = 4;


    pub fn get_conf(&self) -> &str {
        &self.conf
    }
    pub fn clear_conf(&mut self) {
        self.conf.clear();
    }

    // Param is passed by value, moved
    pub fn set_conf(&mut self, v: ::std::string::String) {
        self.conf = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_conf(&mut self) -> &mut ::std::string::String {
        &mut self.conf
    }

    // Take field
    pub fn take_conf(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.conf, ::std::string::String::new())
    }

    // uint64 publish_time = 5;


    pub fn get_publish_time(&self) -> u64 {
        self.publish_time
    }
    pub fn clear_publish_time(&mut self) {
        self.publish_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_publish_time(&mut self, v: u64) {
        self.publish_time = v;
    }

    // .injective.oracle.v1beta1.PriceState price_state = 6;


    pub fn get_price_state(&self) -> &PriceState {
        self.price_state.as_ref().unwrap_or_else(|| <PriceState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_price_state(&mut self) {
        self.price_state.clear();
    }

    pub fn has_price_state(&self) -> bool {
        self.price_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_price_state(&mut self, v: PriceState) {
        self.price_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_state(&mut self) -> &mut PriceState {
        if self.price_state.is_none() {
            self.price_state.set_default();
        }
        self.price_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_price_state(&mut self) -> PriceState {
        self.price_state.take().unwrap_or_else(|| PriceState::new())
    }
}

impl ::protobuf::Message for PythPriceState {
    fn is_initialized(&self) -> bool {
        for v in &self.price_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ema_price)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ema_conf)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.conf)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.publish_time = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.price_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price_id);
        }
        if !self.ema_price.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ema_price);
        }
        if !self.ema_conf.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ema_conf);
        }
        if !self.conf.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.conf);
        }
        if self.publish_time != 0 {
            my_size += ::protobuf::rt::value_size(5, self.publish_time, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.price_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price_id.is_empty() {
            os.write_string(1, &self.price_id)?;
        }
        if !self.ema_price.is_empty() {
            os.write_string(2, &self.ema_price)?;
        }
        if !self.ema_conf.is_empty() {
            os.write_string(3, &self.ema_conf)?;
        }
        if !self.conf.is_empty() {
            os.write_string(4, &self.conf)?;
        }
        if self.publish_time != 0 {
            os.write_uint64(5, self.publish_time)?;
        }
        if let Some(ref v) = self.price_state.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PythPriceState {
        PythPriceState::new()
    }

    fn default_instance() -> &'static PythPriceState {
        static instance: ::protobuf::rt::LazyV2<PythPriceState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PythPriceState::new)
    }
}

impl ::protobuf::Clear for PythPriceState {
    fn clear(&mut self) {
        self.price_id.clear();
        self.ema_price.clear();
        self.ema_conf.clear();
        self.conf.clear();
        self.publish_time = 0;
        self.price_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PythPriceState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BandOracleRequest {
    // message fields
    pub request_id: u64,
    pub oracle_script_id: i64,
    pub symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub ask_count: u64,
    pub min_count: u64,
    pub fee_limit: ::protobuf::RepeatedField<super::coin::Coin>,
    pub prepare_gas: u64,
    pub execute_gas: u64,
    pub min_source_count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BandOracleRequest {
    fn default() -> &'a BandOracleRequest {
        <BandOracleRequest as ::protobuf::Message>::default_instance()
    }
}

impl BandOracleRequest {
    pub fn new() -> BandOracleRequest {
        ::std::default::Default::default()
    }

    // uint64 request_id = 1;


    pub fn get_request_id(&self) -> u64 {
        self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: u64) {
        self.request_id = v;
    }

    // int64 oracle_script_id = 2;


    pub fn get_oracle_script_id(&self) -> i64 {
        self.oracle_script_id
    }
    pub fn clear_oracle_script_id(&mut self) {
        self.oracle_script_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_oracle_script_id(&mut self, v: i64) {
        self.oracle_script_id = v;
    }

    // repeated string symbols = 3;


    pub fn get_symbols(&self) -> &[::std::string::String] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }

    // uint64 ask_count = 4;


    pub fn get_ask_count(&self) -> u64 {
        self.ask_count
    }
    pub fn clear_ask_count(&mut self) {
        self.ask_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_ask_count(&mut self, v: u64) {
        self.ask_count = v;
    }

    // uint64 min_count = 5;


    pub fn get_min_count(&self) -> u64 {
        self.min_count
    }
    pub fn clear_min_count(&mut self) {
        self.min_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_count(&mut self, v: u64) {
        self.min_count = v;
    }

    // repeated .cosmos.base.v1beta1.Coin fee_limit = 6;


    pub fn get_fee_limit(&self) -> &[super::coin::Coin] {
        &self.fee_limit
    }
    pub fn clear_fee_limit(&mut self) {
        self.fee_limit.clear();
    }

    // Param is passed by value, moved
    pub fn set_fee_limit(&mut self, v: ::protobuf::RepeatedField<super::coin::Coin>) {
        self.fee_limit = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fee_limit(&mut self) -> &mut ::protobuf::RepeatedField<super::coin::Coin> {
        &mut self.fee_limit
    }

    // Take field
    pub fn take_fee_limit(&mut self) -> ::protobuf::RepeatedField<super::coin::Coin> {
        ::std::mem::replace(&mut self.fee_limit, ::protobuf::RepeatedField::new())
    }

    // uint64 prepare_gas = 7;


    pub fn get_prepare_gas(&self) -> u64 {
        self.prepare_gas
    }
    pub fn clear_prepare_gas(&mut self) {
        self.prepare_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_prepare_gas(&mut self, v: u64) {
        self.prepare_gas = v;
    }

    // uint64 execute_gas = 8;


    pub fn get_execute_gas(&self) -> u64 {
        self.execute_gas
    }
    pub fn clear_execute_gas(&mut self) {
        self.execute_gas = 0;
    }

    // Param is passed by value, moved
    pub fn set_execute_gas(&mut self, v: u64) {
        self.execute_gas = v;
    }

    // uint64 min_source_count = 9;


    pub fn get_min_source_count(&self) -> u64 {
        self.min_source_count
    }
    pub fn clear_min_source_count(&mut self) {
        self.min_source_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_min_source_count(&mut self, v: u64) {
        self.min_source_count = v;
    }
}

impl ::protobuf::Message for BandOracleRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.fee_limit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.oracle_script_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.symbols)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ask_count = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_count = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fee_limit)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prepare_gas = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.execute_gas = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_source_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.request_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.oracle_script_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.oracle_script_id, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.symbols {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.ask_count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ask_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_count != 0 {
            my_size += ::protobuf::rt::value_size(5, self.min_count, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.fee_limit {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.prepare_gas != 0 {
            my_size += ::protobuf::rt::value_size(7, self.prepare_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.execute_gas != 0 {
            my_size += ::protobuf::rt::value_size(8, self.execute_gas, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.min_source_count != 0 {
            my_size += ::protobuf::rt::value_size(9, self.min_source_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_id != 0 {
            os.write_uint64(1, self.request_id)?;
        }
        if self.oracle_script_id != 0 {
            os.write_int64(2, self.oracle_script_id)?;
        }
        for v in &self.symbols {
            os.write_string(3, &v)?;
        };
        if self.ask_count != 0 {
            os.write_uint64(4, self.ask_count)?;
        }
        if self.min_count != 0 {
            os.write_uint64(5, self.min_count)?;
        }
        for v in &self.fee_limit {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.prepare_gas != 0 {
            os.write_uint64(7, self.prepare_gas)?;
        }
        if self.execute_gas != 0 {
            os.write_uint64(8, self.execute_gas)?;
        }
        if self.min_source_count != 0 {
            os.write_uint64(9, self.min_source_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BandOracleRequest {
        BandOracleRequest::new()
    }

    fn default_instance() -> &'static BandOracleRequest {
        static instance: ::protobuf::rt::LazyV2<BandOracleRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BandOracleRequest::new)
    }
}

impl ::protobuf::Clear for BandOracleRequest {
    fn clear(&mut self) {
        self.request_id = 0;
        self.oracle_script_id = 0;
        self.symbols.clear();
        self.ask_count = 0;
        self.min_count = 0;
        self.fee_limit.clear();
        self.prepare_gas = 0;
        self.execute_gas = 0;
        self.min_source_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BandOracleRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct BandIBCParams {
    // message fields
    pub band_ibc_enabled: bool,
    pub ibc_request_interval: i64,
    pub ibc_source_channel: ::std::string::String,
    pub ibc_version: ::std::string::String,
    pub ibc_port_id: ::std::string::String,
    pub legacy_oracle_ids: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BandIBCParams {
    fn default() -> &'a BandIBCParams {
        <BandIBCParams as ::protobuf::Message>::default_instance()
    }
}

impl BandIBCParams {
    pub fn new() -> BandIBCParams {
        ::std::default::Default::default()
    }

    // bool band_ibc_enabled = 1;


    pub fn get_band_ibc_enabled(&self) -> bool {
        self.band_ibc_enabled
    }
    pub fn clear_band_ibc_enabled(&mut self) {
        self.band_ibc_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_band_ibc_enabled(&mut self, v: bool) {
        self.band_ibc_enabled = v;
    }

    // int64 ibc_request_interval = 2;


    pub fn get_ibc_request_interval(&self) -> i64 {
        self.ibc_request_interval
    }
    pub fn clear_ibc_request_interval(&mut self) {
        self.ibc_request_interval = 0;
    }

    // Param is passed by value, moved
    pub fn set_ibc_request_interval(&mut self, v: i64) {
        self.ibc_request_interval = v;
    }

    // string ibc_source_channel = 3;


    pub fn get_ibc_source_channel(&self) -> &str {
        &self.ibc_source_channel
    }
    pub fn clear_ibc_source_channel(&mut self) {
        self.ibc_source_channel.clear();
    }

    // Param is passed by value, moved
    pub fn set_ibc_source_channel(&mut self, v: ::std::string::String) {
        self.ibc_source_channel = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ibc_source_channel(&mut self) -> &mut ::std::string::String {
        &mut self.ibc_source_channel
    }

    // Take field
    pub fn take_ibc_source_channel(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ibc_source_channel, ::std::string::String::new())
    }

    // string ibc_version = 4;


    pub fn get_ibc_version(&self) -> &str {
        &self.ibc_version
    }
    pub fn clear_ibc_version(&mut self) {
        self.ibc_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_ibc_version(&mut self, v: ::std::string::String) {
        self.ibc_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ibc_version(&mut self) -> &mut ::std::string::String {
        &mut self.ibc_version
    }

    // Take field
    pub fn take_ibc_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ibc_version, ::std::string::String::new())
    }

    // string ibc_port_id = 5;


    pub fn get_ibc_port_id(&self) -> &str {
        &self.ibc_port_id
    }
    pub fn clear_ibc_port_id(&mut self) {
        self.ibc_port_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ibc_port_id(&mut self, v: ::std::string::String) {
        self.ibc_port_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ibc_port_id(&mut self) -> &mut ::std::string::String {
        &mut self.ibc_port_id
    }

    // Take field
    pub fn take_ibc_port_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ibc_port_id, ::std::string::String::new())
    }

    // repeated int64 legacy_oracle_ids = 6;


    pub fn get_legacy_oracle_ids(&self) -> &[i64] {
        &self.legacy_oracle_ids
    }
    pub fn clear_legacy_oracle_ids(&mut self) {
        self.legacy_oracle_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_legacy_oracle_ids(&mut self, v: ::std::vec::Vec<i64>) {
        self.legacy_oracle_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_legacy_oracle_ids(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.legacy_oracle_ids
    }

    // Take field
    pub fn take_legacy_oracle_ids(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.legacy_oracle_ids, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BandIBCParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.band_ibc_enabled = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ibc_request_interval = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ibc_source_channel)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ibc_version)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ibc_port_id)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.legacy_oracle_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.band_ibc_enabled != false {
            my_size += 2;
        }
        if self.ibc_request_interval != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ibc_request_interval, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ibc_source_channel.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ibc_source_channel);
        }
        if !self.ibc_version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.ibc_version);
        }
        if !self.ibc_port_id.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.ibc_port_id);
        }
        for value in &self.legacy_oracle_ids {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.band_ibc_enabled != false {
            os.write_bool(1, self.band_ibc_enabled)?;
        }
        if self.ibc_request_interval != 0 {
            os.write_int64(2, self.ibc_request_interval)?;
        }
        if !self.ibc_source_channel.is_empty() {
            os.write_string(3, &self.ibc_source_channel)?;
        }
        if !self.ibc_version.is_empty() {
            os.write_string(4, &self.ibc_version)?;
        }
        if !self.ibc_port_id.is_empty() {
            os.write_string(5, &self.ibc_port_id)?;
        }
        for v in &self.legacy_oracle_ids {
            os.write_int64(6, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BandIBCParams {
        BandIBCParams::new()
    }

    fn default_instance() -> &'static BandIBCParams {
        static instance: ::protobuf::rt::LazyV2<BandIBCParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BandIBCParams::new)
    }
}

impl ::protobuf::Clear for BandIBCParams {
    fn clear(&mut self) {
        self.band_ibc_enabled = false;
        self.ibc_request_interval = 0;
        self.ibc_source_channel.clear();
        self.ibc_version.clear();
        self.ibc_port_id.clear();
        self.legacy_oracle_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for BandIBCParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct SymbolPriceTimestamp {
    // message fields
    pub oracle: OracleType,
    pub symbol_id: ::std::string::String,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SymbolPriceTimestamp {
    fn default() -> &'a SymbolPriceTimestamp {
        <SymbolPriceTimestamp as ::protobuf::Message>::default_instance()
    }
}

impl SymbolPriceTimestamp {
    pub fn new() -> SymbolPriceTimestamp {
        ::std::default::Default::default()
    }

    // .injective.oracle.v1beta1.OracleType oracle = 1;


    pub fn get_oracle(&self) -> OracleType {
        self.oracle
    }
    pub fn clear_oracle(&mut self) {
        self.oracle = OracleType::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_oracle(&mut self, v: OracleType) {
        self.oracle = v;
    }

    // string symbol_id = 2;


    pub fn get_symbol_id(&self) -> &str {
        &self.symbol_id
    }
    pub fn clear_symbol_id(&mut self) {
        self.symbol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol_id(&mut self, v: ::std::string::String) {
        self.symbol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol_id(&mut self) -> &mut ::std::string::String {
        &mut self.symbol_id
    }

    // Take field
    pub fn take_symbol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol_id, ::std::string::String::new())
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for SymbolPriceTimestamp {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.oracle, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.oracle != OracleType::Unspecified {
            my_size += ::protobuf::rt::enum_size(1, self.oracle);
        }
        if !self.symbol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol_id);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.oracle != OracleType::Unspecified {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.oracle))?;
        }
        if !self.symbol_id.is_empty() {
            os.write_string(2, &self.symbol_id)?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SymbolPriceTimestamp {
        SymbolPriceTimestamp::new()
    }

    fn default_instance() -> &'static SymbolPriceTimestamp {
        static instance: ::protobuf::rt::LazyV2<SymbolPriceTimestamp> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SymbolPriceTimestamp::new)
    }
}

impl ::protobuf::Clear for SymbolPriceTimestamp {
    fn clear(&mut self) {
        self.oracle = OracleType::Unspecified;
        self.symbol_id.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for SymbolPriceTimestamp {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct LastPriceTimestamps {
    // message fields
    pub last_price_timestamps: ::protobuf::RepeatedField<SymbolPriceTimestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LastPriceTimestamps {
    fn default() -> &'a LastPriceTimestamps {
        <LastPriceTimestamps as ::protobuf::Message>::default_instance()
    }
}

impl LastPriceTimestamps {
    pub fn new() -> LastPriceTimestamps {
        ::std::default::Default::default()
    }

    // repeated .injective.oracle.v1beta1.SymbolPriceTimestamp last_price_timestamps = 1;


    pub fn get_last_price_timestamps(&self) -> &[SymbolPriceTimestamp] {
        &self.last_price_timestamps
    }
    pub fn clear_last_price_timestamps(&mut self) {
        self.last_price_timestamps.clear();
    }

    // Param is passed by value, moved
    pub fn set_last_price_timestamps(&mut self, v: ::protobuf::RepeatedField<SymbolPriceTimestamp>) {
        self.last_price_timestamps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_last_price_timestamps(&mut self) -> &mut ::protobuf::RepeatedField<SymbolPriceTimestamp> {
        &mut self.last_price_timestamps
    }

    // Take field
    pub fn take_last_price_timestamps(&mut self) -> ::protobuf::RepeatedField<SymbolPriceTimestamp> {
        ::std::mem::replace(&mut self.last_price_timestamps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LastPriceTimestamps {
    fn is_initialized(&self) -> bool {
        for v in &self.last_price_timestamps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.last_price_timestamps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.last_price_timestamps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.last_price_timestamps {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LastPriceTimestamps {
        LastPriceTimestamps::new()
    }

    fn default_instance() -> &'static LastPriceTimestamps {
        static instance: ::protobuf::rt::LazyV2<LastPriceTimestamps> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LastPriceTimestamps::new)
    }
}

impl ::protobuf::Clear for LastPriceTimestamps {
    fn clear(&mut self) {
        self.last_price_timestamps.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for LastPriceTimestamps {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceRecords {
    // message fields
    pub oracle: OracleType,
    pub symbol_id: ::std::string::String,
    pub latest_price_records: ::protobuf::RepeatedField<PriceRecord>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceRecords {
    fn default() -> &'a PriceRecords {
        <PriceRecords as ::protobuf::Message>::default_instance()
    }
}

impl PriceRecords {
    pub fn new() -> PriceRecords {
        ::std::default::Default::default()
    }

    // .injective.oracle.v1beta1.OracleType oracle = 1;


    pub fn get_oracle(&self) -> OracleType {
        self.oracle
    }
    pub fn clear_oracle(&mut self) {
        self.oracle = OracleType::Unspecified;
    }

    // Param is passed by value, moved
    pub fn set_oracle(&mut self, v: OracleType) {
        self.oracle = v;
    }

    // string symbol_id = 2;


    pub fn get_symbol_id(&self) -> &str {
        &self.symbol_id
    }
    pub fn clear_symbol_id(&mut self) {
        self.symbol_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol_id(&mut self, v: ::std::string::String) {
        self.symbol_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol_id(&mut self) -> &mut ::std::string::String {
        &mut self.symbol_id
    }

    // Take field
    pub fn take_symbol_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol_id, ::std::string::String::new())
    }

    // repeated .injective.oracle.v1beta1.PriceRecord latest_price_records = 3;


    pub fn get_latest_price_records(&self) -> &[PriceRecord] {
        &self.latest_price_records
    }
    pub fn clear_latest_price_records(&mut self) {
        self.latest_price_records.clear();
    }

    // Param is passed by value, moved
    pub fn set_latest_price_records(&mut self, v: ::protobuf::RepeatedField<PriceRecord>) {
        self.latest_price_records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_latest_price_records(&mut self) -> &mut ::protobuf::RepeatedField<PriceRecord> {
        &mut self.latest_price_records
    }

    // Take field
    pub fn take_latest_price_records(&mut self) -> ::protobuf::RepeatedField<PriceRecord> {
        ::std::mem::replace(&mut self.latest_price_records, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PriceRecords {
    fn is_initialized(&self) -> bool {
        for v in &self.latest_price_records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.oracle, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol_id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.latest_price_records)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.oracle != OracleType::Unspecified {
            my_size += ::protobuf::rt::enum_size(1, self.oracle);
        }
        if !self.symbol_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol_id);
        }
        for value in &self.latest_price_records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.oracle != OracleType::Unspecified {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.oracle))?;
        }
        if !self.symbol_id.is_empty() {
            os.write_string(2, &self.symbol_id)?;
        }
        for v in &self.latest_price_records {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceRecords {
        PriceRecords::new()
    }

    fn default_instance() -> &'static PriceRecords {
        static instance: ::protobuf::rt::LazyV2<PriceRecords> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceRecords::new)
    }
}

impl ::protobuf::Clear for PriceRecords {
    fn clear(&mut self) {
        self.oracle = OracleType::Unspecified;
        self.symbol_id.clear();
        self.latest_price_records.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceRecords {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceRecord {
    // message fields
    pub timestamp: i64,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceRecord {
    fn default() -> &'a PriceRecord {
        <PriceRecord as ::protobuf::Message>::default_instance()
    }
}

impl PriceRecord {
    pub fn new() -> PriceRecord {
        ::std::default::Default::default()
    }

    // int64 timestamp = 1;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // string price = 2;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PriceRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_int64(1, self.timestamp)?;
        }
        if !self.price.is_empty() {
            os.write_string(2, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceRecord {
        PriceRecord::new()
    }

    fn default_instance() -> &'static PriceRecord {
        static instance: ::protobuf::rt::LazyV2<PriceRecord> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceRecord::new)
    }
}

impl ::protobuf::Clear for PriceRecord {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct MetadataStatistics {
    // message fields
    pub group_count: u32,
    pub records_sample_size: u32,
    pub mean: ::std::string::String,
    pub twap: ::std::string::String,
    pub first_timestamp: i64,
    pub last_timestamp: i64,
    pub min_price: ::std::string::String,
    pub max_price: ::std::string::String,
    pub median_price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetadataStatistics {
    fn default() -> &'a MetadataStatistics {
        <MetadataStatistics as ::protobuf::Message>::default_instance()
    }
}

impl MetadataStatistics {
    pub fn new() -> MetadataStatistics {
        ::std::default::Default::default()
    }

    // uint32 group_count = 1;


    pub fn get_group_count(&self) -> u32 {
        self.group_count
    }
    pub fn clear_group_count(&mut self) {
        self.group_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_group_count(&mut self, v: u32) {
        self.group_count = v;
    }

    // uint32 records_sample_size = 2;


    pub fn get_records_sample_size(&self) -> u32 {
        self.records_sample_size
    }
    pub fn clear_records_sample_size(&mut self) {
        self.records_sample_size = 0;
    }

    // Param is passed by value, moved
    pub fn set_records_sample_size(&mut self, v: u32) {
        self.records_sample_size = v;
    }

    // string mean = 3;


    pub fn get_mean(&self) -> &str {
        &self.mean
    }
    pub fn clear_mean(&mut self) {
        self.mean.clear();
    }

    // Param is passed by value, moved
    pub fn set_mean(&mut self, v: ::std::string::String) {
        self.mean = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mean(&mut self) -> &mut ::std::string::String {
        &mut self.mean
    }

    // Take field
    pub fn take_mean(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.mean, ::std::string::String::new())
    }

    // string twap = 4;


    pub fn get_twap(&self) -> &str {
        &self.twap
    }
    pub fn clear_twap(&mut self) {
        self.twap.clear();
    }

    // Param is passed by value, moved
    pub fn set_twap(&mut self, v: ::std::string::String) {
        self.twap = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_twap(&mut self) -> &mut ::std::string::String {
        &mut self.twap
    }

    // Take field
    pub fn take_twap(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.twap, ::std::string::String::new())
    }

    // int64 first_timestamp = 5;


    pub fn get_first_timestamp(&self) -> i64 {
        self.first_timestamp
    }
    pub fn clear_first_timestamp(&mut self) {
        self.first_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_first_timestamp(&mut self, v: i64) {
        self.first_timestamp = v;
    }

    // int64 last_timestamp = 6;


    pub fn get_last_timestamp(&self) -> i64 {
        self.last_timestamp
    }
    pub fn clear_last_timestamp(&mut self) {
        self.last_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_timestamp(&mut self, v: i64) {
        self.last_timestamp = v;
    }

    // string min_price = 7;


    pub fn get_min_price(&self) -> &str {
        &self.min_price
    }
    pub fn clear_min_price(&mut self) {
        self.min_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_min_price(&mut self, v: ::std::string::String) {
        self.min_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_price(&mut self) -> &mut ::std::string::String {
        &mut self.min_price
    }

    // Take field
    pub fn take_min_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.min_price, ::std::string::String::new())
    }

    // string max_price = 8;


    pub fn get_max_price(&self) -> &str {
        &self.max_price
    }
    pub fn clear_max_price(&mut self) {
        self.max_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_max_price(&mut self, v: ::std::string::String) {
        self.max_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_price(&mut self) -> &mut ::std::string::String {
        &mut self.max_price
    }

    // Take field
    pub fn take_max_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.max_price, ::std::string::String::new())
    }

    // string median_price = 9;


    pub fn get_median_price(&self) -> &str {
        &self.median_price
    }
    pub fn clear_median_price(&mut self) {
        self.median_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_median_price(&mut self, v: ::std::string::String) {
        self.median_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_median_price(&mut self) -> &mut ::std::string::String {
        &mut self.median_price
    }

    // Take field
    pub fn take_median_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.median_price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MetadataStatistics {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.group_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.records_sample_size = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.mean)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.twap)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.first_timestamp = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.last_timestamp = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.min_price)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.max_price)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.median_price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.group_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.group_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.records_sample_size != 0 {
            my_size += ::protobuf::rt::value_size(2, self.records_sample_size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.mean.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.mean);
        }
        if !self.twap.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.twap);
        }
        if self.first_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.first_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(6, self.last_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.min_price.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.min_price);
        }
        if !self.max_price.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.max_price);
        }
        if !self.median_price.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.median_price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.group_count != 0 {
            os.write_uint32(1, self.group_count)?;
        }
        if self.records_sample_size != 0 {
            os.write_uint32(2, self.records_sample_size)?;
        }
        if !self.mean.is_empty() {
            os.write_string(3, &self.mean)?;
        }
        if !self.twap.is_empty() {
            os.write_string(4, &self.twap)?;
        }
        if self.first_timestamp != 0 {
            os.write_int64(5, self.first_timestamp)?;
        }
        if self.last_timestamp != 0 {
            os.write_int64(6, self.last_timestamp)?;
        }
        if !self.min_price.is_empty() {
            os.write_string(7, &self.min_price)?;
        }
        if !self.max_price.is_empty() {
            os.write_string(8, &self.max_price)?;
        }
        if !self.median_price.is_empty() {
            os.write_string(9, &self.median_price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetadataStatistics {
        MetadataStatistics::new()
    }

    fn default_instance() -> &'static MetadataStatistics {
        static instance: ::protobuf::rt::LazyV2<MetadataStatistics> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetadataStatistics::new)
    }
}

impl ::protobuf::Clear for MetadataStatistics {
    fn clear(&mut self) {
        self.group_count = 0;
        self.records_sample_size = 0;
        self.mean.clear();
        self.twap.clear();
        self.first_timestamp = 0;
        self.last_timestamp = 0;
        self.min_price.clear();
        self.max_price.clear();
        self.median_price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataStatistics {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceAttestation {
    // message fields
    pub price_id: ::std::string::String,
    pub price: i64,
    pub conf: u64,
    pub expo: i32,
    pub ema_price: i64,
    pub ema_conf: u64,
    pub ema_expo: i32,
    pub publish_time: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceAttestation {
    fn default() -> &'a PriceAttestation {
        <PriceAttestation as ::protobuf::Message>::default_instance()
    }
}

impl PriceAttestation {
    pub fn new() -> PriceAttestation {
        ::std::default::Default::default()
    }

    // string price_id = 1;


    pub fn get_price_id(&self) -> &str {
        &self.price_id
    }
    pub fn clear_price_id(&mut self) {
        self.price_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_price_id(&mut self, v: ::std::string::String) {
        self.price_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price_id(&mut self) -> &mut ::std::string::String {
        &mut self.price_id
    }

    // Take field
    pub fn take_price_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price_id, ::std::string::String::new())
    }

    // int64 price = 2;


    pub fn get_price(&self) -> i64 {
        self.price
    }
    pub fn clear_price(&mut self) {
        self.price = 0;
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: i64) {
        self.price = v;
    }

    // uint64 conf = 3;


    pub fn get_conf(&self) -> u64 {
        self.conf
    }
    pub fn clear_conf(&mut self) {
        self.conf = 0;
    }

    // Param is passed by value, moved
    pub fn set_conf(&mut self, v: u64) {
        self.conf = v;
    }

    // int32 expo = 4;


    pub fn get_expo(&self) -> i32 {
        self.expo
    }
    pub fn clear_expo(&mut self) {
        self.expo = 0;
    }

    // Param is passed by value, moved
    pub fn set_expo(&mut self, v: i32) {
        self.expo = v;
    }

    // int64 ema_price = 5;


    pub fn get_ema_price(&self) -> i64 {
        self.ema_price
    }
    pub fn clear_ema_price(&mut self) {
        self.ema_price = 0;
    }

    // Param is passed by value, moved
    pub fn set_ema_price(&mut self, v: i64) {
        self.ema_price = v;
    }

    // uint64 ema_conf = 6;


    pub fn get_ema_conf(&self) -> u64 {
        self.ema_conf
    }
    pub fn clear_ema_conf(&mut self) {
        self.ema_conf = 0;
    }

    // Param is passed by value, moved
    pub fn set_ema_conf(&mut self, v: u64) {
        self.ema_conf = v;
    }

    // int32 ema_expo = 7;


    pub fn get_ema_expo(&self) -> i32 {
        self.ema_expo
    }
    pub fn clear_ema_expo(&mut self) {
        self.ema_expo = 0;
    }

    // Param is passed by value, moved
    pub fn set_ema_expo(&mut self, v: i32) {
        self.ema_expo = v;
    }

    // int64 publish_time = 8;


    pub fn get_publish_time(&self) -> i64 {
        self.publish_time
    }
    pub fn clear_publish_time(&mut self) {
        self.publish_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_publish_time(&mut self, v: i64) {
        self.publish_time = v;
    }
}

impl ::protobuf::Message for PriceAttestation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.price = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.conf = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.expo = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ema_price = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ema_conf = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ema_expo = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.publish_time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price_id);
        }
        if self.price != 0 {
            my_size += ::protobuf::rt::value_size(2, self.price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.conf != 0 {
            my_size += ::protobuf::rt::value_size(3, self.conf, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expo != 0 {
            my_size += ::protobuf::rt::value_size(4, self.expo, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ema_price != 0 {
            my_size += ::protobuf::rt::value_size(5, self.ema_price, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ema_conf != 0 {
            my_size += ::protobuf::rt::value_size(6, self.ema_conf, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ema_expo != 0 {
            my_size += ::protobuf::rt::value_size(7, self.ema_expo, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.publish_time != 0 {
            my_size += ::protobuf::rt::value_size(8, self.publish_time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price_id.is_empty() {
            os.write_string(1, &self.price_id)?;
        }
        if self.price != 0 {
            os.write_int64(2, self.price)?;
        }
        if self.conf != 0 {
            os.write_uint64(3, self.conf)?;
        }
        if self.expo != 0 {
            os.write_int32(4, self.expo)?;
        }
        if self.ema_price != 0 {
            os.write_int64(5, self.ema_price)?;
        }
        if self.ema_conf != 0 {
            os.write_uint64(6, self.ema_conf)?;
        }
        if self.ema_expo != 0 {
            os.write_int32(7, self.ema_expo)?;
        }
        if self.publish_time != 0 {
            os.write_int64(8, self.publish_time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceAttestation {
        PriceAttestation::new()
    }

    fn default_instance() -> &'static PriceAttestation {
        static instance: ::protobuf::rt::LazyV2<PriceAttestation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceAttestation::new)
    }
}

impl ::protobuf::Clear for PriceAttestation {
    fn clear(&mut self) {
        self.price_id.clear();
        self.price = 0;
        self.conf = 0;
        self.expo = 0;
        self.ema_price = 0;
        self.ema_conf = 0;
        self.ema_expo = 0;
        self.publish_time = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceAttestation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OracleType {
    Unspecified = 0,
    Band = 1,
    PriceFeed = 2,
    Coinbase = 3,
    Chainlink = 4,
    Razor = 5,
    Dia = 6,
    API3 = 7,
    Uma = 8,
    Pyth = 9,
    BandIBC = 10,
    Provider = 11,
}

impl ::protobuf::ProtobufEnum for OracleType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OracleType> {
        match value {
            0 => ::std::option::Option::Some(OracleType::Unspecified),
            1 => ::std::option::Option::Some(OracleType::Band),
            2 => ::std::option::Option::Some(OracleType::PriceFeed),
            3 => ::std::option::Option::Some(OracleType::Coinbase),
            4 => ::std::option::Option::Some(OracleType::Chainlink),
            5 => ::std::option::Option::Some(OracleType::Razor),
            6 => ::std::option::Option::Some(OracleType::Dia),
            7 => ::std::option::Option::Some(OracleType::API3),
            8 => ::std::option::Option::Some(OracleType::Uma),
            9 => ::std::option::Option::Some(OracleType::Pyth),
            10 => ::std::option::Option::Some(OracleType::BandIBC),
            11 => ::std::option::Option::Some(OracleType::Provider),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OracleType] = &[
            OracleType::Unspecified,
            OracleType::Band,
            OracleType::PriceFeed,
            OracleType::Coinbase,
            OracleType::Chainlink,
            OracleType::Razor,
            OracleType::Dia,
            OracleType::API3,
            OracleType::Uma,
            OracleType::Pyth,
            OracleType::BandIBC,
            OracleType::Provider,
        ];
        values
    }
}

impl ::std::marker::Copy for OracleType {
}

impl ::std::default::Default for OracleType {
    fn default() -> Self {
        OracleType::Unspecified
    }
}

impl ::protobuf::reflect::ProtobufValue for OracleType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective_insurance_rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FundsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FundsRequest {
    fn default() -> &'a FundsRequest {
        <FundsRequest as ::protobuf::Message>::default_instance()
    }
}

impl FundsRequest {
    pub fn new() -> FundsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FundsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundsRequest {
        FundsRequest::new()
    }

    fn default_instance() -> &'static FundsRequest {
        static instance: ::protobuf::rt::LazyV2<FundsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FundsRequest::new)
    }
}

impl ::protobuf::Clear for FundsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FundsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct FundsResponse {
    // message fields
    pub funds: ::protobuf::RepeatedField<InsuranceFund>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FundsResponse {
    fn default() -> &'a FundsResponse {
        <FundsResponse as ::protobuf::Message>::default_instance()
    }
}

impl FundsResponse {
    pub fn new() -> FundsResponse {
        ::std::default::Default::default()
    }

    // repeated .injective_insurance_rpc.InsuranceFund funds = 1;


    pub fn get_funds(&self) -> &[InsuranceFund] {
        &self.funds
    }
    pub fn clear_funds(&mut self) {
        self.funds.clear();
    }

    // Param is passed by value, moved
    pub fn set_funds(&mut self, v: ::protobuf::RepeatedField<InsuranceFund>) {
        self.funds = v;
    }

    // Mutable pointer to the field.
    pub fn mut_funds(&mut self) -> &mut ::protobuf::RepeatedField<InsuranceFund> {
        &mut self.funds
    }

    // Take field
    pub fn take_funds(&mut self) -> ::protobuf::RepeatedField<InsuranceFund> {
        ::std::mem::replace(&mut self.funds, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FundsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.funds {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.funds)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.funds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.funds {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FundsResponse {
        FundsResponse::new()
    }

    fn default_instance() -> &'static FundsResponse {
        static instance: ::protobuf::rt::LazyV2<FundsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FundsResponse::new)
    }
}

impl ::protobuf::Clear for FundsResponse {
    fn clear(&mut self) {
        self.funds.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for FundsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct InsuranceFund {
    // message fields
    pub market_ticker: ::std::string::String,
    pub market_id: ::std::string::String,
    pub deposit_denom: ::std::string::String,
    pub pool_token_denom: ::std::string::String,
    pub redemption_notice_period_duration: i64,
    pub balance: ::std::string::String,
    pub total_share: ::std::string::String,
    pub oracle_base: ::std::string::String,
    pub oracle_quote: ::std::string::String,
    pub oracle_type: ::std::string::String,
    pub expiry: i64,
    pub deposit_token_meta: ::protobuf::SingularPtrField<TokenMeta>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InsuranceFund {
    fn default() -> &'a InsuranceFund {
        <InsuranceFund as ::protobuf::Message>::default_instance()
    }
}

impl InsuranceFund {
    pub fn new() -> InsuranceFund {
        ::std::default::Default::default()
    }

    // string market_ticker = 1;


    pub fn get_market_ticker(&self) -> &str {
        &self.market_ticker
    }
    pub fn clear_market_ticker(&mut self) {
        self.market_ticker.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ticker(&mut self, v: ::std::string::String) {
        self.market_ticker = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_ticker(&mut self) -> &mut ::std::string::String {
        &mut self.market_ticker
    }

    // Take field
    pub fn take_market_ticker(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_ticker, ::std::string::String::new())
    }

    // string market_id = 2;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }

    // string deposit_denom = 3;


    pub fn get_deposit_denom(&self) -> &str {
        &self.deposit_denom
    }
    pub fn clear_deposit_denom(&mut self) {
        self.deposit_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_deposit_denom(&mut self, v: ::std::string::String) {
        self.deposit_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_denom(&mut self) -> &mut ::std::string::String {
        &mut self.deposit_denom
    }

    // Take field
    pub fn take_deposit_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.deposit_denom, ::std::string::String::new())
    }

    // string pool_token_denom = 4;


    pub fn get_pool_token_denom(&self) -> &str {
        &self.pool_token_denom
    }
    pub fn clear_pool_token_denom(&mut self) {
        self.pool_token_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_pool_token_denom(&mut self, v: ::std::string::String) {
        self.pool_token_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pool_token_denom(&mut self) -> &mut ::std::string::String {
        &mut self.pool_token_denom
    }

    // Take field
    pub fn take_pool_token_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pool_token_denom, ::std::string::String::new())
    }

    // sint64 redemption_notice_period_duration = 5;


    pub fn get_redemption_notice_period_duration(&self) -> i64 {
        self.redemption_notice_period_duration
    }
    pub fn clear_redemption_notice_period_duration(&mut self) {
        self.redemption_notice_period_duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_redemption_notice_period_duration(&mut self, v: i64) {
        self.redemption_notice_period_duration = v;
    }

    // string balance = 6;


    pub fn get_balance(&self) -> &str {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::string::String) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::string::String {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balance, ::std::string::String::new())
    }

    // string total_share = 7;


    pub fn get_total_share(&self) -> &str {
        &self.total_share
    }
    pub fn clear_total_share(&mut self) {
        self.total_share.clear();
    }

    // Param is passed by value, moved
    pub fn set_total_share(&mut self, v: ::std::string::String) {
        self.total_share = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_total_share(&mut self) -> &mut ::std::string::String {
        &mut self.total_share
    }

    // Take field
    pub fn take_total_share(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.total_share, ::std::string::String::new())
    }

    // string oracle_base = 8;


    pub fn get_oracle_base(&self) -> &str {
        &self.oracle_base
    }
    pub fn clear_oracle_base(&mut self) {
        self.oracle_base.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_base(&mut self, v: ::std::string::String) {
        self.oracle_base = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_base(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_base
    }

    // Take field
    pub fn take_oracle_base(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_base, ::std::string::String::new())
    }

    // string oracle_quote = 9;


    pub fn get_oracle_quote(&self) -> &str {
        &self.oracle_quote
    }
    pub fn clear_oracle_quote(&mut self) {
        self.oracle_quote.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_quote(&mut self, v: ::std::string::String) {
        self.oracle_quote = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_quote(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_quote
    }

    // Take field
    pub fn take_oracle_quote(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_quote, ::std::string::String::new())
    }

    // string oracle_type = 10;


    pub fn get_oracle_type(&self) -> &str {
        &self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: ::std::string::String) {
        self.oracle_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_type(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_type
    }

    // Take field
    pub fn take_oracle_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_type, ::std::string::String::new())
    }

    // sint64 expiry = 11;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }

    // .injective_insurance_rpc.TokenMeta deposit_token_meta = 12;


    pub fn get_deposit_token_meta(&self) -> &TokenMeta {
        self.deposit_token_meta.as_ref().unwrap_or_else(|| <TokenMeta as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deposit_token_meta(&mut self) {
        self.deposit_token_meta.clear();
    }

    pub fn has_deposit_token_meta(&self) -> bool {
        self.deposit_token_meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deposit_token_meta(&mut self, v: TokenMeta) {
        self.deposit_token_meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deposit_token_meta(&mut self) -> &mut TokenMeta {
        if self.deposit_token_meta.is_none() {
            self.deposit_token_meta.set_default();
        }
        self.deposit_token_meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_deposit_token_meta(&mut self) -> TokenMeta {
        self.deposit_token_meta.take().unwrap_or_else(|| TokenMeta::new())
    }
}

impl ::protobuf::Message for InsuranceFund {
    fn is_initialized(&self) -> bool {
        for v in &self.deposit_token_meta {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_ticker)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.deposit_denom)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pool_token_denom)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.redemption_notice_period_duration = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balance)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.total_share)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_base)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_quote)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_type)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.expiry = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deposit_token_meta)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.market_ticker.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.market_ticker);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.market_id);
        }
        if !self.deposit_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.deposit_denom);
        }
        if !self.pool_token_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.pool_token_denom);
        }
        if self.redemption_notice_period_duration != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.redemption_notice_period_duration);
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.balance);
        }
        if !self.total_share.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.total_share);
        }
        if !self.oracle_base.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.oracle_base);
        }
        if !self.oracle_quote.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.oracle_quote);
        }
        if !self.oracle_type.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.oracle_type);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(11, self.expiry);
        }
        if let Some(ref v) = self.deposit_token_meta.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.market_ticker.is_empty() {
            os.write_string(1, &self.market_ticker)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(2, &self.market_id)?;
        }
        if !self.deposit_denom.is_empty() {
            os.write_string(3, &self.deposit_denom)?;
        }
        if !self.pool_token_denom.is_empty() {
            os.write_string(4, &self.pool_token_denom)?;
        }
        if self.redemption_notice_period_duration != 0 {
            os.write_sint64(5, self.redemption_notice_period_duration)?;
        }
        if !self.balance.is_empty() {
            os.write_string(6, &self.balance)?;
        }
        if !self.total_share.is_empty() {
            os.write_string(7, &self.total_share)?;
        }
        if !self.oracle_base.is_empty() {
            os.write_string(8, &self.oracle_base)?;
        }
        if !self.oracle_quote.is_empty() {
            os.write_string(9, &self.oracle_quote)?;
        }
        if !self.oracle_type.is_empty() {
            os.write_string(10, &self.oracle_type)?;
        }
        if self.expiry != 0 {
            os.write_sint64(11, self.expiry)?;
        }
        if let Some(ref v) = self.deposit_token_meta.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InsuranceFund {
        InsuranceFund::new()
    }

    fn default_instance() -> &'static InsuranceFund {
        static instance: ::protobuf::rt::LazyV2<InsuranceFund> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InsuranceFund::new)
    }
}

impl ::protobuf::Clear for InsuranceFund {
    fn clear(&mut self) {
        self.market_ticker.clear();
        self.market_id.clear();
        self.deposit_denom.clear();
        self.pool_token_denom.clear();
        self.redemption_notice_period_duration = 0;
        self.balance.clear();
        self.total_share.clear();
        self.oracle_base.clear();
        self.oracle_quote.clear();
        self.oracle_type.clear();
        self.expiry = 0;
        self.deposit_token_meta.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for InsuranceFund {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct TokenMeta {
    // message fields
    pub name: ::std::string::String,
    pub address: ::std::string::String,
    pub symbol: ::std::string::String,
    pub logo: ::std::string::String,
    pub decimals: i32,
    pub updated_at: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenMeta {
    fn default() -> &'a TokenMeta {
        <TokenMeta as ::protobuf::Message>::default_instance()
    }
}

impl TokenMeta {
    pub fn new() -> TokenMeta {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string symbol = 3;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string logo = 4;


    pub fn get_logo(&self) -> &str {
        &self.logo
    }
    pub fn clear_logo(&mut self) {
        self.logo.clear();
    }

    // Param is passed by value, moved
    pub fn set_logo(&mut self, v: ::std::string::String) {
        self.logo = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_logo(&mut self) -> &mut ::std::string::String {
        &mut self.logo
    }

    // Take field
    pub fn take_logo(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.logo, ::std::string::String::new())
    }

    // sint32 decimals = 5;


    pub fn get_decimals(&self) -> i32 {
        self.decimals
    }
    pub fn clear_decimals(&mut self) {
        self.decimals = 0;
    }

    // Param is passed by value, moved
    pub fn set_decimals(&mut self, v: i32) {
        self.decimals = v;
    }

    // sint64 updated_at = 6;


    pub fn get_updated_at(&self) -> i64 {
        self.updated_at
    }
    pub fn clear_updated_at(&mut self) {
        self.updated_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_updated_at(&mut self, v: i64) {
        self.updated_at = v;
    }
}

impl ::protobuf::Message for TokenMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.logo)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.decimals = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.updated_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.symbol);
        }
        if !self.logo.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.logo);
        }
        if self.decimals != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.decimals);
        }
        if self.updated_at != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.updated_at);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.symbol.is_empty() {
            os.write_string(3, &self.symbol)?;
        }
        if !self.logo.is_empty() {
            os.write_string(4, &self.logo)?;
        }
        if self.decimals != 0 {
            os.write_sint32(5, self.decimals)?;
        }
        if self.updated_at != 0 {
            os.write_sint64(6, self.updated_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenMeta {
        TokenMeta::new()
    }

    fn default_instance() -> &'static TokenMeta {
        static instance: ::protobuf::rt::LazyV2<TokenMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenMeta::new)
    }
}

impl ::protobuf::Clear for TokenMeta {
    fn clear(&mut self) {
        self.name.clear();
        self.address.clear();
        self.symbol.clear();
        self.logo.clear();
        self.decimals = 0;
        self.updated_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RedemptionsRequest {
    // message fields
    pub redeemer: ::std::string::String,
    pub redemption_denom: ::std::string::String,
    pub status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedemptionsRequest {
    fn default() -> &'a RedemptionsRequest {
        <RedemptionsRequest as ::protobuf::Message>::default_instance()
    }
}

impl RedemptionsRequest {
    pub fn new() -> RedemptionsRequest {
        ::std::default::Default::default()
    }

    // string redeemer = 1;


    pub fn get_redeemer(&self) -> &str {
        &self.redeemer
    }
    pub fn clear_redeemer(&mut self) {
        self.redeemer.clear();
    }

    // Param is passed by value, moved
    pub fn set_redeemer(&mut self, v: ::std::string::String) {
        self.redeemer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redeemer(&mut self) -> &mut ::std::string::String {
        &mut self.redeemer
    }

    // Take field
    pub fn take_redeemer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redeemer, ::std::string::String::new())
    }

    // string redemption_denom = 2;


    pub fn get_redemption_denom(&self) -> &str {
        &self.redemption_denom
    }
    pub fn clear_redemption_denom(&mut self) {
        self.redemption_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_redemption_denom(&mut self, v: ::std::string::String) {
        self.redemption_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redemption_denom(&mut self) -> &mut ::std::string::String {
        &mut self.redemption_denom
    }

    // Take field
    pub fn take_redemption_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redemption_denom, ::std::string::String::new())
    }

    // string status = 3;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RedemptionsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redeemer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redemption_denom)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.redeemer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.redeemer);
        }
        if !self.redemption_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.redemption_denom);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.redeemer.is_empty() {
            os.write_string(1, &self.redeemer)?;
        }
        if !self.redemption_denom.is_empty() {
            os.write_string(2, &self.redemption_denom)?;
        }
        if !self.status.is_empty() {
            os.write_string(3, &self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedemptionsRequest {
        RedemptionsRequest::new()
    }

    fn default_instance() -> &'static RedemptionsRequest {
        static instance: ::protobuf::rt::LazyV2<RedemptionsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedemptionsRequest::new)
    }
}

impl ::protobuf::Clear for RedemptionsRequest {
    fn clear(&mut self) {
        self.redeemer.clear();
        self.redemption_denom.clear();
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RedemptionsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RedemptionsResponse {
    // message fields
    pub redemption_schedules: ::protobuf::RepeatedField<RedemptionSchedule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedemptionsResponse {
    fn default() -> &'a RedemptionsResponse {
        <RedemptionsResponse as ::protobuf::Message>::default_instance()
    }
}

impl RedemptionsResponse {
    pub fn new() -> RedemptionsResponse {
        ::std::default::Default::default()
    }

    // repeated .injective_insurance_rpc.RedemptionSchedule redemption_schedules = 1;


    pub fn get_redemption_schedules(&self) -> &[RedemptionSchedule] {
        &self.redemption_schedules
    }
    pub fn clear_redemption_schedules(&mut self) {
        self.redemption_schedules.clear();
    }

    // Param is passed by value, moved
    pub fn set_redemption_schedules(&mut self, v: ::protobuf::RepeatedField<RedemptionSchedule>) {
        self.redemption_schedules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_redemption_schedules(&mut self) -> &mut ::protobuf::RepeatedField<RedemptionSchedule> {
        &mut self.redemption_schedules
    }

    // Take field
    pub fn take_redemption_schedules(&mut self) -> ::protobuf::RepeatedField<RedemptionSchedule> {
        ::std::mem::replace(&mut self.redemption_schedules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RedemptionsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.redemption_schedules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.redemption_schedules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.redemption_schedules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.redemption_schedules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedemptionsResponse {
        RedemptionsResponse::new()
    }

    fn default_instance() -> &'static RedemptionsResponse {
        static instance: ::protobuf::rt::LazyV2<RedemptionsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedemptionsResponse::new)
    }
}

impl ::protobuf::Clear for RedemptionsResponse {
    fn clear(&mut self) {
        self.redemption_schedules.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RedemptionsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct RedemptionSchedule {
    // message fields
    pub redemption_id: u64,
    pub status: ::std::string::String,
    pub redeemer: ::std::string::String,
    pub claimable_redemption_time: i64,
    pub redemption_amount: ::std::string::String,
    pub redemption_denom: ::std::string::String,
    pub requested_at: i64,
    pub disbursed_amount: ::std::string::String,
    pub disbursed_denom: ::std::string::String,
    pub disbursed_at: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedemptionSchedule {
    fn default() -> &'a RedemptionSchedule {
        <RedemptionSchedule as ::protobuf::Message>::default_instance()
    }
}

impl RedemptionSchedule {
    pub fn new() -> RedemptionSchedule {
        ::std::default::Default::default()
    }

    // uint64 redemption_id = 1;


    pub fn get_redemption_id(&self) -> u64 {
        self.redemption_id
    }
    pub fn clear_redemption_id(&mut self) {
        self.redemption_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_redemption_id(&mut self, v: u64) {
        self.redemption_id = v;
    }

    // string status = 2;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }

    // string redeemer = 3;


    pub fn get_redeemer(&self) -> &str {
        &self.redeemer
    }
    pub fn clear_redeemer(&mut self) {
        self.redeemer.clear();
    }

    // Param is passed by value, moved
    pub fn set_redeemer(&mut self, v: ::std::string::String) {
        self.redeemer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redeemer(&mut self) -> &mut ::std::string::String {
        &mut self.redeemer
    }

    // Take field
    pub fn take_redeemer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redeemer, ::std::string::String::new())
    }

    // sint64 claimable_redemption_time = 4;


    pub fn get_claimable_redemption_time(&self) -> i64 {
        self.claimable_redemption_time
    }
    pub fn clear_claimable_redemption_time(&mut self) {
        self.claimable_redemption_time = 0;
    }

    // Param is passed by value, moved
    pub fn set_claimable_redemption_time(&mut self, v: i64) {
        self.claimable_redemption_time = v;
    }

    // string redemption_amount = 5;


    pub fn get_redemption_amount(&self) -> &str {
        &self.redemption_amount
    }
    pub fn clear_redemption_amount(&mut self) {
        self.redemption_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_redemption_amount(&mut self, v: ::std::string::String) {
        self.redemption_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redemption_amount(&mut self) -> &mut ::std::string::String {
        &mut self.redemption_amount
    }

    // Take field
    pub fn take_redemption_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redemption_amount, ::std::string::String::new())
    }

    // string redemption_denom = 6;


    pub fn get_redemption_denom(&self) -> &str {
        &self.redemption_denom
    }
    pub fn clear_redemption_denom(&mut self) {
        self.redemption_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_redemption_denom(&mut self, v: ::std::string::String) {
        self.redemption_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redemption_denom(&mut self) -> &mut ::std::string::String {
        &mut self.redemption_denom
    }

    // Take field
    pub fn take_redemption_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redemption_denom, ::std::string::String::new())
    }

    // sint64 requested_at = 7;


    pub fn get_requested_at(&self) -> i64 {
        self.requested_at
    }
    pub fn clear_requested_at(&mut self) {
        self.requested_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_requested_at(&mut self, v: i64) {
        self.requested_at = v;
    }

    // string disbursed_amount = 8;


    pub fn get_disbursed_amount(&self) -> &str {
        &self.disbursed_amount
    }
    pub fn clear_disbursed_amount(&mut self) {
        self.disbursed_amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_disbursed_amount(&mut self, v: ::std::string::String) {
        self.disbursed_amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_disbursed_amount(&mut self) -> &mut ::std::string::String {
        &mut self.disbursed_amount
    }

    // Take field
    pub fn take_disbursed_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.disbursed_amount, ::std::string::String::new())
    }

    // string disbursed_denom = 9;


    pub fn get_disbursed_denom(&self) -> &str {
        &self.disbursed_denom
    }
    pub fn clear_disbursed_denom(&mut self) {
        self.disbursed_denom.clear();
    }

    // Param is passed by value, moved
    pub fn set_disbursed_denom(&mut self, v: ::std::string::String) {
        self.disbursed_denom = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_disbursed_denom(&mut self) -> &mut ::std::string::String {
        &mut self.disbursed_denom
    }

    // Take field
    pub fn take_disbursed_denom(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.disbursed_denom, ::std::string::String::new())
    }

    // sint64 disbursed_at = 10;


    pub fn get_disbursed_at(&self) -> i64 {
        self.disbursed_at
    }
    pub fn clear_disbursed_at(&mut self) {
        self.disbursed_at = 0;
    }

    // Param is passed by value, moved
    pub fn set_disbursed_at(&mut self, v: i64) {
        self.disbursed_at = v;
    }
}

impl ::protobuf::Message for RedemptionSchedule {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.redemption_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redeemer)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.claimable_redemption_time = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redemption_amount)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redemption_denom)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.requested_at = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.disbursed_amount)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.disbursed_denom)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.disbursed_at = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.redemption_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.redemption_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.status);
        }
        if !self.redeemer.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.redeemer);
        }
        if self.claimable_redemption_time != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, self.claimable_redemption_time);
        }
        if !self.redemption_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.redemption_amount);
        }
        if !self.redemption_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.redemption_denom);
        }
        if self.requested_at != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, self.requested_at);
        }
        if !self.disbursed_amount.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.disbursed_amount);
        }
        if !self.disbursed_denom.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.disbursed_denom);
        }
        if self.disbursed_at != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(10, self.disbursed_at);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.redemption_id != 0 {
            os.write_uint64(1, self.redemption_id)?;
        }
        if !self.status.is_empty() {
            os.write_string(2, &self.status)?;
        }
        if !self.redeemer.is_empty() {
            os.write_string(3, &self.redeemer)?;
        }
        if self.claimable_redemption_time != 0 {
            os.write_sint64(4, self.claimable_redemption_time)?;
        }
        if !self.redemption_amount.is_empty() {
            os.write_string(5, &self.redemption_amount)?;
        }
        if !self.redemption_denom.is_empty() {
            os.write_string(6, &self.redemption_denom)?;
        }
        if self.requested_at != 0 {
            os.write_sint64(7, self.requested_at)?;
        }
        if !self.disbursed_amount.is_empty() {
            os.write_string(8, &self.disbursed_amount)?;
        }
        if !self.disbursed_denom.is_empty() {
            os.write_string(9, &self.disbursed_denom)?;
        }
        if self.disbursed_at != 0 {
            os.write_sint64(10, self.disbursed_at)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedemptionSchedule {
        RedemptionSchedule::new()
    }

    fn default_instance() -> &'static RedemptionSchedule {
        static instance: ::protobuf::rt::LazyV2<RedemptionSchedule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedemptionSchedule::new)
    }
}

impl ::protobuf::Clear for RedemptionSchedule {
    fn clear(&mut self) {
        self.redemption_id = 0;
        self.status.clear();
        self.redeemer.clear();
        self.claimable_redemption_time = 0;
        self.redemption_amount.clear();
        self.redemption_denom.clear();
        self.requested_at = 0;
        self.disbursed_amount.clear();
        self.disbursed_denom.clear();
        self.disbursed_at = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for RedemptionSchedule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

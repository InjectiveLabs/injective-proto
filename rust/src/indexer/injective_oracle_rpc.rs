// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `injective_oracle_rpc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OracleListRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OracleListRequest {
    fn default() -> &'a OracleListRequest {
        <OracleListRequest as ::protobuf::Message>::default_instance()
    }
}

impl OracleListRequest {
    pub fn new() -> OracleListRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OracleListRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OracleListRequest {
        OracleListRequest::new()
    }

    fn default_instance() -> &'static OracleListRequest {
        static instance: ::protobuf::rt::LazyV2<OracleListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OracleListRequest::new)
    }
}

impl ::protobuf::Clear for OracleListRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OracleListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct OracleListResponse {
    // message fields
    pub oracles: ::protobuf::RepeatedField<Oracle>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OracleListResponse {
    fn default() -> &'a OracleListResponse {
        <OracleListResponse as ::protobuf::Message>::default_instance()
    }
}

impl OracleListResponse {
    pub fn new() -> OracleListResponse {
        ::std::default::Default::default()
    }

    // repeated .injective_oracle_rpc.Oracle oracles = 1;


    pub fn get_oracles(&self) -> &[Oracle] {
        &self.oracles
    }
    pub fn clear_oracles(&mut self) {
        self.oracles.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracles(&mut self, v: ::protobuf::RepeatedField<Oracle>) {
        self.oracles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_oracles(&mut self) -> &mut ::protobuf::RepeatedField<Oracle> {
        &mut self.oracles
    }

    // Take field
    pub fn take_oracles(&mut self) -> ::protobuf::RepeatedField<Oracle> {
        ::std::mem::replace(&mut self.oracles, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OracleListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.oracles {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.oracles)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.oracles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.oracles {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OracleListResponse {
        OracleListResponse::new()
    }

    fn default_instance() -> &'static OracleListResponse {
        static instance: ::protobuf::rt::LazyV2<OracleListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OracleListResponse::new)
    }
}

impl ::protobuf::Clear for OracleListResponse {
    fn clear(&mut self) {
        self.oracles.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for OracleListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct Oracle {
    // message fields
    pub symbol: ::std::string::String,
    pub base_symbol: ::std::string::String,
    pub quote_symbol: ::std::string::String,
    pub oracle_type: ::std::string::String,
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Oracle {
    fn default() -> &'a Oracle {
        <Oracle as ::protobuf::Message>::default_instance()
    }
}

impl Oracle {
    pub fn new() -> Oracle {
        ::std::default::Default::default()
    }

    // string symbol = 1;


    pub fn get_symbol(&self) -> &str {
        &self.symbol
    }
    pub fn clear_symbol(&mut self) {
        self.symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol(&mut self, v: ::std::string::String) {
        self.symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.symbol
    }

    // Take field
    pub fn take_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol, ::std::string::String::new())
    }

    // string base_symbol = 2;


    pub fn get_base_symbol(&self) -> &str {
        &self.base_symbol
    }
    pub fn clear_base_symbol(&mut self) {
        self.base_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_symbol(&mut self, v: ::std::string::String) {
        self.base_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.base_symbol
    }

    // Take field
    pub fn take_base_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_symbol, ::std::string::String::new())
    }

    // string quote_symbol = 3;


    pub fn get_quote_symbol(&self) -> &str {
        &self.quote_symbol
    }
    pub fn clear_quote_symbol(&mut self) {
        self.quote_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote_symbol(&mut self, v: ::std::string::String) {
        self.quote_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.quote_symbol
    }

    // Take field
    pub fn take_quote_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote_symbol, ::std::string::String::new())
    }

    // string oracle_type = 4;


    pub fn get_oracle_type(&self) -> &str {
        &self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: ::std::string::String) {
        self.oracle_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_type(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_type
    }

    // Take field
    pub fn take_oracle_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_type, ::std::string::String::new())
    }

    // string price = 5;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Oracle {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote_symbol)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_type)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.symbol);
        }
        if !self.base_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.base_symbol);
        }
        if !self.quote_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.quote_symbol);
        }
        if !self.oracle_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.oracle_type);
        }
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.symbol.is_empty() {
            os.write_string(1, &self.symbol)?;
        }
        if !self.base_symbol.is_empty() {
            os.write_string(2, &self.base_symbol)?;
        }
        if !self.quote_symbol.is_empty() {
            os.write_string(3, &self.quote_symbol)?;
        }
        if !self.oracle_type.is_empty() {
            os.write_string(4, &self.oracle_type)?;
        }
        if !self.price.is_empty() {
            os.write_string(5, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Oracle {
        Oracle::new()
    }

    fn default_instance() -> &'static Oracle {
        static instance: ::protobuf::rt::LazyV2<Oracle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Oracle::new)
    }
}

impl ::protobuf::Clear for Oracle {
    fn clear(&mut self) {
        self.symbol.clear();
        self.base_symbol.clear();
        self.quote_symbol.clear();
        self.oracle_type.clear();
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for Oracle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceRequest {
    // message fields
    pub base_symbol: ::std::string::String,
    pub quote_symbol: ::std::string::String,
    pub oracle_type: ::std::string::String,
    pub oracle_scale_factor: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceRequest {
    fn default() -> &'a PriceRequest {
        <PriceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PriceRequest {
    pub fn new() -> PriceRequest {
        ::std::default::Default::default()
    }

    // string base_symbol = 1;


    pub fn get_base_symbol(&self) -> &str {
        &self.base_symbol
    }
    pub fn clear_base_symbol(&mut self) {
        self.base_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_symbol(&mut self, v: ::std::string::String) {
        self.base_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.base_symbol
    }

    // Take field
    pub fn take_base_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_symbol, ::std::string::String::new())
    }

    // string quote_symbol = 2;


    pub fn get_quote_symbol(&self) -> &str {
        &self.quote_symbol
    }
    pub fn clear_quote_symbol(&mut self) {
        self.quote_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote_symbol(&mut self, v: ::std::string::String) {
        self.quote_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.quote_symbol
    }

    // Take field
    pub fn take_quote_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote_symbol, ::std::string::String::new())
    }

    // string oracle_type = 3;


    pub fn get_oracle_type(&self) -> &str {
        &self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: ::std::string::String) {
        self.oracle_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_type(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_type
    }

    // Take field
    pub fn take_oracle_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_type, ::std::string::String::new())
    }

    // uint32 oracle_scale_factor = 4;


    pub fn get_oracle_scale_factor(&self) -> u32 {
        self.oracle_scale_factor
    }
    pub fn clear_oracle_scale_factor(&mut self) {
        self.oracle_scale_factor = 0;
    }

    // Param is passed by value, moved
    pub fn set_oracle_scale_factor(&mut self, v: u32) {
        self.oracle_scale_factor = v;
    }
}

impl ::protobuf::Message for PriceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote_symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_type)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.oracle_scale_factor = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.base_symbol);
        }
        if !self.quote_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.quote_symbol);
        }
        if !self.oracle_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.oracle_type);
        }
        if self.oracle_scale_factor != 0 {
            my_size += ::protobuf::rt::value_size(4, self.oracle_scale_factor, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base_symbol.is_empty() {
            os.write_string(1, &self.base_symbol)?;
        }
        if !self.quote_symbol.is_empty() {
            os.write_string(2, &self.quote_symbol)?;
        }
        if !self.oracle_type.is_empty() {
            os.write_string(3, &self.oracle_type)?;
        }
        if self.oracle_scale_factor != 0 {
            os.write_uint32(4, self.oracle_scale_factor)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceRequest {
        PriceRequest::new()
    }

    fn default_instance() -> &'static PriceRequest {
        static instance: ::protobuf::rt::LazyV2<PriceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceRequest::new)
    }
}

impl ::protobuf::Clear for PriceRequest {
    fn clear(&mut self) {
        self.base_symbol.clear();
        self.quote_symbol.clear();
        self.oracle_type.clear();
        self.oracle_scale_factor = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct PriceResponse {
    // message fields
    pub price: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceResponse {
    fn default() -> &'a PriceResponse {
        <PriceResponse as ::protobuf::Message>::default_instance()
    }
}

impl PriceResponse {
    pub fn new() -> PriceResponse {
        ::std::default::Default::default()
    }

    // string price = 1;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PriceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceResponse {
        PriceResponse::new()
    }

    fn default_instance() -> &'static PriceResponse {
        static instance: ::protobuf::rt::LazyV2<PriceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceResponse::new)
    }
}

impl ::protobuf::Clear for PriceResponse {
    fn clear(&mut self) {
        self.price.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamPricesRequest {
    // message fields
    pub base_symbol: ::std::string::String,
    pub quote_symbol: ::std::string::String,
    pub oracle_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPricesRequest {
    fn default() -> &'a StreamPricesRequest {
        <StreamPricesRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamPricesRequest {
    pub fn new() -> StreamPricesRequest {
        ::std::default::Default::default()
    }

    // string base_symbol = 1;


    pub fn get_base_symbol(&self) -> &str {
        &self.base_symbol
    }
    pub fn clear_base_symbol(&mut self) {
        self.base_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_symbol(&mut self, v: ::std::string::String) {
        self.base_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.base_symbol
    }

    // Take field
    pub fn take_base_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_symbol, ::std::string::String::new())
    }

    // string quote_symbol = 2;


    pub fn get_quote_symbol(&self) -> &str {
        &self.quote_symbol
    }
    pub fn clear_quote_symbol(&mut self) {
        self.quote_symbol.clear();
    }

    // Param is passed by value, moved
    pub fn set_quote_symbol(&mut self, v: ::std::string::String) {
        self.quote_symbol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_quote_symbol(&mut self) -> &mut ::std::string::String {
        &mut self.quote_symbol
    }

    // Take field
    pub fn take_quote_symbol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.quote_symbol, ::std::string::String::new())
    }

    // string oracle_type = 3;


    pub fn get_oracle_type(&self) -> &str {
        &self.oracle_type
    }
    pub fn clear_oracle_type(&mut self) {
        self.oracle_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_oracle_type(&mut self, v: ::std::string::String) {
        self.oracle_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oracle_type(&mut self) -> &mut ::std::string::String {
        &mut self.oracle_type
    }

    // Take field
    pub fn take_oracle_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oracle_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StreamPricesRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_symbol)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.quote_symbol)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oracle_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.base_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.base_symbol);
        }
        if !self.quote_symbol.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.quote_symbol);
        }
        if !self.oracle_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.oracle_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.base_symbol.is_empty() {
            os.write_string(1, &self.base_symbol)?;
        }
        if !self.quote_symbol.is_empty() {
            os.write_string(2, &self.quote_symbol)?;
        }
        if !self.oracle_type.is_empty() {
            os.write_string(3, &self.oracle_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPricesRequest {
        StreamPricesRequest::new()
    }

    fn default_instance() -> &'static StreamPricesRequest {
        static instance: ::protobuf::rt::LazyV2<StreamPricesRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPricesRequest::new)
    }
}

impl ::protobuf::Clear for StreamPricesRequest {
    fn clear(&mut self) {
        self.base_symbol.clear();
        self.quote_symbol.clear();
        self.oracle_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPricesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamPricesResponse {
    // message fields
    pub price: ::std::string::String,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPricesResponse {
    fn default() -> &'a StreamPricesResponse {
        <StreamPricesResponse as ::protobuf::Message>::default_instance()
    }
}

impl StreamPricesResponse {
    pub fn new() -> StreamPricesResponse {
        ::std::default::Default::default()
    }

    // string price = 1;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }

    // sint64 timestamp = 2;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for StreamPricesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        if self.timestamp != 0 {
            os.write_sint64(2, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPricesResponse {
        StreamPricesResponse::new()
    }

    fn default_instance() -> &'static StreamPricesResponse {
        static instance: ::protobuf::rt::LazyV2<StreamPricesResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPricesResponse::new)
    }
}

impl ::protobuf::Clear for StreamPricesResponse {
    fn clear(&mut self) {
        self.price.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPricesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamPricesByMarketsRequest {
    // message fields
    pub market_ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPricesByMarketsRequest {
    fn default() -> &'a StreamPricesByMarketsRequest {
        <StreamPricesByMarketsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamPricesByMarketsRequest {
    pub fn new() -> StreamPricesByMarketsRequest {
        ::std::default::Default::default()
    }

    // repeated string market_ids = 1;


    pub fn get_market_ids(&self) -> &[::std::string::String] {
        &self.market_ids
    }
    pub fn clear_market_ids(&mut self) {
        self.market_ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.market_ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_market_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.market_ids
    }

    // Take field
    pub fn take_market_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.market_ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StreamPricesByMarketsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.market_ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.market_ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.market_ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPricesByMarketsRequest {
        StreamPricesByMarketsRequest::new()
    }

    fn default_instance() -> &'static StreamPricesByMarketsRequest {
        static instance: ::protobuf::rt::LazyV2<StreamPricesByMarketsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPricesByMarketsRequest::new)
    }
}

impl ::protobuf::Clear for StreamPricesByMarketsRequest {
    fn clear(&mut self) {
        self.market_ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPricesByMarketsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
pub struct StreamPricesByMarketsResponse {
    // message fields
    pub price: ::std::string::String,
    pub timestamp: i64,
    pub market_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamPricesByMarketsResponse {
    fn default() -> &'a StreamPricesByMarketsResponse {
        <StreamPricesByMarketsResponse as ::protobuf::Message>::default_instance()
    }
}

impl StreamPricesByMarketsResponse {
    pub fn new() -> StreamPricesByMarketsResponse {
        ::std::default::Default::default()
    }

    // string price = 1;


    pub fn get_price(&self) -> &str {
        &self.price
    }
    pub fn clear_price(&mut self) {
        self.price.clear();
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: ::std::string::String) {
        self.price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_price(&mut self) -> &mut ::std::string::String {
        &mut self.price
    }

    // Take field
    pub fn take_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.price, ::std::string::String::new())
    }

    // sint64 timestamp = 2;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // string market_id = 3;


    pub fn get_market_id(&self) -> &str {
        &self.market_id
    }
    pub fn clear_market_id(&mut self) {
        self.market_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_market_id(&mut self, v: ::std::string::String) {
        self.market_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_market_id(&mut self) -> &mut ::std::string::String {
        &mut self.market_id
    }

    // Take field
    pub fn take_market_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.market_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StreamPricesByMarketsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.price)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.market_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.price.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.price);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.timestamp);
        }
        if !self.market_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.market_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.price.is_empty() {
            os.write_string(1, &self.price)?;
        }
        if self.timestamp != 0 {
            os.write_sint64(2, self.timestamp)?;
        }
        if !self.market_id.is_empty() {
            os.write_string(3, &self.market_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamPricesByMarketsResponse {
        StreamPricesByMarketsResponse::new()
    }

    fn default_instance() -> &'static StreamPricesByMarketsResponse {
        static instance: ::protobuf::rt::LazyV2<StreamPricesByMarketsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamPricesByMarketsResponse::new)
    }
}

impl ::protobuf::Clear for StreamPricesByMarketsResponse {
    fn clear(&mut self) {
        self.price.clear();
        self.timestamp = 0;
        self.market_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamPricesByMarketsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

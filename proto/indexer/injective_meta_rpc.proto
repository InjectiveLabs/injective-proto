// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveMetaRPC protocol buffer definition
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../

syntax = "proto3";

package injective_meta_rpc;

option go_package = "/injective_meta_rpcpb";

// InjectiveMetaRPC is a special API subset to get info about server.
service InjectiveMetaRPC {
	// Endpoint for checking server health.
	rpc Ping (PingRequest) returns (PingResponse);
	// Returns injective-exchange version.
	rpc Version (VersionRequest) returns (VersionResponse);
	// Gets connection info
	rpc Info (InfoRequest) returns (InfoResponse);
	// Stream keepalive, if server exits, a shutdown event will be sent over this
// channel.
	rpc StreamKeepalive (StreamKeepaliveRequest) returns (stream StreamKeepaliveResponse);
}

message PingRequest {
}

message PingResponse {
}

message VersionRequest {
}

message VersionResponse {
	// injective-exchange code version.
	string version = 1;
	// Additional build meta info.
	map<string, string> build = 2;
}

message InfoRequest {
	// Provide current system UNIX timestamp in millis
	sint64 timestamp = 1;
}

message InfoResponse {
	// The original timestamp value in millis.
	sint64 timestamp = 1;
	// UNIX time on the server in millis.
	sint64 server_time = 2;
	// injective-exchange code version.
	string version = 3;
	// Additional build meta info.
	map<string, string> build = 4;
	// Server's location region
	string region = 5;
}

message StreamKeepaliveRequest {
}

message StreamKeepaliveResponse {
	// Server event
	string event = 1;
	// New conection endpoint for the gRPC API
	string new_endpoint = 2;
	// Operation timestamp in UNIX millis.
	sint64 timestamp = 3;
}

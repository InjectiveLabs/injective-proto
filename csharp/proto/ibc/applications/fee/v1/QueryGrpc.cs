// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ibc/applications/fee/v1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ibc.Applications.Fee.V1 {
  /// <summary>
  /// Query defines the ICS29 gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "ibc.applications.fee.v1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsForChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse> __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsForChannelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest> __Marshaller_ibc_applications_fee_v1_QueryTotalRecvFeesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse> __Marshaller_ibc_applications_fee_v1_QueryTotalRecvFeesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest> __Marshaller_ibc_applications_fee_v1_QueryTotalAckFeesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse> __Marshaller_ibc_applications_fee_v1_QueryTotalAckFeesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest> __Marshaller_ibc_applications_fee_v1_QueryTotalTimeoutFeesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse> __Marshaller_ibc_applications_fee_v1_QueryTotalTimeoutFeesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryPayeeRequest> __Marshaller_ibc_applications_fee_v1_QueryPayeeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryPayeeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryPayeeResponse> __Marshaller_ibc_applications_fee_v1_QueryPayeeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryPayeeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest> __Marshaller_ibc_applications_fee_v1_QueryCounterpartyPayeeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse> __Marshaller_ibc_applications_fee_v1_QueryCounterpartyPayeeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest> __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse> __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest> __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse> __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse> __Method_IncentivizedPackets = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncentivizedPackets",
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsRequest,
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse> __Method_IncentivizedPacket = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncentivizedPacket",
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketRequest,
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse> __Method_IncentivizedPacketsForChannel = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncentivizedPacketsForChannel",
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsForChannelRequest,
        __Marshaller_ibc_applications_fee_v1_QueryIncentivizedPacketsForChannelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse> __Method_TotalRecvFees = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalRecvFees",
        __Marshaller_ibc_applications_fee_v1_QueryTotalRecvFeesRequest,
        __Marshaller_ibc_applications_fee_v1_QueryTotalRecvFeesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse> __Method_TotalAckFees = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalAckFees",
        __Marshaller_ibc_applications_fee_v1_QueryTotalAckFeesRequest,
        __Marshaller_ibc_applications_fee_v1_QueryTotalAckFeesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse> __Method_TotalTimeoutFees = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TotalTimeoutFees",
        __Marshaller_ibc_applications_fee_v1_QueryTotalTimeoutFeesRequest,
        __Marshaller_ibc_applications_fee_v1_QueryTotalTimeoutFeesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryPayeeRequest, global::Ibc.Applications.Fee.V1.QueryPayeeResponse> __Method_Payee = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryPayeeRequest, global::Ibc.Applications.Fee.V1.QueryPayeeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Payee",
        __Marshaller_ibc_applications_fee_v1_QueryPayeeRequest,
        __Marshaller_ibc_applications_fee_v1_QueryPayeeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest, global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse> __Method_CounterpartyPayee = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest, global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CounterpartyPayee",
        __Marshaller_ibc_applications_fee_v1_QueryCounterpartyPayeeRequest,
        __Marshaller_ibc_applications_fee_v1_QueryCounterpartyPayeeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse> __Method_FeeEnabledChannels = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeeEnabledChannels",
        __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelsRequest,
        __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse> __Method_FeeEnabledChannel = new grpc::Method<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeeEnabledChannel",
        __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelRequest,
        __Marshaller_ibc_applications_fee_v1_QueryFeeEnabledChannelResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ibc.Applications.Fee.V1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// IncentivizedPackets returns all incentivized packets and their associated fees
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse> IncentivizedPackets(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IncentivizedPacket returns all packet fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse> IncentivizedPacket(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Gets all incentivized packets for a specific channel
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse> IncentivizedPacketsForChannel(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TotalRecvFees returns the total receive fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse> TotalRecvFees(global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse> TotalAckFees(global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse> TotalTimeoutFees(global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Payee returns the registered payee address for a specific channel given the relayer address
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryPayeeResponse> Payee(global::Ibc.Applications.Fee.V1.QueryPayeeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CounterpartyPayee returns the registered counterparty payee for forward relaying
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse> CounterpartyPayee(global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FeeEnabledChannels returns a list of all fee enabled channels
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse> FeeEnabledChannels(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse> FeeEnabledChannel(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// IncentivizedPackets returns all incentivized packets and their associated fees
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse IncentivizedPackets(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPackets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncentivizedPackets returns all incentivized packets and their associated fees
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse IncentivizedPackets(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncentivizedPackets, null, options, request);
      }
      /// <summary>
      /// IncentivizedPackets returns all incentivized packets and their associated fees
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse> IncentivizedPacketsAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPacketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncentivizedPackets returns all incentivized packets and their associated fees
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse> IncentivizedPacketsAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncentivizedPackets, null, options, request);
      }
      /// <summary>
      /// IncentivizedPacket returns all packet fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse IncentivizedPacket(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPacket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncentivizedPacket returns all packet fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse IncentivizedPacket(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncentivizedPacket, null, options, request);
      }
      /// <summary>
      /// IncentivizedPacket returns all packet fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse> IncentivizedPacketAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPacketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncentivizedPacket returns all packet fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse> IncentivizedPacketAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncentivizedPacket, null, options, request);
      }
      /// <summary>
      /// Gets all incentivized packets for a specific channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse IncentivizedPacketsForChannel(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPacketsForChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all incentivized packets for a specific channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse IncentivizedPacketsForChannel(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncentivizedPacketsForChannel, null, options, request);
      }
      /// <summary>
      /// Gets all incentivized packets for a specific channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse> IncentivizedPacketsForChannelAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncentivizedPacketsForChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets all incentivized packets for a specific channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse> IncentivizedPacketsForChannelAsync(global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncentivizedPacketsForChannel, null, options, request);
      }
      /// <summary>
      /// TotalRecvFees returns the total receive fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse TotalRecvFees(global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalRecvFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalRecvFees returns the total receive fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse TotalRecvFees(global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalRecvFees, null, options, request);
      }
      /// <summary>
      /// TotalRecvFees returns the total receive fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse> TotalRecvFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalRecvFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalRecvFees returns the total receive fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse> TotalRecvFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalRecvFees, null, options, request);
      }
      /// <summary>
      /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse TotalAckFees(global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalAckFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse TotalAckFees(global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalAckFees, null, options, request);
      }
      /// <summary>
      /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse> TotalAckFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalAckFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse> TotalAckFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalAckFees, null, options, request);
      }
      /// <summary>
      /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse TotalTimeoutFees(global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTimeoutFees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse TotalTimeoutFees(global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TotalTimeoutFees, null, options, request);
      }
      /// <summary>
      /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse> TotalTimeoutFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TotalTimeoutFeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse> TotalTimeoutFeesAsync(global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TotalTimeoutFees, null, options, request);
      }
      /// <summary>
      /// Payee returns the registered payee address for a specific channel given the relayer address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryPayeeResponse Payee(global::Ibc.Applications.Fee.V1.QueryPayeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Payee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Payee returns the registered payee address for a specific channel given the relayer address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryPayeeResponse Payee(global::Ibc.Applications.Fee.V1.QueryPayeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Payee, null, options, request);
      }
      /// <summary>
      /// Payee returns the registered payee address for a specific channel given the relayer address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryPayeeResponse> PayeeAsync(global::Ibc.Applications.Fee.V1.QueryPayeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PayeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Payee returns the registered payee address for a specific channel given the relayer address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryPayeeResponse> PayeeAsync(global::Ibc.Applications.Fee.V1.QueryPayeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Payee, null, options, request);
      }
      /// <summary>
      /// CounterpartyPayee returns the registered counterparty payee for forward relaying
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse CounterpartyPayee(global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CounterpartyPayee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CounterpartyPayee returns the registered counterparty payee for forward relaying
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse CounterpartyPayee(global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CounterpartyPayee, null, options, request);
      }
      /// <summary>
      /// CounterpartyPayee returns the registered counterparty payee for forward relaying
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse> CounterpartyPayeeAsync(global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CounterpartyPayeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CounterpartyPayee returns the registered counterparty payee for forward relaying
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse> CounterpartyPayeeAsync(global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CounterpartyPayee, null, options, request);
      }
      /// <summary>
      /// FeeEnabledChannels returns a list of all fee enabled channels
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse FeeEnabledChannels(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeEnabledChannels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FeeEnabledChannels returns a list of all fee enabled channels
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse FeeEnabledChannels(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeeEnabledChannels, null, options, request);
      }
      /// <summary>
      /// FeeEnabledChannels returns a list of all fee enabled channels
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse> FeeEnabledChannelsAsync(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeEnabledChannelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FeeEnabledChannels returns a list of all fee enabled channels
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse> FeeEnabledChannelsAsync(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeeEnabledChannels, null, options, request);
      }
      /// <summary>
      /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse FeeEnabledChannel(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeEnabledChannel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse FeeEnabledChannel(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeeEnabledChannel, null, options, request);
      }
      /// <summary>
      /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse> FeeEnabledChannelAsync(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeEnabledChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse> FeeEnabledChannelAsync(global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeeEnabledChannel, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_IncentivizedPackets, serviceImpl.IncentivizedPackets)
          .AddMethod(__Method_IncentivizedPacket, serviceImpl.IncentivizedPacket)
          .AddMethod(__Method_IncentivizedPacketsForChannel, serviceImpl.IncentivizedPacketsForChannel)
          .AddMethod(__Method_TotalRecvFees, serviceImpl.TotalRecvFees)
          .AddMethod(__Method_TotalAckFees, serviceImpl.TotalAckFees)
          .AddMethod(__Method_TotalTimeoutFees, serviceImpl.TotalTimeoutFees)
          .AddMethod(__Method_Payee, serviceImpl.Payee)
          .AddMethod(__Method_CounterpartyPayee, serviceImpl.CounterpartyPayee)
          .AddMethod(__Method_FeeEnabledChannels, serviceImpl.FeeEnabledChannels)
          .AddMethod(__Method_FeeEnabledChannel, serviceImpl.FeeEnabledChannel).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_IncentivizedPackets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsResponse>(serviceImpl.IncentivizedPackets));
      serviceBinder.AddMethod(__Method_IncentivizedPacket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketResponse>(serviceImpl.IncentivizedPacket));
      serviceBinder.AddMethod(__Method_IncentivizedPacketsForChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelRequest, global::Ibc.Applications.Fee.V1.QueryIncentivizedPacketsForChannelResponse>(serviceImpl.IncentivizedPacketsForChannel));
      serviceBinder.AddMethod(__Method_TotalRecvFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalRecvFeesResponse>(serviceImpl.TotalRecvFees));
      serviceBinder.AddMethod(__Method_TotalAckFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryTotalAckFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalAckFeesResponse>(serviceImpl.TotalAckFees));
      serviceBinder.AddMethod(__Method_TotalTimeoutFees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesRequest, global::Ibc.Applications.Fee.V1.QueryTotalTimeoutFeesResponse>(serviceImpl.TotalTimeoutFees));
      serviceBinder.AddMethod(__Method_Payee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryPayeeRequest, global::Ibc.Applications.Fee.V1.QueryPayeeResponse>(serviceImpl.Payee));
      serviceBinder.AddMethod(__Method_CounterpartyPayee, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeRequest, global::Ibc.Applications.Fee.V1.QueryCounterpartyPayeeResponse>(serviceImpl.CounterpartyPayee));
      serviceBinder.AddMethod(__Method_FeeEnabledChannels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelsResponse>(serviceImpl.FeeEnabledChannels));
      serviceBinder.AddMethod(__Method_FeeEnabledChannel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelRequest, global::Ibc.Applications.Fee.V1.QueryFeeEnabledChannelResponse>(serviceImpl.FeeEnabledChannel));
    }

  }
}
#endregion

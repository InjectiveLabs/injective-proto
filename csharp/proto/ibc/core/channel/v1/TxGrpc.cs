// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ibc/core/channel/v1/tx.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ibc.Core.Channel.V1 {
  /// <summary>
  /// Msg defines the ibc/channel Msg service.
  /// </summary>
  public static partial class Msg
  {
    static readonly string __ServiceName = "ibc.core.channel.v1.Msg";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenInit> __Marshaller_ibc_core_channel_v1_MsgChannelOpenInit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenInit.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse> __Marshaller_ibc_core_channel_v1_MsgChannelOpenInitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenTry> __Marshaller_ibc_core_channel_v1_MsgChannelOpenTry = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenTry.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse> __Marshaller_ibc_core_channel_v1_MsgChannelOpenTryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenAck> __Marshaller_ibc_core_channel_v1_MsgChannelOpenAck = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenAck.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse> __Marshaller_ibc_core_channel_v1_MsgChannelOpenAckResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm> __Marshaller_ibc_core_channel_v1_MsgChannelOpenConfirm = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse> __Marshaller_ibc_core_channel_v1_MsgChannelOpenConfirmResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelCloseInit> __Marshaller_ibc_core_channel_v1_MsgChannelCloseInit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelCloseInit.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse> __Marshaller_ibc_core_channel_v1_MsgChannelCloseInitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm> __Marshaller_ibc_core_channel_v1_MsgChannelCloseConfirm = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse> __Marshaller_ibc_core_channel_v1_MsgChannelCloseConfirmResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgRecvPacket> __Marshaller_ibc_core_channel_v1_MsgRecvPacket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgRecvPacket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgRecvPacketResponse> __Marshaller_ibc_core_channel_v1_MsgRecvPacketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgRecvPacketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgTimeout> __Marshaller_ibc_core_channel_v1_MsgTimeout = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgTimeout.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgTimeoutResponse> __Marshaller_ibc_core_channel_v1_MsgTimeoutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgTimeoutResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgTimeoutOnClose> __Marshaller_ibc_core_channel_v1_MsgTimeoutOnClose = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgTimeoutOnClose.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse> __Marshaller_ibc_core_channel_v1_MsgTimeoutOnCloseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgAcknowledgement> __Marshaller_ibc_core_channel_v1_MsgAcknowledgement = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgAcknowledgement.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse> __Marshaller_ibc_core_channel_v1_MsgAcknowledgementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenInit, global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse> __Method_ChannelOpenInit = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenInit, global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelOpenInit",
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenInit,
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenInitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenTry, global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse> __Method_ChannelOpenTry = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenTry, global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelOpenTry",
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenTry,
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenTryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenAck, global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse> __Method_ChannelOpenAck = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenAck, global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelOpenAck",
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenAck,
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenAckResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm, global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse> __Method_ChannelOpenConfirm = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm, global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelOpenConfirm",
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenConfirm,
        __Marshaller_ibc_core_channel_v1_MsgChannelOpenConfirmResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelCloseInit, global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse> __Method_ChannelCloseInit = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelCloseInit, global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelCloseInit",
        __Marshaller_ibc_core_channel_v1_MsgChannelCloseInit,
        __Marshaller_ibc_core_channel_v1_MsgChannelCloseInitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm, global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse> __Method_ChannelCloseConfirm = new grpc::Method<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm, global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelCloseConfirm",
        __Marshaller_ibc_core_channel_v1_MsgChannelCloseConfirm,
        __Marshaller_ibc_core_channel_v1_MsgChannelCloseConfirmResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgRecvPacket, global::Ibc.Core.Channel.V1.MsgRecvPacketResponse> __Method_RecvPacket = new grpc::Method<global::Ibc.Core.Channel.V1.MsgRecvPacket, global::Ibc.Core.Channel.V1.MsgRecvPacketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecvPacket",
        __Marshaller_ibc_core_channel_v1_MsgRecvPacket,
        __Marshaller_ibc_core_channel_v1_MsgRecvPacketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgTimeout, global::Ibc.Core.Channel.V1.MsgTimeoutResponse> __Method_Timeout = new grpc::Method<global::Ibc.Core.Channel.V1.MsgTimeout, global::Ibc.Core.Channel.V1.MsgTimeoutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Timeout",
        __Marshaller_ibc_core_channel_v1_MsgTimeout,
        __Marshaller_ibc_core_channel_v1_MsgTimeoutResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgTimeoutOnClose, global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse> __Method_TimeoutOnClose = new grpc::Method<global::Ibc.Core.Channel.V1.MsgTimeoutOnClose, global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TimeoutOnClose",
        __Marshaller_ibc_core_channel_v1_MsgTimeoutOnClose,
        __Marshaller_ibc_core_channel_v1_MsgTimeoutOnCloseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.MsgAcknowledgement, global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse> __Method_Acknowledgement = new grpc::Method<global::Ibc.Core.Channel.V1.MsgAcknowledgement, global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Acknowledgement",
        __Marshaller_ibc_core_channel_v1_MsgAcknowledgement,
        __Marshaller_ibc_core_channel_v1_MsgAcknowledgementResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ibc.Core.Channel.V1.TxReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Msg</summary>
    [grpc::BindServiceMethod(typeof(Msg), "BindService")]
    public abstract partial class MsgBase
    {
      /// <summary>
      /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse> ChannelOpenInit(global::Ibc.Core.Channel.V1.MsgChannelOpenInit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse> ChannelOpenTry(global::Ibc.Core.Channel.V1.MsgChannelOpenTry request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse> ChannelOpenAck(global::Ibc.Core.Channel.V1.MsgChannelOpenAck request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse> ChannelOpenConfirm(global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse> ChannelCloseInit(global::Ibc.Core.Channel.V1.MsgChannelCloseInit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelCloseConfirm defines a rpc handler method for
      /// MsgChannelCloseConfirm.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse> ChannelCloseConfirm(global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RecvPacket defines a rpc handler method for MsgRecvPacket.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgRecvPacketResponse> RecvPacket(global::Ibc.Core.Channel.V1.MsgRecvPacket request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Timeout defines a rpc handler method for MsgTimeout.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgTimeoutResponse> Timeout(global::Ibc.Core.Channel.V1.MsgTimeout request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse> TimeoutOnClose(global::Ibc.Core.Channel.V1.MsgTimeoutOnClose request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse> Acknowledgement(global::Ibc.Core.Channel.V1.MsgAcknowledgement request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Msg</summary>
    public partial class MsgClient : grpc::ClientBase<MsgClient>
    {
      /// <summary>Creates a new client for Msg</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Msg that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse ChannelOpenInit(global::Ibc.Core.Channel.V1.MsgChannelOpenInit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse ChannelOpenInit(global::Ibc.Core.Channel.V1.MsgChannelOpenInit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelOpenInit, null, options, request);
      }
      /// <summary>
      /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse> ChannelOpenInitAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenInit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse> ChannelOpenInitAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenInit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelOpenInit, null, options, request);
      }
      /// <summary>
      /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse ChannelOpenTry(global::Ibc.Core.Channel.V1.MsgChannelOpenTry request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenTry(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse ChannelOpenTry(global::Ibc.Core.Channel.V1.MsgChannelOpenTry request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelOpenTry, null, options, request);
      }
      /// <summary>
      /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse> ChannelOpenTryAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenTry request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenTryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse> ChannelOpenTryAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenTry request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelOpenTry, null, options, request);
      }
      /// <summary>
      /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse ChannelOpenAck(global::Ibc.Core.Channel.V1.MsgChannelOpenAck request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenAck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse ChannelOpenAck(global::Ibc.Core.Channel.V1.MsgChannelOpenAck request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelOpenAck, null, options, request);
      }
      /// <summary>
      /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse> ChannelOpenAckAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenAck request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenAckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse> ChannelOpenAckAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenAck request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelOpenAck, null, options, request);
      }
      /// <summary>
      /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse ChannelOpenConfirm(global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse ChannelOpenConfirm(global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelOpenConfirm, null, options, request);
      }
      /// <summary>
      /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse> ChannelOpenConfirmAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelOpenConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse> ChannelOpenConfirmAsync(global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelOpenConfirm, null, options, request);
      }
      /// <summary>
      /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse ChannelCloseInit(global::Ibc.Core.Channel.V1.MsgChannelCloseInit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelCloseInit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse ChannelCloseInit(global::Ibc.Core.Channel.V1.MsgChannelCloseInit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelCloseInit, null, options, request);
      }
      /// <summary>
      /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse> ChannelCloseInitAsync(global::Ibc.Core.Channel.V1.MsgChannelCloseInit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelCloseInitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse> ChannelCloseInitAsync(global::Ibc.Core.Channel.V1.MsgChannelCloseInit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelCloseInit, null, options, request);
      }
      /// <summary>
      /// ChannelCloseConfirm defines a rpc handler method for
      /// MsgChannelCloseConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse ChannelCloseConfirm(global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelCloseConfirm(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelCloseConfirm defines a rpc handler method for
      /// MsgChannelCloseConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse ChannelCloseConfirm(global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelCloseConfirm, null, options, request);
      }
      /// <summary>
      /// ChannelCloseConfirm defines a rpc handler method for
      /// MsgChannelCloseConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse> ChannelCloseConfirmAsync(global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelCloseConfirmAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelCloseConfirm defines a rpc handler method for
      /// MsgChannelCloseConfirm.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse> ChannelCloseConfirmAsync(global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelCloseConfirm, null, options, request);
      }
      /// <summary>
      /// RecvPacket defines a rpc handler method for MsgRecvPacket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgRecvPacketResponse RecvPacket(global::Ibc.Core.Channel.V1.MsgRecvPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecvPacket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RecvPacket defines a rpc handler method for MsgRecvPacket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgRecvPacketResponse RecvPacket(global::Ibc.Core.Channel.V1.MsgRecvPacket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecvPacket, null, options, request);
      }
      /// <summary>
      /// RecvPacket defines a rpc handler method for MsgRecvPacket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgRecvPacketResponse> RecvPacketAsync(global::Ibc.Core.Channel.V1.MsgRecvPacket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecvPacketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RecvPacket defines a rpc handler method for MsgRecvPacket.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgRecvPacketResponse> RecvPacketAsync(global::Ibc.Core.Channel.V1.MsgRecvPacket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecvPacket, null, options, request);
      }
      /// <summary>
      /// Timeout defines a rpc handler method for MsgTimeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgTimeoutResponse Timeout(global::Ibc.Core.Channel.V1.MsgTimeout request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Timeout(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Timeout defines a rpc handler method for MsgTimeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgTimeoutResponse Timeout(global::Ibc.Core.Channel.V1.MsgTimeout request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Timeout, null, options, request);
      }
      /// <summary>
      /// Timeout defines a rpc handler method for MsgTimeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgTimeoutResponse> TimeoutAsync(global::Ibc.Core.Channel.V1.MsgTimeout request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeoutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Timeout defines a rpc handler method for MsgTimeout.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgTimeoutResponse> TimeoutAsync(global::Ibc.Core.Channel.V1.MsgTimeout request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Timeout, null, options, request);
      }
      /// <summary>
      /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse TimeoutOnClose(global::Ibc.Core.Channel.V1.MsgTimeoutOnClose request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeoutOnClose(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse TimeoutOnClose(global::Ibc.Core.Channel.V1.MsgTimeoutOnClose request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TimeoutOnClose, null, options, request);
      }
      /// <summary>
      /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse> TimeoutOnCloseAsync(global::Ibc.Core.Channel.V1.MsgTimeoutOnClose request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TimeoutOnCloseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse> TimeoutOnCloseAsync(global::Ibc.Core.Channel.V1.MsgTimeoutOnClose request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TimeoutOnClose, null, options, request);
      }
      /// <summary>
      /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse Acknowledgement(global::Ibc.Core.Channel.V1.MsgAcknowledgement request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Acknowledgement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse Acknowledgement(global::Ibc.Core.Channel.V1.MsgAcknowledgement request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Acknowledgement, null, options, request);
      }
      /// <summary>
      /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse> AcknowledgementAsync(global::Ibc.Core.Channel.V1.MsgAcknowledgement request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Acknowledgement defines a rpc handler method for MsgAcknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse> AcknowledgementAsync(global::Ibc.Core.Channel.V1.MsgAcknowledgement request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Acknowledgement, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MsgClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MsgBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ChannelOpenInit, serviceImpl.ChannelOpenInit)
          .AddMethod(__Method_ChannelOpenTry, serviceImpl.ChannelOpenTry)
          .AddMethod(__Method_ChannelOpenAck, serviceImpl.ChannelOpenAck)
          .AddMethod(__Method_ChannelOpenConfirm, serviceImpl.ChannelOpenConfirm)
          .AddMethod(__Method_ChannelCloseInit, serviceImpl.ChannelCloseInit)
          .AddMethod(__Method_ChannelCloseConfirm, serviceImpl.ChannelCloseConfirm)
          .AddMethod(__Method_RecvPacket, serviceImpl.RecvPacket)
          .AddMethod(__Method_Timeout, serviceImpl.Timeout)
          .AddMethod(__Method_TimeoutOnClose, serviceImpl.TimeoutOnClose)
          .AddMethod(__Method_Acknowledgement, serviceImpl.Acknowledgement).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ChannelOpenInit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelOpenInit, global::Ibc.Core.Channel.V1.MsgChannelOpenInitResponse>(serviceImpl.ChannelOpenInit));
      serviceBinder.AddMethod(__Method_ChannelOpenTry, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelOpenTry, global::Ibc.Core.Channel.V1.MsgChannelOpenTryResponse>(serviceImpl.ChannelOpenTry));
      serviceBinder.AddMethod(__Method_ChannelOpenAck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelOpenAck, global::Ibc.Core.Channel.V1.MsgChannelOpenAckResponse>(serviceImpl.ChannelOpenAck));
      serviceBinder.AddMethod(__Method_ChannelOpenConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelOpenConfirm, global::Ibc.Core.Channel.V1.MsgChannelOpenConfirmResponse>(serviceImpl.ChannelOpenConfirm));
      serviceBinder.AddMethod(__Method_ChannelCloseInit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelCloseInit, global::Ibc.Core.Channel.V1.MsgChannelCloseInitResponse>(serviceImpl.ChannelCloseInit));
      serviceBinder.AddMethod(__Method_ChannelCloseConfirm, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgChannelCloseConfirm, global::Ibc.Core.Channel.V1.MsgChannelCloseConfirmResponse>(serviceImpl.ChannelCloseConfirm));
      serviceBinder.AddMethod(__Method_RecvPacket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgRecvPacket, global::Ibc.Core.Channel.V1.MsgRecvPacketResponse>(serviceImpl.RecvPacket));
      serviceBinder.AddMethod(__Method_Timeout, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgTimeout, global::Ibc.Core.Channel.V1.MsgTimeoutResponse>(serviceImpl.Timeout));
      serviceBinder.AddMethod(__Method_TimeoutOnClose, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgTimeoutOnClose, global::Ibc.Core.Channel.V1.MsgTimeoutOnCloseResponse>(serviceImpl.TimeoutOnClose));
      serviceBinder.AddMethod(__Method_Acknowledgement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.MsgAcknowledgement, global::Ibc.Core.Channel.V1.MsgAcknowledgementResponse>(serviceImpl.Acknowledgement));
    }

  }
}
#endregion

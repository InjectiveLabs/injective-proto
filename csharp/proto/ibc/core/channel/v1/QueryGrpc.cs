// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ibc/core/channel/v1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Ibc.Core.Channel.V1 {
  /// <summary>
  /// Query provides defines the gRPC querier service
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "ibc.core.channel.v1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelRequest> __Marshaller_ibc_core_channel_v1_QueryChannelRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelResponse> __Marshaller_ibc_core_channel_v1_QueryChannelResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelsRequest> __Marshaller_ibc_core_channel_v1_QueryChannelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelsResponse> __Marshaller_ibc_core_channel_v1_QueryChannelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest> __Marshaller_ibc_core_channel_v1_QueryConnectionChannelsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse> __Marshaller_ibc_core_channel_v1_QueryConnectionChannelsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest> __Marshaller_ibc_core_channel_v1_QueryChannelClientStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse> __Marshaller_ibc_core_channel_v1_QueryChannelClientStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest> __Marshaller_ibc_core_channel_v1_QueryChannelConsensusStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse> __Marshaller_ibc_core_channel_v1_QueryChannelConsensusStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest> __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse> __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest> __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse> __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest> __Marshaller_ibc_core_channel_v1_QueryPacketReceiptRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse> __Marshaller_ibc_core_channel_v1_QueryPacketReceiptResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest> __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse> __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest> __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse> __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest> __Marshaller_ibc_core_channel_v1_QueryUnreceivedPacketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse> __Marshaller_ibc_core_channel_v1_QueryUnreceivedPacketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest> __Marshaller_ibc_core_channel_v1_QueryUnreceivedAcksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse> __Marshaller_ibc_core_channel_v1_QueryUnreceivedAcksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest> __Marshaller_ibc_core_channel_v1_QueryNextSequenceReceiveRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse> __Marshaller_ibc_core_channel_v1_QueryNextSequenceReceiveResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest> __Marshaller_ibc_core_channel_v1_QueryNextSequenceSendRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse> __Marshaller_ibc_core_channel_v1_QueryNextSequenceSendResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelRequest, global::Ibc.Core.Channel.V1.QueryChannelResponse> __Method_Channel = new grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelRequest, global::Ibc.Core.Channel.V1.QueryChannelResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Channel",
        __Marshaller_ibc_core_channel_v1_QueryChannelRequest,
        __Marshaller_ibc_core_channel_v1_QueryChannelResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelsRequest, global::Ibc.Core.Channel.V1.QueryChannelsResponse> __Method_Channels = new grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelsRequest, global::Ibc.Core.Channel.V1.QueryChannelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Channels",
        __Marshaller_ibc_core_channel_v1_QueryChannelsRequest,
        __Marshaller_ibc_core_channel_v1_QueryChannelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest, global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse> __Method_ConnectionChannels = new grpc::Method<global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest, global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConnectionChannels",
        __Marshaller_ibc_core_channel_v1_QueryConnectionChannelsRequest,
        __Marshaller_ibc_core_channel_v1_QueryConnectionChannelsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest, global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse> __Method_ChannelClientState = new grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest, global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelClientState",
        __Marshaller_ibc_core_channel_v1_QueryChannelClientStateRequest,
        __Marshaller_ibc_core_channel_v1_QueryChannelClientStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest, global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse> __Method_ChannelConsensusState = new grpc::Method<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest, global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelConsensusState",
        __Marshaller_ibc_core_channel_v1_QueryChannelConsensusStateRequest,
        __Marshaller_ibc_core_channel_v1_QueryChannelConsensusStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse> __Method_PacketCommitment = new grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PacketCommitment",
        __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentRequest,
        __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse> __Method_PacketCommitments = new grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PacketCommitments",
        __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentsRequest,
        __Marshaller_ibc_core_channel_v1_QueryPacketCommitmentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest, global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse> __Method_PacketReceipt = new grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest, global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PacketReceipt",
        __Marshaller_ibc_core_channel_v1_QueryPacketReceiptRequest,
        __Marshaller_ibc_core_channel_v1_QueryPacketReceiptResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse> __Method_PacketAcknowledgement = new grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PacketAcknowledgement",
        __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementRequest,
        __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse> __Method_PacketAcknowledgements = new grpc::Method<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PacketAcknowledgements",
        __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementsRequest,
        __Marshaller_ibc_core_channel_v1_QueryPacketAcknowledgementsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse> __Method_UnreceivedPackets = new grpc::Method<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnreceivedPackets",
        __Marshaller_ibc_core_channel_v1_QueryUnreceivedPacketsRequest,
        __Marshaller_ibc_core_channel_v1_QueryUnreceivedPacketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse> __Method_UnreceivedAcks = new grpc::Method<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnreceivedAcks",
        __Marshaller_ibc_core_channel_v1_QueryUnreceivedAcksRequest,
        __Marshaller_ibc_core_channel_v1_QueryUnreceivedAcksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse> __Method_NextSequenceReceive = new grpc::Method<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NextSequenceReceive",
        __Marshaller_ibc_core_channel_v1_QueryNextSequenceReceiveRequest,
        __Marshaller_ibc_core_channel_v1_QueryNextSequenceReceiveResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse> __Method_NextSequenceSend = new grpc::Method<global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "NextSequenceSend",
        __Marshaller_ibc_core_channel_v1_QueryNextSequenceSendRequest,
        __Marshaller_ibc_core_channel_v1_QueryNextSequenceSendResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Ibc.Core.Channel.V1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// Channel queries an IBC Channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryChannelResponse> Channel(global::Ibc.Core.Channel.V1.QueryChannelRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Channels queries all the IBC channels of a chain.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryChannelsResponse> Channels(global::Ibc.Core.Channel.V1.QueryChannelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ConnectionChannels queries all the channels associated with a connection
      /// end.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse> ConnectionChannels(global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelClientState queries for the client state for the channel associated
      /// with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse> ChannelClientState(global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ChannelConsensusState queries for the consensus state for the channel
      /// associated with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse> ChannelConsensusState(global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PacketCommitment queries a stored packet commitment hash.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse> PacketCommitment(global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PacketCommitments returns all the packet commitments hashes associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse> PacketCommitments(global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PacketReceipt queries if a given packet sequence has been received on the
      /// queried chain
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse> PacketReceipt(global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PacketAcknowledgement queries a stored packet acknowledgement hash.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse> PacketAcknowledgement(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PacketAcknowledgements returns all the packet acknowledgements associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse> PacketAcknowledgements(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UnreceivedPackets returns all the unreceived IBC packets associated with a
      /// channel and sequences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse> UnreceivedPackets(global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      /// with a channel and sequences.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse> UnreceivedAcks(global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// NextSequenceReceive returns the next receive sequence for a given channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse> NextSequenceReceive(global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// NextSequenceSend returns the next send sequence for a given channel.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse> NextSequenceSend(global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Channel queries an IBC Channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelResponse Channel(global::Ibc.Core.Channel.V1.QueryChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Channel(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Channel queries an IBC Channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelResponse Channel(global::Ibc.Core.Channel.V1.QueryChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Channel, null, options, request);
      }
      /// <summary>
      /// Channel queries an IBC Channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelResponse> ChannelAsync(global::Ibc.Core.Channel.V1.QueryChannelRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Channel queries an IBC Channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelResponse> ChannelAsync(global::Ibc.Core.Channel.V1.QueryChannelRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Channel, null, options, request);
      }
      /// <summary>
      /// Channels queries all the IBC channels of a chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelsResponse Channels(global::Ibc.Core.Channel.V1.QueryChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Channels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Channels queries all the IBC channels of a chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelsResponse Channels(global::Ibc.Core.Channel.V1.QueryChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Channels, null, options, request);
      }
      /// <summary>
      /// Channels queries all the IBC channels of a chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelsResponse> ChannelsAsync(global::Ibc.Core.Channel.V1.QueryChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Channels queries all the IBC channels of a chain.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelsResponse> ChannelsAsync(global::Ibc.Core.Channel.V1.QueryChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Channels, null, options, request);
      }
      /// <summary>
      /// ConnectionChannels queries all the channels associated with a connection
      /// end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse ConnectionChannels(global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectionChannels(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConnectionChannels queries all the channels associated with a connection
      /// end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse ConnectionChannels(global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConnectionChannels, null, options, request);
      }
      /// <summary>
      /// ConnectionChannels queries all the channels associated with a connection
      /// end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse> ConnectionChannelsAsync(global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConnectionChannelsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConnectionChannels queries all the channels associated with a connection
      /// end.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse> ConnectionChannelsAsync(global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConnectionChannels, null, options, request);
      }
      /// <summary>
      /// ChannelClientState queries for the client state for the channel associated
      /// with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse ChannelClientState(global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelClientState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelClientState queries for the client state for the channel associated
      /// with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse ChannelClientState(global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelClientState, null, options, request);
      }
      /// <summary>
      /// ChannelClientState queries for the client state for the channel associated
      /// with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse> ChannelClientStateAsync(global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelClientStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelClientState queries for the client state for the channel associated
      /// with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse> ChannelClientStateAsync(global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelClientState, null, options, request);
      }
      /// <summary>
      /// ChannelConsensusState queries for the consensus state for the channel
      /// associated with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse ChannelConsensusState(global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelConsensusState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelConsensusState queries for the consensus state for the channel
      /// associated with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse ChannelConsensusState(global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelConsensusState, null, options, request);
      }
      /// <summary>
      /// ChannelConsensusState queries for the consensus state for the channel
      /// associated with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse> ChannelConsensusStateAsync(global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelConsensusStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelConsensusState queries for the consensus state for the channel
      /// associated with the provided channel identifiers.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse> ChannelConsensusStateAsync(global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelConsensusState, null, options, request);
      }
      /// <summary>
      /// PacketCommitment queries a stored packet commitment hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse PacketCommitment(global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketCommitment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketCommitment queries a stored packet commitment hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse PacketCommitment(global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PacketCommitment, null, options, request);
      }
      /// <summary>
      /// PacketCommitment queries a stored packet commitment hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse> PacketCommitmentAsync(global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketCommitmentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketCommitment queries a stored packet commitment hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse> PacketCommitmentAsync(global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PacketCommitment, null, options, request);
      }
      /// <summary>
      /// PacketCommitments returns all the packet commitments hashes associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse PacketCommitments(global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketCommitments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketCommitments returns all the packet commitments hashes associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse PacketCommitments(global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PacketCommitments, null, options, request);
      }
      /// <summary>
      /// PacketCommitments returns all the packet commitments hashes associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse> PacketCommitmentsAsync(global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketCommitmentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketCommitments returns all the packet commitments hashes associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse> PacketCommitmentsAsync(global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PacketCommitments, null, options, request);
      }
      /// <summary>
      /// PacketReceipt queries if a given packet sequence has been received on the
      /// queried chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse PacketReceipt(global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketReceipt(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketReceipt queries if a given packet sequence has been received on the
      /// queried chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse PacketReceipt(global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PacketReceipt, null, options, request);
      }
      /// <summary>
      /// PacketReceipt queries if a given packet sequence has been received on the
      /// queried chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse> PacketReceiptAsync(global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketReceiptAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketReceipt queries if a given packet sequence has been received on the
      /// queried chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse> PacketReceiptAsync(global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PacketReceipt, null, options, request);
      }
      /// <summary>
      /// PacketAcknowledgement queries a stored packet acknowledgement hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse PacketAcknowledgement(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketAcknowledgement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketAcknowledgement queries a stored packet acknowledgement hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse PacketAcknowledgement(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PacketAcknowledgement, null, options, request);
      }
      /// <summary>
      /// PacketAcknowledgement queries a stored packet acknowledgement hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse> PacketAcknowledgementAsync(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketAcknowledgementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketAcknowledgement queries a stored packet acknowledgement hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse> PacketAcknowledgementAsync(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PacketAcknowledgement, null, options, request);
      }
      /// <summary>
      /// PacketAcknowledgements returns all the packet acknowledgements associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse PacketAcknowledgements(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketAcknowledgements(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketAcknowledgements returns all the packet acknowledgements associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse PacketAcknowledgements(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PacketAcknowledgements, null, options, request);
      }
      /// <summary>
      /// PacketAcknowledgements returns all the packet acknowledgements associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse> PacketAcknowledgementsAsync(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PacketAcknowledgementsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PacketAcknowledgements returns all the packet acknowledgements associated
      /// with a channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse> PacketAcknowledgementsAsync(global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PacketAcknowledgements, null, options, request);
      }
      /// <summary>
      /// UnreceivedPackets returns all the unreceived IBC packets associated with a
      /// channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse UnreceivedPackets(global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnreceivedPackets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnreceivedPackets returns all the unreceived IBC packets associated with a
      /// channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse UnreceivedPackets(global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnreceivedPackets, null, options, request);
      }
      /// <summary>
      /// UnreceivedPackets returns all the unreceived IBC packets associated with a
      /// channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse> UnreceivedPacketsAsync(global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnreceivedPacketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnreceivedPackets returns all the unreceived IBC packets associated with a
      /// channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse> UnreceivedPacketsAsync(global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnreceivedPackets, null, options, request);
      }
      /// <summary>
      /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      /// with a channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse UnreceivedAcks(global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnreceivedAcks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      /// with a channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse UnreceivedAcks(global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnreceivedAcks, null, options, request);
      }
      /// <summary>
      /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      /// with a channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse> UnreceivedAcksAsync(global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnreceivedAcksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      /// with a channel and sequences.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse> UnreceivedAcksAsync(global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnreceivedAcks, null, options, request);
      }
      /// <summary>
      /// NextSequenceReceive returns the next receive sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse NextSequenceReceive(global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NextSequenceReceive(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NextSequenceReceive returns the next receive sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse NextSequenceReceive(global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NextSequenceReceive, null, options, request);
      }
      /// <summary>
      /// NextSequenceReceive returns the next receive sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse> NextSequenceReceiveAsync(global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NextSequenceReceiveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NextSequenceReceive returns the next receive sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse> NextSequenceReceiveAsync(global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NextSequenceReceive, null, options, request);
      }
      /// <summary>
      /// NextSequenceSend returns the next send sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse NextSequenceSend(global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NextSequenceSend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NextSequenceSend returns the next send sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse NextSequenceSend(global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_NextSequenceSend, null, options, request);
      }
      /// <summary>
      /// NextSequenceSend returns the next send sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse> NextSequenceSendAsync(global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return NextSequenceSendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// NextSequenceSend returns the next send sequence for a given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse> NextSequenceSendAsync(global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_NextSequenceSend, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Channel, serviceImpl.Channel)
          .AddMethod(__Method_Channels, serviceImpl.Channels)
          .AddMethod(__Method_ConnectionChannels, serviceImpl.ConnectionChannels)
          .AddMethod(__Method_ChannelClientState, serviceImpl.ChannelClientState)
          .AddMethod(__Method_ChannelConsensusState, serviceImpl.ChannelConsensusState)
          .AddMethod(__Method_PacketCommitment, serviceImpl.PacketCommitment)
          .AddMethod(__Method_PacketCommitments, serviceImpl.PacketCommitments)
          .AddMethod(__Method_PacketReceipt, serviceImpl.PacketReceipt)
          .AddMethod(__Method_PacketAcknowledgement, serviceImpl.PacketAcknowledgement)
          .AddMethod(__Method_PacketAcknowledgements, serviceImpl.PacketAcknowledgements)
          .AddMethod(__Method_UnreceivedPackets, serviceImpl.UnreceivedPackets)
          .AddMethod(__Method_UnreceivedAcks, serviceImpl.UnreceivedAcks)
          .AddMethod(__Method_NextSequenceReceive, serviceImpl.NextSequenceReceive)
          .AddMethod(__Method_NextSequenceSend, serviceImpl.NextSequenceSend).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Channel, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryChannelRequest, global::Ibc.Core.Channel.V1.QueryChannelResponse>(serviceImpl.Channel));
      serviceBinder.AddMethod(__Method_Channels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryChannelsRequest, global::Ibc.Core.Channel.V1.QueryChannelsResponse>(serviceImpl.Channels));
      serviceBinder.AddMethod(__Method_ConnectionChannels, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryConnectionChannelsRequest, global::Ibc.Core.Channel.V1.QueryConnectionChannelsResponse>(serviceImpl.ConnectionChannels));
      serviceBinder.AddMethod(__Method_ChannelClientState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryChannelClientStateRequest, global::Ibc.Core.Channel.V1.QueryChannelClientStateResponse>(serviceImpl.ChannelClientState));
      serviceBinder.AddMethod(__Method_ChannelConsensusState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryChannelConsensusStateRequest, global::Ibc.Core.Channel.V1.QueryChannelConsensusStateResponse>(serviceImpl.ChannelConsensusState));
      serviceBinder.AddMethod(__Method_PacketCommitment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryPacketCommitmentRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentResponse>(serviceImpl.PacketCommitment));
      serviceBinder.AddMethod(__Method_PacketCommitments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryPacketCommitmentsRequest, global::Ibc.Core.Channel.V1.QueryPacketCommitmentsResponse>(serviceImpl.PacketCommitments));
      serviceBinder.AddMethod(__Method_PacketReceipt, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryPacketReceiptRequest, global::Ibc.Core.Channel.V1.QueryPacketReceiptResponse>(serviceImpl.PacketReceipt));
      serviceBinder.AddMethod(__Method_PacketAcknowledgement, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementResponse>(serviceImpl.PacketAcknowledgement));
      serviceBinder.AddMethod(__Method_PacketAcknowledgements, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsRequest, global::Ibc.Core.Channel.V1.QueryPacketAcknowledgementsResponse>(serviceImpl.PacketAcknowledgements));
      serviceBinder.AddMethod(__Method_UnreceivedPackets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedPacketsResponse>(serviceImpl.UnreceivedPackets));
      serviceBinder.AddMethod(__Method_UnreceivedAcks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryUnreceivedAcksRequest, global::Ibc.Core.Channel.V1.QueryUnreceivedAcksResponse>(serviceImpl.UnreceivedAcks));
      serviceBinder.AddMethod(__Method_NextSequenceReceive, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceReceiveResponse>(serviceImpl.NextSequenceReceive));
      serviceBinder.AddMethod(__Method_NextSequenceSend, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Ibc.Core.Channel.V1.QueryNextSequenceSendRequest, global::Ibc.Core.Channel.V1.QueryNextSequenceSendResponse>(serviceImpl.NextSequenceSend));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: exchange/injective_derivative_exchange_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveDerivativeExchangeRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveDerivativeExchangeRpc {
  /// <summary>
  /// InjectiveDerivativeExchangeRPC defines gRPC API of Derivative Markets
  /// provider.
  /// </summary>
  public static partial class InjectiveDerivativeExchangeRPC
  {
    static readonly string __ServiceName = "injective_derivative_exchange_rpc.InjectiveDerivativeExchangeRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.MarketsRequest> __Marshaller_injective_derivative_exchange_rpc_MarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.MarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.MarketsResponse> __Marshaller_injective_derivative_exchange_rpc_MarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.MarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.MarketRequest> __Marshaller_injective_derivative_exchange_rpc_MarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.MarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.MarketResponse> __Marshaller_injective_derivative_exchange_rpc_MarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.MarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamMarketRequest> __Marshaller_injective_derivative_exchange_rpc_StreamMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamMarketResponse> __Marshaller_injective_derivative_exchange_rpc_StreamMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest> __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse> __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest> __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse> __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbookRequest> __Marshaller_injective_derivative_exchange_rpc_OrderbookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbookResponse> __Marshaller_injective_derivative_exchange_rpc_OrderbookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbookV2Request> __Marshaller_injective_derivative_exchange_rpc_OrderbookV2Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbookV2Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbookV2Response> __Marshaller_injective_derivative_exchange_rpc_OrderbookV2Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbookV2Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbooksRequest> __Marshaller_injective_derivative_exchange_rpc_OrderbooksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbooksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbooksResponse> __Marshaller_injective_derivative_exchange_rpc_OrderbooksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbooksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request> __Marshaller_injective_derivative_exchange_rpc_OrderbooksV2Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response> __Marshaller_injective_derivative_exchange_rpc_OrderbooksV2Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookV2Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookV2Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookUpdateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse> __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookUpdateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrdersRequest> __Marshaller_injective_derivative_exchange_rpc_OrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrdersResponse> __Marshaller_injective_derivative_exchange_rpc_OrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.PositionsRequest> __Marshaller_injective_derivative_exchange_rpc_PositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.PositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.PositionsResponse> __Marshaller_injective_derivative_exchange_rpc_PositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.PositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest> __Marshaller_injective_derivative_exchange_rpc_LiquidablePositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse> __Marshaller_injective_derivative_exchange_rpc_LiquidablePositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest> __Marshaller_injective_derivative_exchange_rpc_FundingPaymentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse> __Marshaller_injective_derivative_exchange_rpc_FundingPaymentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.FundingRatesRequest> __Marshaller_injective_derivative_exchange_rpc_FundingRatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.FundingRatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.FundingRatesResponse> __Marshaller_injective_derivative_exchange_rpc_FundingRatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.FundingRatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest> __Marshaller_injective_derivative_exchange_rpc_StreamPositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse> __Marshaller_injective_derivative_exchange_rpc_StreamPositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest> __Marshaller_injective_derivative_exchange_rpc_StreamOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse> __Marshaller_injective_derivative_exchange_rpc_StreamOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.TradesRequest> __Marshaller_injective_derivative_exchange_rpc_TradesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.TradesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.TradesResponse> __Marshaller_injective_derivative_exchange_rpc_TradesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.TradesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamTradesRequest> __Marshaller_injective_derivative_exchange_rpc_StreamTradesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamTradesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamTradesResponse> __Marshaller_injective_derivative_exchange_rpc_StreamTradesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamTradesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest> __Marshaller_injective_derivative_exchange_rpc_SubaccountOrdersListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse> __Marshaller_injective_derivative_exchange_rpc_SubaccountOrdersListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest> __Marshaller_injective_derivative_exchange_rpc_SubaccountTradesListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse> __Marshaller_injective_derivative_exchange_rpc_SubaccountTradesListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest> __Marshaller_injective_derivative_exchange_rpc_OrdersHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse> __Marshaller_injective_derivative_exchange_rpc_OrdersHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest> __Marshaller_injective_derivative_exchange_rpc_StreamOrdersHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse> __Marshaller_injective_derivative_exchange_rpc_StreamOrdersHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.MarketsRequest, global::InjectiveDerivativeExchangeRpc.MarketsResponse> __Method_Markets = new grpc::Method<global::InjectiveDerivativeExchangeRpc.MarketsRequest, global::InjectiveDerivativeExchangeRpc.MarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Markets",
        __Marshaller_injective_derivative_exchange_rpc_MarketsRequest,
        __Marshaller_injective_derivative_exchange_rpc_MarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.MarketRequest, global::InjectiveDerivativeExchangeRpc.MarketResponse> __Method_Market = new grpc::Method<global::InjectiveDerivativeExchangeRpc.MarketRequest, global::InjectiveDerivativeExchangeRpc.MarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Market",
        __Marshaller_injective_derivative_exchange_rpc_MarketRequest,
        __Marshaller_injective_derivative_exchange_rpc_MarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamMarketRequest, global::InjectiveDerivativeExchangeRpc.StreamMarketResponse> __Method_StreamMarket = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamMarketRequest, global::InjectiveDerivativeExchangeRpc.StreamMarketResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamMarket",
        __Marshaller_injective_derivative_exchange_rpc_StreamMarketRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse> __Method_BinaryOptionsMarkets = new grpc::Method<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BinaryOptionsMarkets",
        __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketsRequest,
        __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse> __Method_BinaryOptionsMarket = new grpc::Method<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BinaryOptionsMarket",
        __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketRequest,
        __Marshaller_injective_derivative_exchange_rpc_BinaryOptionsMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbookRequest, global::InjectiveDerivativeExchangeRpc.OrderbookResponse> __Method_Orderbook = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbookRequest, global::InjectiveDerivativeExchangeRpc.OrderbookResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Orderbook",
        __Marshaller_injective_derivative_exchange_rpc_OrderbookRequest,
        __Marshaller_injective_derivative_exchange_rpc_OrderbookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbookV2Request, global::InjectiveDerivativeExchangeRpc.OrderbookV2Response> __Method_OrderbookV2 = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbookV2Request, global::InjectiveDerivativeExchangeRpc.OrderbookV2Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderbookV2",
        __Marshaller_injective_derivative_exchange_rpc_OrderbookV2Request,
        __Marshaller_injective_derivative_exchange_rpc_OrderbookV2Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbooksRequest, global::InjectiveDerivativeExchangeRpc.OrderbooksResponse> __Method_Orderbooks = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbooksRequest, global::InjectiveDerivativeExchangeRpc.OrderbooksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Orderbooks",
        __Marshaller_injective_derivative_exchange_rpc_OrderbooksRequest,
        __Marshaller_injective_derivative_exchange_rpc_OrderbooksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request, global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response> __Method_OrderbooksV2 = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request, global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderbooksV2",
        __Marshaller_injective_derivative_exchange_rpc_OrderbooksV2Request,
        __Marshaller_injective_derivative_exchange_rpc_OrderbooksV2Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse> __Method_StreamOrderbook = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamOrderbook",
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request, global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response> __Method_StreamOrderbookV2 = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request, global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamOrderbookV2",
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookV2Request,
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookV2Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse> __Method_StreamOrderbookUpdate = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamOrderbookUpdate",
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookUpdateRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamOrderbookUpdateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrdersRequest, global::InjectiveDerivativeExchangeRpc.OrdersResponse> __Method_Orders = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrdersRequest, global::InjectiveDerivativeExchangeRpc.OrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Orders",
        __Marshaller_injective_derivative_exchange_rpc_OrdersRequest,
        __Marshaller_injective_derivative_exchange_rpc_OrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.PositionsRequest, global::InjectiveDerivativeExchangeRpc.PositionsResponse> __Method_Positions = new grpc::Method<global::InjectiveDerivativeExchangeRpc.PositionsRequest, global::InjectiveDerivativeExchangeRpc.PositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Positions",
        __Marshaller_injective_derivative_exchange_rpc_PositionsRequest,
        __Marshaller_injective_derivative_exchange_rpc_PositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest, global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse> __Method_LiquidablePositions = new grpc::Method<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest, global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LiquidablePositions",
        __Marshaller_injective_derivative_exchange_rpc_LiquidablePositionsRequest,
        __Marshaller_injective_derivative_exchange_rpc_LiquidablePositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest, global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse> __Method_FundingPayments = new grpc::Method<global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest, global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FundingPayments",
        __Marshaller_injective_derivative_exchange_rpc_FundingPaymentsRequest,
        __Marshaller_injective_derivative_exchange_rpc_FundingPaymentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.FundingRatesRequest, global::InjectiveDerivativeExchangeRpc.FundingRatesResponse> __Method_FundingRates = new grpc::Method<global::InjectiveDerivativeExchangeRpc.FundingRatesRequest, global::InjectiveDerivativeExchangeRpc.FundingRatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FundingRates",
        __Marshaller_injective_derivative_exchange_rpc_FundingRatesRequest,
        __Marshaller_injective_derivative_exchange_rpc_FundingRatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest, global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse> __Method_StreamPositions = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest, global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamPositions",
        __Marshaller_injective_derivative_exchange_rpc_StreamPositionsRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamPositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse> __Method_StreamOrders = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamOrders",
        __Marshaller_injective_derivative_exchange_rpc_StreamOrdersRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.TradesRequest, global::InjectiveDerivativeExchangeRpc.TradesResponse> __Method_Trades = new grpc::Method<global::InjectiveDerivativeExchangeRpc.TradesRequest, global::InjectiveDerivativeExchangeRpc.TradesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Trades",
        __Marshaller_injective_derivative_exchange_rpc_TradesRequest,
        __Marshaller_injective_derivative_exchange_rpc_TradesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamTradesRequest, global::InjectiveDerivativeExchangeRpc.StreamTradesResponse> __Method_StreamTrades = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamTradesRequest, global::InjectiveDerivativeExchangeRpc.StreamTradesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamTrades",
        __Marshaller_injective_derivative_exchange_rpc_StreamTradesRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamTradesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse> __Method_SubaccountOrdersList = new grpc::Method<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountOrdersList",
        __Marshaller_injective_derivative_exchange_rpc_SubaccountOrdersListRequest,
        __Marshaller_injective_derivative_exchange_rpc_SubaccountOrdersListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse> __Method_SubaccountTradesList = new grpc::Method<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountTradesList",
        __Marshaller_injective_derivative_exchange_rpc_SubaccountTradesListRequest,
        __Marshaller_injective_derivative_exchange_rpc_SubaccountTradesListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse> __Method_OrdersHistory = new grpc::Method<global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrdersHistory",
        __Marshaller_injective_derivative_exchange_rpc_OrdersHistoryRequest,
        __Marshaller_injective_derivative_exchange_rpc_OrdersHistoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse> __Method_StreamOrdersHistory = new grpc::Method<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamOrdersHistory",
        __Marshaller_injective_derivative_exchange_rpc_StreamOrdersHistoryRequest,
        __Marshaller_injective_derivative_exchange_rpc_StreamOrdersHistoryResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveDerivativeExchangeRpc.InjectiveDerivativeExchangeRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InjectiveDerivativeExchangeRPC</summary>
    [grpc::BindServiceMethod(typeof(InjectiveDerivativeExchangeRPC), "BindService")]
    public abstract partial class InjectiveDerivativeExchangeRPCBase
    {
      /// <summary>
      /// Markets gets a list of Derivative Markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.MarketsResponse> Markets(global::InjectiveDerivativeExchangeRpc.MarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Market gets details of a single derivative market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.MarketResponse> Market(global::InjectiveDerivativeExchangeRpc.MarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamMarket streams live updates of selected derivative markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamMarket(global::InjectiveDerivativeExchangeRpc.StreamMarketRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamMarketResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BinaryOptionsMarkets gets a list of Binary Options Markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse> BinaryOptionsMarkets(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BinaryOptionMarket gets details of a single binary options market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse> BinaryOptionsMarket(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrderbookResponse> Orderbook(global::InjectiveDerivativeExchangeRpc.OrderbookRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrderbookV2Response> OrderbookV2(global::InjectiveDerivativeExchangeRpc.OrderbookV2Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrderbooksResponse> Orderbooks(global::InjectiveDerivativeExchangeRpc.OrderbooksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response> OrderbooksV2(global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamOrderbook(global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamOrderbookV2(global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream live level updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamOrderbookUpdate(global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// DerivativeLimitOrders gets the limit orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrdersResponse> Orders(global::InjectiveDerivativeExchangeRpc.OrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Positions gets the positions for a trader.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.PositionsResponse> Positions(global::InjectiveDerivativeExchangeRpc.PositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LiquidablePositions gets all the liquidable positions.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse> LiquidablePositions(global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FundingPayments gets the funding payments for a trader.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse> FundingPayments(global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FundingRates gets the historical funding rates for a market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.FundingRatesResponse> FundingRates(global::InjectiveDerivativeExchangeRpc.FundingRatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamPositions streams derivatives position updates.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamPositions(global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamOrders streams updates to individual orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamOrders(global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Trades gets the trades of a Derivative Market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.TradesResponse> Trades(global::InjectiveDerivativeExchangeRpc.TradesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamTrades streams newly executed trades from Derivative Market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamTrades(global::InjectiveDerivativeExchangeRpc.StreamTradesRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamTradesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubaccountOrdersList lists orders posted from this subaccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse> SubaccountOrdersList(global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubaccountTradesList gets a list of derivatives trades executed by this
      /// subaccount.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse> SubaccountTradesList(global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Lists history orders posted from a subaccount
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse> OrdersHistory(global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Stream updates to historical orders of a derivative Market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamOrdersHistory(global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest request, grpc::IServerStreamWriter<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InjectiveDerivativeExchangeRPC</summary>
    public partial class InjectiveDerivativeExchangeRPCClient : grpc::ClientBase<InjectiveDerivativeExchangeRPCClient>
    {
      /// <summary>Creates a new client for InjectiveDerivativeExchangeRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveDerivativeExchangeRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveDerivativeExchangeRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveDerivativeExchangeRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveDerivativeExchangeRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveDerivativeExchangeRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Markets gets a list of Derivative Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.MarketsResponse Markets(global::InjectiveDerivativeExchangeRpc.MarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Markets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Markets gets a list of Derivative Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.MarketsResponse Markets(global::InjectiveDerivativeExchangeRpc.MarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Markets, null, options, request);
      }
      /// <summary>
      /// Markets gets a list of Derivative Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.MarketsResponse> MarketsAsync(global::InjectiveDerivativeExchangeRpc.MarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Markets gets a list of Derivative Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.MarketsResponse> MarketsAsync(global::InjectiveDerivativeExchangeRpc.MarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Markets, null, options, request);
      }
      /// <summary>
      /// Market gets details of a single derivative market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.MarketResponse Market(global::InjectiveDerivativeExchangeRpc.MarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Market(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Market gets details of a single derivative market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.MarketResponse Market(global::InjectiveDerivativeExchangeRpc.MarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Market, null, options, request);
      }
      /// <summary>
      /// Market gets details of a single derivative market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.MarketResponse> MarketAsync(global::InjectiveDerivativeExchangeRpc.MarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Market gets details of a single derivative market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.MarketResponse> MarketAsync(global::InjectiveDerivativeExchangeRpc.MarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Market, null, options, request);
      }
      /// <summary>
      /// StreamMarket streams live updates of selected derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamMarketResponse> StreamMarket(global::InjectiveDerivativeExchangeRpc.StreamMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamMarket streams live updates of selected derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamMarketResponse> StreamMarket(global::InjectiveDerivativeExchangeRpc.StreamMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamMarket, null, options, request);
      }
      /// <summary>
      /// BinaryOptionsMarkets gets a list of Binary Options Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse BinaryOptionsMarkets(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BinaryOptionsMarkets gets a list of Binary Options Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse BinaryOptionsMarkets(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BinaryOptionsMarkets, null, options, request);
      }
      /// <summary>
      /// BinaryOptionsMarkets gets a list of Binary Options Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse> BinaryOptionsMarketsAsync(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BinaryOptionsMarkets gets a list of Binary Options Markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse> BinaryOptionsMarketsAsync(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BinaryOptionsMarkets, null, options, request);
      }
      /// <summary>
      /// BinaryOptionMarket gets details of a single binary options market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse BinaryOptionsMarket(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BinaryOptionMarket gets details of a single binary options market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse BinaryOptionsMarket(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BinaryOptionsMarket, null, options, request);
      }
      /// <summary>
      /// BinaryOptionMarket gets details of a single binary options market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse> BinaryOptionsMarketAsync(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BinaryOptionMarket gets details of a single binary options market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse> BinaryOptionsMarketAsync(global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BinaryOptionsMarket, null, options, request);
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbookResponse Orderbook(global::InjectiveDerivativeExchangeRpc.OrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Orderbook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbookResponse Orderbook(global::InjectiveDerivativeExchangeRpc.OrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Orderbook, null, options, request);
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbookResponse> OrderbookAsync(global::InjectiveDerivativeExchangeRpc.OrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbookAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbookResponse> OrderbookAsync(global::InjectiveDerivativeExchangeRpc.OrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Orderbook, null, options, request);
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbookV2Response OrderbookV2(global::InjectiveDerivativeExchangeRpc.OrderbookV2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbookV2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbookV2Response OrderbookV2(global::InjectiveDerivativeExchangeRpc.OrderbookV2Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderbookV2, null, options, request);
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbookV2Response> OrderbookV2Async(global::InjectiveDerivativeExchangeRpc.OrderbookV2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbookV2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbook gets the Orderbook of a Derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbookV2Response> OrderbookV2Async(global::InjectiveDerivativeExchangeRpc.OrderbookV2Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderbookV2, null, options, request);
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbooksResponse Orderbooks(global::InjectiveDerivativeExchangeRpc.OrderbooksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Orderbooks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbooksResponse Orderbooks(global::InjectiveDerivativeExchangeRpc.OrderbooksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Orderbooks, null, options, request);
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbooksResponse> OrderbooksAsync(global::InjectiveDerivativeExchangeRpc.OrderbooksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbooksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbooksResponse> OrderbooksAsync(global::InjectiveDerivativeExchangeRpc.OrderbooksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Orderbooks, null, options, request);
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response OrderbooksV2(global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbooksV2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response OrderbooksV2(global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderbooksV2, null, options, request);
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response> OrderbooksV2Async(global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderbooksV2Async(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orderbooks gets the Orderbooks of requested derivative markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response> OrderbooksV2Async(global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderbooksV2, null, options, request);
      }
      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse> StreamOrderbook(global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamOrderbook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse> StreamOrderbook(global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamOrderbook, null, options, request);
      }
      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response> StreamOrderbookV2(global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamOrderbookV2(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream live snapshot updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response> StreamOrderbookV2(global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamOrderbookV2, null, options, request);
      }
      /// <summary>
      /// Stream live level updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse> StreamOrderbookUpdate(global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamOrderbookUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream live level updates of selected derivative market orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse> StreamOrderbookUpdate(global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamOrderbookUpdate, null, options, request);
      }
      /// <summary>
      /// DerivativeLimitOrders gets the limit orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrdersResponse Orders(global::InjectiveDerivativeExchangeRpc.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Orders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DerivativeLimitOrders gets the limit orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrdersResponse Orders(global::InjectiveDerivativeExchangeRpc.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Orders, null, options, request);
      }
      /// <summary>
      /// DerivativeLimitOrders gets the limit orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrdersResponse> OrdersAsync(global::InjectiveDerivativeExchangeRpc.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DerivativeLimitOrders gets the limit orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrdersResponse> OrdersAsync(global::InjectiveDerivativeExchangeRpc.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Orders, null, options, request);
      }
      /// <summary>
      /// Positions gets the positions for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.PositionsResponse Positions(global::InjectiveDerivativeExchangeRpc.PositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Positions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Positions gets the positions for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.PositionsResponse Positions(global::InjectiveDerivativeExchangeRpc.PositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Positions, null, options, request);
      }
      /// <summary>
      /// Positions gets the positions for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.PositionsResponse> PositionsAsync(global::InjectiveDerivativeExchangeRpc.PositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Positions gets the positions for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.PositionsResponse> PositionsAsync(global::InjectiveDerivativeExchangeRpc.PositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Positions, null, options, request);
      }
      /// <summary>
      /// LiquidablePositions gets all the liquidable positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse LiquidablePositions(global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LiquidablePositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LiquidablePositions gets all the liquidable positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse LiquidablePositions(global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LiquidablePositions, null, options, request);
      }
      /// <summary>
      /// LiquidablePositions gets all the liquidable positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse> LiquidablePositionsAsync(global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LiquidablePositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LiquidablePositions gets all the liquidable positions.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse> LiquidablePositionsAsync(global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LiquidablePositions, null, options, request);
      }
      /// <summary>
      /// FundingPayments gets the funding payments for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse FundingPayments(global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundingPayments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundingPayments gets the funding payments for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse FundingPayments(global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FundingPayments, null, options, request);
      }
      /// <summary>
      /// FundingPayments gets the funding payments for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse> FundingPaymentsAsync(global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundingPaymentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundingPayments gets the funding payments for a trader.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse> FundingPaymentsAsync(global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FundingPayments, null, options, request);
      }
      /// <summary>
      /// FundingRates gets the historical funding rates for a market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.FundingRatesResponse FundingRates(global::InjectiveDerivativeExchangeRpc.FundingRatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundingRates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundingRates gets the historical funding rates for a market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.FundingRatesResponse FundingRates(global::InjectiveDerivativeExchangeRpc.FundingRatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FundingRates, null, options, request);
      }
      /// <summary>
      /// FundingRates gets the historical funding rates for a market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.FundingRatesResponse> FundingRatesAsync(global::InjectiveDerivativeExchangeRpc.FundingRatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundingRatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundingRates gets the historical funding rates for a market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.FundingRatesResponse> FundingRatesAsync(global::InjectiveDerivativeExchangeRpc.FundingRatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FundingRates, null, options, request);
      }
      /// <summary>
      /// StreamPositions streams derivatives position updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse> StreamPositions(global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamPositions streams derivatives position updates.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse> StreamPositions(global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamPositions, null, options, request);
      }
      /// <summary>
      /// StreamOrders streams updates to individual orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse> StreamOrders(global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamOrders streams updates to individual orders of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse> StreamOrders(global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamOrders, null, options, request);
      }
      /// <summary>
      /// Trades gets the trades of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.TradesResponse Trades(global::InjectiveDerivativeExchangeRpc.TradesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Trades(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Trades gets the trades of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.TradesResponse Trades(global::InjectiveDerivativeExchangeRpc.TradesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Trades, null, options, request);
      }
      /// <summary>
      /// Trades gets the trades of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.TradesResponse> TradesAsync(global::InjectiveDerivativeExchangeRpc.TradesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Trades gets the trades of a Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.TradesResponse> TradesAsync(global::InjectiveDerivativeExchangeRpc.TradesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Trades, null, options, request);
      }
      /// <summary>
      /// StreamTrades streams newly executed trades from Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamTradesResponse> StreamTrades(global::InjectiveDerivativeExchangeRpc.StreamTradesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamTrades(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamTrades streams newly executed trades from Derivative Market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamTradesResponse> StreamTrades(global::InjectiveDerivativeExchangeRpc.StreamTradesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamTrades, null, options, request);
      }
      /// <summary>
      /// SubaccountOrdersList lists orders posted from this subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse SubaccountOrdersList(global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrdersList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountOrdersList lists orders posted from this subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse SubaccountOrdersList(global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountOrdersList, null, options, request);
      }
      /// <summary>
      /// SubaccountOrdersList lists orders posted from this subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse> SubaccountOrdersListAsync(global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrdersListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountOrdersList lists orders posted from this subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse> SubaccountOrdersListAsync(global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountOrdersList, null, options, request);
      }
      /// <summary>
      /// SubaccountTradesList gets a list of derivatives trades executed by this
      /// subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse SubaccountTradesList(global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTradesList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountTradesList gets a list of derivatives trades executed by this
      /// subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse SubaccountTradesList(global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountTradesList, null, options, request);
      }
      /// <summary>
      /// SubaccountTradesList gets a list of derivatives trades executed by this
      /// subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse> SubaccountTradesListAsync(global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTradesListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountTradesList gets a list of derivatives trades executed by this
      /// subaccount.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse> SubaccountTradesListAsync(global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountTradesList, null, options, request);
      }
      /// <summary>
      /// Lists history orders posted from a subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse OrdersHistory(global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrdersHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists history orders posted from a subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse OrdersHistory(global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrdersHistory, null, options, request);
      }
      /// <summary>
      /// Lists history orders posted from a subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse> OrdersHistoryAsync(global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrdersHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists history orders posted from a subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse> OrdersHistoryAsync(global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrdersHistory, null, options, request);
      }
      /// <summary>
      /// Stream updates to historical orders of a derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse> StreamOrdersHistory(global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamOrdersHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Stream updates to historical orders of a derivative Market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse> StreamOrdersHistory(global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamOrdersHistory, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveDerivativeExchangeRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveDerivativeExchangeRPCClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(InjectiveDerivativeExchangeRPCBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Markets, serviceImpl.Markets)
          .AddMethod(__Method_Market, serviceImpl.Market)
          .AddMethod(__Method_StreamMarket, serviceImpl.StreamMarket)
          .AddMethod(__Method_BinaryOptionsMarkets, serviceImpl.BinaryOptionsMarkets)
          .AddMethod(__Method_BinaryOptionsMarket, serviceImpl.BinaryOptionsMarket)
          .AddMethod(__Method_Orderbook, serviceImpl.Orderbook)
          .AddMethod(__Method_OrderbookV2, serviceImpl.OrderbookV2)
          .AddMethod(__Method_Orderbooks, serviceImpl.Orderbooks)
          .AddMethod(__Method_OrderbooksV2, serviceImpl.OrderbooksV2)
          .AddMethod(__Method_StreamOrderbook, serviceImpl.StreamOrderbook)
          .AddMethod(__Method_StreamOrderbookV2, serviceImpl.StreamOrderbookV2)
          .AddMethod(__Method_StreamOrderbookUpdate, serviceImpl.StreamOrderbookUpdate)
          .AddMethod(__Method_Orders, serviceImpl.Orders)
          .AddMethod(__Method_Positions, serviceImpl.Positions)
          .AddMethod(__Method_LiquidablePositions, serviceImpl.LiquidablePositions)
          .AddMethod(__Method_FundingPayments, serviceImpl.FundingPayments)
          .AddMethod(__Method_FundingRates, serviceImpl.FundingRates)
          .AddMethod(__Method_StreamPositions, serviceImpl.StreamPositions)
          .AddMethod(__Method_StreamOrders, serviceImpl.StreamOrders)
          .AddMethod(__Method_Trades, serviceImpl.Trades)
          .AddMethod(__Method_StreamTrades, serviceImpl.StreamTrades)
          .AddMethod(__Method_SubaccountOrdersList, serviceImpl.SubaccountOrdersList)
          .AddMethod(__Method_SubaccountTradesList, serviceImpl.SubaccountTradesList)
          .AddMethod(__Method_OrdersHistory, serviceImpl.OrdersHistory)
          .AddMethod(__Method_StreamOrdersHistory, serviceImpl.StreamOrdersHistory).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InjectiveDerivativeExchangeRPCBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Markets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.MarketsRequest, global::InjectiveDerivativeExchangeRpc.MarketsResponse>(serviceImpl.Markets));
      serviceBinder.AddMethod(__Method_Market, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.MarketRequest, global::InjectiveDerivativeExchangeRpc.MarketResponse>(serviceImpl.Market));
      serviceBinder.AddMethod(__Method_StreamMarket, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamMarketRequest, global::InjectiveDerivativeExchangeRpc.StreamMarketResponse>(serviceImpl.StreamMarket));
      serviceBinder.AddMethod(__Method_BinaryOptionsMarkets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketsResponse>(serviceImpl.BinaryOptionsMarkets));
      serviceBinder.AddMethod(__Method_BinaryOptionsMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketRequest, global::InjectiveDerivativeExchangeRpc.BinaryOptionsMarketResponse>(serviceImpl.BinaryOptionsMarket));
      serviceBinder.AddMethod(__Method_Orderbook, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrderbookRequest, global::InjectiveDerivativeExchangeRpc.OrderbookResponse>(serviceImpl.Orderbook));
      serviceBinder.AddMethod(__Method_OrderbookV2, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrderbookV2Request, global::InjectiveDerivativeExchangeRpc.OrderbookV2Response>(serviceImpl.OrderbookV2));
      serviceBinder.AddMethod(__Method_Orderbooks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrderbooksRequest, global::InjectiveDerivativeExchangeRpc.OrderbooksResponse>(serviceImpl.Orderbooks));
      serviceBinder.AddMethod(__Method_OrderbooksV2, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrderbooksV2Request, global::InjectiveDerivativeExchangeRpc.OrderbooksV2Response>(serviceImpl.OrderbooksV2));
      serviceBinder.AddMethod(__Method_StreamOrderbook, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamOrderbookRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookResponse>(serviceImpl.StreamOrderbook));
      serviceBinder.AddMethod(__Method_StreamOrderbookV2, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Request, global::InjectiveDerivativeExchangeRpc.StreamOrderbookV2Response>(serviceImpl.StreamOrderbookV2));
      serviceBinder.AddMethod(__Method_StreamOrderbookUpdate, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateRequest, global::InjectiveDerivativeExchangeRpc.StreamOrderbookUpdateResponse>(serviceImpl.StreamOrderbookUpdate));
      serviceBinder.AddMethod(__Method_Orders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrdersRequest, global::InjectiveDerivativeExchangeRpc.OrdersResponse>(serviceImpl.Orders));
      serviceBinder.AddMethod(__Method_Positions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.PositionsRequest, global::InjectiveDerivativeExchangeRpc.PositionsResponse>(serviceImpl.Positions));
      serviceBinder.AddMethod(__Method_LiquidablePositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.LiquidablePositionsRequest, global::InjectiveDerivativeExchangeRpc.LiquidablePositionsResponse>(serviceImpl.LiquidablePositions));
      serviceBinder.AddMethod(__Method_FundingPayments, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.FundingPaymentsRequest, global::InjectiveDerivativeExchangeRpc.FundingPaymentsResponse>(serviceImpl.FundingPayments));
      serviceBinder.AddMethod(__Method_FundingRates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.FundingRatesRequest, global::InjectiveDerivativeExchangeRpc.FundingRatesResponse>(serviceImpl.FundingRates));
      serviceBinder.AddMethod(__Method_StreamPositions, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamPositionsRequest, global::InjectiveDerivativeExchangeRpc.StreamPositionsResponse>(serviceImpl.StreamPositions));
      serviceBinder.AddMethod(__Method_StreamOrders, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamOrdersRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersResponse>(serviceImpl.StreamOrders));
      serviceBinder.AddMethod(__Method_Trades, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.TradesRequest, global::InjectiveDerivativeExchangeRpc.TradesResponse>(serviceImpl.Trades));
      serviceBinder.AddMethod(__Method_StreamTrades, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamTradesRequest, global::InjectiveDerivativeExchangeRpc.StreamTradesResponse>(serviceImpl.StreamTrades));
      serviceBinder.AddMethod(__Method_SubaccountOrdersList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountOrdersListResponse>(serviceImpl.SubaccountOrdersList));
      serviceBinder.AddMethod(__Method_SubaccountTradesList, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.SubaccountTradesListRequest, global::InjectiveDerivativeExchangeRpc.SubaccountTradesListResponse>(serviceImpl.SubaccountTradesList));
      serviceBinder.AddMethod(__Method_OrdersHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveDerivativeExchangeRpc.OrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.OrdersHistoryResponse>(serviceImpl.OrdersHistory));
      serviceBinder.AddMethod(__Method_StreamOrdersHistory, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryRequest, global::InjectiveDerivativeExchangeRpc.StreamOrdersHistoryResponse>(serviceImpl.StreamOrdersHistory));
    }

  }
}
#endregion

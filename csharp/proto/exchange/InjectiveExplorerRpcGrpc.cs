// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: exchange/injective_explorer_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveExplorerRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveExplorerRpc {
  /// <summary>
  /// ExplorerAPI implements explorer data API for e.g. Blockchain Explorer
  /// </summary>
  public static partial class InjectiveExplorerRPC
  {
    static readonly string __ServiceName = "injective_explorer_rpc.InjectiveExplorerRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetAccountTxsRequest> __Marshaller_injective_explorer_rpc_GetAccountTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetAccountTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetAccountTxsResponse> __Marshaller_injective_explorer_rpc_GetAccountTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetAccountTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetContractTxsRequest> __Marshaller_injective_explorer_rpc_GetContractTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetContractTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetContractTxsResponse> __Marshaller_injective_explorer_rpc_GetContractTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetContractTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetBlocksRequest> __Marshaller_injective_explorer_rpc_GetBlocksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetBlocksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetBlocksResponse> __Marshaller_injective_explorer_rpc_GetBlocksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetBlocksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetBlockRequest> __Marshaller_injective_explorer_rpc_GetBlockRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetBlockRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetBlockResponse> __Marshaller_injective_explorer_rpc_GetBlockResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetBlockResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorsRequest> __Marshaller_injective_explorer_rpc_GetValidatorsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorsResponse> __Marshaller_injective_explorer_rpc_GetValidatorsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorRequest> __Marshaller_injective_explorer_rpc_GetValidatorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorResponse> __Marshaller_injective_explorer_rpc_GetValidatorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorUptimeRequest> __Marshaller_injective_explorer_rpc_GetValidatorUptimeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorUptimeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetValidatorUptimeResponse> __Marshaller_injective_explorer_rpc_GetValidatorUptimeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetValidatorUptimeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetTxsRequest> __Marshaller_injective_explorer_rpc_GetTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetTxsResponse> __Marshaller_injective_explorer_rpc_GetTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetTxByTxHashRequest> __Marshaller_injective_explorer_rpc_GetTxByTxHashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetTxByTxHashRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetTxByTxHashResponse> __Marshaller_injective_explorer_rpc_GetTxByTxHashResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetTxByTxHashResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest> __Marshaller_injective_explorer_rpc_GetPeggyDepositTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse> __Marshaller_injective_explorer_rpc_GetPeggyDepositTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest> __Marshaller_injective_explorer_rpc_GetPeggyWithdrawalTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse> __Marshaller_injective_explorer_rpc_GetPeggyWithdrawalTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetIBCTransferTxsRequest> __Marshaller_injective_explorer_rpc_GetIBCTransferTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetIBCTransferTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetIBCTransferTxsResponse> __Marshaller_injective_explorer_rpc_GetIBCTransferTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetIBCTransferTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmCodesRequest> __Marshaller_injective_explorer_rpc_GetWasmCodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmCodesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmCodesResponse> __Marshaller_injective_explorer_rpc_GetWasmCodesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmCodesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmCodeByIDRequest> __Marshaller_injective_explorer_rpc_GetWasmCodeByIDRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmCodeByIDRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmCodeByIDResponse> __Marshaller_injective_explorer_rpc_GetWasmCodeByIDResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmCodeByIDResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmContractsRequest> __Marshaller_injective_explorer_rpc_GetWasmContractsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmContractsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmContractsResponse> __Marshaller_injective_explorer_rpc_GetWasmContractsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmContractsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmContractByAddressRequest> __Marshaller_injective_explorer_rpc_GetWasmContractByAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmContractByAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetWasmContractByAddressResponse> __Marshaller_injective_explorer_rpc_GetWasmContractByAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetWasmContractByAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetCw20BalanceRequest> __Marshaller_injective_explorer_rpc_GetCw20BalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetCw20BalanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.GetCw20BalanceResponse> __Marshaller_injective_explorer_rpc_GetCw20BalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.GetCw20BalanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.RelayersRequest> __Marshaller_injective_explorer_rpc_RelayersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.RelayersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.RelayersResponse> __Marshaller_injective_explorer_rpc_RelayersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.RelayersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.StreamTxsRequest> __Marshaller_injective_explorer_rpc_StreamTxsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.StreamTxsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.StreamTxsResponse> __Marshaller_injective_explorer_rpc_StreamTxsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.StreamTxsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.StreamBlocksRequest> __Marshaller_injective_explorer_rpc_StreamBlocksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.StreamBlocksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExplorerRpc.StreamBlocksResponse> __Marshaller_injective_explorer_rpc_StreamBlocksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExplorerRpc.StreamBlocksResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetAccountTxsRequest, global::InjectiveExplorerRpc.GetAccountTxsResponse> __Method_GetAccountTxs = new grpc::Method<global::InjectiveExplorerRpc.GetAccountTxsRequest, global::InjectiveExplorerRpc.GetAccountTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAccountTxs",
        __Marshaller_injective_explorer_rpc_GetAccountTxsRequest,
        __Marshaller_injective_explorer_rpc_GetAccountTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetContractTxsRequest, global::InjectiveExplorerRpc.GetContractTxsResponse> __Method_GetContractTxs = new grpc::Method<global::InjectiveExplorerRpc.GetContractTxsRequest, global::InjectiveExplorerRpc.GetContractTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetContractTxs",
        __Marshaller_injective_explorer_rpc_GetContractTxsRequest,
        __Marshaller_injective_explorer_rpc_GetContractTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetBlocksRequest, global::InjectiveExplorerRpc.GetBlocksResponse> __Method_GetBlocks = new grpc::Method<global::InjectiveExplorerRpc.GetBlocksRequest, global::InjectiveExplorerRpc.GetBlocksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlocks",
        __Marshaller_injective_explorer_rpc_GetBlocksRequest,
        __Marshaller_injective_explorer_rpc_GetBlocksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetBlockRequest, global::InjectiveExplorerRpc.GetBlockResponse> __Method_GetBlock = new grpc::Method<global::InjectiveExplorerRpc.GetBlockRequest, global::InjectiveExplorerRpc.GetBlockResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlock",
        __Marshaller_injective_explorer_rpc_GetBlockRequest,
        __Marshaller_injective_explorer_rpc_GetBlockResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetValidatorsRequest, global::InjectiveExplorerRpc.GetValidatorsResponse> __Method_GetValidators = new grpc::Method<global::InjectiveExplorerRpc.GetValidatorsRequest, global::InjectiveExplorerRpc.GetValidatorsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetValidators",
        __Marshaller_injective_explorer_rpc_GetValidatorsRequest,
        __Marshaller_injective_explorer_rpc_GetValidatorsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetValidatorRequest, global::InjectiveExplorerRpc.GetValidatorResponse> __Method_GetValidator = new grpc::Method<global::InjectiveExplorerRpc.GetValidatorRequest, global::InjectiveExplorerRpc.GetValidatorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetValidator",
        __Marshaller_injective_explorer_rpc_GetValidatorRequest,
        __Marshaller_injective_explorer_rpc_GetValidatorResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetValidatorUptimeRequest, global::InjectiveExplorerRpc.GetValidatorUptimeResponse> __Method_GetValidatorUptime = new grpc::Method<global::InjectiveExplorerRpc.GetValidatorUptimeRequest, global::InjectiveExplorerRpc.GetValidatorUptimeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetValidatorUptime",
        __Marshaller_injective_explorer_rpc_GetValidatorUptimeRequest,
        __Marshaller_injective_explorer_rpc_GetValidatorUptimeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetTxsRequest, global::InjectiveExplorerRpc.GetTxsResponse> __Method_GetTxs = new grpc::Method<global::InjectiveExplorerRpc.GetTxsRequest, global::InjectiveExplorerRpc.GetTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTxs",
        __Marshaller_injective_explorer_rpc_GetTxsRequest,
        __Marshaller_injective_explorer_rpc_GetTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetTxByTxHashRequest, global::InjectiveExplorerRpc.GetTxByTxHashResponse> __Method_GetTxByTxHash = new grpc::Method<global::InjectiveExplorerRpc.GetTxByTxHashRequest, global::InjectiveExplorerRpc.GetTxByTxHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTxByTxHash",
        __Marshaller_injective_explorer_rpc_GetTxByTxHashRequest,
        __Marshaller_injective_explorer_rpc_GetTxByTxHashResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest, global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse> __Method_GetPeggyDepositTxs = new grpc::Method<global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest, global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPeggyDepositTxs",
        __Marshaller_injective_explorer_rpc_GetPeggyDepositTxsRequest,
        __Marshaller_injective_explorer_rpc_GetPeggyDepositTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest, global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse> __Method_GetPeggyWithdrawalTxs = new grpc::Method<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest, global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPeggyWithdrawalTxs",
        __Marshaller_injective_explorer_rpc_GetPeggyWithdrawalTxsRequest,
        __Marshaller_injective_explorer_rpc_GetPeggyWithdrawalTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetIBCTransferTxsRequest, global::InjectiveExplorerRpc.GetIBCTransferTxsResponse> __Method_GetIBCTransferTxs = new grpc::Method<global::InjectiveExplorerRpc.GetIBCTransferTxsRequest, global::InjectiveExplorerRpc.GetIBCTransferTxsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIBCTransferTxs",
        __Marshaller_injective_explorer_rpc_GetIBCTransferTxsRequest,
        __Marshaller_injective_explorer_rpc_GetIBCTransferTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetWasmCodesRequest, global::InjectiveExplorerRpc.GetWasmCodesResponse> __Method_GetWasmCodes = new grpc::Method<global::InjectiveExplorerRpc.GetWasmCodesRequest, global::InjectiveExplorerRpc.GetWasmCodesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWasmCodes",
        __Marshaller_injective_explorer_rpc_GetWasmCodesRequest,
        __Marshaller_injective_explorer_rpc_GetWasmCodesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetWasmCodeByIDRequest, global::InjectiveExplorerRpc.GetWasmCodeByIDResponse> __Method_GetWasmCodeByID = new grpc::Method<global::InjectiveExplorerRpc.GetWasmCodeByIDRequest, global::InjectiveExplorerRpc.GetWasmCodeByIDResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWasmCodeByID",
        __Marshaller_injective_explorer_rpc_GetWasmCodeByIDRequest,
        __Marshaller_injective_explorer_rpc_GetWasmCodeByIDResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetWasmContractsRequest, global::InjectiveExplorerRpc.GetWasmContractsResponse> __Method_GetWasmContracts = new grpc::Method<global::InjectiveExplorerRpc.GetWasmContractsRequest, global::InjectiveExplorerRpc.GetWasmContractsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWasmContracts",
        __Marshaller_injective_explorer_rpc_GetWasmContractsRequest,
        __Marshaller_injective_explorer_rpc_GetWasmContractsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetWasmContractByAddressRequest, global::InjectiveExplorerRpc.GetWasmContractByAddressResponse> __Method_GetWasmContractByAddress = new grpc::Method<global::InjectiveExplorerRpc.GetWasmContractByAddressRequest, global::InjectiveExplorerRpc.GetWasmContractByAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWasmContractByAddress",
        __Marshaller_injective_explorer_rpc_GetWasmContractByAddressRequest,
        __Marshaller_injective_explorer_rpc_GetWasmContractByAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.GetCw20BalanceRequest, global::InjectiveExplorerRpc.GetCw20BalanceResponse> __Method_GetCw20Balance = new grpc::Method<global::InjectiveExplorerRpc.GetCw20BalanceRequest, global::InjectiveExplorerRpc.GetCw20BalanceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCw20Balance",
        __Marshaller_injective_explorer_rpc_GetCw20BalanceRequest,
        __Marshaller_injective_explorer_rpc_GetCw20BalanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.RelayersRequest, global::InjectiveExplorerRpc.RelayersResponse> __Method_Relayers = new grpc::Method<global::InjectiveExplorerRpc.RelayersRequest, global::InjectiveExplorerRpc.RelayersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Relayers",
        __Marshaller_injective_explorer_rpc_RelayersRequest,
        __Marshaller_injective_explorer_rpc_RelayersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.StreamTxsRequest, global::InjectiveExplorerRpc.StreamTxsResponse> __Method_StreamTxs = new grpc::Method<global::InjectiveExplorerRpc.StreamTxsRequest, global::InjectiveExplorerRpc.StreamTxsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamTxs",
        __Marshaller_injective_explorer_rpc_StreamTxsRequest,
        __Marshaller_injective_explorer_rpc_StreamTxsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExplorerRpc.StreamBlocksRequest, global::InjectiveExplorerRpc.StreamBlocksResponse> __Method_StreamBlocks = new grpc::Method<global::InjectiveExplorerRpc.StreamBlocksRequest, global::InjectiveExplorerRpc.StreamBlocksResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamBlocks",
        __Marshaller_injective_explorer_rpc_StreamBlocksRequest,
        __Marshaller_injective_explorer_rpc_StreamBlocksResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveExplorerRpc.InjectiveExplorerRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InjectiveExplorerRPC</summary>
    [grpc::BindServiceMethod(typeof(InjectiveExplorerRPC), "BindService")]
    public abstract partial class InjectiveExplorerRPCBase
    {
      /// <summary>
      /// GetAccountTxs returns tranctions involving in an account based upon params.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetAccountTxsResponse> GetAccountTxs(global::InjectiveExplorerRpc.GetAccountTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetContractTxs returns contract-related transactions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetContractTxsResponse> GetContractTxs(global::InjectiveExplorerRpc.GetContractTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetBlocks returns blocks based upon the request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetBlocksResponse> GetBlocks(global::InjectiveExplorerRpc.GetBlocksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetBlock returns block based upon the height or hash
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetBlockResponse> GetBlock(global::InjectiveExplorerRpc.GetBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetValidators returns validators on the active chain
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetValidatorsResponse> GetValidators(global::InjectiveExplorerRpc.GetValidatorsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetValidator returns validator information on the active chain
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetValidatorResponse> GetValidator(global::InjectiveExplorerRpc.GetValidatorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetValidatorUptime returns validator uptime information on the active chain
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetValidatorUptimeResponse> GetValidatorUptime(global::InjectiveExplorerRpc.GetValidatorUptimeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetTxsResponse> GetTxs(global::InjectiveExplorerRpc.GetTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetTxByTxHash returns certain transaction information by its tx hash.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetTxByTxHashResponse> GetTxByTxHash(global::InjectiveExplorerRpc.GetTxByTxHashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse> GetPeggyDepositTxs(global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      /// the request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse> GetPeggyWithdrawalTxs(global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetIBCTransferTxs returns the ibc transfer transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetIBCTransferTxsResponse> GetIBCTransferTxs(global::InjectiveExplorerRpc.GetIBCTransferTxsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetWasmCodes lists all stored code
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetWasmCodesResponse> GetWasmCodes(global::InjectiveExplorerRpc.GetWasmCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetWasmCodeById list cosmwasm code infor by ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetWasmCodeByIDResponse> GetWasmCodeByID(global::InjectiveExplorerRpc.GetWasmCodeByIDRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetWasmContracts lists all contracts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetWasmContractsResponse> GetWasmContracts(global::InjectiveExplorerRpc.GetWasmContractsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetWasmContractByAddress list cosmwasm contract info by its address
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetWasmContractByAddressResponse> GetWasmContractByAddress(global::InjectiveExplorerRpc.GetWasmContractByAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetCw20Balance lists all cw20 balances of an injective account
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.GetCw20BalanceResponse> GetCw20Balance(global::InjectiveExplorerRpc.GetCw20BalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Request relayers infos by marketIDs. If no ids are provided, all market with
      /// associated relayers are returned
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveExplorerRpc.RelayersResponse> Relayers(global::InjectiveExplorerRpc.RelayersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamTxs(global::InjectiveExplorerRpc.StreamTxsRequest request, grpc::IServerStreamWriter<global::InjectiveExplorerRpc.StreamTxsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamBlocks returns the latest blocks
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamBlocks(global::InjectiveExplorerRpc.StreamBlocksRequest request, grpc::IServerStreamWriter<global::InjectiveExplorerRpc.StreamBlocksResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InjectiveExplorerRPC</summary>
    public partial class InjectiveExplorerRPCClient : grpc::ClientBase<InjectiveExplorerRPCClient>
    {
      /// <summary>Creates a new client for InjectiveExplorerRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveExplorerRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveExplorerRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveExplorerRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveExplorerRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveExplorerRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetAccountTxs returns tranctions involving in an account based upon params.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetAccountTxsResponse GetAccountTxs(global::InjectiveExplorerRpc.GetAccountTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAccountTxs returns tranctions involving in an account based upon params.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetAccountTxsResponse GetAccountTxs(global::InjectiveExplorerRpc.GetAccountTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAccountTxs, null, options, request);
      }
      /// <summary>
      /// GetAccountTxs returns tranctions involving in an account based upon params.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetAccountTxsResponse> GetAccountTxsAsync(global::InjectiveExplorerRpc.GetAccountTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAccountTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetAccountTxs returns tranctions involving in an account based upon params.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetAccountTxsResponse> GetAccountTxsAsync(global::InjectiveExplorerRpc.GetAccountTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAccountTxs, null, options, request);
      }
      /// <summary>
      /// GetContractTxs returns contract-related transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetContractTxsResponse GetContractTxs(global::InjectiveExplorerRpc.GetContractTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetContractTxs returns contract-related transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetContractTxsResponse GetContractTxs(global::InjectiveExplorerRpc.GetContractTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetContractTxs, null, options, request);
      }
      /// <summary>
      /// GetContractTxs returns contract-related transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetContractTxsResponse> GetContractTxsAsync(global::InjectiveExplorerRpc.GetContractTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetContractTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetContractTxs returns contract-related transactions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetContractTxsResponse> GetContractTxsAsync(global::InjectiveExplorerRpc.GetContractTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetContractTxs, null, options, request);
      }
      /// <summary>
      /// GetBlocks returns blocks based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetBlocksResponse GetBlocks(global::InjectiveExplorerRpc.GetBlocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBlocks returns blocks based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetBlocksResponse GetBlocks(global::InjectiveExplorerRpc.GetBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlocks, null, options, request);
      }
      /// <summary>
      /// GetBlocks returns blocks based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetBlocksResponse> GetBlocksAsync(global::InjectiveExplorerRpc.GetBlocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlocksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBlocks returns blocks based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetBlocksResponse> GetBlocksAsync(global::InjectiveExplorerRpc.GetBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlocks, null, options, request);
      }
      /// <summary>
      /// GetBlock returns block based upon the height or hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetBlockResponse GetBlock(global::InjectiveExplorerRpc.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBlock returns block based upon the height or hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetBlockResponse GetBlock(global::InjectiveExplorerRpc.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// GetBlock returns block based upon the height or hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetBlockResponse> GetBlockAsync(global::InjectiveExplorerRpc.GetBlockRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBlock returns block based upon the height or hash
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetBlockResponse> GetBlockAsync(global::InjectiveExplorerRpc.GetBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlock, null, options, request);
      }
      /// <summary>
      /// GetValidators returns validators on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorsResponse GetValidators(global::InjectiveExplorerRpc.GetValidatorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidators(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidators returns validators on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorsResponse GetValidators(global::InjectiveExplorerRpc.GetValidatorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetValidators, null, options, request);
      }
      /// <summary>
      /// GetValidators returns validators on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorsResponse> GetValidatorsAsync(global::InjectiveExplorerRpc.GetValidatorsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidatorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidators returns validators on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorsResponse> GetValidatorsAsync(global::InjectiveExplorerRpc.GetValidatorsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetValidators, null, options, request);
      }
      /// <summary>
      /// GetValidator returns validator information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorResponse GetValidator(global::InjectiveExplorerRpc.GetValidatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidator returns validator information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorResponse GetValidator(global::InjectiveExplorerRpc.GetValidatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetValidator, null, options, request);
      }
      /// <summary>
      /// GetValidator returns validator information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorResponse> GetValidatorAsync(global::InjectiveExplorerRpc.GetValidatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidatorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidator returns validator information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorResponse> GetValidatorAsync(global::InjectiveExplorerRpc.GetValidatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetValidator, null, options, request);
      }
      /// <summary>
      /// GetValidatorUptime returns validator uptime information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorUptimeResponse GetValidatorUptime(global::InjectiveExplorerRpc.GetValidatorUptimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidatorUptime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidatorUptime returns validator uptime information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetValidatorUptimeResponse GetValidatorUptime(global::InjectiveExplorerRpc.GetValidatorUptimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetValidatorUptime, null, options, request);
      }
      /// <summary>
      /// GetValidatorUptime returns validator uptime information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorUptimeResponse> GetValidatorUptimeAsync(global::InjectiveExplorerRpc.GetValidatorUptimeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetValidatorUptimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetValidatorUptime returns validator uptime information on the active chain
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetValidatorUptimeResponse> GetValidatorUptimeAsync(global::InjectiveExplorerRpc.GetValidatorUptimeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetValidatorUptime, null, options, request);
      }
      /// <summary>
      /// GetTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetTxsResponse GetTxs(global::InjectiveExplorerRpc.GetTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetTxsResponse GetTxs(global::InjectiveExplorerRpc.GetTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTxs, null, options, request);
      }
      /// <summary>
      /// GetTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetTxsResponse> GetTxsAsync(global::InjectiveExplorerRpc.GetTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetTxsResponse> GetTxsAsync(global::InjectiveExplorerRpc.GetTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTxs, null, options, request);
      }
      /// <summary>
      /// GetTxByTxHash returns certain transaction information by its tx hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetTxByTxHashResponse GetTxByTxHash(global::InjectiveExplorerRpc.GetTxByTxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxByTxHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTxByTxHash returns certain transaction information by its tx hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetTxByTxHashResponse GetTxByTxHash(global::InjectiveExplorerRpc.GetTxByTxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTxByTxHash, null, options, request);
      }
      /// <summary>
      /// GetTxByTxHash returns certain transaction information by its tx hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetTxByTxHashResponse> GetTxByTxHashAsync(global::InjectiveExplorerRpc.GetTxByTxHashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxByTxHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTxByTxHash returns certain transaction information by its tx hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetTxByTxHashResponse> GetTxByTxHashAsync(global::InjectiveExplorerRpc.GetTxByTxHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTxByTxHash, null, options, request);
      }
      /// <summary>
      /// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse GetPeggyDepositTxs(global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeggyDepositTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse GetPeggyDepositTxs(global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPeggyDepositTxs, null, options, request);
      }
      /// <summary>
      /// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse> GetPeggyDepositTxsAsync(global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeggyDepositTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPeggyDepositTxs returns the peggy deposit transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse> GetPeggyDepositTxsAsync(global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPeggyDepositTxs, null, options, request);
      }
      /// <summary>
      /// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      /// the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse GetPeggyWithdrawalTxs(global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeggyWithdrawalTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      /// the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse GetPeggyWithdrawalTxs(global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPeggyWithdrawalTxs, null, options, request);
      }
      /// <summary>
      /// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      /// the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse> GetPeggyWithdrawalTxsAsync(global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetPeggyWithdrawalTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetPeggyWithdrawalTxs returns the peggy withdrawal transactions based upon
      /// the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse> GetPeggyWithdrawalTxsAsync(global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPeggyWithdrawalTxs, null, options, request);
      }
      /// <summary>
      /// GetIBCTransferTxs returns the ibc transfer transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetIBCTransferTxsResponse GetIBCTransferTxs(global::InjectiveExplorerRpc.GetIBCTransferTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIBCTransferTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetIBCTransferTxs returns the ibc transfer transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetIBCTransferTxsResponse GetIBCTransferTxs(global::InjectiveExplorerRpc.GetIBCTransferTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIBCTransferTxs, null, options, request);
      }
      /// <summary>
      /// GetIBCTransferTxs returns the ibc transfer transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetIBCTransferTxsResponse> GetIBCTransferTxsAsync(global::InjectiveExplorerRpc.GetIBCTransferTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIBCTransferTxsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetIBCTransferTxs returns the ibc transfer transactions based upon the
      /// request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetIBCTransferTxsResponse> GetIBCTransferTxsAsync(global::InjectiveExplorerRpc.GetIBCTransferTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIBCTransferTxs, null, options, request);
      }
      /// <summary>
      /// GetWasmCodes lists all stored code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmCodesResponse GetWasmCodes(global::InjectiveExplorerRpc.GetWasmCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmCodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmCodes lists all stored code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmCodesResponse GetWasmCodes(global::InjectiveExplorerRpc.GetWasmCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWasmCodes, null, options, request);
      }
      /// <summary>
      /// GetWasmCodes lists all stored code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmCodesResponse> GetWasmCodesAsync(global::InjectiveExplorerRpc.GetWasmCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmCodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmCodes lists all stored code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmCodesResponse> GetWasmCodesAsync(global::InjectiveExplorerRpc.GetWasmCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWasmCodes, null, options, request);
      }
      /// <summary>
      /// GetWasmCodeById list cosmwasm code infor by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmCodeByIDResponse GetWasmCodeByID(global::InjectiveExplorerRpc.GetWasmCodeByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmCodeByID(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmCodeById list cosmwasm code infor by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmCodeByIDResponse GetWasmCodeByID(global::InjectiveExplorerRpc.GetWasmCodeByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWasmCodeByID, null, options, request);
      }
      /// <summary>
      /// GetWasmCodeById list cosmwasm code infor by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmCodeByIDResponse> GetWasmCodeByIDAsync(global::InjectiveExplorerRpc.GetWasmCodeByIDRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmCodeByIDAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmCodeById list cosmwasm code infor by ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmCodeByIDResponse> GetWasmCodeByIDAsync(global::InjectiveExplorerRpc.GetWasmCodeByIDRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWasmCodeByID, null, options, request);
      }
      /// <summary>
      /// GetWasmContracts lists all contracts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmContractsResponse GetWasmContracts(global::InjectiveExplorerRpc.GetWasmContractsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmContracts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmContracts lists all contracts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmContractsResponse GetWasmContracts(global::InjectiveExplorerRpc.GetWasmContractsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWasmContracts, null, options, request);
      }
      /// <summary>
      /// GetWasmContracts lists all contracts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmContractsResponse> GetWasmContractsAsync(global::InjectiveExplorerRpc.GetWasmContractsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmContractsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmContracts lists all contracts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmContractsResponse> GetWasmContractsAsync(global::InjectiveExplorerRpc.GetWasmContractsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWasmContracts, null, options, request);
      }
      /// <summary>
      /// GetWasmContractByAddress list cosmwasm contract info by its address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmContractByAddressResponse GetWasmContractByAddress(global::InjectiveExplorerRpc.GetWasmContractByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmContractByAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmContractByAddress list cosmwasm contract info by its address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetWasmContractByAddressResponse GetWasmContractByAddress(global::InjectiveExplorerRpc.GetWasmContractByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWasmContractByAddress, null, options, request);
      }
      /// <summary>
      /// GetWasmContractByAddress list cosmwasm contract info by its address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmContractByAddressResponse> GetWasmContractByAddressAsync(global::InjectiveExplorerRpc.GetWasmContractByAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWasmContractByAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWasmContractByAddress list cosmwasm contract info by its address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetWasmContractByAddressResponse> GetWasmContractByAddressAsync(global::InjectiveExplorerRpc.GetWasmContractByAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWasmContractByAddress, null, options, request);
      }
      /// <summary>
      /// GetCw20Balance lists all cw20 balances of an injective account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetCw20BalanceResponse GetCw20Balance(global::InjectiveExplorerRpc.GetCw20BalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCw20Balance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetCw20Balance lists all cw20 balances of an injective account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.GetCw20BalanceResponse GetCw20Balance(global::InjectiveExplorerRpc.GetCw20BalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCw20Balance, null, options, request);
      }
      /// <summary>
      /// GetCw20Balance lists all cw20 balances of an injective account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetCw20BalanceResponse> GetCw20BalanceAsync(global::InjectiveExplorerRpc.GetCw20BalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCw20BalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetCw20Balance lists all cw20 balances of an injective account
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.GetCw20BalanceResponse> GetCw20BalanceAsync(global::InjectiveExplorerRpc.GetCw20BalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCw20Balance, null, options, request);
      }
      /// <summary>
      /// Request relayers infos by marketIDs. If no ids are provided, all market with
      /// associated relayers are returned
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.RelayersResponse Relayers(global::InjectiveExplorerRpc.RelayersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Relayers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request relayers infos by marketIDs. If no ids are provided, all market with
      /// associated relayers are returned
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExplorerRpc.RelayersResponse Relayers(global::InjectiveExplorerRpc.RelayersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Relayers, null, options, request);
      }
      /// <summary>
      /// Request relayers infos by marketIDs. If no ids are provided, all market with
      /// associated relayers are returned
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.RelayersResponse> RelayersAsync(global::InjectiveExplorerRpc.RelayersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RelayersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Request relayers infos by marketIDs. If no ids are provided, all market with
      /// associated relayers are returned
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExplorerRpc.RelayersResponse> RelayersAsync(global::InjectiveExplorerRpc.RelayersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Relayers, null, options, request);
      }
      /// <summary>
      /// StreamTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveExplorerRpc.StreamTxsResponse> StreamTxs(global::InjectiveExplorerRpc.StreamTxsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamTxs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamTxs returns transactions based upon the request params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveExplorerRpc.StreamTxsResponse> StreamTxs(global::InjectiveExplorerRpc.StreamTxsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamTxs, null, options, request);
      }
      /// <summary>
      /// StreamBlocks returns the latest blocks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveExplorerRpc.StreamBlocksResponse> StreamBlocks(global::InjectiveExplorerRpc.StreamBlocksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamBlocks returns the latest blocks
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveExplorerRpc.StreamBlocksResponse> StreamBlocks(global::InjectiveExplorerRpc.StreamBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamBlocks, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveExplorerRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveExplorerRPCClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(InjectiveExplorerRPCBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAccountTxs, serviceImpl.GetAccountTxs)
          .AddMethod(__Method_GetContractTxs, serviceImpl.GetContractTxs)
          .AddMethod(__Method_GetBlocks, serviceImpl.GetBlocks)
          .AddMethod(__Method_GetBlock, serviceImpl.GetBlock)
          .AddMethod(__Method_GetValidators, serviceImpl.GetValidators)
          .AddMethod(__Method_GetValidator, serviceImpl.GetValidator)
          .AddMethod(__Method_GetValidatorUptime, serviceImpl.GetValidatorUptime)
          .AddMethod(__Method_GetTxs, serviceImpl.GetTxs)
          .AddMethod(__Method_GetTxByTxHash, serviceImpl.GetTxByTxHash)
          .AddMethod(__Method_GetPeggyDepositTxs, serviceImpl.GetPeggyDepositTxs)
          .AddMethod(__Method_GetPeggyWithdrawalTxs, serviceImpl.GetPeggyWithdrawalTxs)
          .AddMethod(__Method_GetIBCTransferTxs, serviceImpl.GetIBCTransferTxs)
          .AddMethod(__Method_GetWasmCodes, serviceImpl.GetWasmCodes)
          .AddMethod(__Method_GetWasmCodeByID, serviceImpl.GetWasmCodeByID)
          .AddMethod(__Method_GetWasmContracts, serviceImpl.GetWasmContracts)
          .AddMethod(__Method_GetWasmContractByAddress, serviceImpl.GetWasmContractByAddress)
          .AddMethod(__Method_GetCw20Balance, serviceImpl.GetCw20Balance)
          .AddMethod(__Method_Relayers, serviceImpl.Relayers)
          .AddMethod(__Method_StreamTxs, serviceImpl.StreamTxs)
          .AddMethod(__Method_StreamBlocks, serviceImpl.StreamBlocks).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InjectiveExplorerRPCBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAccountTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetAccountTxsRequest, global::InjectiveExplorerRpc.GetAccountTxsResponse>(serviceImpl.GetAccountTxs));
      serviceBinder.AddMethod(__Method_GetContractTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetContractTxsRequest, global::InjectiveExplorerRpc.GetContractTxsResponse>(serviceImpl.GetContractTxs));
      serviceBinder.AddMethod(__Method_GetBlocks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetBlocksRequest, global::InjectiveExplorerRpc.GetBlocksResponse>(serviceImpl.GetBlocks));
      serviceBinder.AddMethod(__Method_GetBlock, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetBlockRequest, global::InjectiveExplorerRpc.GetBlockResponse>(serviceImpl.GetBlock));
      serviceBinder.AddMethod(__Method_GetValidators, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetValidatorsRequest, global::InjectiveExplorerRpc.GetValidatorsResponse>(serviceImpl.GetValidators));
      serviceBinder.AddMethod(__Method_GetValidator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetValidatorRequest, global::InjectiveExplorerRpc.GetValidatorResponse>(serviceImpl.GetValidator));
      serviceBinder.AddMethod(__Method_GetValidatorUptime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetValidatorUptimeRequest, global::InjectiveExplorerRpc.GetValidatorUptimeResponse>(serviceImpl.GetValidatorUptime));
      serviceBinder.AddMethod(__Method_GetTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetTxsRequest, global::InjectiveExplorerRpc.GetTxsResponse>(serviceImpl.GetTxs));
      serviceBinder.AddMethod(__Method_GetTxByTxHash, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetTxByTxHashRequest, global::InjectiveExplorerRpc.GetTxByTxHashResponse>(serviceImpl.GetTxByTxHash));
      serviceBinder.AddMethod(__Method_GetPeggyDepositTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetPeggyDepositTxsRequest, global::InjectiveExplorerRpc.GetPeggyDepositTxsResponse>(serviceImpl.GetPeggyDepositTxs));
      serviceBinder.AddMethod(__Method_GetPeggyWithdrawalTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsRequest, global::InjectiveExplorerRpc.GetPeggyWithdrawalTxsResponse>(serviceImpl.GetPeggyWithdrawalTxs));
      serviceBinder.AddMethod(__Method_GetIBCTransferTxs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetIBCTransferTxsRequest, global::InjectiveExplorerRpc.GetIBCTransferTxsResponse>(serviceImpl.GetIBCTransferTxs));
      serviceBinder.AddMethod(__Method_GetWasmCodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetWasmCodesRequest, global::InjectiveExplorerRpc.GetWasmCodesResponse>(serviceImpl.GetWasmCodes));
      serviceBinder.AddMethod(__Method_GetWasmCodeByID, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetWasmCodeByIDRequest, global::InjectiveExplorerRpc.GetWasmCodeByIDResponse>(serviceImpl.GetWasmCodeByID));
      serviceBinder.AddMethod(__Method_GetWasmContracts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetWasmContractsRequest, global::InjectiveExplorerRpc.GetWasmContractsResponse>(serviceImpl.GetWasmContracts));
      serviceBinder.AddMethod(__Method_GetWasmContractByAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetWasmContractByAddressRequest, global::InjectiveExplorerRpc.GetWasmContractByAddressResponse>(serviceImpl.GetWasmContractByAddress));
      serviceBinder.AddMethod(__Method_GetCw20Balance, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.GetCw20BalanceRequest, global::InjectiveExplorerRpc.GetCw20BalanceResponse>(serviceImpl.GetCw20Balance));
      serviceBinder.AddMethod(__Method_Relayers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveExplorerRpc.RelayersRequest, global::InjectiveExplorerRpc.RelayersResponse>(serviceImpl.Relayers));
      serviceBinder.AddMethod(__Method_StreamTxs, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveExplorerRpc.StreamTxsRequest, global::InjectiveExplorerRpc.StreamTxsResponse>(serviceImpl.StreamTxs));
      serviceBinder.AddMethod(__Method_StreamBlocks, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveExplorerRpc.StreamBlocksRequest, global::InjectiveExplorerRpc.StreamBlocksResponse>(serviceImpl.StreamBlocks));
    }

  }
}
#endregion

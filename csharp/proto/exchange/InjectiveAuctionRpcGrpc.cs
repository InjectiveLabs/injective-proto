// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: exchange/injective_auction_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveAuctionRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveAuctionRpc {
  /// <summary>
  /// InjectiveAuctionRPC defines gRPC API of the Auction API.
  /// </summary>
  public static partial class InjectiveAuctionRPC
  {
    static readonly string __ServiceName = "injective_auction_rpc.InjectiveAuctionRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.AuctionRequest> __Marshaller_injective_auction_rpc_AuctionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.AuctionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.AuctionResponse> __Marshaller_injective_auction_rpc_AuctionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.AuctionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.AuctionsRequest> __Marshaller_injective_auction_rpc_AuctionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.AuctionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.AuctionsResponse> __Marshaller_injective_auction_rpc_AuctionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.AuctionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.StreamBidsRequest> __Marshaller_injective_auction_rpc_StreamBidsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.StreamBidsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAuctionRpc.StreamBidsResponse> __Marshaller_injective_auction_rpc_StreamBidsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAuctionRpc.StreamBidsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAuctionRpc.AuctionRequest, global::InjectiveAuctionRpc.AuctionResponse> __Method_AuctionEndpoint = new grpc::Method<global::InjectiveAuctionRpc.AuctionRequest, global::InjectiveAuctionRpc.AuctionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AuctionEndpoint",
        __Marshaller_injective_auction_rpc_AuctionRequest,
        __Marshaller_injective_auction_rpc_AuctionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAuctionRpc.AuctionsRequest, global::InjectiveAuctionRpc.AuctionsResponse> __Method_Auctions = new grpc::Method<global::InjectiveAuctionRpc.AuctionsRequest, global::InjectiveAuctionRpc.AuctionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Auctions",
        __Marshaller_injective_auction_rpc_AuctionsRequest,
        __Marshaller_injective_auction_rpc_AuctionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAuctionRpc.StreamBidsRequest, global::InjectiveAuctionRpc.StreamBidsResponse> __Method_StreamBids = new grpc::Method<global::InjectiveAuctionRpc.StreamBidsRequest, global::InjectiveAuctionRpc.StreamBidsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamBids",
        __Marshaller_injective_auction_rpc_StreamBidsRequest,
        __Marshaller_injective_auction_rpc_StreamBidsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveAuctionRpc.InjectiveAuctionRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of InjectiveAuctionRPC</summary>
    [grpc::BindServiceMethod(typeof(InjectiveAuctionRPC), "BindService")]
    public abstract partial class InjectiveAuctionRPCBase
    {
      /// <summary>
      /// Provide historical auction info for a given auction
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveAuctionRpc.AuctionResponse> AuctionEndpoint(global::InjectiveAuctionRpc.AuctionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Provide the historical auctions info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::InjectiveAuctionRpc.AuctionsResponse> Auctions(global::InjectiveAuctionRpc.AuctionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// StreamBids streams new bids of an auction.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task StreamBids(global::InjectiveAuctionRpc.StreamBidsRequest request, grpc::IServerStreamWriter<global::InjectiveAuctionRpc.StreamBidsResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for InjectiveAuctionRPC</summary>
    public partial class InjectiveAuctionRPCClient : grpc::ClientBase<InjectiveAuctionRPCClient>
    {
      /// <summary>Creates a new client for InjectiveAuctionRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveAuctionRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveAuctionRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveAuctionRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveAuctionRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveAuctionRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Provide historical auction info for a given auction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAuctionRpc.AuctionResponse AuctionEndpoint(global::InjectiveAuctionRpc.AuctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuctionEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide historical auction info for a given auction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAuctionRpc.AuctionResponse AuctionEndpoint(global::InjectiveAuctionRpc.AuctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AuctionEndpoint, null, options, request);
      }
      /// <summary>
      /// Provide historical auction info for a given auction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAuctionRpc.AuctionResponse> AuctionEndpointAsync(global::InjectiveAuctionRpc.AuctionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuctionEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide historical auction info for a given auction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAuctionRpc.AuctionResponse> AuctionEndpointAsync(global::InjectiveAuctionRpc.AuctionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AuctionEndpoint, null, options, request);
      }
      /// <summary>
      /// Provide the historical auctions info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAuctionRpc.AuctionsResponse Auctions(global::InjectiveAuctionRpc.AuctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Auctions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide the historical auctions info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAuctionRpc.AuctionsResponse Auctions(global::InjectiveAuctionRpc.AuctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Auctions, null, options, request);
      }
      /// <summary>
      /// Provide the historical auctions info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAuctionRpc.AuctionsResponse> AuctionsAsync(global::InjectiveAuctionRpc.AuctionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuctionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide the historical auctions info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAuctionRpc.AuctionsResponse> AuctionsAsync(global::InjectiveAuctionRpc.AuctionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Auctions, null, options, request);
      }
      /// <summary>
      /// StreamBids streams new bids of an auction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveAuctionRpc.StreamBidsResponse> StreamBids(global::InjectiveAuctionRpc.StreamBidsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamBids(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamBids streams new bids of an auction.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveAuctionRpc.StreamBidsResponse> StreamBids(global::InjectiveAuctionRpc.StreamBidsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamBids, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveAuctionRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveAuctionRPCClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(InjectiveAuctionRPCBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AuctionEndpoint, serviceImpl.AuctionEndpoint)
          .AddMethod(__Method_Auctions, serviceImpl.Auctions)
          .AddMethod(__Method_StreamBids, serviceImpl.StreamBids).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InjectiveAuctionRPCBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AuctionEndpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveAuctionRpc.AuctionRequest, global::InjectiveAuctionRpc.AuctionResponse>(serviceImpl.AuctionEndpoint));
      serviceBinder.AddMethod(__Method_Auctions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::InjectiveAuctionRpc.AuctionsRequest, global::InjectiveAuctionRpc.AuctionsResponse>(serviceImpl.Auctions));
      serviceBinder.AddMethod(__Method_StreamBids, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::InjectiveAuctionRpc.StreamBidsRequest, global::InjectiveAuctionRpc.StreamBidsResponse>(serviceImpl.StreamBids));
    }

  }
}
#endregion

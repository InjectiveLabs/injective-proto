// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmwasm/wasm/v1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cosmwasm.Wasm.V1 {
  /// <summary>
  /// Query provides defines the gRPC querier service
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "cosmwasm.wasm.v1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractInfoRequest> __Marshaller_cosmwasm_wasm_v1_QueryContractInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractInfoResponse> __Marshaller_cosmwasm_wasm_v1_QueryContractInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest> __Marshaller_cosmwasm_wasm_v1_QueryContractHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse> __Marshaller_cosmwasm_wasm_v1_QueryContractHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest> __Marshaller_cosmwasm_wasm_v1_QueryContractsByCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse> __Marshaller_cosmwasm_wasm_v1_QueryContractsByCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest> __Marshaller_cosmwasm_wasm_v1_QueryAllContractStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse> __Marshaller_cosmwasm_wasm_v1_QueryAllContractStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest> __Marshaller_cosmwasm_wasm_v1_QueryRawContractStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse> __Marshaller_cosmwasm_wasm_v1_QueryRawContractStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest> __Marshaller_cosmwasm_wasm_v1_QuerySmartContractStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse> __Marshaller_cosmwasm_wasm_v1_QuerySmartContractStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryCodeRequest> __Marshaller_cosmwasm_wasm_v1_QueryCodeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryCodeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryCodeResponse> __Marshaller_cosmwasm_wasm_v1_QueryCodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryCodeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryCodesRequest> __Marshaller_cosmwasm_wasm_v1_QueryCodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryCodesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryCodesResponse> __Marshaller_cosmwasm_wasm_v1_QueryCodesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryCodesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest> __Marshaller_cosmwasm_wasm_v1_QueryPinnedCodesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse> __Marshaller_cosmwasm_wasm_v1_QueryPinnedCodesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryParamsRequest> __Marshaller_cosmwasm_wasm_v1_QueryParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryParamsResponse> __Marshaller_cosmwasm_wasm_v1_QueryParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest> __Marshaller_cosmwasm_wasm_v1_QueryContractsByCreatorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse> __Marshaller_cosmwasm_wasm_v1_QueryContractsByCreatorResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractInfoRequest, global::Cosmwasm.Wasm.V1.QueryContractInfoResponse> __Method_ContractInfo = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractInfoRequest, global::Cosmwasm.Wasm.V1.QueryContractInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContractInfo",
        __Marshaller_cosmwasm_wasm_v1_QueryContractInfoRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryContractInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest, global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse> __Method_ContractHistory = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest, global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContractHistory",
        __Marshaller_cosmwasm_wasm_v1_QueryContractHistoryRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryContractHistoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse> __Method_ContractsByCode = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContractsByCode",
        __Marshaller_cosmwasm_wasm_v1_QueryContractsByCodeRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryContractsByCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest, global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse> __Method_AllContractState = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest, global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AllContractState",
        __Marshaller_cosmwasm_wasm_v1_QueryAllContractStateRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryAllContractStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest, global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse> __Method_RawContractState = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest, global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RawContractState",
        __Marshaller_cosmwasm_wasm_v1_QueryRawContractStateRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryRawContractStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest, global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse> __Method_SmartContractState = new grpc::Method<global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest, global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SmartContractState",
        __Marshaller_cosmwasm_wasm_v1_QuerySmartContractStateRequest,
        __Marshaller_cosmwasm_wasm_v1_QuerySmartContractStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryCodeRequest, global::Cosmwasm.Wasm.V1.QueryCodeResponse> __Method_Code = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryCodeRequest, global::Cosmwasm.Wasm.V1.QueryCodeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Code",
        __Marshaller_cosmwasm_wasm_v1_QueryCodeRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryCodeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryCodesRequest, global::Cosmwasm.Wasm.V1.QueryCodesResponse> __Method_Codes = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryCodesRequest, global::Cosmwasm.Wasm.V1.QueryCodesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Codes",
        __Marshaller_cosmwasm_wasm_v1_QueryCodesRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryCodesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest, global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse> __Method_PinnedCodes = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest, global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PinnedCodes",
        __Marshaller_cosmwasm_wasm_v1_QueryPinnedCodesRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryPinnedCodesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryParamsRequest, global::Cosmwasm.Wasm.V1.QueryParamsResponse> __Method_Params = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryParamsRequest, global::Cosmwasm.Wasm.V1.QueryParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Params",
        __Marshaller_cosmwasm_wasm_v1_QueryParamsRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse> __Method_ContractsByCreator = new grpc::Method<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContractsByCreator",
        __Marshaller_cosmwasm_wasm_v1_QueryContractsByCreatorRequest,
        __Marshaller_cosmwasm_wasm_v1_QueryContractsByCreatorResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cosmwasm.Wasm.V1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// ContractInfo gets the contract meta data
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryContractInfoResponse> ContractInfo(global::Cosmwasm.Wasm.V1.QueryContractInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ContractHistory gets the contract code history
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse> ContractHistory(global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ContractsByCode lists all smart contracts for a code id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse> ContractsByCode(global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AllContractState gets all raw store data for a single contract
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse> AllContractState(global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RawContractState gets single key from the raw store data of a contract
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse> RawContractState(global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SmartContractState get smart query result from the contract
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse> SmartContractState(global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Code gets the binary code and metadata for a singe wasm code
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryCodeResponse> Code(global::Cosmwasm.Wasm.V1.QueryCodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Codes gets the metadata for all stored wasm codes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryCodesResponse> Codes(global::Cosmwasm.Wasm.V1.QueryCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PinnedCodes gets the pinned code ids
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse> PinnedCodes(global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Params gets the module params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryParamsResponse> Params(global::Cosmwasm.Wasm.V1.QueryParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ContractsByCreator gets the contracts by creator
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse> ContractsByCreator(global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// ContractInfo gets the contract meta data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractInfoResponse ContractInfo(global::Cosmwasm.Wasm.V1.QueryContractInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractInfo gets the contract meta data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractInfoResponse ContractInfo(global::Cosmwasm.Wasm.V1.QueryContractInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContractInfo, null, options, request);
      }
      /// <summary>
      /// ContractInfo gets the contract meta data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractInfoResponse> ContractInfoAsync(global::Cosmwasm.Wasm.V1.QueryContractInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractInfo gets the contract meta data
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractInfoResponse> ContractInfoAsync(global::Cosmwasm.Wasm.V1.QueryContractInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContractInfo, null, options, request);
      }
      /// <summary>
      /// ContractHistory gets the contract code history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse ContractHistory(global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractHistory gets the contract code history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse ContractHistory(global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContractHistory, null, options, request);
      }
      /// <summary>
      /// ContractHistory gets the contract code history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse> ContractHistoryAsync(global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractHistory gets the contract code history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse> ContractHistoryAsync(global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContractHistory, null, options, request);
      }
      /// <summary>
      /// ContractsByCode lists all smart contracts for a code id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse ContractsByCode(global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractsByCode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractsByCode lists all smart contracts for a code id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse ContractsByCode(global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContractsByCode, null, options, request);
      }
      /// <summary>
      /// ContractsByCode lists all smart contracts for a code id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse> ContractsByCodeAsync(global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractsByCodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractsByCode lists all smart contracts for a code id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse> ContractsByCodeAsync(global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContractsByCode, null, options, request);
      }
      /// <summary>
      /// AllContractState gets all raw store data for a single contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse AllContractState(global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllContractState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AllContractState gets all raw store data for a single contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse AllContractState(global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AllContractState, null, options, request);
      }
      /// <summary>
      /// AllContractState gets all raw store data for a single contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse> AllContractStateAsync(global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AllContractStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AllContractState gets all raw store data for a single contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse> AllContractStateAsync(global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AllContractState, null, options, request);
      }
      /// <summary>
      /// RawContractState gets single key from the raw store data of a contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse RawContractState(global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RawContractState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RawContractState gets single key from the raw store data of a contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse RawContractState(global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RawContractState, null, options, request);
      }
      /// <summary>
      /// RawContractState gets single key from the raw store data of a contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse> RawContractStateAsync(global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RawContractStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RawContractState gets single key from the raw store data of a contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse> RawContractStateAsync(global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RawContractState, null, options, request);
      }
      /// <summary>
      /// SmartContractState get smart query result from the contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse SmartContractState(global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SmartContractState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SmartContractState get smart query result from the contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse SmartContractState(global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SmartContractState, null, options, request);
      }
      /// <summary>
      /// SmartContractState get smart query result from the contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse> SmartContractStateAsync(global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SmartContractStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SmartContractState get smart query result from the contract
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse> SmartContractStateAsync(global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SmartContractState, null, options, request);
      }
      /// <summary>
      /// Code gets the binary code and metadata for a singe wasm code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryCodeResponse Code(global::Cosmwasm.Wasm.V1.QueryCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Code(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Code gets the binary code and metadata for a singe wasm code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryCodeResponse Code(global::Cosmwasm.Wasm.V1.QueryCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Code, null, options, request);
      }
      /// <summary>
      /// Code gets the binary code and metadata for a singe wasm code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryCodeResponse> CodeAsync(global::Cosmwasm.Wasm.V1.QueryCodeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Code gets the binary code and metadata for a singe wasm code
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryCodeResponse> CodeAsync(global::Cosmwasm.Wasm.V1.QueryCodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Code, null, options, request);
      }
      /// <summary>
      /// Codes gets the metadata for all stored wasm codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryCodesResponse Codes(global::Cosmwasm.Wasm.V1.QueryCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Codes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Codes gets the metadata for all stored wasm codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryCodesResponse Codes(global::Cosmwasm.Wasm.V1.QueryCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Codes, null, options, request);
      }
      /// <summary>
      /// Codes gets the metadata for all stored wasm codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryCodesResponse> CodesAsync(global::Cosmwasm.Wasm.V1.QueryCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Codes gets the metadata for all stored wasm codes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryCodesResponse> CodesAsync(global::Cosmwasm.Wasm.V1.QueryCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Codes, null, options, request);
      }
      /// <summary>
      /// PinnedCodes gets the pinned code ids
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse PinnedCodes(global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PinnedCodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PinnedCodes gets the pinned code ids
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse PinnedCodes(global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PinnedCodes, null, options, request);
      }
      /// <summary>
      /// PinnedCodes gets the pinned code ids
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse> PinnedCodesAsync(global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PinnedCodesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PinnedCodes gets the pinned code ids
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse> PinnedCodesAsync(global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PinnedCodes, null, options, request);
      }
      /// <summary>
      /// Params gets the module params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryParamsResponse Params(global::Cosmwasm.Wasm.V1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Params(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Params gets the module params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryParamsResponse Params(global::Cosmwasm.Wasm.V1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Params gets the module params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryParamsResponse> ParamsAsync(global::Cosmwasm.Wasm.V1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Params gets the module params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryParamsResponse> ParamsAsync(global::Cosmwasm.Wasm.V1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// ContractsByCreator gets the contracts by creator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse ContractsByCreator(global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractsByCreator(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractsByCreator gets the contracts by creator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse ContractsByCreator(global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContractsByCreator, null, options, request);
      }
      /// <summary>
      /// ContractsByCreator gets the contracts by creator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse> ContractsByCreatorAsync(global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContractsByCreatorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContractsByCreator gets the contracts by creator
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse> ContractsByCreatorAsync(global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContractsByCreator, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_ContractInfo, serviceImpl.ContractInfo)
          .AddMethod(__Method_ContractHistory, serviceImpl.ContractHistory)
          .AddMethod(__Method_ContractsByCode, serviceImpl.ContractsByCode)
          .AddMethod(__Method_AllContractState, serviceImpl.AllContractState)
          .AddMethod(__Method_RawContractState, serviceImpl.RawContractState)
          .AddMethod(__Method_SmartContractState, serviceImpl.SmartContractState)
          .AddMethod(__Method_Code, serviceImpl.Code)
          .AddMethod(__Method_Codes, serviceImpl.Codes)
          .AddMethod(__Method_PinnedCodes, serviceImpl.PinnedCodes)
          .AddMethod(__Method_Params, serviceImpl.Params)
          .AddMethod(__Method_ContractsByCreator, serviceImpl.ContractsByCreator).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_ContractInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryContractInfoRequest, global::Cosmwasm.Wasm.V1.QueryContractInfoResponse>(serviceImpl.ContractInfo));
      serviceBinder.AddMethod(__Method_ContractHistory, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryContractHistoryRequest, global::Cosmwasm.Wasm.V1.QueryContractHistoryResponse>(serviceImpl.ContractHistory));
      serviceBinder.AddMethod(__Method_ContractsByCode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryContractsByCodeRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCodeResponse>(serviceImpl.ContractsByCode));
      serviceBinder.AddMethod(__Method_AllContractState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryAllContractStateRequest, global::Cosmwasm.Wasm.V1.QueryAllContractStateResponse>(serviceImpl.AllContractState));
      serviceBinder.AddMethod(__Method_RawContractState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryRawContractStateRequest, global::Cosmwasm.Wasm.V1.QueryRawContractStateResponse>(serviceImpl.RawContractState));
      serviceBinder.AddMethod(__Method_SmartContractState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QuerySmartContractStateRequest, global::Cosmwasm.Wasm.V1.QuerySmartContractStateResponse>(serviceImpl.SmartContractState));
      serviceBinder.AddMethod(__Method_Code, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryCodeRequest, global::Cosmwasm.Wasm.V1.QueryCodeResponse>(serviceImpl.Code));
      serviceBinder.AddMethod(__Method_Codes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryCodesRequest, global::Cosmwasm.Wasm.V1.QueryCodesResponse>(serviceImpl.Codes));
      serviceBinder.AddMethod(__Method_PinnedCodes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryPinnedCodesRequest, global::Cosmwasm.Wasm.V1.QueryPinnedCodesResponse>(serviceImpl.PinnedCodes));
      serviceBinder.AddMethod(__Method_Params, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryParamsRequest, global::Cosmwasm.Wasm.V1.QueryParamsResponse>(serviceImpl.Params));
      serviceBinder.AddMethod(__Method_ContractsByCreator, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmwasm.Wasm.V1.QueryContractsByCreatorRequest, global::Cosmwasm.Wasm.V1.QueryContractsByCreatorResponse>(serviceImpl.ContractsByCreator));
    }

  }
}
#endregion

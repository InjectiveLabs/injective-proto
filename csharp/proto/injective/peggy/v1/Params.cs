// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/peggy/v1/params.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Injective.Peggy.V1 {

  /// <summary>Holder for reflection information generated from injective/peggy/v1/params.proto</summary>
  public static partial class ParamsReflection {

    #region Descriptor
    /// <summary>File descriptor for injective/peggy/v1/params.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ParamsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9pbmplY3RpdmUvcGVnZ3kvdjEvcGFyYW1zLnByb3RvEhJpbmplY3RpdmUu",
            "cGVnZ3kudjEaFGdvZ29wcm90by9nb2dvLnByb3RvGh5jb3Ntb3MvYmFzZS92",
            "MWJldGExL2NvaW4ucHJvdG8itwcKBlBhcmFtcxIQCghwZWdneV9pZBgBIAEo",
            "CRIcChRjb250cmFjdF9zb3VyY2VfaGFzaBgCIAEoCRIfChdicmlkZ2VfZXRo",
            "ZXJldW1fYWRkcmVzcxgDIAEoCRIXCg9icmlkZ2VfY2hhaW5faWQYBCABKAQS",
            "HQoVc2lnbmVkX3ZhbHNldHNfd2luZG93GAUgASgEEh0KFXNpZ25lZF9iYXRj",
            "aGVzX3dpbmRvdxgGIAEoBBIcChRzaWduZWRfY2xhaW1zX3dpbmRvdxgHIAEo",
            "BBIcChR0YXJnZXRfYmF0Y2hfdGltZW91dBgIIAEoBBIaChJhdmVyYWdlX2Js",
            "b2NrX3RpbWUYCSABKAQSIwobYXZlcmFnZV9ldGhlcmV1bV9ibG9ja190aW1l",
            "GAogASgEEk0KFXNsYXNoX2ZyYWN0aW9uX3ZhbHNldBgLIAEoDEIu2t4fJmdp",
            "dGh1Yi5jb20vY29zbW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVjyN4fABJMChRz",
            "bGFzaF9mcmFjdGlvbl9iYXRjaBgMIAEoDEIu2t4fJmdpdGh1Yi5jb20vY29z",
            "bW9zL2Nvc21vcy1zZGsvdHlwZXMuRGVjyN4fABJMChRzbGFzaF9mcmFjdGlv",
            "bl9jbGFpbRgNIAEoDEIu2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1z",
            "ZGsvdHlwZXMuRGVjyN4fABJYCiBzbGFzaF9mcmFjdGlvbl9jb25mbGljdGlu",
            "Z19jbGFpbRgOIAEoDEIu2t4fJmdpdGh1Yi5jb20vY29zbW9zL2Nvc21vcy1z",
            "ZGsvdHlwZXMuRGVjyN4fABImCh51bmJvbmRfc2xhc2hpbmdfdmFsc2V0c193",
            "aW5kb3cYDyABKAQSWAogc2xhc2hfZnJhY3Rpb25fYmFkX2V0aF9zaWduYXR1",
            "cmUYECABKAxCLtreHyZnaXRodWIuY29tL2Nvc21vcy9jb3Ntb3Mtc2RrL3R5",
            "cGVzLkRlY8jeHwASGQoRY29zbW9zX2NvaW5fZGVub20YESABKAkSIgoaY29z",
            "bW9zX2NvaW5fZXJjMjBfY29udHJhY3QYEiABKAkSHgoWY2xhaW1fc2xhc2hp",
            "bmdfZW5hYmxlZBgTIAEoCBIkChxicmlkZ2VfY29udHJhY3Rfc3RhcnRfaGVp",
            "Z2h0GBQgASgEEjYKDXZhbHNldF9yZXdhcmQYFSABKAsyGS5jb3Ntb3MuYmFz",
            "ZS52MWJldGExLkNvaW5CBMjeHwA6BIDcIABCTVpLZ2l0aHViLmNvbS9Jbmpl",
            "Y3RpdmVMYWJzL2luamVjdGl2ZS1jb3JlL2luamVjdGl2ZS1jaGFpbi9tb2R1",
            "bGVzL3BlZ2d5L3R5cGVzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Gogoproto.GogoReflection.Descriptor, global::Cosmos.Base.V1Beta1.CoinReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Injective.Peggy.V1.Params), global::Injective.Peggy.V1.Params.Parser, new[]{ "PeggyId", "ContractSourceHash", "BridgeEthereumAddress", "BridgeChainId", "SignedValsetsWindow", "SignedBatchesWindow", "SignedClaimsWindow", "TargetBatchTimeout", "AverageBlockTime", "AverageEthereumBlockTime", "SlashFractionValset", "SlashFractionBatch", "SlashFractionClaim", "SlashFractionConflictingClaim", "UnbondSlashingValsetsWindow", "SlashFractionBadEthSignature", "CosmosCoinDenom", "CosmosCoinErc20Contract", "ClaimSlashingEnabled", "BridgeContractStartHeight", "ValsetReward" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Params : pb::IMessage<Params>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Params> _parser = new pb::MessageParser<Params>(() => new Params());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Params> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Injective.Peggy.V1.ParamsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Params() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Params(Params other) : this() {
      peggyId_ = other.peggyId_;
      contractSourceHash_ = other.contractSourceHash_;
      bridgeEthereumAddress_ = other.bridgeEthereumAddress_;
      bridgeChainId_ = other.bridgeChainId_;
      signedValsetsWindow_ = other.signedValsetsWindow_;
      signedBatchesWindow_ = other.signedBatchesWindow_;
      signedClaimsWindow_ = other.signedClaimsWindow_;
      targetBatchTimeout_ = other.targetBatchTimeout_;
      averageBlockTime_ = other.averageBlockTime_;
      averageEthereumBlockTime_ = other.averageEthereumBlockTime_;
      slashFractionValset_ = other.slashFractionValset_;
      slashFractionBatch_ = other.slashFractionBatch_;
      slashFractionClaim_ = other.slashFractionClaim_;
      slashFractionConflictingClaim_ = other.slashFractionConflictingClaim_;
      unbondSlashingValsetsWindow_ = other.unbondSlashingValsetsWindow_;
      slashFractionBadEthSignature_ = other.slashFractionBadEthSignature_;
      cosmosCoinDenom_ = other.cosmosCoinDenom_;
      cosmosCoinErc20Contract_ = other.cosmosCoinErc20Contract_;
      claimSlashingEnabled_ = other.claimSlashingEnabled_;
      bridgeContractStartHeight_ = other.bridgeContractStartHeight_;
      valsetReward_ = other.valsetReward_ != null ? other.valsetReward_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Params Clone() {
      return new Params(this);
    }

    /// <summary>Field number for the "peggy_id" field.</summary>
    public const int PeggyIdFieldNumber = 1;
    private string peggyId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PeggyId {
      get { return peggyId_; }
      set {
        peggyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_source_hash" field.</summary>
    public const int ContractSourceHashFieldNumber = 2;
    private string contractSourceHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ContractSourceHash {
      get { return contractSourceHash_; }
      set {
        contractSourceHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bridge_ethereum_address" field.</summary>
    public const int BridgeEthereumAddressFieldNumber = 3;
    private string bridgeEthereumAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BridgeEthereumAddress {
      get { return bridgeEthereumAddress_; }
      set {
        bridgeEthereumAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bridge_chain_id" field.</summary>
    public const int BridgeChainIdFieldNumber = 4;
    private ulong bridgeChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BridgeChainId {
      get { return bridgeChainId_; }
      set {
        bridgeChainId_ = value;
      }
    }

    /// <summary>Field number for the "signed_valsets_window" field.</summary>
    public const int SignedValsetsWindowFieldNumber = 5;
    private ulong signedValsetsWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SignedValsetsWindow {
      get { return signedValsetsWindow_; }
      set {
        signedValsetsWindow_ = value;
      }
    }

    /// <summary>Field number for the "signed_batches_window" field.</summary>
    public const int SignedBatchesWindowFieldNumber = 6;
    private ulong signedBatchesWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SignedBatchesWindow {
      get { return signedBatchesWindow_; }
      set {
        signedBatchesWindow_ = value;
      }
    }

    /// <summary>Field number for the "signed_claims_window" field.</summary>
    public const int SignedClaimsWindowFieldNumber = 7;
    private ulong signedClaimsWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong SignedClaimsWindow {
      get { return signedClaimsWindow_; }
      set {
        signedClaimsWindow_ = value;
      }
    }

    /// <summary>Field number for the "target_batch_timeout" field.</summary>
    public const int TargetBatchTimeoutFieldNumber = 8;
    private ulong targetBatchTimeout_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong TargetBatchTimeout {
      get { return targetBatchTimeout_; }
      set {
        targetBatchTimeout_ = value;
      }
    }

    /// <summary>Field number for the "average_block_time" field.</summary>
    public const int AverageBlockTimeFieldNumber = 9;
    private ulong averageBlockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong AverageBlockTime {
      get { return averageBlockTime_; }
      set {
        averageBlockTime_ = value;
      }
    }

    /// <summary>Field number for the "average_ethereum_block_time" field.</summary>
    public const int AverageEthereumBlockTimeFieldNumber = 10;
    private ulong averageEthereumBlockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong AverageEthereumBlockTime {
      get { return averageEthereumBlockTime_; }
      set {
        averageEthereumBlockTime_ = value;
      }
    }

    /// <summary>Field number for the "slash_fraction_valset" field.</summary>
    public const int SlashFractionValsetFieldNumber = 11;
    private pb::ByteString slashFractionValset_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SlashFractionValset {
      get { return slashFractionValset_; }
      set {
        slashFractionValset_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slash_fraction_batch" field.</summary>
    public const int SlashFractionBatchFieldNumber = 12;
    private pb::ByteString slashFractionBatch_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SlashFractionBatch {
      get { return slashFractionBatch_; }
      set {
        slashFractionBatch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slash_fraction_claim" field.</summary>
    public const int SlashFractionClaimFieldNumber = 13;
    private pb::ByteString slashFractionClaim_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SlashFractionClaim {
      get { return slashFractionClaim_; }
      set {
        slashFractionClaim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slash_fraction_conflicting_claim" field.</summary>
    public const int SlashFractionConflictingClaimFieldNumber = 14;
    private pb::ByteString slashFractionConflictingClaim_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SlashFractionConflictingClaim {
      get { return slashFractionConflictingClaim_; }
      set {
        slashFractionConflictingClaim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unbond_slashing_valsets_window" field.</summary>
    public const int UnbondSlashingValsetsWindowFieldNumber = 15;
    private ulong unbondSlashingValsetsWindow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UnbondSlashingValsetsWindow {
      get { return unbondSlashingValsetsWindow_; }
      set {
        unbondSlashingValsetsWindow_ = value;
      }
    }

    /// <summary>Field number for the "slash_fraction_bad_eth_signature" field.</summary>
    public const int SlashFractionBadEthSignatureFieldNumber = 16;
    private pb::ByteString slashFractionBadEthSignature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString SlashFractionBadEthSignature {
      get { return slashFractionBadEthSignature_; }
      set {
        slashFractionBadEthSignature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cosmos_coin_denom" field.</summary>
    public const int CosmosCoinDenomFieldNumber = 17;
    private string cosmosCoinDenom_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CosmosCoinDenom {
      get { return cosmosCoinDenom_; }
      set {
        cosmosCoinDenom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cosmos_coin_erc20_contract" field.</summary>
    public const int CosmosCoinErc20ContractFieldNumber = 18;
    private string cosmosCoinErc20Contract_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CosmosCoinErc20Contract {
      get { return cosmosCoinErc20Contract_; }
      set {
        cosmosCoinErc20Contract_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "claim_slashing_enabled" field.</summary>
    public const int ClaimSlashingEnabledFieldNumber = 19;
    private bool claimSlashingEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ClaimSlashingEnabled {
      get { return claimSlashingEnabled_; }
      set {
        claimSlashingEnabled_ = value;
      }
    }

    /// <summary>Field number for the "bridge_contract_start_height" field.</summary>
    public const int BridgeContractStartHeightFieldNumber = 20;
    private ulong bridgeContractStartHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong BridgeContractStartHeight {
      get { return bridgeContractStartHeight_; }
      set {
        bridgeContractStartHeight_ = value;
      }
    }

    /// <summary>Field number for the "valset_reward" field.</summary>
    public const int ValsetRewardFieldNumber = 21;
    private global::Cosmos.Base.V1Beta1.Coin valsetReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Cosmos.Base.V1Beta1.Coin ValsetReward {
      get { return valsetReward_; }
      set {
        valsetReward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Params);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Params other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PeggyId != other.PeggyId) return false;
      if (ContractSourceHash != other.ContractSourceHash) return false;
      if (BridgeEthereumAddress != other.BridgeEthereumAddress) return false;
      if (BridgeChainId != other.BridgeChainId) return false;
      if (SignedValsetsWindow != other.SignedValsetsWindow) return false;
      if (SignedBatchesWindow != other.SignedBatchesWindow) return false;
      if (SignedClaimsWindow != other.SignedClaimsWindow) return false;
      if (TargetBatchTimeout != other.TargetBatchTimeout) return false;
      if (AverageBlockTime != other.AverageBlockTime) return false;
      if (AverageEthereumBlockTime != other.AverageEthereumBlockTime) return false;
      if (SlashFractionValset != other.SlashFractionValset) return false;
      if (SlashFractionBatch != other.SlashFractionBatch) return false;
      if (SlashFractionClaim != other.SlashFractionClaim) return false;
      if (SlashFractionConflictingClaim != other.SlashFractionConflictingClaim) return false;
      if (UnbondSlashingValsetsWindow != other.UnbondSlashingValsetsWindow) return false;
      if (SlashFractionBadEthSignature != other.SlashFractionBadEthSignature) return false;
      if (CosmosCoinDenom != other.CosmosCoinDenom) return false;
      if (CosmosCoinErc20Contract != other.CosmosCoinErc20Contract) return false;
      if (ClaimSlashingEnabled != other.ClaimSlashingEnabled) return false;
      if (BridgeContractStartHeight != other.BridgeContractStartHeight) return false;
      if (!object.Equals(ValsetReward, other.ValsetReward)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PeggyId.Length != 0) hash ^= PeggyId.GetHashCode();
      if (ContractSourceHash.Length != 0) hash ^= ContractSourceHash.GetHashCode();
      if (BridgeEthereumAddress.Length != 0) hash ^= BridgeEthereumAddress.GetHashCode();
      if (BridgeChainId != 0UL) hash ^= BridgeChainId.GetHashCode();
      if (SignedValsetsWindow != 0UL) hash ^= SignedValsetsWindow.GetHashCode();
      if (SignedBatchesWindow != 0UL) hash ^= SignedBatchesWindow.GetHashCode();
      if (SignedClaimsWindow != 0UL) hash ^= SignedClaimsWindow.GetHashCode();
      if (TargetBatchTimeout != 0UL) hash ^= TargetBatchTimeout.GetHashCode();
      if (AverageBlockTime != 0UL) hash ^= AverageBlockTime.GetHashCode();
      if (AverageEthereumBlockTime != 0UL) hash ^= AverageEthereumBlockTime.GetHashCode();
      if (SlashFractionValset.Length != 0) hash ^= SlashFractionValset.GetHashCode();
      if (SlashFractionBatch.Length != 0) hash ^= SlashFractionBatch.GetHashCode();
      if (SlashFractionClaim.Length != 0) hash ^= SlashFractionClaim.GetHashCode();
      if (SlashFractionConflictingClaim.Length != 0) hash ^= SlashFractionConflictingClaim.GetHashCode();
      if (UnbondSlashingValsetsWindow != 0UL) hash ^= UnbondSlashingValsetsWindow.GetHashCode();
      if (SlashFractionBadEthSignature.Length != 0) hash ^= SlashFractionBadEthSignature.GetHashCode();
      if (CosmosCoinDenom.Length != 0) hash ^= CosmosCoinDenom.GetHashCode();
      if (CosmosCoinErc20Contract.Length != 0) hash ^= CosmosCoinErc20Contract.GetHashCode();
      if (ClaimSlashingEnabled != false) hash ^= ClaimSlashingEnabled.GetHashCode();
      if (BridgeContractStartHeight != 0UL) hash ^= BridgeContractStartHeight.GetHashCode();
      if (valsetReward_ != null) hash ^= ValsetReward.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PeggyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PeggyId);
      }
      if (ContractSourceHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractSourceHash);
      }
      if (BridgeEthereumAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BridgeEthereumAddress);
      }
      if (BridgeChainId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BridgeChainId);
      }
      if (SignedValsetsWindow != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SignedValsetsWindow);
      }
      if (SignedBatchesWindow != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SignedBatchesWindow);
      }
      if (SignedClaimsWindow != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(SignedClaimsWindow);
      }
      if (TargetBatchTimeout != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TargetBatchTimeout);
      }
      if (AverageBlockTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(AverageBlockTime);
      }
      if (AverageEthereumBlockTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AverageEthereumBlockTime);
      }
      if (SlashFractionValset.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(SlashFractionValset);
      }
      if (SlashFractionBatch.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(SlashFractionBatch);
      }
      if (SlashFractionClaim.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(SlashFractionClaim);
      }
      if (SlashFractionConflictingClaim.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(SlashFractionConflictingClaim);
      }
      if (UnbondSlashingValsetsWindow != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(UnbondSlashingValsetsWindow);
      }
      if (SlashFractionBadEthSignature.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SlashFractionBadEthSignature);
      }
      if (CosmosCoinDenom.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CosmosCoinDenom);
      }
      if (CosmosCoinErc20Contract.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CosmosCoinErc20Contract);
      }
      if (ClaimSlashingEnabled != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ClaimSlashingEnabled);
      }
      if (BridgeContractStartHeight != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(BridgeContractStartHeight);
      }
      if (valsetReward_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ValsetReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PeggyId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PeggyId);
      }
      if (ContractSourceHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractSourceHash);
      }
      if (BridgeEthereumAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BridgeEthereumAddress);
      }
      if (BridgeChainId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BridgeChainId);
      }
      if (SignedValsetsWindow != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(SignedValsetsWindow);
      }
      if (SignedBatchesWindow != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(SignedBatchesWindow);
      }
      if (SignedClaimsWindow != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(SignedClaimsWindow);
      }
      if (TargetBatchTimeout != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TargetBatchTimeout);
      }
      if (AverageBlockTime != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(AverageBlockTime);
      }
      if (AverageEthereumBlockTime != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AverageEthereumBlockTime);
      }
      if (SlashFractionValset.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(SlashFractionValset);
      }
      if (SlashFractionBatch.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(SlashFractionBatch);
      }
      if (SlashFractionClaim.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(SlashFractionClaim);
      }
      if (SlashFractionConflictingClaim.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(SlashFractionConflictingClaim);
      }
      if (UnbondSlashingValsetsWindow != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(UnbondSlashingValsetsWindow);
      }
      if (SlashFractionBadEthSignature.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(SlashFractionBadEthSignature);
      }
      if (CosmosCoinDenom.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(CosmosCoinDenom);
      }
      if (CosmosCoinErc20Contract.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CosmosCoinErc20Contract);
      }
      if (ClaimSlashingEnabled != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(ClaimSlashingEnabled);
      }
      if (BridgeContractStartHeight != 0UL) {
        output.WriteRawTag(160, 1);
        output.WriteUInt64(BridgeContractStartHeight);
      }
      if (valsetReward_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ValsetReward);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PeggyId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PeggyId);
      }
      if (ContractSourceHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractSourceHash);
      }
      if (BridgeEthereumAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BridgeEthereumAddress);
      }
      if (BridgeChainId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BridgeChainId);
      }
      if (SignedValsetsWindow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignedValsetsWindow);
      }
      if (SignedBatchesWindow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignedBatchesWindow);
      }
      if (SignedClaimsWindow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SignedClaimsWindow);
      }
      if (TargetBatchTimeout != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetBatchTimeout);
      }
      if (AverageBlockTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AverageBlockTime);
      }
      if (AverageEthereumBlockTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AverageEthereumBlockTime);
      }
      if (SlashFractionValset.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SlashFractionValset);
      }
      if (SlashFractionBatch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SlashFractionBatch);
      }
      if (SlashFractionClaim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SlashFractionClaim);
      }
      if (SlashFractionConflictingClaim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SlashFractionConflictingClaim);
      }
      if (UnbondSlashingValsetsWindow != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UnbondSlashingValsetsWindow);
      }
      if (SlashFractionBadEthSignature.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(SlashFractionBadEthSignature);
      }
      if (CosmosCoinDenom.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CosmosCoinDenom);
      }
      if (CosmosCoinErc20Contract.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CosmosCoinErc20Contract);
      }
      if (ClaimSlashingEnabled != false) {
        size += 2 + 1;
      }
      if (BridgeContractStartHeight != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(BridgeContractStartHeight);
      }
      if (valsetReward_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ValsetReward);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Params other) {
      if (other == null) {
        return;
      }
      if (other.PeggyId.Length != 0) {
        PeggyId = other.PeggyId;
      }
      if (other.ContractSourceHash.Length != 0) {
        ContractSourceHash = other.ContractSourceHash;
      }
      if (other.BridgeEthereumAddress.Length != 0) {
        BridgeEthereumAddress = other.BridgeEthereumAddress;
      }
      if (other.BridgeChainId != 0UL) {
        BridgeChainId = other.BridgeChainId;
      }
      if (other.SignedValsetsWindow != 0UL) {
        SignedValsetsWindow = other.SignedValsetsWindow;
      }
      if (other.SignedBatchesWindow != 0UL) {
        SignedBatchesWindow = other.SignedBatchesWindow;
      }
      if (other.SignedClaimsWindow != 0UL) {
        SignedClaimsWindow = other.SignedClaimsWindow;
      }
      if (other.TargetBatchTimeout != 0UL) {
        TargetBatchTimeout = other.TargetBatchTimeout;
      }
      if (other.AverageBlockTime != 0UL) {
        AverageBlockTime = other.AverageBlockTime;
      }
      if (other.AverageEthereumBlockTime != 0UL) {
        AverageEthereumBlockTime = other.AverageEthereumBlockTime;
      }
      if (other.SlashFractionValset.Length != 0) {
        SlashFractionValset = other.SlashFractionValset;
      }
      if (other.SlashFractionBatch.Length != 0) {
        SlashFractionBatch = other.SlashFractionBatch;
      }
      if (other.SlashFractionClaim.Length != 0) {
        SlashFractionClaim = other.SlashFractionClaim;
      }
      if (other.SlashFractionConflictingClaim.Length != 0) {
        SlashFractionConflictingClaim = other.SlashFractionConflictingClaim;
      }
      if (other.UnbondSlashingValsetsWindow != 0UL) {
        UnbondSlashingValsetsWindow = other.UnbondSlashingValsetsWindow;
      }
      if (other.SlashFractionBadEthSignature.Length != 0) {
        SlashFractionBadEthSignature = other.SlashFractionBadEthSignature;
      }
      if (other.CosmosCoinDenom.Length != 0) {
        CosmosCoinDenom = other.CosmosCoinDenom;
      }
      if (other.CosmosCoinErc20Contract.Length != 0) {
        CosmosCoinErc20Contract = other.CosmosCoinErc20Contract;
      }
      if (other.ClaimSlashingEnabled != false) {
        ClaimSlashingEnabled = other.ClaimSlashingEnabled;
      }
      if (other.BridgeContractStartHeight != 0UL) {
        BridgeContractStartHeight = other.BridgeContractStartHeight;
      }
      if (other.valsetReward_ != null) {
        if (valsetReward_ == null) {
          ValsetReward = new global::Cosmos.Base.V1Beta1.Coin();
        }
        ValsetReward.MergeFrom(other.ValsetReward);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PeggyId = input.ReadString();
            break;
          }
          case 18: {
            ContractSourceHash = input.ReadString();
            break;
          }
          case 26: {
            BridgeEthereumAddress = input.ReadString();
            break;
          }
          case 32: {
            BridgeChainId = input.ReadUInt64();
            break;
          }
          case 40: {
            SignedValsetsWindow = input.ReadUInt64();
            break;
          }
          case 48: {
            SignedBatchesWindow = input.ReadUInt64();
            break;
          }
          case 56: {
            SignedClaimsWindow = input.ReadUInt64();
            break;
          }
          case 64: {
            TargetBatchTimeout = input.ReadUInt64();
            break;
          }
          case 72: {
            AverageBlockTime = input.ReadUInt64();
            break;
          }
          case 80: {
            AverageEthereumBlockTime = input.ReadUInt64();
            break;
          }
          case 90: {
            SlashFractionValset = input.ReadBytes();
            break;
          }
          case 98: {
            SlashFractionBatch = input.ReadBytes();
            break;
          }
          case 106: {
            SlashFractionClaim = input.ReadBytes();
            break;
          }
          case 114: {
            SlashFractionConflictingClaim = input.ReadBytes();
            break;
          }
          case 120: {
            UnbondSlashingValsetsWindow = input.ReadUInt64();
            break;
          }
          case 130: {
            SlashFractionBadEthSignature = input.ReadBytes();
            break;
          }
          case 138: {
            CosmosCoinDenom = input.ReadString();
            break;
          }
          case 146: {
            CosmosCoinErc20Contract = input.ReadString();
            break;
          }
          case 152: {
            ClaimSlashingEnabled = input.ReadBool();
            break;
          }
          case 160: {
            BridgeContractStartHeight = input.ReadUInt64();
            break;
          }
          case 170: {
            if (valsetReward_ == null) {
              ValsetReward = new global::Cosmos.Base.V1Beta1.Coin();
            }
            input.ReadMessage(ValsetReward);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PeggyId = input.ReadString();
            break;
          }
          case 18: {
            ContractSourceHash = input.ReadString();
            break;
          }
          case 26: {
            BridgeEthereumAddress = input.ReadString();
            break;
          }
          case 32: {
            BridgeChainId = input.ReadUInt64();
            break;
          }
          case 40: {
            SignedValsetsWindow = input.ReadUInt64();
            break;
          }
          case 48: {
            SignedBatchesWindow = input.ReadUInt64();
            break;
          }
          case 56: {
            SignedClaimsWindow = input.ReadUInt64();
            break;
          }
          case 64: {
            TargetBatchTimeout = input.ReadUInt64();
            break;
          }
          case 72: {
            AverageBlockTime = input.ReadUInt64();
            break;
          }
          case 80: {
            AverageEthereumBlockTime = input.ReadUInt64();
            break;
          }
          case 90: {
            SlashFractionValset = input.ReadBytes();
            break;
          }
          case 98: {
            SlashFractionBatch = input.ReadBytes();
            break;
          }
          case 106: {
            SlashFractionClaim = input.ReadBytes();
            break;
          }
          case 114: {
            SlashFractionConflictingClaim = input.ReadBytes();
            break;
          }
          case 120: {
            UnbondSlashingValsetsWindow = input.ReadUInt64();
            break;
          }
          case 130: {
            SlashFractionBadEthSignature = input.ReadBytes();
            break;
          }
          case 138: {
            CosmosCoinDenom = input.ReadString();
            break;
          }
          case 146: {
            CosmosCoinErc20Contract = input.ReadString();
            break;
          }
          case 152: {
            ClaimSlashingEnabled = input.ReadBool();
            break;
          }
          case 160: {
            BridgeContractStartHeight = input.ReadUInt64();
            break;
          }
          case 170: {
            if (valsetReward_ == null) {
              ValsetReward = new global::Cosmos.Base.V1Beta1.Coin();
            }
            input.ReadMessage(ValsetReward);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code

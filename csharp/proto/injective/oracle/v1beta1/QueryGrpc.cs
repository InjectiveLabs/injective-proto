// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/oracle/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Oracle.V1Beta1 {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "injective.oracle.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryParamsRequest> __Marshaller_injective_oracle_v1beta1_QueryParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryParamsResponse> __Marshaller_injective_oracle_v1beta1_QueryParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest> __Marshaller_injective_oracle_v1beta1_QueryBandRelayersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse> __Marshaller_injective_oracle_v1beta1_QueryBandRelayersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest> __Marshaller_injective_oracle_v1beta1_QueryBandPriceStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse> __Marshaller_injective_oracle_v1beta1_QueryBandPriceStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest> __Marshaller_injective_oracle_v1beta1_QueryBandIBCPriceStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse> __Marshaller_injective_oracle_v1beta1_QueryBandIBCPriceStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest> __Marshaller_injective_oracle_v1beta1_QueryPriceFeedPriceStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse> __Marshaller_injective_oracle_v1beta1_QueryPriceFeedPriceStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest> __Marshaller_injective_oracle_v1beta1_QueryCoinbasePriceStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse> __Marshaller_injective_oracle_v1beta1_QueryCoinbasePriceStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest> __Marshaller_injective_oracle_v1beta1_QueryPythPriceStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse> __Marshaller_injective_oracle_v1beta1_QueryPythPriceStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest> __Marshaller_injective_oracle_v1beta1_QueryProviderPriceStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse> __Marshaller_injective_oracle_v1beta1_QueryProviderPriceStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryModuleStateRequest> __Marshaller_injective_oracle_v1beta1_QueryModuleStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryModuleStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryModuleStateResponse> __Marshaller_injective_oracle_v1beta1_QueryModuleStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryModuleStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest> __Marshaller_injective_oracle_v1beta1_QueryHistoricalPriceRecordsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse> __Marshaller_injective_oracle_v1beta1_QueryHistoricalPriceRecordsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest> __Marshaller_injective_oracle_v1beta1_QueryOracleVolatilityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse> __Marshaller_injective_oracle_v1beta1_QueryOracleVolatilityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest> __Marshaller_injective_oracle_v1beta1_QueryOracleProvidersInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse> __Marshaller_injective_oracle_v1beta1_QueryOracleProvidersInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest> __Marshaller_injective_oracle_v1beta1_QueryOracleProviderPricesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse> __Marshaller_injective_oracle_v1beta1_QueryOracleProviderPricesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest> __Marshaller_injective_oracle_v1beta1_QueryOraclePriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse> __Marshaller_injective_oracle_v1beta1_QueryOraclePriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPythPriceRequest> __Marshaller_injective_oracle_v1beta1_QueryPythPriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPythPriceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Oracle.V1Beta1.QueryPythPriceResponse> __Marshaller_injective_oracle_v1beta1_QueryPythPriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Oracle.V1Beta1.QueryPythPriceResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryParamsRequest, global::Injective.Oracle.V1Beta1.QueryParamsResponse> __Method_Params = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryParamsRequest, global::Injective.Oracle.V1Beta1.QueryParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Params",
        __Marshaller_injective_oracle_v1beta1_QueryParamsRequest,
        __Marshaller_injective_oracle_v1beta1_QueryParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest, global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse> __Method_BandRelayers = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest, global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BandRelayers",
        __Marshaller_injective_oracle_v1beta1_QueryBandRelayersRequest,
        __Marshaller_injective_oracle_v1beta1_QueryBandRelayersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse> __Method_BandPriceStates = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BandPriceStates",
        __Marshaller_injective_oracle_v1beta1_QueryBandPriceStatesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryBandPriceStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse> __Method_BandIBCPriceStates = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BandIBCPriceStates",
        __Marshaller_injective_oracle_v1beta1_QueryBandIBCPriceStatesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryBandIBCPriceStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse> __Method_PriceFeedPriceStates = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PriceFeedPriceStates",
        __Marshaller_injective_oracle_v1beta1_QueryPriceFeedPriceStatesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryPriceFeedPriceStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse> __Method_CoinbasePriceStates = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CoinbasePriceStates",
        __Marshaller_injective_oracle_v1beta1_QueryCoinbasePriceStatesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryCoinbasePriceStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse> __Method_PythPriceStates = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PythPriceStates",
        __Marshaller_injective_oracle_v1beta1_QueryPythPriceStatesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryPythPriceStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest, global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse> __Method_ProviderPriceState = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest, global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ProviderPriceState",
        __Marshaller_injective_oracle_v1beta1_QueryProviderPriceStateRequest,
        __Marshaller_injective_oracle_v1beta1_QueryProviderPriceStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryModuleStateRequest, global::Injective.Oracle.V1Beta1.QueryModuleStateResponse> __Method_OracleModuleState = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryModuleStateRequest, global::Injective.Oracle.V1Beta1.QueryModuleStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OracleModuleState",
        __Marshaller_injective_oracle_v1beta1_QueryModuleStateRequest,
        __Marshaller_injective_oracle_v1beta1_QueryModuleStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest, global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse> __Method_HistoricalPriceRecords = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest, global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HistoricalPriceRecords",
        __Marshaller_injective_oracle_v1beta1_QueryHistoricalPriceRecordsRequest,
        __Marshaller_injective_oracle_v1beta1_QueryHistoricalPriceRecordsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest, global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse> __Method_OracleVolatility = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest, global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OracleVolatility",
        __Marshaller_injective_oracle_v1beta1_QueryOracleVolatilityRequest,
        __Marshaller_injective_oracle_v1beta1_QueryOracleVolatilityResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest, global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse> __Method_OracleProvidersInfo = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest, global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OracleProvidersInfo",
        __Marshaller_injective_oracle_v1beta1_QueryOracleProvidersInfoRequest,
        __Marshaller_injective_oracle_v1beta1_QueryOracleProvidersInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest, global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse> __Method_OracleProviderPrices = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest, global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OracleProviderPrices",
        __Marshaller_injective_oracle_v1beta1_QueryOracleProviderPricesRequest,
        __Marshaller_injective_oracle_v1beta1_QueryOracleProviderPricesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest, global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse> __Method_OraclePrice = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest, global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OraclePrice",
        __Marshaller_injective_oracle_v1beta1_QueryOraclePriceRequest,
        __Marshaller_injective_oracle_v1beta1_QueryOraclePriceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Oracle.V1Beta1.QueryPythPriceRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceResponse> __Method_PythPrice = new grpc::Method<global::Injective.Oracle.V1Beta1.QueryPythPriceRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PythPrice",
        __Marshaller_injective_oracle_v1beta1_QueryPythPriceRequest,
        __Marshaller_injective_oracle_v1beta1_QueryPythPriceResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Oracle.V1Beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// Retrieves oracle params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryParamsResponse> Params(global::Injective.Oracle.V1Beta1.QueryParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the band relayers
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse> BandRelayers(global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all band price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse> BandPriceStates(global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all band ibc price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse> BandIBCPriceStates(global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse> PriceFeedPriceStates(global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all coinbase price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse> CoinbasePriceStates(global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all pyth price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse> PythPriceStates(global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the state for all provider price feeds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse> ProviderPriceState(global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the entire oracle module's state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryModuleStateResponse> OracleModuleState(global::Injective.Oracle.V1Beta1.QueryModuleStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves historical price records for a given OracleType and Symbol
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse> HistoricalPriceRecords(global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves mixed volatility value for the specified pair of base/quote
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse> OracleVolatility(global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse> OracleProvidersInfo(global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse> OracleProviderPrices(global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse> OraclePrice(global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Oracle.V1Beta1.QueryPythPriceResponse> PythPrice(global::Injective.Oracle.V1Beta1.QueryPythPriceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves oracle params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryParamsResponse Params(global::Injective.Oracle.V1Beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Params(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves oracle params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryParamsResponse Params(global::Injective.Oracle.V1Beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Retrieves oracle params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryParamsResponse> ParamsAsync(global::Injective.Oracle.V1Beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves oracle params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryParamsResponse> ParamsAsync(global::Injective.Oracle.V1Beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Retrieves the band relayers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse BandRelayers(global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandRelayers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the band relayers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse BandRelayers(global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BandRelayers, null, options, request);
      }
      /// <summary>
      /// Retrieves the band relayers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse> BandRelayersAsync(global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandRelayersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the band relayers
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse> BandRelayersAsync(global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BandRelayers, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all band price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse BandPriceStates(global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandPriceStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all band price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse BandPriceStates(global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BandPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all band price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse> BandPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandPriceStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all band price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse> BandPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BandPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all band ibc price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse BandIBCPriceStates(global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandIBCPriceStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all band ibc price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse BandIBCPriceStates(global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BandIBCPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all band ibc price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse> BandIBCPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BandIBCPriceStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all band ibc price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse> BandIBCPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BandIBCPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse PriceFeedPriceStates(global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PriceFeedPriceStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse PriceFeedPriceStates(global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PriceFeedPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse> PriceFeedPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PriceFeedPriceStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse> PriceFeedPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PriceFeedPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all coinbase price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse CoinbasePriceStates(global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CoinbasePriceStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all coinbase price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse CoinbasePriceStates(global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CoinbasePriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all coinbase price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse> CoinbasePriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CoinbasePriceStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all coinbase price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse> CoinbasePriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CoinbasePriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all pyth price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse PythPriceStates(global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PythPriceStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all pyth price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse PythPriceStates(global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PythPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all pyth price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse> PythPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PythPriceStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all pyth price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse> PythPriceStatesAsync(global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PythPriceStates, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all provider price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse ProviderPriceState(global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProviderPriceState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all provider price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse ProviderPriceState(global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ProviderPriceState, null, options, request);
      }
      /// <summary>
      /// Retrieves the state for all provider price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse> ProviderPriceStateAsync(global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ProviderPriceStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the state for all provider price feeds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse> ProviderPriceStateAsync(global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ProviderPriceState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire oracle module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryModuleStateResponse OracleModuleState(global::Injective.Oracle.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleModuleState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire oracle module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryModuleStateResponse OracleModuleState(global::Injective.Oracle.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OracleModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire oracle module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryModuleStateResponse> OracleModuleStateAsync(global::Injective.Oracle.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleModuleStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire oracle module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryModuleStateResponse> OracleModuleStateAsync(global::Injective.Oracle.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OracleModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves historical price records for a given OracleType and Symbol
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse HistoricalPriceRecords(global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HistoricalPriceRecords(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves historical price records for a given OracleType and Symbol
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse HistoricalPriceRecords(global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HistoricalPriceRecords, null, options, request);
      }
      /// <summary>
      /// Retrieves historical price records for a given OracleType and Symbol
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse> HistoricalPriceRecordsAsync(global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HistoricalPriceRecordsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves historical price records for a given OracleType and Symbol
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse> HistoricalPriceRecordsAsync(global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HistoricalPriceRecords, null, options, request);
      }
      /// <summary>
      /// Retrieves mixed volatility value for the specified pair of base/quote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse OracleVolatility(global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleVolatility(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mixed volatility value for the specified pair of base/quote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse OracleVolatility(global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OracleVolatility, null, options, request);
      }
      /// <summary>
      /// Retrieves mixed volatility value for the specified pair of base/quote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse> OracleVolatilityAsync(global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleVolatilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mixed volatility value for the specified pair of base/quote
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse> OracleVolatilityAsync(global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OracleVolatility, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse OracleProvidersInfo(global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleProvidersInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse OracleProvidersInfo(global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OracleProvidersInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse> OracleProvidersInfoAsync(global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleProvidersInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse> OracleProvidersInfoAsync(global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OracleProvidersInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse OracleProviderPrices(global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleProviderPrices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse OracleProviderPrices(global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OracleProviderPrices, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse> OracleProviderPricesAsync(global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleProviderPricesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse> OracleProviderPricesAsync(global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OracleProviderPrices, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse OraclePrice(global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OraclePrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse OraclePrice(global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OraclePrice, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse> OraclePriceAsync(global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OraclePriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse> OraclePriceAsync(global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OraclePrice, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPythPriceResponse PythPrice(global::Injective.Oracle.V1Beta1.QueryPythPriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PythPrice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Oracle.V1Beta1.QueryPythPriceResponse PythPrice(global::Injective.Oracle.V1Beta1.QueryPythPriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PythPrice, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPythPriceResponse> PythPriceAsync(global::Injective.Oracle.V1Beta1.QueryPythPriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PythPriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Oracle.V1Beta1.QueryPythPriceResponse> PythPriceAsync(global::Injective.Oracle.V1Beta1.QueryPythPriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PythPrice, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Params, serviceImpl.Params)
          .AddMethod(__Method_BandRelayers, serviceImpl.BandRelayers)
          .AddMethod(__Method_BandPriceStates, serviceImpl.BandPriceStates)
          .AddMethod(__Method_BandIBCPriceStates, serviceImpl.BandIBCPriceStates)
          .AddMethod(__Method_PriceFeedPriceStates, serviceImpl.PriceFeedPriceStates)
          .AddMethod(__Method_CoinbasePriceStates, serviceImpl.CoinbasePriceStates)
          .AddMethod(__Method_PythPriceStates, serviceImpl.PythPriceStates)
          .AddMethod(__Method_ProviderPriceState, serviceImpl.ProviderPriceState)
          .AddMethod(__Method_OracleModuleState, serviceImpl.OracleModuleState)
          .AddMethod(__Method_HistoricalPriceRecords, serviceImpl.HistoricalPriceRecords)
          .AddMethod(__Method_OracleVolatility, serviceImpl.OracleVolatility)
          .AddMethod(__Method_OracleProvidersInfo, serviceImpl.OracleProvidersInfo)
          .AddMethod(__Method_OracleProviderPrices, serviceImpl.OracleProviderPrices)
          .AddMethod(__Method_OraclePrice, serviceImpl.OraclePrice)
          .AddMethod(__Method_PythPrice, serviceImpl.PythPrice).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Params, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryParamsRequest, global::Injective.Oracle.V1Beta1.QueryParamsResponse>(serviceImpl.Params));
      serviceBinder.AddMethod(__Method_BandRelayers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryBandRelayersRequest, global::Injective.Oracle.V1Beta1.QueryBandRelayersResponse>(serviceImpl.BandRelayers));
      serviceBinder.AddMethod(__Method_BandPriceStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryBandPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandPriceStatesResponse>(serviceImpl.BandPriceStates));
      serviceBinder.AddMethod(__Method_BandIBCPriceStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryBandIBCPriceStatesResponse>(serviceImpl.BandIBCPriceStates));
      serviceBinder.AddMethod(__Method_PriceFeedPriceStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPriceFeedPriceStatesResponse>(serviceImpl.PriceFeedPriceStates));
      serviceBinder.AddMethod(__Method_CoinbasePriceStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryCoinbasePriceStatesResponse>(serviceImpl.CoinbasePriceStates));
      serviceBinder.AddMethod(__Method_PythPriceStates, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryPythPriceStatesRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceStatesResponse>(serviceImpl.PythPriceStates));
      serviceBinder.AddMethod(__Method_ProviderPriceState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryProviderPriceStateRequest, global::Injective.Oracle.V1Beta1.QueryProviderPriceStateResponse>(serviceImpl.ProviderPriceState));
      serviceBinder.AddMethod(__Method_OracleModuleState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryModuleStateRequest, global::Injective.Oracle.V1Beta1.QueryModuleStateResponse>(serviceImpl.OracleModuleState));
      serviceBinder.AddMethod(__Method_HistoricalPriceRecords, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsRequest, global::Injective.Oracle.V1Beta1.QueryHistoricalPriceRecordsResponse>(serviceImpl.HistoricalPriceRecords));
      serviceBinder.AddMethod(__Method_OracleVolatility, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryOracleVolatilityRequest, global::Injective.Oracle.V1Beta1.QueryOracleVolatilityResponse>(serviceImpl.OracleVolatility));
      serviceBinder.AddMethod(__Method_OracleProvidersInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoRequest, global::Injective.Oracle.V1Beta1.QueryOracleProvidersInfoResponse>(serviceImpl.OracleProvidersInfo));
      serviceBinder.AddMethod(__Method_OracleProviderPrices, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesRequest, global::Injective.Oracle.V1Beta1.QueryOracleProviderPricesResponse>(serviceImpl.OracleProviderPrices));
      serviceBinder.AddMethod(__Method_OraclePrice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryOraclePriceRequest, global::Injective.Oracle.V1Beta1.QueryOraclePriceResponse>(serviceImpl.OraclePrice));
      serviceBinder.AddMethod(__Method_PythPrice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Oracle.V1Beta1.QueryPythPriceRequest, global::Injective.Oracle.V1Beta1.QueryPythPriceResponse>(serviceImpl.PythPrice));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cosmos/group/v1/tx.proto
// </auto-generated>
// Original file comments:
// Since: cosmos-sdk 0.46
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Cosmos.Group.V1 {
  /// <summary>
  /// Msg is the cosmos.group.v1 Msg service.
  /// </summary>
  public static partial class Msg
  {
    static readonly string __ServiceName = "cosmos.group.v1.Msg";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroup> __Marshaller_cosmos_group_v1_MsgCreateGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroupResponse> __Marshaller_cosmos_group_v1_MsgCreateGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroupResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupMembers> __Marshaller_cosmos_group_v1_MsgUpdateGroupMembers = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupMembers.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupMembersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupAdmin> __Marshaller_cosmos_group_v1_MsgUpdateGroupAdmin = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupAdmin.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupAdminResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupMetadata> __Marshaller_cosmos_group_v1_MsgUpdateGroupMetadata = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupMetadata.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroupPolicy> __Marshaller_cosmos_group_v1_MsgCreateGroupPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroupPolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse> __Marshaller_cosmos_group_v1_MsgCreateGroupPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroupWithPolicy> __Marshaller_cosmos_group_v1_MsgCreateGroupWithPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroupWithPolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse> __Marshaller_cosmos_group_v1_MsgCreateGroupWithPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyAdmin = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyAdminResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyDecisionPolicy = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyDecisionPolicyResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyMetadata = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse> __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgSubmitProposal> __Marshaller_cosmos_group_v1_MsgSubmitProposal = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgSubmitProposal.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgSubmitProposalResponse> __Marshaller_cosmos_group_v1_MsgSubmitProposalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgSubmitProposalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgWithdrawProposal> __Marshaller_cosmos_group_v1_MsgWithdrawProposal = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgWithdrawProposal.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgWithdrawProposalResponse> __Marshaller_cosmos_group_v1_MsgWithdrawProposalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgWithdrawProposalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgVote> __Marshaller_cosmos_group_v1_MsgVote = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgVote.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgVoteResponse> __Marshaller_cosmos_group_v1_MsgVoteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgVoteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgExec> __Marshaller_cosmos_group_v1_MsgExec = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgExec.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgExecResponse> __Marshaller_cosmos_group_v1_MsgExecResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgExecResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgLeaveGroup> __Marshaller_cosmos_group_v1_MsgLeaveGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgLeaveGroup.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Cosmos.Group.V1.MsgLeaveGroupResponse> __Marshaller_cosmos_group_v1_MsgLeaveGroupResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Cosmos.Group.V1.MsgLeaveGroupResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgCreateGroup, global::Cosmos.Group.V1.MsgCreateGroupResponse> __Method_CreateGroup = new grpc::Method<global::Cosmos.Group.V1.MsgCreateGroup, global::Cosmos.Group.V1.MsgCreateGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGroup",
        __Marshaller_cosmos_group_v1_MsgCreateGroup,
        __Marshaller_cosmos_group_v1_MsgCreateGroupResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupMembers, global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse> __Method_UpdateGroupMembers = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupMembers, global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupMembers",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupMembers,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupMembersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupAdmin, global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse> __Method_UpdateGroupAdmin = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupAdmin, global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupAdmin",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupAdmin,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupAdminResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupMetadata, global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse> __Method_UpdateGroupMetadata = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupMetadata, global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupMetadata",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupMetadata,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgCreateGroupPolicy, global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse> __Method_CreateGroupPolicy = new grpc::Method<global::Cosmos.Group.V1.MsgCreateGroupPolicy, global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGroupPolicy",
        __Marshaller_cosmos_group_v1_MsgCreateGroupPolicy,
        __Marshaller_cosmos_group_v1_MsgCreateGroupPolicyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgCreateGroupWithPolicy, global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse> __Method_CreateGroupWithPolicy = new grpc::Method<global::Cosmos.Group.V1.MsgCreateGroupWithPolicy, global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateGroupWithPolicy",
        __Marshaller_cosmos_group_v1_MsgCreateGroupWithPolicy,
        __Marshaller_cosmos_group_v1_MsgCreateGroupWithPolicyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin, global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse> __Method_UpdateGroupPolicyAdmin = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin, global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupPolicyAdmin",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyAdmin,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyAdminResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy, global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse> __Method_UpdateGroupPolicyDecisionPolicy = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy, global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupPolicyDecisionPolicy",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyDecisionPolicy,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyDecisionPolicyResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata, global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse> __Method_UpdateGroupPolicyMetadata = new grpc::Method<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata, global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateGroupPolicyMetadata",
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyMetadata,
        __Marshaller_cosmos_group_v1_MsgUpdateGroupPolicyMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgSubmitProposal, global::Cosmos.Group.V1.MsgSubmitProposalResponse> __Method_SubmitProposal = new grpc::Method<global::Cosmos.Group.V1.MsgSubmitProposal, global::Cosmos.Group.V1.MsgSubmitProposalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitProposal",
        __Marshaller_cosmos_group_v1_MsgSubmitProposal,
        __Marshaller_cosmos_group_v1_MsgSubmitProposalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgWithdrawProposal, global::Cosmos.Group.V1.MsgWithdrawProposalResponse> __Method_WithdrawProposal = new grpc::Method<global::Cosmos.Group.V1.MsgWithdrawProposal, global::Cosmos.Group.V1.MsgWithdrawProposalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawProposal",
        __Marshaller_cosmos_group_v1_MsgWithdrawProposal,
        __Marshaller_cosmos_group_v1_MsgWithdrawProposalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgVote, global::Cosmos.Group.V1.MsgVoteResponse> __Method_Vote = new grpc::Method<global::Cosmos.Group.V1.MsgVote, global::Cosmos.Group.V1.MsgVoteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Vote",
        __Marshaller_cosmos_group_v1_MsgVote,
        __Marshaller_cosmos_group_v1_MsgVoteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgExec, global::Cosmos.Group.V1.MsgExecResponse> __Method_Exec = new grpc::Method<global::Cosmos.Group.V1.MsgExec, global::Cosmos.Group.V1.MsgExecResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Exec",
        __Marshaller_cosmos_group_v1_MsgExec,
        __Marshaller_cosmos_group_v1_MsgExecResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Cosmos.Group.V1.MsgLeaveGroup, global::Cosmos.Group.V1.MsgLeaveGroupResponse> __Method_LeaveGroup = new grpc::Method<global::Cosmos.Group.V1.MsgLeaveGroup, global::Cosmos.Group.V1.MsgLeaveGroupResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LeaveGroup",
        __Marshaller_cosmos_group_v1_MsgLeaveGroup,
        __Marshaller_cosmos_group_v1_MsgLeaveGroupResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Cosmos.Group.V1.TxReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Msg</summary>
    [grpc::BindServiceMethod(typeof(Msg), "BindService")]
    public abstract partial class MsgBase
    {
      /// <summary>
      /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgCreateGroupResponse> CreateGroup(global::Cosmos.Group.V1.MsgCreateGroup request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupMembers updates the group members with given group id and admin address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse> UpdateGroupMembers(global::Cosmos.Group.V1.MsgUpdateGroupMembers request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse> UpdateGroupAdmin(global::Cosmos.Group.V1.MsgUpdateGroupAdmin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse> UpdateGroupMetadata(global::Cosmos.Group.V1.MsgUpdateGroupMetadata request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse> CreateGroupPolicy(global::Cosmos.Group.V1.MsgCreateGroupPolicy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateGroupWithPolicy creates a new group with policy.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse> CreateGroupWithPolicy(global::Cosmos.Group.V1.MsgCreateGroupWithPolicy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupPolicyAdmin updates a group policy admin.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse> UpdateGroupPolicyAdmin(global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse> UpdateGroupPolicyDecisionPolicy(global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// UpdateGroupPolicyMetadata updates a group policy metadata.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse> UpdateGroupPolicyMetadata(global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubmitProposal submits a new proposal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgSubmitProposalResponse> SubmitProposal(global::Cosmos.Group.V1.MsgSubmitProposal request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// WithdrawProposal withdraws a proposal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgWithdrawProposalResponse> WithdrawProposal(global::Cosmos.Group.V1.MsgWithdrawProposal request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Vote allows a voter to vote on a proposal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgVoteResponse> Vote(global::Cosmos.Group.V1.MsgVote request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Exec executes a proposal.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgExecResponse> Exec(global::Cosmos.Group.V1.MsgExec request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LeaveGroup allows a group member to leave the group.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Cosmos.Group.V1.MsgLeaveGroupResponse> LeaveGroup(global::Cosmos.Group.V1.MsgLeaveGroup request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Msg</summary>
    public partial class MsgClient : grpc::ClientBase<MsgClient>
    {
      /// <summary>Creates a new client for Msg</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Msg that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupResponse CreateGroup(global::Cosmos.Group.V1.MsgCreateGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupResponse CreateGroup(global::Cosmos.Group.V1.MsgCreateGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGroup, null, options, request);
      }
      /// <summary>
      /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupResponse> CreateGroupAsync(global::Cosmos.Group.V1.MsgCreateGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupResponse> CreateGroupAsync(global::Cosmos.Group.V1.MsgCreateGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGroup, null, options, request);
      }
      /// <summary>
      /// UpdateGroupMembers updates the group members with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse UpdateGroupMembers(global::Cosmos.Group.V1.MsgUpdateGroupMembers request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupMembers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupMembers updates the group members with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse UpdateGroupMembers(global::Cosmos.Group.V1.MsgUpdateGroupMembers request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupMembers, null, options, request);
      }
      /// <summary>
      /// UpdateGroupMembers updates the group members with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse> UpdateGroupMembersAsync(global::Cosmos.Group.V1.MsgUpdateGroupMembers request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupMembersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupMembers updates the group members with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse> UpdateGroupMembersAsync(global::Cosmos.Group.V1.MsgUpdateGroupMembers request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupMembers, null, options, request);
      }
      /// <summary>
      /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse UpdateGroupAdmin(global::Cosmos.Group.V1.MsgUpdateGroupAdmin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupAdmin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse UpdateGroupAdmin(global::Cosmos.Group.V1.MsgUpdateGroupAdmin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupAdmin, null, options, request);
      }
      /// <summary>
      /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse> UpdateGroupAdminAsync(global::Cosmos.Group.V1.MsgUpdateGroupAdmin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupAdminAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse> UpdateGroupAdminAsync(global::Cosmos.Group.V1.MsgUpdateGroupAdmin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupAdmin, null, options, request);
      }
      /// <summary>
      /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse UpdateGroupMetadata(global::Cosmos.Group.V1.MsgUpdateGroupMetadata request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse UpdateGroupMetadata(global::Cosmos.Group.V1.MsgUpdateGroupMetadata request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupMetadata, null, options, request);
      }
      /// <summary>
      /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse> UpdateGroupMetadataAsync(global::Cosmos.Group.V1.MsgUpdateGroupMetadata request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse> UpdateGroupMetadataAsync(global::Cosmos.Group.V1.MsgUpdateGroupMetadata request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupMetadata, null, options, request);
      }
      /// <summary>
      /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse CreateGroupPolicy(global::Cosmos.Group.V1.MsgCreateGroupPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse CreateGroupPolicy(global::Cosmos.Group.V1.MsgCreateGroupPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGroupPolicy, null, options, request);
      }
      /// <summary>
      /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse> CreateGroupPolicyAsync(global::Cosmos.Group.V1.MsgCreateGroupPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse> CreateGroupPolicyAsync(global::Cosmos.Group.V1.MsgCreateGroupPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGroupPolicy, null, options, request);
      }
      /// <summary>
      /// CreateGroupWithPolicy creates a new group with policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse CreateGroupWithPolicy(global::Cosmos.Group.V1.MsgCreateGroupWithPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupWithPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroupWithPolicy creates a new group with policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse CreateGroupWithPolicy(global::Cosmos.Group.V1.MsgCreateGroupWithPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateGroupWithPolicy, null, options, request);
      }
      /// <summary>
      /// CreateGroupWithPolicy creates a new group with policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse> CreateGroupWithPolicyAsync(global::Cosmos.Group.V1.MsgCreateGroupWithPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateGroupWithPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateGroupWithPolicy creates a new group with policy.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse> CreateGroupWithPolicyAsync(global::Cosmos.Group.V1.MsgCreateGroupWithPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateGroupWithPolicy, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyAdmin updates a group policy admin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse UpdateGroupPolicyAdmin(global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyAdmin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyAdmin updates a group policy admin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse UpdateGroupPolicyAdmin(global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupPolicyAdmin, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyAdmin updates a group policy admin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse> UpdateGroupPolicyAdminAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyAdminAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyAdmin updates a group policy admin.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse> UpdateGroupPolicyAdminAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupPolicyAdmin, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse UpdateGroupPolicyDecisionPolicy(global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyDecisionPolicy(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse UpdateGroupPolicyDecisionPolicy(global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupPolicyDecisionPolicy, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse> UpdateGroupPolicyDecisionPolicyAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyDecisionPolicyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse> UpdateGroupPolicyDecisionPolicyAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupPolicyDecisionPolicy, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyMetadata updates a group policy metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse UpdateGroupPolicyMetadata(global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyMetadata updates a group policy metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse UpdateGroupPolicyMetadata(global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateGroupPolicyMetadata, null, options, request);
      }
      /// <summary>
      /// UpdateGroupPolicyMetadata updates a group policy metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse> UpdateGroupPolicyMetadataAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateGroupPolicyMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateGroupPolicyMetadata updates a group policy metadata.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse> UpdateGroupPolicyMetadataAsync(global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateGroupPolicyMetadata, null, options, request);
      }
      /// <summary>
      /// SubmitProposal submits a new proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgSubmitProposalResponse SubmitProposal(global::Cosmos.Group.V1.MsgSubmitProposal request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitProposal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubmitProposal submits a new proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgSubmitProposalResponse SubmitProposal(global::Cosmos.Group.V1.MsgSubmitProposal request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitProposal, null, options, request);
      }
      /// <summary>
      /// SubmitProposal submits a new proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgSubmitProposalResponse> SubmitProposalAsync(global::Cosmos.Group.V1.MsgSubmitProposal request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubmitProposalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubmitProposal submits a new proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgSubmitProposalResponse> SubmitProposalAsync(global::Cosmos.Group.V1.MsgSubmitProposal request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitProposal, null, options, request);
      }
      /// <summary>
      /// WithdrawProposal withdraws a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgWithdrawProposalResponse WithdrawProposal(global::Cosmos.Group.V1.MsgWithdrawProposal request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawProposal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WithdrawProposal withdraws a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgWithdrawProposalResponse WithdrawProposal(global::Cosmos.Group.V1.MsgWithdrawProposal request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawProposal, null, options, request);
      }
      /// <summary>
      /// WithdrawProposal withdraws a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgWithdrawProposalResponse> WithdrawProposalAsync(global::Cosmos.Group.V1.MsgWithdrawProposal request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawProposalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WithdrawProposal withdraws a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgWithdrawProposalResponse> WithdrawProposalAsync(global::Cosmos.Group.V1.MsgWithdrawProposal request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawProposal, null, options, request);
      }
      /// <summary>
      /// Vote allows a voter to vote on a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgVoteResponse Vote(global::Cosmos.Group.V1.MsgVote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Vote(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Vote allows a voter to vote on a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgVoteResponse Vote(global::Cosmos.Group.V1.MsgVote request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Vote, null, options, request);
      }
      /// <summary>
      /// Vote allows a voter to vote on a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgVoteResponse> VoteAsync(global::Cosmos.Group.V1.MsgVote request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VoteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Vote allows a voter to vote on a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgVoteResponse> VoteAsync(global::Cosmos.Group.V1.MsgVote request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Vote, null, options, request);
      }
      /// <summary>
      /// Exec executes a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgExecResponse Exec(global::Cosmos.Group.V1.MsgExec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Exec(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exec executes a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgExecResponse Exec(global::Cosmos.Group.V1.MsgExec request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Exec, null, options, request);
      }
      /// <summary>
      /// Exec executes a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgExecResponse> ExecAsync(global::Cosmos.Group.V1.MsgExec request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Exec executes a proposal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgExecResponse> ExecAsync(global::Cosmos.Group.V1.MsgExec request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Exec, null, options, request);
      }
      /// <summary>
      /// LeaveGroup allows a group member to leave the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgLeaveGroupResponse LeaveGroup(global::Cosmos.Group.V1.MsgLeaveGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaveGroup allows a group member to leave the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Cosmos.Group.V1.MsgLeaveGroupResponse LeaveGroup(global::Cosmos.Group.V1.MsgLeaveGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LeaveGroup, null, options, request);
      }
      /// <summary>
      /// LeaveGroup allows a group member to leave the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgLeaveGroupResponse> LeaveGroupAsync(global::Cosmos.Group.V1.MsgLeaveGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LeaveGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LeaveGroup allows a group member to leave the group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Cosmos.Group.V1.MsgLeaveGroupResponse> LeaveGroupAsync(global::Cosmos.Group.V1.MsgLeaveGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LeaveGroup, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MsgClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MsgBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateGroup, serviceImpl.CreateGroup)
          .AddMethod(__Method_UpdateGroupMembers, serviceImpl.UpdateGroupMembers)
          .AddMethod(__Method_UpdateGroupAdmin, serviceImpl.UpdateGroupAdmin)
          .AddMethod(__Method_UpdateGroupMetadata, serviceImpl.UpdateGroupMetadata)
          .AddMethod(__Method_CreateGroupPolicy, serviceImpl.CreateGroupPolicy)
          .AddMethod(__Method_CreateGroupWithPolicy, serviceImpl.CreateGroupWithPolicy)
          .AddMethod(__Method_UpdateGroupPolicyAdmin, serviceImpl.UpdateGroupPolicyAdmin)
          .AddMethod(__Method_UpdateGroupPolicyDecisionPolicy, serviceImpl.UpdateGroupPolicyDecisionPolicy)
          .AddMethod(__Method_UpdateGroupPolicyMetadata, serviceImpl.UpdateGroupPolicyMetadata)
          .AddMethod(__Method_SubmitProposal, serviceImpl.SubmitProposal)
          .AddMethod(__Method_WithdrawProposal, serviceImpl.WithdrawProposal)
          .AddMethod(__Method_Vote, serviceImpl.Vote)
          .AddMethod(__Method_Exec, serviceImpl.Exec)
          .AddMethod(__Method_LeaveGroup, serviceImpl.LeaveGroup).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgCreateGroup, global::Cosmos.Group.V1.MsgCreateGroupResponse>(serviceImpl.CreateGroup));
      serviceBinder.AddMethod(__Method_UpdateGroupMembers, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupMembers, global::Cosmos.Group.V1.MsgUpdateGroupMembersResponse>(serviceImpl.UpdateGroupMembers));
      serviceBinder.AddMethod(__Method_UpdateGroupAdmin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupAdmin, global::Cosmos.Group.V1.MsgUpdateGroupAdminResponse>(serviceImpl.UpdateGroupAdmin));
      serviceBinder.AddMethod(__Method_UpdateGroupMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupMetadata, global::Cosmos.Group.V1.MsgUpdateGroupMetadataResponse>(serviceImpl.UpdateGroupMetadata));
      serviceBinder.AddMethod(__Method_CreateGroupPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgCreateGroupPolicy, global::Cosmos.Group.V1.MsgCreateGroupPolicyResponse>(serviceImpl.CreateGroupPolicy));
      serviceBinder.AddMethod(__Method_CreateGroupWithPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgCreateGroupWithPolicy, global::Cosmos.Group.V1.MsgCreateGroupWithPolicyResponse>(serviceImpl.CreateGroupWithPolicy));
      serviceBinder.AddMethod(__Method_UpdateGroupPolicyAdmin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdmin, global::Cosmos.Group.V1.MsgUpdateGroupPolicyAdminResponse>(serviceImpl.UpdateGroupPolicyAdmin));
      serviceBinder.AddMethod(__Method_UpdateGroupPolicyDecisionPolicy, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicy, global::Cosmos.Group.V1.MsgUpdateGroupPolicyDecisionPolicyResponse>(serviceImpl.UpdateGroupPolicyDecisionPolicy));
      serviceBinder.AddMethod(__Method_UpdateGroupPolicyMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadata, global::Cosmos.Group.V1.MsgUpdateGroupPolicyMetadataResponse>(serviceImpl.UpdateGroupPolicyMetadata));
      serviceBinder.AddMethod(__Method_SubmitProposal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgSubmitProposal, global::Cosmos.Group.V1.MsgSubmitProposalResponse>(serviceImpl.SubmitProposal));
      serviceBinder.AddMethod(__Method_WithdrawProposal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgWithdrawProposal, global::Cosmos.Group.V1.MsgWithdrawProposalResponse>(serviceImpl.WithdrawProposal));
      serviceBinder.AddMethod(__Method_Vote, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgVote, global::Cosmos.Group.V1.MsgVoteResponse>(serviceImpl.Vote));
      serviceBinder.AddMethod(__Method_Exec, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgExec, global::Cosmos.Group.V1.MsgExecResponse>(serviceImpl.Exec));
      serviceBinder.AddMethod(__Method_LeaveGroup, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Cosmos.Group.V1.MsgLeaveGroup, global::Cosmos.Group.V1.MsgLeaveGroupResponse>(serviceImpl.LeaveGroup));
    }

  }
}
#endregion

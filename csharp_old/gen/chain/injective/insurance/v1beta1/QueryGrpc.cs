// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/insurance/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Insurance.V1Beta1 {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "injective.insurance.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest> __Marshaller_injective_insurance_v1beta1_QueryInsuranceParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse> __Marshaller_injective_insurance_v1beta1_QueryInsuranceParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest> __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse> __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest> __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse> __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest> __Marshaller_injective_insurance_v1beta1_QueryEstimatedRedemptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse> __Marshaller_injective_insurance_v1beta1_QueryEstimatedRedemptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest> __Marshaller_injective_insurance_v1beta1_QueryPendingRedemptionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse> __Marshaller_injective_insurance_v1beta1_QueryPendingRedemptionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryModuleStateRequest> __Marshaller_injective_insurance_v1beta1_QueryModuleStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryModuleStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Insurance.V1Beta1.QueryModuleStateResponse> __Marshaller_injective_insurance_v1beta1_QueryModuleStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Insurance.V1Beta1.QueryModuleStateResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse> __Method_InsuranceParams = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsuranceParams",
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceParamsRequest,
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse> __Method_InsuranceFund = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsuranceFund",
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundRequest,
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse> __Method_InsuranceFunds = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsuranceFunds",
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundsRequest,
        __Marshaller_injective_insurance_v1beta1_QueryInsuranceFundsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse> __Method_EstimatedRedemptions = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EstimatedRedemptions",
        __Marshaller_injective_insurance_v1beta1_QueryEstimatedRedemptionsRequest,
        __Marshaller_injective_insurance_v1beta1_QueryEstimatedRedemptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse> __Method_PendingRedemptions = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PendingRedemptions",
        __Marshaller_injective_insurance_v1beta1_QueryPendingRedemptionsRequest,
        __Marshaller_injective_insurance_v1beta1_QueryPendingRedemptionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Insurance.V1Beta1.QueryModuleStateRequest, global::Injective.Insurance.V1Beta1.QueryModuleStateResponse> __Method_InsuranceModuleState = new grpc::Method<global::Injective.Insurance.V1Beta1.QueryModuleStateRequest, global::Injective.Insurance.V1Beta1.QueryModuleStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InsuranceModuleState",
        __Marshaller_injective_insurance_v1beta1_QueryModuleStateRequest,
        __Marshaller_injective_insurance_v1beta1_QueryModuleStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Insurance.V1Beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// Retrieves insurance params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse> InsuranceParams(global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves individual insurance fund information from market id
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse> InsuranceFund(global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all insurance funds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse> InsuranceFunds(global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrives the value of insurance fund share token at current price (not
      /// pending redemption)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse> EstimatedRedemptions(global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves pending redemptions' share token at current price
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse> PendingRedemptions(global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the entire insurance module's state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Insurance.V1Beta1.QueryModuleStateResponse> InsuranceModuleState(global::Injective.Insurance.V1Beta1.QueryModuleStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves insurance params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse InsuranceParams(global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves insurance params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse InsuranceParams(global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsuranceParams, null, options, request);
      }
      /// <summary>
      /// Retrieves insurance params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse> InsuranceParamsAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves insurance params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse> InsuranceParamsAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsuranceParams, null, options, request);
      }
      /// <summary>
      /// Retrieves individual insurance fund information from market id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse InsuranceFund(global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceFund(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves individual insurance fund information from market id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse InsuranceFund(global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsuranceFund, null, options, request);
      }
      /// <summary>
      /// Retrieves individual insurance fund information from market id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse> InsuranceFundAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceFundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves individual insurance fund information from market id
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse> InsuranceFundAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsuranceFund, null, options, request);
      }
      /// <summary>
      /// Retrieves all insurance funds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse InsuranceFunds(global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceFunds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all insurance funds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse InsuranceFunds(global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsuranceFunds, null, options, request);
      }
      /// <summary>
      /// Retrieves all insurance funds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse> InsuranceFundsAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceFundsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all insurance funds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse> InsuranceFundsAsync(global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsuranceFunds, null, options, request);
      }
      /// <summary>
      /// Retrives the value of insurance fund share token at current price (not
      /// pending redemption)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse EstimatedRedemptions(global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstimatedRedemptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrives the value of insurance fund share token at current price (not
      /// pending redemption)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse EstimatedRedemptions(global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EstimatedRedemptions, null, options, request);
      }
      /// <summary>
      /// Retrives the value of insurance fund share token at current price (not
      /// pending redemption)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse> EstimatedRedemptionsAsync(global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EstimatedRedemptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrives the value of insurance fund share token at current price (not
      /// pending redemption)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse> EstimatedRedemptionsAsync(global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EstimatedRedemptions, null, options, request);
      }
      /// <summary>
      /// Retrieves pending redemptions' share token at current price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse PendingRedemptions(global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PendingRedemptions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves pending redemptions' share token at current price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse PendingRedemptions(global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PendingRedemptions, null, options, request);
      }
      /// <summary>
      /// Retrieves pending redemptions' share token at current price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse> PendingRedemptionsAsync(global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PendingRedemptionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves pending redemptions' share token at current price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse> PendingRedemptionsAsync(global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PendingRedemptions, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire insurance module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryModuleStateResponse InsuranceModuleState(global::Injective.Insurance.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceModuleState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire insurance module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Insurance.V1Beta1.QueryModuleStateResponse InsuranceModuleState(global::Injective.Insurance.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InsuranceModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire insurance module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryModuleStateResponse> InsuranceModuleStateAsync(global::Injective.Insurance.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InsuranceModuleStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire insurance module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Insurance.V1Beta1.QueryModuleStateResponse> InsuranceModuleStateAsync(global::Injective.Insurance.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InsuranceModuleState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_InsuranceParams, serviceImpl.InsuranceParams)
          .AddMethod(__Method_InsuranceFund, serviceImpl.InsuranceFund)
          .AddMethod(__Method_InsuranceFunds, serviceImpl.InsuranceFunds)
          .AddMethod(__Method_EstimatedRedemptions, serviceImpl.EstimatedRedemptions)
          .AddMethod(__Method_PendingRedemptions, serviceImpl.PendingRedemptions)
          .AddMethod(__Method_InsuranceModuleState, serviceImpl.InsuranceModuleState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_InsuranceParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryInsuranceParamsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceParamsResponse>(serviceImpl.InsuranceParams));
      serviceBinder.AddMethod(__Method_InsuranceFund, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryInsuranceFundRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundResponse>(serviceImpl.InsuranceFund));
      serviceBinder.AddMethod(__Method_InsuranceFunds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryInsuranceFundsRequest, global::Injective.Insurance.V1Beta1.QueryInsuranceFundsResponse>(serviceImpl.InsuranceFunds));
      serviceBinder.AddMethod(__Method_EstimatedRedemptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryEstimatedRedemptionsResponse>(serviceImpl.EstimatedRedemptions));
      serviceBinder.AddMethod(__Method_PendingRedemptions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsRequest, global::Injective.Insurance.V1Beta1.QueryPendingRedemptionsResponse>(serviceImpl.PendingRedemptions));
      serviceBinder.AddMethod(__Method_InsuranceModuleState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Insurance.V1Beta1.QueryModuleStateRequest, global::Injective.Insurance.V1Beta1.QueryModuleStateResponse>(serviceImpl.InsuranceModuleState));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/exchange/v1beta1/tx.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Exchange.V1Beta1 {
  /// <summary>
  /// Msg defines the exchange Msg service.
  /// </summary>
  public static partial class Msg
  {
    static readonly string __ServiceName = "injective.exchange.v1beta1.Msg";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgDeposit> __Marshaller_injective_exchange_v1beta1_MsgDeposit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgDeposit.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgDepositResponse> __Marshaller_injective_exchange_v1beta1_MsgDepositResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgDepositResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgWithdraw> __Marshaller_injective_exchange_v1beta1_MsgWithdraw = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgWithdraw.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgWithdrawResponse> __Marshaller_injective_exchange_v1beta1_MsgWithdrawResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgWithdrawResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch> __Marshaller_injective_exchange_v1beta1_MsgInstantSpotMarketLaunch = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse> __Marshaller_injective_exchange_v1beta1_MsgInstantSpotMarketLaunchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch> __Marshaller_injective_exchange_v1beta1_MsgInstantPerpetualMarketLaunch = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse> __Marshaller_injective_exchange_v1beta1_MsgInstantPerpetualMarketLaunchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch> __Marshaller_injective_exchange_v1beta1_MsgInstantExpiryFuturesMarketLaunch = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse> __Marshaller_injective_exchange_v1beta1_MsgInstantExpiryFuturesMarketLaunchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateSpotLimitOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateSpotLimitOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchCreateSpotLimitOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchCreateSpotLimitOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateSpotMarketOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateSpotMarketOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder> __Marshaller_injective_exchange_v1beta1_MsgCancelSpotOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCancelSpotOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelSpotOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelSpotOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchUpdateOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchUpdateOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract> __Marshaller_injective_exchange_v1beta1_MsgPrivilegedExecuteContract = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse> __Marshaller_injective_exchange_v1beta1_MsgPrivilegedExecuteContractResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeLimitOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeLimitOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchCreateDerivativeLimitOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchCreateDerivativeLimitOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeMarketOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeMarketOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder> __Marshaller_injective_exchange_v1beta1_MsgCancelDerivativeOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCancelDerivativeOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelDerivativeOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelDerivativeOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch> __Marshaller_injective_exchange_v1beta1_MsgInstantBinaryOptionsMarketLaunch = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse> __Marshaller_injective_exchange_v1beta1_MsgInstantBinaryOptionsMarketLaunchResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsLimitOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsLimitOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder> __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsMarketOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsMarketOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder> __Marshaller_injective_exchange_v1beta1_MsgCancelBinaryOptionsOrder = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse> __Marshaller_injective_exchange_v1beta1_MsgCancelBinaryOptionsOrderResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelBinaryOptionsOrders = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse> __Marshaller_injective_exchange_v1beta1_MsgBatchCancelBinaryOptionsOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer> __Marshaller_injective_exchange_v1beta1_MsgSubaccountTransfer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse> __Marshaller_injective_exchange_v1beta1_MsgSubaccountTransferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgExternalTransfer> __Marshaller_injective_exchange_v1beta1_MsgExternalTransfer = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgExternalTransfer.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse> __Marshaller_injective_exchange_v1beta1_MsgExternalTransferResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgLiquidatePosition> __Marshaller_injective_exchange_v1beta1_MsgLiquidatePosition = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgLiquidatePosition.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse> __Marshaller_injective_exchange_v1beta1_MsgLiquidatePositionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin> __Marshaller_injective_exchange_v1beta1_MsgIncreasePositionMargin = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse> __Marshaller_injective_exchange_v1beta1_MsgIncreasePositionMarginResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgRewardsOptOut> __Marshaller_injective_exchange_v1beta1_MsgRewardsOptOut = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgRewardsOptOut.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse> __Marshaller_injective_exchange_v1beta1_MsgRewardsOptOutResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket> __Marshaller_injective_exchange_v1beta1_MsgAdminUpdateBinaryOptionsMarket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse> __Marshaller_injective_exchange_v1beta1_MsgAdminUpdateBinaryOptionsMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds> __Marshaller_injective_exchange_v1beta1_MsgReclaimLockedFunds = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse> __Marshaller_injective_exchange_v1beta1_MsgReclaimLockedFundsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgUpdateParams> __Marshaller_injective_exchange_v1beta1_MsgUpdateParams = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgUpdateParams.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse> __Marshaller_injective_exchange_v1beta1_MsgUpdateParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgDeposit, global::Injective.Exchange.V1Beta1.MsgDepositResponse> __Method_Deposit = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgDeposit, global::Injective.Exchange.V1Beta1.MsgDepositResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Deposit",
        __Marshaller_injective_exchange_v1beta1_MsgDeposit,
        __Marshaller_injective_exchange_v1beta1_MsgDepositResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgWithdraw, global::Injective.Exchange.V1Beta1.MsgWithdrawResponse> __Method_Withdraw = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgWithdraw, global::Injective.Exchange.V1Beta1.MsgWithdrawResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Withdraw",
        __Marshaller_injective_exchange_v1beta1_MsgWithdraw,
        __Marshaller_injective_exchange_v1beta1_MsgWithdrawResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse> __Method_InstantSpotMarketLaunch = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantSpotMarketLaunch",
        __Marshaller_injective_exchange_v1beta1_MsgInstantSpotMarketLaunch,
        __Marshaller_injective_exchange_v1beta1_MsgInstantSpotMarketLaunchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse> __Method_InstantPerpetualMarketLaunch = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantPerpetualMarketLaunch",
        __Marshaller_injective_exchange_v1beta1_MsgInstantPerpetualMarketLaunch,
        __Marshaller_injective_exchange_v1beta1_MsgInstantPerpetualMarketLaunchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse> __Method_InstantExpiryFuturesMarketLaunch = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantExpiryFuturesMarketLaunch",
        __Marshaller_injective_exchange_v1beta1_MsgInstantExpiryFuturesMarketLaunch,
        __Marshaller_injective_exchange_v1beta1_MsgInstantExpiryFuturesMarketLaunchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse> __Method_CreateSpotLimitOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSpotLimitOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateSpotLimitOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateSpotLimitOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse> __Method_BatchCreateSpotLimitOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateSpotLimitOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchCreateSpotLimitOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchCreateSpotLimitOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse> __Method_CreateSpotMarketOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSpotMarketOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateSpotMarketOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateSpotMarketOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder, global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse> __Method_CancelSpotOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder, global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelSpotOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCancelSpotOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCancelSpotOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse> __Method_BatchCancelSpotOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCancelSpotOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelSpotOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelSpotOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders, global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse> __Method_BatchUpdateOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders, global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchUpdateOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchUpdateOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchUpdateOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract, global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse> __Method_PrivilegedExecuteContract = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract, global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrivilegedExecuteContract",
        __Marshaller_injective_exchange_v1beta1_MsgPrivilegedExecuteContract,
        __Marshaller_injective_exchange_v1beta1_MsgPrivilegedExecuteContractResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse> __Method_CreateDerivativeLimitOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDerivativeLimitOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeLimitOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeLimitOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse> __Method_BatchCreateDerivativeLimitOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCreateDerivativeLimitOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchCreateDerivativeLimitOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchCreateDerivativeLimitOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse> __Method_CreateDerivativeMarketOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDerivativeMarketOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeMarketOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateDerivativeMarketOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder, global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse> __Method_CancelDerivativeOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder, global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelDerivativeOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCancelDerivativeOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCancelDerivativeOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse> __Method_BatchCancelDerivativeOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCancelDerivativeOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelDerivativeOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelDerivativeOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse> __Method_InstantBinaryOptionsMarketLaunch = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InstantBinaryOptionsMarketLaunch",
        __Marshaller_injective_exchange_v1beta1_MsgInstantBinaryOptionsMarketLaunch,
        __Marshaller_injective_exchange_v1beta1_MsgInstantBinaryOptionsMarketLaunchResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse> __Method_CreateBinaryOptionsLimitOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBinaryOptionsLimitOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsLimitOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsLimitOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse> __Method_CreateBinaryOptionsMarketOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBinaryOptionsMarketOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsMarketOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCreateBinaryOptionsMarketOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder, global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse> __Method_CancelBinaryOptionsOrder = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder, global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelBinaryOptionsOrder",
        __Marshaller_injective_exchange_v1beta1_MsgCancelBinaryOptionsOrder,
        __Marshaller_injective_exchange_v1beta1_MsgCancelBinaryOptionsOrderResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse> __Method_BatchCancelBinaryOptionsOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BatchCancelBinaryOptionsOrders",
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelBinaryOptionsOrders,
        __Marshaller_injective_exchange_v1beta1_MsgBatchCancelBinaryOptionsOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer, global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse> __Method_SubaccountTransfer = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer, global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountTransfer",
        __Marshaller_injective_exchange_v1beta1_MsgSubaccountTransfer,
        __Marshaller_injective_exchange_v1beta1_MsgSubaccountTransferResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgExternalTransfer, global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse> __Method_ExternalTransfer = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgExternalTransfer, global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExternalTransfer",
        __Marshaller_injective_exchange_v1beta1_MsgExternalTransfer,
        __Marshaller_injective_exchange_v1beta1_MsgExternalTransferResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgLiquidatePosition, global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse> __Method_LiquidatePosition = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgLiquidatePosition, global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LiquidatePosition",
        __Marshaller_injective_exchange_v1beta1_MsgLiquidatePosition,
        __Marshaller_injective_exchange_v1beta1_MsgLiquidatePositionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin, global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse> __Method_IncreasePositionMargin = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin, global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IncreasePositionMargin",
        __Marshaller_injective_exchange_v1beta1_MsgIncreasePositionMargin,
        __Marshaller_injective_exchange_v1beta1_MsgIncreasePositionMarginResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgRewardsOptOut, global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse> __Method_RewardsOptOut = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgRewardsOptOut, global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RewardsOptOut",
        __Marshaller_injective_exchange_v1beta1_MsgRewardsOptOut,
        __Marshaller_injective_exchange_v1beta1_MsgRewardsOptOutResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket, global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse> __Method_AdminUpdateBinaryOptionsMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket, global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AdminUpdateBinaryOptionsMarket",
        __Marshaller_injective_exchange_v1beta1_MsgAdminUpdateBinaryOptionsMarket,
        __Marshaller_injective_exchange_v1beta1_MsgAdminUpdateBinaryOptionsMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds, global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse> __Method_ReclaimLockedFunds = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds, global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReclaimLockedFunds",
        __Marshaller_injective_exchange_v1beta1_MsgReclaimLockedFunds,
        __Marshaller_injective_exchange_v1beta1_MsgReclaimLockedFundsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MsgUpdateParams, global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse> __Method_UpdateParams = new grpc::Method<global::Injective.Exchange.V1Beta1.MsgUpdateParams, global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParams",
        __Marshaller_injective_exchange_v1beta1_MsgUpdateParams,
        __Marshaller_injective_exchange_v1beta1_MsgUpdateParamsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Exchange.V1Beta1.TxReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Msg</summary>
    [grpc::BindServiceMethod(typeof(Msg), "BindService")]
    public abstract partial class MsgBase
    {
      /// <summary>
      /// Deposit defines a method for transferring coins from the sender's bank
      /// balance into the subaccount's exchange deposits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgDepositResponse> Deposit(global::Injective.Exchange.V1Beta1.MsgDeposit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Withdraw defines a method for withdrawing coins from a subaccount's
      /// deposits to the user's bank balance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgWithdrawResponse> Withdraw(global::Injective.Exchange.V1Beta1.MsgWithdraw request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InstantSpotMarketLaunch defines method for creating a spot market by paying
      /// listing fee without governance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse> InstantSpotMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InstantPerpetualMarketLaunch defines a method for creating a new perpetual
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse> InstantPerpetualMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InstantExpiryFuturesMarketLaunch defines a method for creating a new expiry
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse> InstantExpiryFuturesMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateSpotLimitOrder defines a method for creating a new spot limit order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse> CreateSpotLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BatchCreateSpotLimitOrder defines a method for creating a new batch of spot
      /// limit orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse> BatchCreateSpotLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateSpotMarketOrder defines a method for creating a new spot market
      /// order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse> CreateSpotMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MsgCancelSpotOrder defines a method for cancelling a spot order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse> CancelSpotOrder(global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BatchCancelSpotOrders defines a method for cancelling a batch of spot
      /// orders in a given market.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse> BatchCancelSpotOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BatchUpdateOrders defines a method for updating a batch of orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse> BatchUpdateOrders(global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// PrivilegedExecuteContract defines a method for executing a Cosmwasm
      /// contract from the exchange module with privileged capabilities.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse> PrivilegedExecuteContract(global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateDerivativeLimitOrder defines a method for creating a new derivative
      /// limit order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse> CreateDerivativeLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BatchCreateDerivativeLimitOrders defines a method for creating a new batch
      /// of derivative limit orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse> BatchCreateDerivativeLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MsgCreateDerivativeLimitOrder defines a method for creating a new
      /// derivative market order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse> CreateDerivativeMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MsgCancelDerivativeOrder defines a method for cancelling a derivative
      /// order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse> CancelDerivativeOrder(global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MsgBatchCancelDerivativeOrders defines a method for cancelling a batch of
      /// derivative limit orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse> BatchCancelDerivativeOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// InstantBinaryOptionsMarketLaunch defines method for creating a binary
      /// options market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse> InstantBinaryOptionsMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateBinaryOptionsLimitOrder defines a method for creating a new binary
      /// options limit order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse> CreateBinaryOptionsLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateBinaryOptionsMarketOrder defines a method for creating a new binary
      /// options market order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse> CreateBinaryOptionsMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MsgCancelBinaryOptionsOrder defines a method for cancelling a binary
      /// options order.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse> CancelBinaryOptionsOrder(global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// BatchCancelBinaryOptionsOrders defines a method for cancelling a batch of
      /// binary options limit orders.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse> BatchCancelBinaryOptionsOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SubaccountTransfer defines a method for transfer between subaccounts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse> SubaccountTransfer(global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ExternalTransfer defines a method for transfer between external accounts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse> ExternalTransfer(global::Injective.Exchange.V1Beta1.MsgExternalTransfer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LiquidatePosition defines a method for liquidating a position
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse> LiquidatePosition(global::Injective.Exchange.V1Beta1.MsgLiquidatePosition request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// IncreasePositionMargin defines a method for increasing margin of a position
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse> IncreasePositionMargin(global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// RewardsOptOut defines a method for opting out of rewards
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse> RewardsOptOut(global::Injective.Exchange.V1Beta1.MsgRewardsOptOut request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AdminUpdateBinaryOptionsMarket defines method for updating a binary options
      /// market by admin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse> AdminUpdateBinaryOptionsMarket(global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse> ReclaimLockedFunds(global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse> UpdateParams(global::Injective.Exchange.V1Beta1.MsgUpdateParams request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Msg</summary>
    public partial class MsgClient : grpc::ClientBase<MsgClient>
    {
      /// <summary>Creates a new client for Msg</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Msg that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Deposit defines a method for transferring coins from the sender's bank
      /// balance into the subaccount's exchange deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgDepositResponse Deposit(global::Injective.Exchange.V1Beta1.MsgDeposit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Deposit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deposit defines a method for transferring coins from the sender's bank
      /// balance into the subaccount's exchange deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgDepositResponse Deposit(global::Injective.Exchange.V1Beta1.MsgDeposit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Deposit, null, options, request);
      }
      /// <summary>
      /// Deposit defines a method for transferring coins from the sender's bank
      /// balance into the subaccount's exchange deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgDepositResponse> DepositAsync(global::Injective.Exchange.V1Beta1.MsgDeposit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DepositAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deposit defines a method for transferring coins from the sender's bank
      /// balance into the subaccount's exchange deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgDepositResponse> DepositAsync(global::Injective.Exchange.V1Beta1.MsgDeposit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Deposit, null, options, request);
      }
      /// <summary>
      /// Withdraw defines a method for withdrawing coins from a subaccount's
      /// deposits to the user's bank balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgWithdrawResponse Withdraw(global::Injective.Exchange.V1Beta1.MsgWithdraw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Withdraw(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Withdraw defines a method for withdrawing coins from a subaccount's
      /// deposits to the user's bank balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgWithdrawResponse Withdraw(global::Injective.Exchange.V1Beta1.MsgWithdraw request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Withdraw, null, options, request);
      }
      /// <summary>
      /// Withdraw defines a method for withdrawing coins from a subaccount's
      /// deposits to the user's bank balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgWithdrawResponse> WithdrawAsync(global::Injective.Exchange.V1Beta1.MsgWithdraw request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Withdraw defines a method for withdrawing coins from a subaccount's
      /// deposits to the user's bank balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgWithdrawResponse> WithdrawAsync(global::Injective.Exchange.V1Beta1.MsgWithdraw request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Withdraw, null, options, request);
      }
      /// <summary>
      /// InstantSpotMarketLaunch defines method for creating a spot market by paying
      /// listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse InstantSpotMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantSpotMarketLaunch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantSpotMarketLaunch defines method for creating a spot market by paying
      /// listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse InstantSpotMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantSpotMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantSpotMarketLaunch defines method for creating a spot market by paying
      /// listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse> InstantSpotMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantSpotMarketLaunchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantSpotMarketLaunch defines method for creating a spot market by paying
      /// listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse> InstantSpotMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantSpotMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantPerpetualMarketLaunch defines a method for creating a new perpetual
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse InstantPerpetualMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantPerpetualMarketLaunch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantPerpetualMarketLaunch defines a method for creating a new perpetual
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse InstantPerpetualMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantPerpetualMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantPerpetualMarketLaunch defines a method for creating a new perpetual
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse> InstantPerpetualMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantPerpetualMarketLaunchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantPerpetualMarketLaunch defines a method for creating a new perpetual
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse> InstantPerpetualMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantPerpetualMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantExpiryFuturesMarketLaunch defines a method for creating a new expiry
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse InstantExpiryFuturesMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantExpiryFuturesMarketLaunch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantExpiryFuturesMarketLaunch defines a method for creating a new expiry
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse InstantExpiryFuturesMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantExpiryFuturesMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantExpiryFuturesMarketLaunch defines a method for creating a new expiry
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse> InstantExpiryFuturesMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantExpiryFuturesMarketLaunchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantExpiryFuturesMarketLaunch defines a method for creating a new expiry
      /// futures market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse> InstantExpiryFuturesMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantExpiryFuturesMarketLaunch, null, options, request);
      }
      /// <summary>
      /// CreateSpotLimitOrder defines a method for creating a new spot limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse CreateSpotLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpotLimitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateSpotLimitOrder defines a method for creating a new spot limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse CreateSpotLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSpotLimitOrder, null, options, request);
      }
      /// <summary>
      /// CreateSpotLimitOrder defines a method for creating a new spot limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse> CreateSpotLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpotLimitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateSpotLimitOrder defines a method for creating a new spot limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse> CreateSpotLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSpotLimitOrder, null, options, request);
      }
      /// <summary>
      /// BatchCreateSpotLimitOrder defines a method for creating a new batch of spot
      /// limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse BatchCreateSpotLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateSpotLimitOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCreateSpotLimitOrder defines a method for creating a new batch of spot
      /// limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse BatchCreateSpotLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateSpotLimitOrders, null, options, request);
      }
      /// <summary>
      /// BatchCreateSpotLimitOrder defines a method for creating a new batch of spot
      /// limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse> BatchCreateSpotLimitOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateSpotLimitOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCreateSpotLimitOrder defines a method for creating a new batch of spot
      /// limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse> BatchCreateSpotLimitOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateSpotLimitOrders, null, options, request);
      }
      /// <summary>
      /// CreateSpotMarketOrder defines a method for creating a new spot market
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse CreateSpotMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpotMarketOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateSpotMarketOrder defines a method for creating a new spot market
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse CreateSpotMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSpotMarketOrder, null, options, request);
      }
      /// <summary>
      /// CreateSpotMarketOrder defines a method for creating a new spot market
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse> CreateSpotMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSpotMarketOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateSpotMarketOrder defines a method for creating a new spot market
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse> CreateSpotMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSpotMarketOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelSpotOrder defines a method for cancelling a spot order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse CancelSpotOrder(global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelSpotOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelSpotOrder defines a method for cancelling a spot order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse CancelSpotOrder(global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelSpotOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelSpotOrder defines a method for cancelling a spot order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse> CancelSpotOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelSpotOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelSpotOrder defines a method for cancelling a spot order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse> CancelSpotOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelSpotOrder, null, options, request);
      }
      /// <summary>
      /// BatchCancelSpotOrders defines a method for cancelling a batch of spot
      /// orders in a given market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse BatchCancelSpotOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelSpotOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCancelSpotOrders defines a method for cancelling a batch of spot
      /// orders in a given market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse BatchCancelSpotOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCancelSpotOrders, null, options, request);
      }
      /// <summary>
      /// BatchCancelSpotOrders defines a method for cancelling a batch of spot
      /// orders in a given market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse> BatchCancelSpotOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelSpotOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCancelSpotOrders defines a method for cancelling a batch of spot
      /// orders in a given market.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse> BatchCancelSpotOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCancelSpotOrders, null, options, request);
      }
      /// <summary>
      /// BatchUpdateOrders defines a method for updating a batch of orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse BatchUpdateOrders(global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdateOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchUpdateOrders defines a method for updating a batch of orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse BatchUpdateOrders(global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchUpdateOrders, null, options, request);
      }
      /// <summary>
      /// BatchUpdateOrders defines a method for updating a batch of orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse> BatchUpdateOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchUpdateOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchUpdateOrders defines a method for updating a batch of orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse> BatchUpdateOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchUpdateOrders, null, options, request);
      }
      /// <summary>
      /// PrivilegedExecuteContract defines a method for executing a Cosmwasm
      /// contract from the exchange module with privileged capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse PrivilegedExecuteContract(global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrivilegedExecuteContract(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrivilegedExecuteContract defines a method for executing a Cosmwasm
      /// contract from the exchange module with privileged capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse PrivilegedExecuteContract(global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrivilegedExecuteContract, null, options, request);
      }
      /// <summary>
      /// PrivilegedExecuteContract defines a method for executing a Cosmwasm
      /// contract from the exchange module with privileged capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse> PrivilegedExecuteContractAsync(global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrivilegedExecuteContractAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrivilegedExecuteContract defines a method for executing a Cosmwasm
      /// contract from the exchange module with privileged capabilities.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse> PrivilegedExecuteContractAsync(global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrivilegedExecuteContract, null, options, request);
      }
      /// <summary>
      /// CreateDerivativeLimitOrder defines a method for creating a new derivative
      /// limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse CreateDerivativeLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDerivativeLimitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDerivativeLimitOrder defines a method for creating a new derivative
      /// limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse CreateDerivativeLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDerivativeLimitOrder, null, options, request);
      }
      /// <summary>
      /// CreateDerivativeLimitOrder defines a method for creating a new derivative
      /// limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse> CreateDerivativeLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDerivativeLimitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDerivativeLimitOrder defines a method for creating a new derivative
      /// limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse> CreateDerivativeLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDerivativeLimitOrder, null, options, request);
      }
      /// <summary>
      /// BatchCreateDerivativeLimitOrders defines a method for creating a new batch
      /// of derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse BatchCreateDerivativeLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateDerivativeLimitOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCreateDerivativeLimitOrders defines a method for creating a new batch
      /// of derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse BatchCreateDerivativeLimitOrders(global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCreateDerivativeLimitOrders, null, options, request);
      }
      /// <summary>
      /// BatchCreateDerivativeLimitOrders defines a method for creating a new batch
      /// of derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse> BatchCreateDerivativeLimitOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCreateDerivativeLimitOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCreateDerivativeLimitOrders defines a method for creating a new batch
      /// of derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse> BatchCreateDerivativeLimitOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCreateDerivativeLimitOrders, null, options, request);
      }
      /// <summary>
      /// MsgCreateDerivativeLimitOrder defines a method for creating a new
      /// derivative market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse CreateDerivativeMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDerivativeMarketOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCreateDerivativeLimitOrder defines a method for creating a new
      /// derivative market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse CreateDerivativeMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDerivativeMarketOrder, null, options, request);
      }
      /// <summary>
      /// MsgCreateDerivativeLimitOrder defines a method for creating a new
      /// derivative market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse> CreateDerivativeMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDerivativeMarketOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCreateDerivativeLimitOrder defines a method for creating a new
      /// derivative market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse> CreateDerivativeMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDerivativeMarketOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelDerivativeOrder defines a method for cancelling a derivative
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse CancelDerivativeOrder(global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelDerivativeOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelDerivativeOrder defines a method for cancelling a derivative
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse CancelDerivativeOrder(global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelDerivativeOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelDerivativeOrder defines a method for cancelling a derivative
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse> CancelDerivativeOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelDerivativeOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelDerivativeOrder defines a method for cancelling a derivative
      /// order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse> CancelDerivativeOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelDerivativeOrder, null, options, request);
      }
      /// <summary>
      /// MsgBatchCancelDerivativeOrders defines a method for cancelling a batch of
      /// derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse BatchCancelDerivativeOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelDerivativeOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgBatchCancelDerivativeOrders defines a method for cancelling a batch of
      /// derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse BatchCancelDerivativeOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCancelDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// MsgBatchCancelDerivativeOrders defines a method for cancelling a batch of
      /// derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse> BatchCancelDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelDerivativeOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgBatchCancelDerivativeOrders defines a method for cancelling a batch of
      /// derivative limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse> BatchCancelDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCancelDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// InstantBinaryOptionsMarketLaunch defines method for creating a binary
      /// options market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse InstantBinaryOptionsMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantBinaryOptionsMarketLaunch(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantBinaryOptionsMarketLaunch defines method for creating a binary
      /// options market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse InstantBinaryOptionsMarketLaunch(global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InstantBinaryOptionsMarketLaunch, null, options, request);
      }
      /// <summary>
      /// InstantBinaryOptionsMarketLaunch defines method for creating a binary
      /// options market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse> InstantBinaryOptionsMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InstantBinaryOptionsMarketLaunchAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// InstantBinaryOptionsMarketLaunch defines method for creating a binary
      /// options market by paying listing fee without governance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse> InstantBinaryOptionsMarketLaunchAsync(global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InstantBinaryOptionsMarketLaunch, null, options, request);
      }
      /// <summary>
      /// CreateBinaryOptionsLimitOrder defines a method for creating a new binary
      /// options limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse CreateBinaryOptionsLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBinaryOptionsLimitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBinaryOptionsLimitOrder defines a method for creating a new binary
      /// options limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse CreateBinaryOptionsLimitOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBinaryOptionsLimitOrder, null, options, request);
      }
      /// <summary>
      /// CreateBinaryOptionsLimitOrder defines a method for creating a new binary
      /// options limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse> CreateBinaryOptionsLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBinaryOptionsLimitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBinaryOptionsLimitOrder defines a method for creating a new binary
      /// options limit order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse> CreateBinaryOptionsLimitOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBinaryOptionsLimitOrder, null, options, request);
      }
      /// <summary>
      /// CreateBinaryOptionsMarketOrder defines a method for creating a new binary
      /// options market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse CreateBinaryOptionsMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBinaryOptionsMarketOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBinaryOptionsMarketOrder defines a method for creating a new binary
      /// options market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse CreateBinaryOptionsMarketOrder(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBinaryOptionsMarketOrder, null, options, request);
      }
      /// <summary>
      /// CreateBinaryOptionsMarketOrder defines a method for creating a new binary
      /// options market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse> CreateBinaryOptionsMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBinaryOptionsMarketOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBinaryOptionsMarketOrder defines a method for creating a new binary
      /// options market order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse> CreateBinaryOptionsMarketOrderAsync(global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBinaryOptionsMarketOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelBinaryOptionsOrder defines a method for cancelling a binary
      /// options order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse CancelBinaryOptionsOrder(global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBinaryOptionsOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelBinaryOptionsOrder defines a method for cancelling a binary
      /// options order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse CancelBinaryOptionsOrder(global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelBinaryOptionsOrder, null, options, request);
      }
      /// <summary>
      /// MsgCancelBinaryOptionsOrder defines a method for cancelling a binary
      /// options order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse> CancelBinaryOptionsOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelBinaryOptionsOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MsgCancelBinaryOptionsOrder defines a method for cancelling a binary
      /// options order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse> CancelBinaryOptionsOrderAsync(global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelBinaryOptionsOrder, null, options, request);
      }
      /// <summary>
      /// BatchCancelBinaryOptionsOrders defines a method for cancelling a batch of
      /// binary options limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse BatchCancelBinaryOptionsOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelBinaryOptionsOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCancelBinaryOptionsOrders defines a method for cancelling a batch of
      /// binary options limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse BatchCancelBinaryOptionsOrders(global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BatchCancelBinaryOptionsOrders, null, options, request);
      }
      /// <summary>
      /// BatchCancelBinaryOptionsOrders defines a method for cancelling a batch of
      /// binary options limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse> BatchCancelBinaryOptionsOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BatchCancelBinaryOptionsOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BatchCancelBinaryOptionsOrders defines a method for cancelling a batch of
      /// binary options limit orders.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse> BatchCancelBinaryOptionsOrdersAsync(global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BatchCancelBinaryOptionsOrders, null, options, request);
      }
      /// <summary>
      /// SubaccountTransfer defines a method for transfer between subaccounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse SubaccountTransfer(global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTransfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountTransfer defines a method for transfer between subaccounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse SubaccountTransfer(global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountTransfer, null, options, request);
      }
      /// <summary>
      /// SubaccountTransfer defines a method for transfer between subaccounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse> SubaccountTransferAsync(global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SubaccountTransfer defines a method for transfer between subaccounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse> SubaccountTransferAsync(global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountTransfer, null, options, request);
      }
      /// <summary>
      /// ExternalTransfer defines a method for transfer between external accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse ExternalTransfer(global::Injective.Exchange.V1Beta1.MsgExternalTransfer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExternalTransfer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExternalTransfer defines a method for transfer between external accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse ExternalTransfer(global::Injective.Exchange.V1Beta1.MsgExternalTransfer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExternalTransfer, null, options, request);
      }
      /// <summary>
      /// ExternalTransfer defines a method for transfer between external accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse> ExternalTransferAsync(global::Injective.Exchange.V1Beta1.MsgExternalTransfer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExternalTransferAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ExternalTransfer defines a method for transfer between external accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse> ExternalTransferAsync(global::Injective.Exchange.V1Beta1.MsgExternalTransfer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExternalTransfer, null, options, request);
      }
      /// <summary>
      /// LiquidatePosition defines a method for liquidating a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse LiquidatePosition(global::Injective.Exchange.V1Beta1.MsgLiquidatePosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LiquidatePosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LiquidatePosition defines a method for liquidating a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse LiquidatePosition(global::Injective.Exchange.V1Beta1.MsgLiquidatePosition request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LiquidatePosition, null, options, request);
      }
      /// <summary>
      /// LiquidatePosition defines a method for liquidating a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse> LiquidatePositionAsync(global::Injective.Exchange.V1Beta1.MsgLiquidatePosition request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LiquidatePositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LiquidatePosition defines a method for liquidating a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse> LiquidatePositionAsync(global::Injective.Exchange.V1Beta1.MsgLiquidatePosition request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LiquidatePosition, null, options, request);
      }
      /// <summary>
      /// IncreasePositionMargin defines a method for increasing margin of a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse IncreasePositionMargin(global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncreasePositionMargin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncreasePositionMargin defines a method for increasing margin of a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse IncreasePositionMargin(global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IncreasePositionMargin, null, options, request);
      }
      /// <summary>
      /// IncreasePositionMargin defines a method for increasing margin of a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse> IncreasePositionMarginAsync(global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IncreasePositionMarginAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// IncreasePositionMargin defines a method for increasing margin of a position
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse> IncreasePositionMarginAsync(global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IncreasePositionMargin, null, options, request);
      }
      /// <summary>
      /// RewardsOptOut defines a method for opting out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse RewardsOptOut(global::Injective.Exchange.V1Beta1.MsgRewardsOptOut request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RewardsOptOut(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RewardsOptOut defines a method for opting out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse RewardsOptOut(global::Injective.Exchange.V1Beta1.MsgRewardsOptOut request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RewardsOptOut, null, options, request);
      }
      /// <summary>
      /// RewardsOptOut defines a method for opting out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse> RewardsOptOutAsync(global::Injective.Exchange.V1Beta1.MsgRewardsOptOut request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RewardsOptOutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RewardsOptOut defines a method for opting out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse> RewardsOptOutAsync(global::Injective.Exchange.V1Beta1.MsgRewardsOptOut request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RewardsOptOut, null, options, request);
      }
      /// <summary>
      /// AdminUpdateBinaryOptionsMarket defines method for updating a binary options
      /// market by admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse AdminUpdateBinaryOptionsMarket(global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AdminUpdateBinaryOptionsMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AdminUpdateBinaryOptionsMarket defines method for updating a binary options
      /// market by admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse AdminUpdateBinaryOptionsMarket(global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AdminUpdateBinaryOptionsMarket, null, options, request);
      }
      /// <summary>
      /// AdminUpdateBinaryOptionsMarket defines method for updating a binary options
      /// market by admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse> AdminUpdateBinaryOptionsMarketAsync(global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AdminUpdateBinaryOptionsMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AdminUpdateBinaryOptionsMarket defines method for updating a binary options
      /// market by admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse> AdminUpdateBinaryOptionsMarketAsync(global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AdminUpdateBinaryOptionsMarket, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse ReclaimLockedFunds(global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReclaimLockedFunds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse ReclaimLockedFunds(global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReclaimLockedFunds, null, options, request);
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse> ReclaimLockedFundsAsync(global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReclaimLockedFundsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse> ReclaimLockedFundsAsync(global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReclaimLockedFunds, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse UpdateParams(global::Injective.Exchange.V1Beta1.MsgUpdateParams request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse UpdateParams(global::Injective.Exchange.V1Beta1.MsgUpdateParams request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParams, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse> UpdateParamsAsync(global::Injective.Exchange.V1Beta1.MsgUpdateParams request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse> UpdateParamsAsync(global::Injective.Exchange.V1Beta1.MsgUpdateParams request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParams, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MsgClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MsgBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Deposit, serviceImpl.Deposit)
          .AddMethod(__Method_Withdraw, serviceImpl.Withdraw)
          .AddMethod(__Method_InstantSpotMarketLaunch, serviceImpl.InstantSpotMarketLaunch)
          .AddMethod(__Method_InstantPerpetualMarketLaunch, serviceImpl.InstantPerpetualMarketLaunch)
          .AddMethod(__Method_InstantExpiryFuturesMarketLaunch, serviceImpl.InstantExpiryFuturesMarketLaunch)
          .AddMethod(__Method_CreateSpotLimitOrder, serviceImpl.CreateSpotLimitOrder)
          .AddMethod(__Method_BatchCreateSpotLimitOrders, serviceImpl.BatchCreateSpotLimitOrders)
          .AddMethod(__Method_CreateSpotMarketOrder, serviceImpl.CreateSpotMarketOrder)
          .AddMethod(__Method_CancelSpotOrder, serviceImpl.CancelSpotOrder)
          .AddMethod(__Method_BatchCancelSpotOrders, serviceImpl.BatchCancelSpotOrders)
          .AddMethod(__Method_BatchUpdateOrders, serviceImpl.BatchUpdateOrders)
          .AddMethod(__Method_PrivilegedExecuteContract, serviceImpl.PrivilegedExecuteContract)
          .AddMethod(__Method_CreateDerivativeLimitOrder, serviceImpl.CreateDerivativeLimitOrder)
          .AddMethod(__Method_BatchCreateDerivativeLimitOrders, serviceImpl.BatchCreateDerivativeLimitOrders)
          .AddMethod(__Method_CreateDerivativeMarketOrder, serviceImpl.CreateDerivativeMarketOrder)
          .AddMethod(__Method_CancelDerivativeOrder, serviceImpl.CancelDerivativeOrder)
          .AddMethod(__Method_BatchCancelDerivativeOrders, serviceImpl.BatchCancelDerivativeOrders)
          .AddMethod(__Method_InstantBinaryOptionsMarketLaunch, serviceImpl.InstantBinaryOptionsMarketLaunch)
          .AddMethod(__Method_CreateBinaryOptionsLimitOrder, serviceImpl.CreateBinaryOptionsLimitOrder)
          .AddMethod(__Method_CreateBinaryOptionsMarketOrder, serviceImpl.CreateBinaryOptionsMarketOrder)
          .AddMethod(__Method_CancelBinaryOptionsOrder, serviceImpl.CancelBinaryOptionsOrder)
          .AddMethod(__Method_BatchCancelBinaryOptionsOrders, serviceImpl.BatchCancelBinaryOptionsOrders)
          .AddMethod(__Method_SubaccountTransfer, serviceImpl.SubaccountTransfer)
          .AddMethod(__Method_ExternalTransfer, serviceImpl.ExternalTransfer)
          .AddMethod(__Method_LiquidatePosition, serviceImpl.LiquidatePosition)
          .AddMethod(__Method_IncreasePositionMargin, serviceImpl.IncreasePositionMargin)
          .AddMethod(__Method_RewardsOptOut, serviceImpl.RewardsOptOut)
          .AddMethod(__Method_AdminUpdateBinaryOptionsMarket, serviceImpl.AdminUpdateBinaryOptionsMarket)
          .AddMethod(__Method_ReclaimLockedFunds, serviceImpl.ReclaimLockedFunds)
          .AddMethod(__Method_UpdateParams, serviceImpl.UpdateParams).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Deposit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgDeposit, global::Injective.Exchange.V1Beta1.MsgDepositResponse>(serviceImpl.Deposit));
      serviceBinder.AddMethod(__Method_Withdraw, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgWithdraw, global::Injective.Exchange.V1Beta1.MsgWithdrawResponse>(serviceImpl.Withdraw));
      serviceBinder.AddMethod(__Method_InstantSpotMarketLaunch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantSpotMarketLaunchResponse>(serviceImpl.InstantSpotMarketLaunch));
      serviceBinder.AddMethod(__Method_InstantPerpetualMarketLaunch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantPerpetualMarketLaunchResponse>(serviceImpl.InstantPerpetualMarketLaunch));
      serviceBinder.AddMethod(__Method_InstantExpiryFuturesMarketLaunch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantExpiryFuturesMarketLaunchResponse>(serviceImpl.InstantExpiryFuturesMarketLaunch));
      serviceBinder.AddMethod(__Method_CreateSpotLimitOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotLimitOrderResponse>(serviceImpl.CreateSpotLimitOrder));
      serviceBinder.AddMethod(__Method_BatchCreateSpotLimitOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateSpotLimitOrdersResponse>(serviceImpl.BatchCreateSpotLimitOrders));
      serviceBinder.AddMethod(__Method_CreateSpotMarketOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateSpotMarketOrderResponse>(serviceImpl.CreateSpotMarketOrder));
      serviceBinder.AddMethod(__Method_CancelSpotOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCancelSpotOrder, global::Injective.Exchange.V1Beta1.MsgCancelSpotOrderResponse>(serviceImpl.CancelSpotOrder));
      serviceBinder.AddMethod(__Method_BatchCancelSpotOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelSpotOrdersResponse>(serviceImpl.BatchCancelSpotOrders));
      serviceBinder.AddMethod(__Method_BatchUpdateOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrders, global::Injective.Exchange.V1Beta1.MsgBatchUpdateOrdersResponse>(serviceImpl.BatchUpdateOrders));
      serviceBinder.AddMethod(__Method_PrivilegedExecuteContract, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContract, global::Injective.Exchange.V1Beta1.MsgPrivilegedExecuteContractResponse>(serviceImpl.PrivilegedExecuteContract));
      serviceBinder.AddMethod(__Method_CreateDerivativeLimitOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeLimitOrderResponse>(serviceImpl.CreateDerivativeLimitOrder));
      serviceBinder.AddMethod(__Method_BatchCreateDerivativeLimitOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrders, global::Injective.Exchange.V1Beta1.MsgBatchCreateDerivativeLimitOrdersResponse>(serviceImpl.BatchCreateDerivativeLimitOrders));
      serviceBinder.AddMethod(__Method_CreateDerivativeMarketOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateDerivativeMarketOrderResponse>(serviceImpl.CreateDerivativeMarketOrder));
      serviceBinder.AddMethod(__Method_CancelDerivativeOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrder, global::Injective.Exchange.V1Beta1.MsgCancelDerivativeOrderResponse>(serviceImpl.CancelDerivativeOrder));
      serviceBinder.AddMethod(__Method_BatchCancelDerivativeOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelDerivativeOrdersResponse>(serviceImpl.BatchCancelDerivativeOrders));
      serviceBinder.AddMethod(__Method_InstantBinaryOptionsMarketLaunch, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunch, global::Injective.Exchange.V1Beta1.MsgInstantBinaryOptionsMarketLaunchResponse>(serviceImpl.InstantBinaryOptionsMarketLaunch));
      serviceBinder.AddMethod(__Method_CreateBinaryOptionsLimitOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsLimitOrderResponse>(serviceImpl.CreateBinaryOptionsLimitOrder));
      serviceBinder.AddMethod(__Method_CreateBinaryOptionsMarketOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrder, global::Injective.Exchange.V1Beta1.MsgCreateBinaryOptionsMarketOrderResponse>(serviceImpl.CreateBinaryOptionsMarketOrder));
      serviceBinder.AddMethod(__Method_CancelBinaryOptionsOrder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrder, global::Injective.Exchange.V1Beta1.MsgCancelBinaryOptionsOrderResponse>(serviceImpl.CancelBinaryOptionsOrder));
      serviceBinder.AddMethod(__Method_BatchCancelBinaryOptionsOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrders, global::Injective.Exchange.V1Beta1.MsgBatchCancelBinaryOptionsOrdersResponse>(serviceImpl.BatchCancelBinaryOptionsOrders));
      serviceBinder.AddMethod(__Method_SubaccountTransfer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgSubaccountTransfer, global::Injective.Exchange.V1Beta1.MsgSubaccountTransferResponse>(serviceImpl.SubaccountTransfer));
      serviceBinder.AddMethod(__Method_ExternalTransfer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgExternalTransfer, global::Injective.Exchange.V1Beta1.MsgExternalTransferResponse>(serviceImpl.ExternalTransfer));
      serviceBinder.AddMethod(__Method_LiquidatePosition, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgLiquidatePosition, global::Injective.Exchange.V1Beta1.MsgLiquidatePositionResponse>(serviceImpl.LiquidatePosition));
      serviceBinder.AddMethod(__Method_IncreasePositionMargin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgIncreasePositionMargin, global::Injective.Exchange.V1Beta1.MsgIncreasePositionMarginResponse>(serviceImpl.IncreasePositionMargin));
      serviceBinder.AddMethod(__Method_RewardsOptOut, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgRewardsOptOut, global::Injective.Exchange.V1Beta1.MsgRewardsOptOutResponse>(serviceImpl.RewardsOptOut));
      serviceBinder.AddMethod(__Method_AdminUpdateBinaryOptionsMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarket, global::Injective.Exchange.V1Beta1.MsgAdminUpdateBinaryOptionsMarketResponse>(serviceImpl.AdminUpdateBinaryOptionsMarket));
      serviceBinder.AddMethod(__Method_ReclaimLockedFunds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgReclaimLockedFunds, global::Injective.Exchange.V1Beta1.MsgReclaimLockedFundsResponse>(serviceImpl.ReclaimLockedFunds));
      serviceBinder.AddMethod(__Method_UpdateParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MsgUpdateParams, global::Injective.Exchange.V1Beta1.MsgUpdateParamsResponse>(serviceImpl.UpdateParams));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/exchange/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Exchange.V1Beta1 {
  /// <summary>
  /// Query defines the gRPC querier service.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "injective.exchange.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest> __Marshaller_injective_exchange_v1beta1_QueryExchangeParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse> __Marshaller_injective_exchange_v1beta1_QueryExchangeParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest> __Marshaller_injective_exchange_v1beta1_QueryExchangeBalancesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse> __Marshaller_injective_exchange_v1beta1_QueryExchangeBalancesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest> __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse> __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest> __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse> __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest> __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse> __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest> __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse> __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest> __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse> __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest> __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse> __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest> __Marshaller_injective_exchange_v1beta1_QuerySpotMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse> __Marshaller_injective_exchange_v1beta1_QuerySpotMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest> __Marshaller_injective_exchange_v1beta1_QuerySpotMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse> __Marshaller_injective_exchange_v1beta1_QuerySpotMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest> __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse> __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest> __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse> __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest> __Marshaller_injective_exchange_v1beta1_QuerySpotOrderbookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse> __Marshaller_injective_exchange_v1beta1_QuerySpotOrderbookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest> __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest> __Marshaller_injective_exchange_v1beta1_QueryAccountAddressSpotOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse> __Marshaller_injective_exchange_v1beta1_QueryAccountAddressSpotOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest> __Marshaller_injective_exchange_v1beta1_QuerySpotOrdersByHashesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse> __Marshaller_injective_exchange_v1beta1_QuerySpotOrdersByHashesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest> __Marshaller_injective_exchange_v1beta1_QuerySpotMidPriceAndTOBRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse> __Marshaller_injective_exchange_v1beta1_QuerySpotMidPriceAndTOBResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMidPriceAndTOBRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMidPriceAndTOBResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrderbookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrderbookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest> __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest> __Marshaller_injective_exchange_v1beta1_QueryAccountAddressDerivativeOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse> __Marshaller_injective_exchange_v1beta1_QueryAccountAddressDerivativeOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrdersByHashesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrdersByHashesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketAddressRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse> __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketAddressResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountTradeNonceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountTradeNonceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryModuleStateRequest> __Marshaller_injective_exchange_v1beta1_QueryModuleStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryModuleStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryModuleStateResponse> __Marshaller_injective_exchange_v1beta1_QueryModuleStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryModuleStateResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPositionsRequest> __Marshaller_injective_exchange_v1beta1_QueryPositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPositionsResponse> __Marshaller_injective_exchange_v1beta1_QueryPositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionInMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionInMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountEffectivePositionInMarketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountEffectivePositionInMarketResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest> __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse> __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest> __Marshaller_injective_exchange_v1beta1_QueryExpiryFuturesMarketInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse> __Marshaller_injective_exchange_v1beta1_QueryExpiryFuturesMarketInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest> __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketFundingRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse> __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketFundingResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest> __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrderMetadataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse> __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrderMetadataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest> __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest> __Marshaller_injective_exchange_v1beta1_QueryTradeRewardCampaignRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse> __Marshaller_injective_exchange_v1beta1_QueryTradeRewardCampaignResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountAccountInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountAccountInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest> __Marshaller_injective_exchange_v1beta1_QueryBalanceMismatchesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse> __Marshaller_injective_exchange_v1beta1_QueryBalanceMismatchesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest> __Marshaller_injective_exchange_v1beta1_QueryBalanceWithBalanceHoldsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse> __Marshaller_injective_exchange_v1beta1_QueryBalanceWithBalanceHoldsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountTierStatisticsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse> __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountTierStatisticsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest> __Marshaller_injective_exchange_v1beta1_MitoVaultInfosRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse> __Marshaller_injective_exchange_v1beta1_MitoVaultInfosResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest> __Marshaller_injective_exchange_v1beta1_QueryMarketIDFromVaultRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse> __Marshaller_injective_exchange_v1beta1_QueryMarketIDFromVaultResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest> __Marshaller_injective_exchange_v1beta1_QueryHistoricalTradeRecordsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse> __Marshaller_injective_exchange_v1beta1_QueryHistoricalTradeRecordsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest> __Marshaller_injective_exchange_v1beta1_QueryIsOptedOutOfRewardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse> __Marshaller_injective_exchange_v1beta1_QueryIsOptedOutOfRewardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest> __Marshaller_injective_exchange_v1beta1_QueryOptedOutOfRewardsAccountsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse> __Marshaller_injective_exchange_v1beta1_QueryOptedOutOfRewardsAccountsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest> __Marshaller_injective_exchange_v1beta1_QueryMarketVolatilityRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse> __Marshaller_injective_exchange_v1beta1_QueryMarketVolatilityResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest> __Marshaller_injective_exchange_v1beta1_QueryBinaryMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse> __Marshaller_injective_exchange_v1beta1_QueryBinaryMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest> __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeConditionalOrdersRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse> __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeConditionalOrdersResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest> __Marshaller_injective_exchange_v1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse> __Marshaller_injective_exchange_v1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest, global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse> __Method_QueryExchangeParams = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest, global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryExchangeParams",
        __Marshaller_injective_exchange_v1beta1_QueryExchangeParamsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryExchangeParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse> __Method_SubaccountDeposits = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountDeposits",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositsRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse> __Method_SubaccountDeposit = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountDeposit",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountDepositResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest, global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse> __Method_ExchangeBalances = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest, global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeBalances",
        __Marshaller_injective_exchange_v1beta1_QueryExchangeBalancesRequest,
        __Marshaller_injective_exchange_v1beta1_QueryExchangeBalancesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse> __Method_AggregateVolume = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregateVolume",
        __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumeRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse> __Method_AggregateVolumes = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregateVolumes",
        __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumesRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAggregateVolumesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse> __Method_AggregateMarketVolume = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregateMarketVolume",
        __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumeRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumeResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse> __Method_AggregateMarketVolumes = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AggregateMarketVolumes",
        __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumesRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAggregateMarketVolumesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse> __Method_DenomDecimal = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomDecimal",
        __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse> __Method_DenomDecimals = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DenomDecimals",
        __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDenomDecimalsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse> __Method_SpotMarkets = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpotMarkets",
        __Marshaller_injective_exchange_v1beta1_QuerySpotMarketsRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySpotMarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse> __Method_SpotMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpotMarket",
        __Marshaller_injective_exchange_v1beta1_QuerySpotMarketRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySpotMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse> __Method_FullSpotMarkets = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FullSpotMarkets",
        __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse> __Method_FullSpotMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FullSpotMarket",
        __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketRequest,
        __Marshaller_injective_exchange_v1beta1_QueryFullSpotMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse> __Method_SpotOrderbook = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpotOrderbook",
        __Marshaller_injective_exchange_v1beta1_QuerySpotOrderbookRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySpotOrderbookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> __Method_TraderSpotOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraderSpotOrders",
        __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse> __Method_AccountAddressSpotOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AccountAddressSpotOrders",
        __Marshaller_injective_exchange_v1beta1_QueryAccountAddressSpotOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAccountAddressSpotOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse> __Method_SpotOrdersByHashes = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpotOrdersByHashes",
        __Marshaller_injective_exchange_v1beta1_QuerySpotOrdersByHashesRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySpotOrdersByHashesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse> __Method_SubaccountOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountOrders",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> __Method_TraderSpotTransientOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraderSpotTransientOrders",
        __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTraderSpotOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse> __Method_SpotMidPriceAndTOB = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SpotMidPriceAndTOB",
        __Marshaller_injective_exchange_v1beta1_QuerySpotMidPriceAndTOBRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySpotMidPriceAndTOBResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse> __Method_DerivativeMidPriceAndTOB = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeMidPriceAndTOB",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMidPriceAndTOBRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMidPriceAndTOBResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse> __Method_DerivativeOrderbook = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeOrderbook",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrderbookRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrderbookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> __Method_TraderDerivativeOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraderDerivativeOrders",
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse> __Method_AccountAddressDerivativeOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AccountAddressDerivativeOrders",
        __Marshaller_injective_exchange_v1beta1_QueryAccountAddressDerivativeOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryAccountAddressDerivativeOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse> __Method_DerivativeOrdersByHashes = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeOrdersByHashes",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrdersByHashesRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeOrdersByHashesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> __Method_TraderDerivativeTransientOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraderDerivativeTransientOrders",
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse> __Method_DerivativeMarkets = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeMarkets",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse> __Method_DerivativeMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeMarket",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse> __Method_DerivativeMarketAddress = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DerivativeMarketAddress",
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketAddressRequest,
        __Marshaller_injective_exchange_v1beta1_QueryDerivativeMarketAddressResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse> __Method_SubaccountTradeNonce = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountTradeNonce",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountTradeNonceRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountTradeNonceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryModuleStateRequest, global::Injective.Exchange.V1Beta1.QueryModuleStateResponse> __Method_ExchangeModuleState = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryModuleStateRequest, global::Injective.Exchange.V1Beta1.QueryModuleStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExchangeModuleState",
        __Marshaller_injective_exchange_v1beta1_QueryModuleStateRequest,
        __Marshaller_injective_exchange_v1beta1_QueryModuleStateResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryPositionsRequest, global::Injective.Exchange.V1Beta1.QueryPositionsResponse> __Method_Positions = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryPositionsRequest, global::Injective.Exchange.V1Beta1.QueryPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Positions",
        __Marshaller_injective_exchange_v1beta1_QueryPositionsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryPositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse> __Method_SubaccountPositions = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountPositions",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionsRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse> __Method_SubaccountPositionInMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountPositionInMarket",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionInMarketRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountPositionInMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse> __Method_SubaccountEffectivePositionInMarket = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountEffectivePositionInMarket",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountEffectivePositionInMarketRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountEffectivePositionInMarketResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse> __Method_PerpetualMarketInfo = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PerpetualMarketInfo",
        __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketInfoRequest,
        __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse> __Method_ExpiryFuturesMarketInfo = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExpiryFuturesMarketInfo",
        __Marshaller_injective_exchange_v1beta1_QueryExpiryFuturesMarketInfoRequest,
        __Marshaller_injective_exchange_v1beta1_QueryExpiryFuturesMarketInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse> __Method_PerpetualMarketFunding = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PerpetualMarketFunding",
        __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketFundingRequest,
        __Marshaller_injective_exchange_v1beta1_QueryPerpetualMarketFundingResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse> __Method_SubaccountOrderMetadata = new grpc::Method<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountOrderMetadata",
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrderMetadataRequest,
        __Marshaller_injective_exchange_v1beta1_QuerySubaccountOrderMetadataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> __Method_TradeRewardPoints = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TradeRewardPoints",
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> __Method_PendingTradeRewardPoints = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PendingTradeRewardPoints",
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardPointsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse> __Method_TradeRewardCampaign = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TradeRewardCampaign",
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardCampaignRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTradeRewardCampaignResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse> __Method_FeeDiscountAccountInfo = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeeDiscountAccountInfo",
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountAccountInfoRequest,
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountAccountInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse> __Method_FeeDiscountSchedule = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeeDiscountSchedule",
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountScheduleRequest,
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest, global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse> __Method_BalanceMismatches = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest, global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BalanceMismatches",
        __Marshaller_injective_exchange_v1beta1_QueryBalanceMismatchesRequest,
        __Marshaller_injective_exchange_v1beta1_QueryBalanceMismatchesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest, global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse> __Method_BalanceWithBalanceHolds = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest, global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BalanceWithBalanceHolds",
        __Marshaller_injective_exchange_v1beta1_QueryBalanceWithBalanceHoldsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryBalanceWithBalanceHoldsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse> __Method_FeeDiscountTierStatistics = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeeDiscountTierStatistics",
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountTierStatisticsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryFeeDiscountTierStatisticsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest, global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse> __Method_MitoVaultInfos = new grpc::Method<global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest, global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MitoVaultInfos",
        __Marshaller_injective_exchange_v1beta1_MitoVaultInfosRequest,
        __Marshaller_injective_exchange_v1beta1_MitoVaultInfosResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest, global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse> __Method_QueryMarketIDFromVault = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest, global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryMarketIDFromVault",
        __Marshaller_injective_exchange_v1beta1_QueryMarketIDFromVaultRequest,
        __Marshaller_injective_exchange_v1beta1_QueryMarketIDFromVaultResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest, global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse> __Method_HistoricalTradeRecords = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest, global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HistoricalTradeRecords",
        __Marshaller_injective_exchange_v1beta1_QueryHistoricalTradeRecordsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryHistoricalTradeRecordsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest, global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse> __Method_IsOptedOutOfRewards = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest, global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "IsOptedOutOfRewards",
        __Marshaller_injective_exchange_v1beta1_QueryIsOptedOutOfRewardsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryIsOptedOutOfRewardsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest, global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse> __Method_OptedOutOfRewardsAccounts = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest, global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OptedOutOfRewardsAccounts",
        __Marshaller_injective_exchange_v1beta1_QueryOptedOutOfRewardsAccountsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryOptedOutOfRewardsAccountsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest, global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse> __Method_MarketVolatility = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest, global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarketVolatility",
        __Marshaller_injective_exchange_v1beta1_QueryMarketVolatilityRequest,
        __Marshaller_injective_exchange_v1beta1_QueryMarketVolatilityResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest, global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse> __Method_BinaryOptionsMarkets = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest, global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BinaryOptionsMarkets",
        __Marshaller_injective_exchange_v1beta1_QueryBinaryMarketsRequest,
        __Marshaller_injective_exchange_v1beta1_QueryBinaryMarketsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse> __Method_TraderDerivativeConditionalOrders = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TraderDerivativeConditionalOrders",
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeConditionalOrdersRequest,
        __Marshaller_injective_exchange_v1beta1_QueryTraderDerivativeConditionalOrdersResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest, global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse> __Method_MarketAtomicExecutionFeeMultiplier = new grpc::Method<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest, global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MarketAtomicExecutionFeeMultiplier",
        __Marshaller_injective_exchange_v1beta1_QueryMarketAtomicExecutionFeeMultiplierRequest,
        __Marshaller_injective_exchange_v1beta1_QueryMarketAtomicExecutionFeeMultiplierResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Exchange.V1Beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      /// <summary>
      /// Retrieves exchange params
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse> QueryExchangeParams(global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse> SubaccountDeposits(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse> SubaccountDeposit(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all of the balances of all users on the exchange.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse> ExchangeBalances(global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the aggregate volumes for the specified account or subaccount
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse> AggregateVolume(global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the aggregate volumes for specified accounts
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse> AggregateVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the aggregate volume for the specified market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse> AggregateMarketVolume(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the aggregate market volumes for specified markets
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse> AggregateMarketVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the denom decimals for a denom.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse> DenomDecimal(global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the denom decimals for multiple denoms. Returns all denom
      /// decimals if unspecified.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse> DenomDecimals(global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of spot markets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse> SpotMarkets(global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a spot market by ticker
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse> SpotMarket(global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of spot markets with extra information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse> FullSpotMarkets(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a spot market with extra information.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse> FullSpotMarket(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse> SpotOrderbook(global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's spot orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all account address spot orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse> AccountAddressSpotOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves spot orders corresponding to specified order hashes for a given
      /// subaccountID and marketID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse> SpotOrdersByHashes(global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves subaccount's orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse> SubaccountOrders(global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's transient spot orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a spot market's mid-price
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse> SpotMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a derivative market's mid-price
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse> DerivativeMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a derivative market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse> DerivativeOrderbook(global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all account address derivative orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse> AccountAddressDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse> DerivativeOrdersByHashes(global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's transient derivative orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a list of derivative markets.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse> DerivativeMarkets(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a derivative market by ticker
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse> DerivativeMarket(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a derivative market's corresponding address for fees that
      /// contribute to the market's insurance fund
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse> DerivativeMarketAddress(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a subaccount's trade nonce
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse> SubaccountTradeNonce(global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the entire exchange module's state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryModuleStateResponse> ExchangeModuleState(global::Injective.Exchange.V1Beta1.QueryModuleStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the entire exchange module's positions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryPositionsResponse> Positions(global::Injective.Exchange.V1Beta1.QueryPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves subaccount's positions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse> SubaccountPositions(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse> SubaccountPositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse> SubaccountEffectivePositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves perpetual market info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse> PerpetualMarketInfo(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves expiry market info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse> ExpiryFuturesMarketInfo(global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves perpetual market funding
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse> PerpetualMarketFunding(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves subaccount's order metadata
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse> SubaccountOrderMetadata(global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the account and total trade rewards points
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> TradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the pending account and total trade rewards points
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> PendingTradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the trade reward campaign
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse> TradeRewardCampaign(global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the account's fee discount info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse> FeeDiscountAccountInfo(global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the fee discount schedule
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse> FeeDiscountSchedule(global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves mismatches between available vs. total balance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse> BalanceMismatches(global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves available and total balances with balance holds
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse> BalanceWithBalanceHolds(global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves fee discount tier stats
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse> FeeDiscountTierStatistics(global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves market making pool info
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse> MitoVaultInfos(global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse> QueryMarketIDFromVault(global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves historical trade records for a given market ID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse> HistoricalTradeRecords(global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves if the account is opted out of rewards
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse> IsOptedOutOfRewards(global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves all accounts opted out of rewards
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse> OptedOutOfRewardsAccounts(global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// MarketVolatility computes the volatility for spot and derivative markets
      /// trading history.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse> MarketVolatility(global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse> BinaryOptionsMarkets(global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves a trader's derivative conditional orders
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse> TraderDerivativeConditionalOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse> MarketAtomicExecutionFeeMultiplier(global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Retrieves exchange params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse QueryExchangeParams(global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryExchangeParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves exchange params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse QueryExchangeParams(global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryExchangeParams, null, options, request);
      }
      /// <summary>
      /// Retrieves exchange params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse> QueryExchangeParamsAsync(global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryExchangeParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves exchange params
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse> QueryExchangeParamsAsync(global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryExchangeParams, null, options, request);
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse SubaccountDeposits(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountDeposits(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse SubaccountDeposits(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountDeposits, null, options, request);
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse> SubaccountDepositsAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountDepositsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse> SubaccountDepositsAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountDeposits, null, options, request);
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse SubaccountDeposit(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountDeposit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse SubaccountDeposit(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountDeposit, null, options, request);
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse> SubaccountDepositAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountDepositAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a Subaccount's Deposits
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse> SubaccountDepositAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountDeposit, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the balances of all users on the exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse ExchangeBalances(global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeBalances(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the balances of all users on the exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse ExchangeBalances(global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeBalances, null, options, request);
      }
      /// <summary>
      /// Retrieves all of the balances of all users on the exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse> ExchangeBalancesAsync(global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeBalancesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all of the balances of all users on the exchange.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse> ExchangeBalancesAsync(global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeBalances, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volumes for the specified account or subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse AggregateVolume(global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volumes for the specified account or subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse AggregateVolume(global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregateVolume, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volumes for the specified account or subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse> AggregateVolumeAsync(global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volumes for the specified account or subaccount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse> AggregateVolumeAsync(global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregateVolume, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volumes for specified accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse AggregateVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateVolumes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volumes for specified accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse AggregateVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregateVolumes, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volumes for specified accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse> AggregateVolumesAsync(global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateVolumesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volumes for specified accounts
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse> AggregateVolumesAsync(global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregateVolumes, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volume for the specified market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse AggregateMarketVolume(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateMarketVolume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volume for the specified market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse AggregateMarketVolume(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregateMarketVolume, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate volume for the specified market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse> AggregateMarketVolumeAsync(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateMarketVolumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate volume for the specified market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse> AggregateMarketVolumeAsync(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregateMarketVolume, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate market volumes for specified markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse AggregateMarketVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateMarketVolumes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate market volumes for specified markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse AggregateMarketVolumes(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AggregateMarketVolumes, null, options, request);
      }
      /// <summary>
      /// Retrieves the aggregate market volumes for specified markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse> AggregateMarketVolumesAsync(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AggregateMarketVolumesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the aggregate market volumes for specified markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse> AggregateMarketVolumesAsync(global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AggregateMarketVolumes, null, options, request);
      }
      /// <summary>
      /// Retrieves the denom decimals for a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse DenomDecimal(global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomDecimal(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the denom decimals for a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse DenomDecimal(global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomDecimal, null, options, request);
      }
      /// <summary>
      /// Retrieves the denom decimals for a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse> DenomDecimalAsync(global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomDecimalAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the denom decimals for a denom.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse> DenomDecimalAsync(global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomDecimal, null, options, request);
      }
      /// <summary>
      /// Retrieves the denom decimals for multiple denoms. Returns all denom
      /// decimals if unspecified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse DenomDecimals(global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomDecimals(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the denom decimals for multiple denoms. Returns all denom
      /// decimals if unspecified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse DenomDecimals(global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DenomDecimals, null, options, request);
      }
      /// <summary>
      /// Retrieves the denom decimals for multiple denoms. Returns all denom
      /// decimals if unspecified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse> DenomDecimalsAsync(global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DenomDecimalsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the denom decimals for multiple denoms. Returns all denom
      /// decimals if unspecified.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse> DenomDecimalsAsync(global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DenomDecimals, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of spot markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse SpotMarkets(global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of spot markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse SpotMarkets(global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpotMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of spot markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse> SpotMarketsAsync(global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of spot markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse> SpotMarketsAsync(global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpotMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse SpotMarket(global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse SpotMarket(global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpotMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse> SpotMarketAsync(global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse> SpotMarketAsync(global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpotMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of spot markets with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse FullSpotMarkets(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FullSpotMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of spot markets with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse FullSpotMarkets(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FullSpotMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of spot markets with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse> FullSpotMarketsAsync(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FullSpotMarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of spot markets with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse> FullSpotMarketsAsync(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FullSpotMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse FullSpotMarket(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FullSpotMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse FullSpotMarket(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FullSpotMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse> FullSpotMarketAsync(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FullSpotMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market with extra information.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse> FullSpotMarketAsync(global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FullSpotMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse SpotOrderbook(global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotOrderbook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse SpotOrderbook(global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpotOrderbook, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse> SpotOrderbookAsync(global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotOrderbookAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse> SpotOrderbookAsync(global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpotOrderbook, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse TraderSpotOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderSpotOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse TraderSpotOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraderSpotOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderSpotOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraderSpotOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves all account address spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse AccountAddressSpotOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountAddressSpotOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all account address spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse AccountAddressSpotOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AccountAddressSpotOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves all account address spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse> AccountAddressSpotOrdersAsync(global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountAddressSpotOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all account address spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse> AccountAddressSpotOrdersAsync(global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AccountAddressSpotOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves spot orders corresponding to specified order hashes for a given
      /// subaccountID and marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse SpotOrdersByHashes(global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotOrdersByHashes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves spot orders corresponding to specified order hashes for a given
      /// subaccountID and marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse SpotOrdersByHashes(global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpotOrdersByHashes, null, options, request);
      }
      /// <summary>
      /// Retrieves spot orders corresponding to specified order hashes for a given
      /// subaccountID and marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse> SpotOrdersByHashesAsync(global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotOrdersByHashesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves spot orders corresponding to specified order hashes for a given
      /// subaccountID and marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse> SpotOrdersByHashesAsync(global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpotOrdersByHashes, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse SubaccountOrders(global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse SubaccountOrders(global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse> SubaccountOrdersAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse> SubaccountOrdersAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's transient spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse TraderSpotTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderSpotTransientOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's transient spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse TraderSpotTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraderSpotTransientOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's transient spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotTransientOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderSpotTransientOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's transient spot orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse> TraderSpotTransientOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraderSpotTransientOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse SpotMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMidPriceAndTOB(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse SpotMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SpotMidPriceAndTOB, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse> SpotMidPriceAndTOBAsync(global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SpotMidPriceAndTOBAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse> SpotMidPriceAndTOBAsync(global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SpotMidPriceAndTOB, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse DerivativeMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMidPriceAndTOB(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse DerivativeMidPriceAndTOB(global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeMidPriceAndTOB, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse> DerivativeMidPriceAndTOBAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMidPriceAndTOBAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's mid-price
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse> DerivativeMidPriceAndTOBAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeMidPriceAndTOB, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse DerivativeOrderbook(global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeOrderbook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse DerivativeOrderbook(global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeOrderbook, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse> DerivativeOrderbookAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeOrderbookAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse> DerivativeOrderbookAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeOrderbook, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse TraderDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse TraderDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraderDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraderDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves all account address derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse AccountAddressDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountAddressDerivativeOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all account address derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse AccountAddressDerivativeOrders(global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AccountAddressDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves all account address derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse> AccountAddressDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AccountAddressDerivativeOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all account address derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse> AccountAddressDerivativeOrdersAsync(global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AccountAddressDerivativeOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse DerivativeOrdersByHashes(global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeOrdersByHashes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse DerivativeOrdersByHashes(global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeOrdersByHashes, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse> DerivativeOrdersByHashesAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeOrdersByHashesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse> DerivativeOrdersByHashesAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeOrdersByHashes, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's transient derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse TraderDerivativeTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeTransientOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's transient derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse TraderDerivativeTransientOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraderDerivativeTransientOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's transient derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeTransientOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeTransientOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's transient derivative orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse> TraderDerivativeTransientOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraderDerivativeTransientOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of derivative markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse DerivativeMarkets(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of derivative markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse DerivativeMarkets(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a list of derivative markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse> DerivativeMarketsAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a list of derivative markets.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse> DerivativeMarketsAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse DerivativeMarket(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse DerivativeMarket(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse> DerivativeMarketAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market by ticker
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse> DerivativeMarketAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's corresponding address for fees that
      /// contribute to the market's insurance fund
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse DerivativeMarketAddress(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarketAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's corresponding address for fees that
      /// contribute to the market's insurance fund
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse DerivativeMarketAddress(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DerivativeMarketAddress, null, options, request);
      }
      /// <summary>
      /// Retrieves a derivative market's corresponding address for fees that
      /// contribute to the market's insurance fund
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse> DerivativeMarketAddressAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DerivativeMarketAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a derivative market's corresponding address for fees that
      /// contribute to the market's insurance fund
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse> DerivativeMarketAddressAsync(global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DerivativeMarketAddress, null, options, request);
      }
      /// <summary>
      /// Retrieves a subaccount's trade nonce
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse SubaccountTradeNonce(global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTradeNonce(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a subaccount's trade nonce
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse SubaccountTradeNonce(global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountTradeNonce, null, options, request);
      }
      /// <summary>
      /// Retrieves a subaccount's trade nonce
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse> SubaccountTradeNonceAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountTradeNonceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a subaccount's trade nonce
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse> SubaccountTradeNonceAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountTradeNonce, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire exchange module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryModuleStateResponse ExchangeModuleState(global::Injective.Exchange.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeModuleState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire exchange module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryModuleStateResponse ExchangeModuleState(global::Injective.Exchange.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExchangeModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire exchange module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryModuleStateResponse> ExchangeModuleStateAsync(global::Injective.Exchange.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExchangeModuleStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire exchange module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryModuleStateResponse> ExchangeModuleStateAsync(global::Injective.Exchange.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExchangeModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire exchange module's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPositionsResponse Positions(global::Injective.Exchange.V1Beta1.QueryPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Positions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire exchange module's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPositionsResponse Positions(global::Injective.Exchange.V1Beta1.QueryPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Positions, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire exchange module's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPositionsResponse> PositionsAsync(global::Injective.Exchange.V1Beta1.QueryPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire exchange module's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPositionsResponse> PositionsAsync(global::Injective.Exchange.V1Beta1.QueryPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Positions, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse SubaccountPositions(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse SubaccountPositions(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountPositions, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse> SubaccountPositionsAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse> SubaccountPositionsAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountPositions, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse SubaccountPositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountPositionInMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse SubaccountPositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountPositionInMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse> SubaccountPositionInMarketAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountPositionInMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse> SubaccountPositionInMarketAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountPositionInMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse SubaccountEffectivePositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountEffectivePositionInMarket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse SubaccountEffectivePositionInMarket(global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountEffectivePositionInMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse> SubaccountEffectivePositionInMarketAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountEffectivePositionInMarketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's position in market
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse> SubaccountEffectivePositionInMarketAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountEffectivePositionInMarket, null, options, request);
      }
      /// <summary>
      /// Retrieves perpetual market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse PerpetualMarketInfo(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerpetualMarketInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves perpetual market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse PerpetualMarketInfo(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PerpetualMarketInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves perpetual market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse> PerpetualMarketInfoAsync(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerpetualMarketInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves perpetual market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse> PerpetualMarketInfoAsync(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PerpetualMarketInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves expiry market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse ExpiryFuturesMarketInfo(global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpiryFuturesMarketInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves expiry market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse ExpiryFuturesMarketInfo(global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExpiryFuturesMarketInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves expiry market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse> ExpiryFuturesMarketInfoAsync(global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExpiryFuturesMarketInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves expiry market info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse> ExpiryFuturesMarketInfoAsync(global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExpiryFuturesMarketInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves perpetual market funding
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse PerpetualMarketFunding(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerpetualMarketFunding(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves perpetual market funding
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse PerpetualMarketFunding(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PerpetualMarketFunding, null, options, request);
      }
      /// <summary>
      /// Retrieves perpetual market funding
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse> PerpetualMarketFundingAsync(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PerpetualMarketFundingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves perpetual market funding
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse> PerpetualMarketFundingAsync(global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PerpetualMarketFunding, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's order metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse SubaccountOrderMetadata(global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrderMetadata(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's order metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse SubaccountOrderMetadata(global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountOrderMetadata, null, options, request);
      }
      /// <summary>
      /// Retrieves subaccount's order metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse> SubaccountOrderMetadataAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrderMetadataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves subaccount's order metadata
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse> SubaccountOrderMetadataAsync(global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountOrderMetadata, null, options, request);
      }
      /// <summary>
      /// Retrieves the account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse TradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradeRewardPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse TradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TradeRewardPoints, null, options, request);
      }
      /// <summary>
      /// Retrieves the account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> TradeRewardPointsAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradeRewardPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> TradeRewardPointsAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TradeRewardPoints, null, options, request);
      }
      /// <summary>
      /// Retrieves the pending account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse PendingTradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PendingTradeRewardPoints(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the pending account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse PendingTradeRewardPoints(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PendingTradeRewardPoints, null, options, request);
      }
      /// <summary>
      /// Retrieves the pending account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> PendingTradeRewardPointsAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PendingTradeRewardPointsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the pending account and total trade rewards points
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse> PendingTradeRewardPointsAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PendingTradeRewardPoints, null, options, request);
      }
      /// <summary>
      /// Retrieves the trade reward campaign
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse TradeRewardCampaign(global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradeRewardCampaign(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the trade reward campaign
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse TradeRewardCampaign(global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TradeRewardCampaign, null, options, request);
      }
      /// <summary>
      /// Retrieves the trade reward campaign
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse> TradeRewardCampaignAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TradeRewardCampaignAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the trade reward campaign
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse> TradeRewardCampaignAsync(global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TradeRewardCampaign, null, options, request);
      }
      /// <summary>
      /// Retrieves the account's fee discount info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse FeeDiscountAccountInfo(global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountAccountInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the account's fee discount info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse FeeDiscountAccountInfo(global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeeDiscountAccountInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves the account's fee discount info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse> FeeDiscountAccountInfoAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountAccountInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the account's fee discount info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse> FeeDiscountAccountInfoAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeeDiscountAccountInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves the fee discount schedule
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse FeeDiscountSchedule(global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the fee discount schedule
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse FeeDiscountSchedule(global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeeDiscountSchedule, null, options, request);
      }
      /// <summary>
      /// Retrieves the fee discount schedule
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse> FeeDiscountScheduleAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the fee discount schedule
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse> FeeDiscountScheduleAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeeDiscountSchedule, null, options, request);
      }
      /// <summary>
      /// Retrieves mismatches between available vs. total balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse BalanceMismatches(global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceMismatches(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mismatches between available vs. total balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse BalanceMismatches(global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BalanceMismatches, null, options, request);
      }
      /// <summary>
      /// Retrieves mismatches between available vs. total balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse> BalanceMismatchesAsync(global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceMismatchesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves mismatches between available vs. total balance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse> BalanceMismatchesAsync(global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BalanceMismatches, null, options, request);
      }
      /// <summary>
      /// Retrieves available and total balances with balance holds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse BalanceWithBalanceHolds(global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceWithBalanceHolds(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves available and total balances with balance holds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse BalanceWithBalanceHolds(global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BalanceWithBalanceHolds, null, options, request);
      }
      /// <summary>
      /// Retrieves available and total balances with balance holds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse> BalanceWithBalanceHoldsAsync(global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BalanceWithBalanceHoldsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves available and total balances with balance holds
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse> BalanceWithBalanceHoldsAsync(global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BalanceWithBalanceHolds, null, options, request);
      }
      /// <summary>
      /// Retrieves fee discount tier stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse FeeDiscountTierStatistics(global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountTierStatistics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves fee discount tier stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse FeeDiscountTierStatistics(global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeeDiscountTierStatistics, null, options, request);
      }
      /// <summary>
      /// Retrieves fee discount tier stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse> FeeDiscountTierStatisticsAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeeDiscountTierStatisticsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves fee discount tier stats
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse> FeeDiscountTierStatisticsAsync(global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeeDiscountTierStatistics, null, options, request);
      }
      /// <summary>
      /// Retrieves market making pool info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse MitoVaultInfos(global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MitoVaultInfos(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves market making pool info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse MitoVaultInfos(global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MitoVaultInfos, null, options, request);
      }
      /// <summary>
      /// Retrieves market making pool info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse> MitoVaultInfosAsync(global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MitoVaultInfosAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves market making pool info
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse> MitoVaultInfosAsync(global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MitoVaultInfos, null, options, request);
      }
      /// <summary>
      /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse QueryMarketIDFromVault(global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryMarketIDFromVault(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse QueryMarketIDFromVault(global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryMarketIDFromVault, null, options, request);
      }
      /// <summary>
      /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse> QueryMarketIDFromVaultAsync(global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryMarketIDFromVaultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryMarketIDFromVault returns the market ID for a given vault subaccount ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse> QueryMarketIDFromVaultAsync(global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryMarketIDFromVault, null, options, request);
      }
      /// <summary>
      /// Retrieves historical trade records for a given market ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse HistoricalTradeRecords(global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HistoricalTradeRecords(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves historical trade records for a given market ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse HistoricalTradeRecords(global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HistoricalTradeRecords, null, options, request);
      }
      /// <summary>
      /// Retrieves historical trade records for a given market ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse> HistoricalTradeRecordsAsync(global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HistoricalTradeRecordsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves historical trade records for a given market ID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse> HistoricalTradeRecordsAsync(global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HistoricalTradeRecords, null, options, request);
      }
      /// <summary>
      /// Retrieves if the account is opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse IsOptedOutOfRewards(global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsOptedOutOfRewards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves if the account is opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse IsOptedOutOfRewards(global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_IsOptedOutOfRewards, null, options, request);
      }
      /// <summary>
      /// Retrieves if the account is opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse> IsOptedOutOfRewardsAsync(global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return IsOptedOutOfRewardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves if the account is opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse> IsOptedOutOfRewardsAsync(global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_IsOptedOutOfRewards, null, options, request);
      }
      /// <summary>
      /// Retrieves all accounts opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse OptedOutOfRewardsAccounts(global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptedOutOfRewardsAccounts(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all accounts opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse OptedOutOfRewardsAccounts(global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OptedOutOfRewardsAccounts, null, options, request);
      }
      /// <summary>
      /// Retrieves all accounts opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse> OptedOutOfRewardsAccountsAsync(global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OptedOutOfRewardsAccountsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves all accounts opted out of rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse> OptedOutOfRewardsAccountsAsync(global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OptedOutOfRewardsAccounts, null, options, request);
      }
      /// <summary>
      /// MarketVolatility computes the volatility for spot and derivative markets
      /// trading history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse MarketVolatility(global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketVolatility(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MarketVolatility computes the volatility for spot and derivative markets
      /// trading history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse MarketVolatility(global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarketVolatility, null, options, request);
      }
      /// <summary>
      /// MarketVolatility computes the volatility for spot and derivative markets
      /// trading history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse> MarketVolatilityAsync(global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketVolatilityAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// MarketVolatility computes the volatility for spot and derivative markets
      /// trading history.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse> MarketVolatilityAsync(global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarketVolatility, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse BinaryOptionsMarkets(global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse BinaryOptionsMarkets(global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BinaryOptionsMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse> BinaryOptionsMarketsAsync(global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BinaryOptionsMarketsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a spot market's orderbook by marketID
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse> BinaryOptionsMarketsAsync(global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BinaryOptionsMarkets, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative conditional orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse TraderDerivativeConditionalOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeConditionalOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative conditional orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse TraderDerivativeConditionalOrders(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TraderDerivativeConditionalOrders, null, options, request);
      }
      /// <summary>
      /// Retrieves a trader's derivative conditional orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse> TraderDerivativeConditionalOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TraderDerivativeConditionalOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves a trader's derivative conditional orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse> TraderDerivativeConditionalOrdersAsync(global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TraderDerivativeConditionalOrders, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse MarketAtomicExecutionFeeMultiplier(global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketAtomicExecutionFeeMultiplier(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse MarketAtomicExecutionFeeMultiplier(global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MarketAtomicExecutionFeeMultiplier, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse> MarketAtomicExecutionFeeMultiplierAsync(global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MarketAtomicExecutionFeeMultiplierAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse> MarketAtomicExecutionFeeMultiplierAsync(global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MarketAtomicExecutionFeeMultiplier, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_QueryExchangeParams, serviceImpl.QueryExchangeParams)
          .AddMethod(__Method_SubaccountDeposits, serviceImpl.SubaccountDeposits)
          .AddMethod(__Method_SubaccountDeposit, serviceImpl.SubaccountDeposit)
          .AddMethod(__Method_ExchangeBalances, serviceImpl.ExchangeBalances)
          .AddMethod(__Method_AggregateVolume, serviceImpl.AggregateVolume)
          .AddMethod(__Method_AggregateVolumes, serviceImpl.AggregateVolumes)
          .AddMethod(__Method_AggregateMarketVolume, serviceImpl.AggregateMarketVolume)
          .AddMethod(__Method_AggregateMarketVolumes, serviceImpl.AggregateMarketVolumes)
          .AddMethod(__Method_DenomDecimal, serviceImpl.DenomDecimal)
          .AddMethod(__Method_DenomDecimals, serviceImpl.DenomDecimals)
          .AddMethod(__Method_SpotMarkets, serviceImpl.SpotMarkets)
          .AddMethod(__Method_SpotMarket, serviceImpl.SpotMarket)
          .AddMethod(__Method_FullSpotMarkets, serviceImpl.FullSpotMarkets)
          .AddMethod(__Method_FullSpotMarket, serviceImpl.FullSpotMarket)
          .AddMethod(__Method_SpotOrderbook, serviceImpl.SpotOrderbook)
          .AddMethod(__Method_TraderSpotOrders, serviceImpl.TraderSpotOrders)
          .AddMethod(__Method_AccountAddressSpotOrders, serviceImpl.AccountAddressSpotOrders)
          .AddMethod(__Method_SpotOrdersByHashes, serviceImpl.SpotOrdersByHashes)
          .AddMethod(__Method_SubaccountOrders, serviceImpl.SubaccountOrders)
          .AddMethod(__Method_TraderSpotTransientOrders, serviceImpl.TraderSpotTransientOrders)
          .AddMethod(__Method_SpotMidPriceAndTOB, serviceImpl.SpotMidPriceAndTOB)
          .AddMethod(__Method_DerivativeMidPriceAndTOB, serviceImpl.DerivativeMidPriceAndTOB)
          .AddMethod(__Method_DerivativeOrderbook, serviceImpl.DerivativeOrderbook)
          .AddMethod(__Method_TraderDerivativeOrders, serviceImpl.TraderDerivativeOrders)
          .AddMethod(__Method_AccountAddressDerivativeOrders, serviceImpl.AccountAddressDerivativeOrders)
          .AddMethod(__Method_DerivativeOrdersByHashes, serviceImpl.DerivativeOrdersByHashes)
          .AddMethod(__Method_TraderDerivativeTransientOrders, serviceImpl.TraderDerivativeTransientOrders)
          .AddMethod(__Method_DerivativeMarkets, serviceImpl.DerivativeMarkets)
          .AddMethod(__Method_DerivativeMarket, serviceImpl.DerivativeMarket)
          .AddMethod(__Method_DerivativeMarketAddress, serviceImpl.DerivativeMarketAddress)
          .AddMethod(__Method_SubaccountTradeNonce, serviceImpl.SubaccountTradeNonce)
          .AddMethod(__Method_ExchangeModuleState, serviceImpl.ExchangeModuleState)
          .AddMethod(__Method_Positions, serviceImpl.Positions)
          .AddMethod(__Method_SubaccountPositions, serviceImpl.SubaccountPositions)
          .AddMethod(__Method_SubaccountPositionInMarket, serviceImpl.SubaccountPositionInMarket)
          .AddMethod(__Method_SubaccountEffectivePositionInMarket, serviceImpl.SubaccountEffectivePositionInMarket)
          .AddMethod(__Method_PerpetualMarketInfo, serviceImpl.PerpetualMarketInfo)
          .AddMethod(__Method_ExpiryFuturesMarketInfo, serviceImpl.ExpiryFuturesMarketInfo)
          .AddMethod(__Method_PerpetualMarketFunding, serviceImpl.PerpetualMarketFunding)
          .AddMethod(__Method_SubaccountOrderMetadata, serviceImpl.SubaccountOrderMetadata)
          .AddMethod(__Method_TradeRewardPoints, serviceImpl.TradeRewardPoints)
          .AddMethod(__Method_PendingTradeRewardPoints, serviceImpl.PendingTradeRewardPoints)
          .AddMethod(__Method_TradeRewardCampaign, serviceImpl.TradeRewardCampaign)
          .AddMethod(__Method_FeeDiscountAccountInfo, serviceImpl.FeeDiscountAccountInfo)
          .AddMethod(__Method_FeeDiscountSchedule, serviceImpl.FeeDiscountSchedule)
          .AddMethod(__Method_BalanceMismatches, serviceImpl.BalanceMismatches)
          .AddMethod(__Method_BalanceWithBalanceHolds, serviceImpl.BalanceWithBalanceHolds)
          .AddMethod(__Method_FeeDiscountTierStatistics, serviceImpl.FeeDiscountTierStatistics)
          .AddMethod(__Method_MitoVaultInfos, serviceImpl.MitoVaultInfos)
          .AddMethod(__Method_QueryMarketIDFromVault, serviceImpl.QueryMarketIDFromVault)
          .AddMethod(__Method_HistoricalTradeRecords, serviceImpl.HistoricalTradeRecords)
          .AddMethod(__Method_IsOptedOutOfRewards, serviceImpl.IsOptedOutOfRewards)
          .AddMethod(__Method_OptedOutOfRewardsAccounts, serviceImpl.OptedOutOfRewardsAccounts)
          .AddMethod(__Method_MarketVolatility, serviceImpl.MarketVolatility)
          .AddMethod(__Method_BinaryOptionsMarkets, serviceImpl.BinaryOptionsMarkets)
          .AddMethod(__Method_TraderDerivativeConditionalOrders, serviceImpl.TraderDerivativeConditionalOrders)
          .AddMethod(__Method_MarketAtomicExecutionFeeMultiplier, serviceImpl.MarketAtomicExecutionFeeMultiplier).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_QueryExchangeParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryExchangeParamsRequest, global::Injective.Exchange.V1Beta1.QueryExchangeParamsResponse>(serviceImpl.QueryExchangeParams));
      serviceBinder.AddMethod(__Method_SubaccountDeposits, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositsResponse>(serviceImpl.SubaccountDeposits));
      serviceBinder.AddMethod(__Method_SubaccountDeposit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountDepositRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountDepositResponse>(serviceImpl.SubaccountDeposit));
      serviceBinder.AddMethod(__Method_ExchangeBalances, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryExchangeBalancesRequest, global::Injective.Exchange.V1Beta1.QueryExchangeBalancesResponse>(serviceImpl.ExchangeBalances));
      serviceBinder.AddMethod(__Method_AggregateVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAggregateVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumeResponse>(serviceImpl.AggregateVolume));
      serviceBinder.AddMethod(__Method_AggregateVolumes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAggregateVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateVolumesResponse>(serviceImpl.AggregateVolumes));
      serviceBinder.AddMethod(__Method_AggregateMarketVolume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumeResponse>(serviceImpl.AggregateMarketVolume));
      serviceBinder.AddMethod(__Method_AggregateMarketVolumes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesRequest, global::Injective.Exchange.V1Beta1.QueryAggregateMarketVolumesResponse>(serviceImpl.AggregateMarketVolumes));
      serviceBinder.AddMethod(__Method_DenomDecimal, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDenomDecimalRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalResponse>(serviceImpl.DenomDecimal));
      serviceBinder.AddMethod(__Method_DenomDecimals, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDenomDecimalsRequest, global::Injective.Exchange.V1Beta1.QueryDenomDecimalsResponse>(serviceImpl.DenomDecimals));
      serviceBinder.AddMethod(__Method_SpotMarkets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySpotMarketsRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketsResponse>(serviceImpl.SpotMarkets));
      serviceBinder.AddMethod(__Method_SpotMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySpotMarketRequest, global::Injective.Exchange.V1Beta1.QuerySpotMarketResponse>(serviceImpl.SpotMarket));
      serviceBinder.AddMethod(__Method_FullSpotMarkets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketsResponse>(serviceImpl.FullSpotMarkets));
      serviceBinder.AddMethod(__Method_FullSpotMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryFullSpotMarketRequest, global::Injective.Exchange.V1Beta1.QueryFullSpotMarketResponse>(serviceImpl.FullSpotMarket));
      serviceBinder.AddMethod(__Method_SpotOrderbook, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySpotOrderbookRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrderbookResponse>(serviceImpl.SpotOrderbook));
      serviceBinder.AddMethod(__Method_TraderSpotOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse>(serviceImpl.TraderSpotOrders));
      serviceBinder.AddMethod(__Method_AccountAddressSpotOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressSpotOrdersResponse>(serviceImpl.AccountAddressSpotOrders));
      serviceBinder.AddMethod(__Method_SpotOrdersByHashes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QuerySpotOrdersByHashesResponse>(serviceImpl.SpotOrdersByHashes));
      serviceBinder.AddMethod(__Method_SubaccountOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrdersResponse>(serviceImpl.SubaccountOrders));
      serviceBinder.AddMethod(__Method_TraderSpotTransientOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderSpotOrdersResponse>(serviceImpl.TraderSpotTransientOrders));
      serviceBinder.AddMethod(__Method_SpotMidPriceAndTOB, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QuerySpotMidPriceAndTOBResponse>(serviceImpl.SpotMidPriceAndTOB));
      serviceBinder.AddMethod(__Method_DerivativeMidPriceAndTOB, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMidPriceAndTOBResponse>(serviceImpl.DerivativeMidPriceAndTOB));
      serviceBinder.AddMethod(__Method_DerivativeOrderbook, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrderbookResponse>(serviceImpl.DerivativeOrderbook));
      serviceBinder.AddMethod(__Method_TraderDerivativeOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse>(serviceImpl.TraderDerivativeOrders));
      serviceBinder.AddMethod(__Method_AccountAddressDerivativeOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryAccountAddressDerivativeOrdersResponse>(serviceImpl.AccountAddressDerivativeOrders));
      serviceBinder.AddMethod(__Method_DerivativeOrdersByHashes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeOrdersByHashesResponse>(serviceImpl.DerivativeOrdersByHashes));
      serviceBinder.AddMethod(__Method_TraderDerivativeTransientOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeOrdersResponse>(serviceImpl.TraderDerivativeTransientOrders));
      serviceBinder.AddMethod(__Method_DerivativeMarkets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketsResponse>(serviceImpl.DerivativeMarkets));
      serviceBinder.AddMethod(__Method_DerivativeMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketResponse>(serviceImpl.DerivativeMarket));
      serviceBinder.AddMethod(__Method_DerivativeMarketAddress, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressRequest, global::Injective.Exchange.V1Beta1.QueryDerivativeMarketAddressResponse>(serviceImpl.DerivativeMarketAddress));
      serviceBinder.AddMethod(__Method_SubaccountTradeNonce, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountTradeNonceResponse>(serviceImpl.SubaccountTradeNonce));
      serviceBinder.AddMethod(__Method_ExchangeModuleState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryModuleStateRequest, global::Injective.Exchange.V1Beta1.QueryModuleStateResponse>(serviceImpl.ExchangeModuleState));
      serviceBinder.AddMethod(__Method_Positions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryPositionsRequest, global::Injective.Exchange.V1Beta1.QueryPositionsResponse>(serviceImpl.Positions));
      serviceBinder.AddMethod(__Method_SubaccountPositions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionsResponse>(serviceImpl.SubaccountPositions));
      serviceBinder.AddMethod(__Method_SubaccountPositionInMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountPositionInMarketResponse>(serviceImpl.SubaccountPositionInMarket));
      serviceBinder.AddMethod(__Method_SubaccountEffectivePositionInMarket, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountEffectivePositionInMarketResponse>(serviceImpl.SubaccountEffectivePositionInMarket));
      serviceBinder.AddMethod(__Method_PerpetualMarketInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketInfoResponse>(serviceImpl.PerpetualMarketInfo));
      serviceBinder.AddMethod(__Method_ExpiryFuturesMarketInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoRequest, global::Injective.Exchange.V1Beta1.QueryExpiryFuturesMarketInfoResponse>(serviceImpl.ExpiryFuturesMarketInfo));
      serviceBinder.AddMethod(__Method_PerpetualMarketFunding, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingRequest, global::Injective.Exchange.V1Beta1.QueryPerpetualMarketFundingResponse>(serviceImpl.PerpetualMarketFunding));
      serviceBinder.AddMethod(__Method_SubaccountOrderMetadata, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataRequest, global::Injective.Exchange.V1Beta1.QuerySubaccountOrderMetadataResponse>(serviceImpl.SubaccountOrderMetadata));
      serviceBinder.AddMethod(__Method_TradeRewardPoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse>(serviceImpl.TradeRewardPoints));
      serviceBinder.AddMethod(__Method_PendingTradeRewardPoints, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardPointsResponse>(serviceImpl.PendingTradeRewardPoints));
      serviceBinder.AddMethod(__Method_TradeRewardCampaign, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignRequest, global::Injective.Exchange.V1Beta1.QueryTradeRewardCampaignResponse>(serviceImpl.TradeRewardCampaign));
      serviceBinder.AddMethod(__Method_FeeDiscountAccountInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountAccountInfoResponse>(serviceImpl.FeeDiscountAccountInfo));
      serviceBinder.AddMethod(__Method_FeeDiscountSchedule, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountScheduleResponse>(serviceImpl.FeeDiscountSchedule));
      serviceBinder.AddMethod(__Method_BalanceMismatches, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesRequest, global::Injective.Exchange.V1Beta1.QueryBalanceMismatchesResponse>(serviceImpl.BalanceMismatches));
      serviceBinder.AddMethod(__Method_BalanceWithBalanceHolds, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsRequest, global::Injective.Exchange.V1Beta1.QueryBalanceWithBalanceHoldsResponse>(serviceImpl.BalanceWithBalanceHolds));
      serviceBinder.AddMethod(__Method_FeeDiscountTierStatistics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsRequest, global::Injective.Exchange.V1Beta1.QueryFeeDiscountTierStatisticsResponse>(serviceImpl.FeeDiscountTierStatistics));
      serviceBinder.AddMethod(__Method_MitoVaultInfos, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.MitoVaultInfosRequest, global::Injective.Exchange.V1Beta1.MitoVaultInfosResponse>(serviceImpl.MitoVaultInfos));
      serviceBinder.AddMethod(__Method_QueryMarketIDFromVault, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultRequest, global::Injective.Exchange.V1Beta1.QueryMarketIDFromVaultResponse>(serviceImpl.QueryMarketIDFromVault));
      serviceBinder.AddMethod(__Method_HistoricalTradeRecords, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsRequest, global::Injective.Exchange.V1Beta1.QueryHistoricalTradeRecordsResponse>(serviceImpl.HistoricalTradeRecords));
      serviceBinder.AddMethod(__Method_IsOptedOutOfRewards, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsRequest, global::Injective.Exchange.V1Beta1.QueryIsOptedOutOfRewardsResponse>(serviceImpl.IsOptedOutOfRewards));
      serviceBinder.AddMethod(__Method_OptedOutOfRewardsAccounts, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsRequest, global::Injective.Exchange.V1Beta1.QueryOptedOutOfRewardsAccountsResponse>(serviceImpl.OptedOutOfRewardsAccounts));
      serviceBinder.AddMethod(__Method_MarketVolatility, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryMarketVolatilityRequest, global::Injective.Exchange.V1Beta1.QueryMarketVolatilityResponse>(serviceImpl.MarketVolatility));
      serviceBinder.AddMethod(__Method_BinaryOptionsMarkets, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryBinaryMarketsRequest, global::Injective.Exchange.V1Beta1.QueryBinaryMarketsResponse>(serviceImpl.BinaryOptionsMarkets));
      serviceBinder.AddMethod(__Method_TraderDerivativeConditionalOrders, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersRequest, global::Injective.Exchange.V1Beta1.QueryTraderDerivativeConditionalOrdersResponse>(serviceImpl.TraderDerivativeConditionalOrders));
      serviceBinder.AddMethod(__Method_MarketAtomicExecutionFeeMultiplier, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierRequest, global::Injective.Exchange.V1Beta1.QueryMarketAtomicExecutionFeeMultiplierResponse>(serviceImpl.MarketAtomicExecutionFeeMultiplier));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/ocr/v1beta1/query.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Ocr.V1Beta1 {
  /// <summary>
  /// Query defines the gRPC querier service for OCR module.
  /// </summary>
  public static partial class Query
  {
    static readonly string __ServiceName = "injective.ocr.v1beta1.Query";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryParamsRequest> __Marshaller_injective_ocr_v1beta1_QueryParamsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryParamsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryParamsResponse> __Marshaller_injective_ocr_v1beta1_QueryParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryParamsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest> __Marshaller_injective_ocr_v1beta1_QueryFeedConfigRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse> __Marshaller_injective_ocr_v1beta1_QueryFeedConfigResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest> __Marshaller_injective_ocr_v1beta1_QueryFeedConfigInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse> __Marshaller_injective_ocr_v1beta1_QueryFeedConfigInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest> __Marshaller_injective_ocr_v1beta1_QueryLatestRoundRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse> __Marshaller_injective_ocr_v1beta1_QueryLatestRoundResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest> __Marshaller_injective_ocr_v1beta1_QueryLatestTransmissionDetailsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse> __Marshaller_injective_ocr_v1beta1_QueryLatestTransmissionDetailsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest> __Marshaller_injective_ocr_v1beta1_QueryOwedAmountRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse> __Marshaller_injective_ocr_v1beta1_QueryOwedAmountResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryModuleStateRequest> __Marshaller_injective_ocr_v1beta1_QueryModuleStateRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryModuleStateRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.QueryModuleStateResponse> __Marshaller_injective_ocr_v1beta1_QueryModuleStateResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.QueryModuleStateResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryParamsRequest, global::Injective.Ocr.V1Beta1.QueryParamsResponse> __Method_Params = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryParamsRequest, global::Injective.Ocr.V1Beta1.QueryParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Params",
        __Marshaller_injective_ocr_v1beta1_QueryParamsRequest,
        __Marshaller_injective_ocr_v1beta1_QueryParamsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse> __Method_FeedConfig = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeedConfig",
        __Marshaller_injective_ocr_v1beta1_QueryFeedConfigRequest,
        __Marshaller_injective_ocr_v1beta1_QueryFeedConfigResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse> __Method_FeedConfigInfo = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FeedConfigInfo",
        __Marshaller_injective_ocr_v1beta1_QueryFeedConfigInfoRequest,
        __Marshaller_injective_ocr_v1beta1_QueryFeedConfigInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest, global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse> __Method_LatestRound = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest, global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LatestRound",
        __Marshaller_injective_ocr_v1beta1_QueryLatestRoundRequest,
        __Marshaller_injective_ocr_v1beta1_QueryLatestRoundResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest, global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse> __Method_LatestTransmissionDetails = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest, global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LatestTransmissionDetails",
        __Marshaller_injective_ocr_v1beta1_QueryLatestTransmissionDetailsRequest,
        __Marshaller_injective_ocr_v1beta1_QueryLatestTransmissionDetailsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest, global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse> __Method_OwedAmount = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest, global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OwedAmount",
        __Marshaller_injective_ocr_v1beta1_QueryOwedAmountRequest,
        __Marshaller_injective_ocr_v1beta1_QueryOwedAmountResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.QueryModuleStateRequest, global::Injective.Ocr.V1Beta1.QueryModuleStateResponse> __Method_OcrModuleState = new grpc::Method<global::Injective.Ocr.V1Beta1.QueryModuleStateRequest, global::Injective.Ocr.V1Beta1.QueryModuleStateResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OcrModuleState",
        __Marshaller_injective_ocr_v1beta1_QueryModuleStateRequest,
        __Marshaller_injective_ocr_v1beta1_QueryModuleStateResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Ocr.V1Beta1.QueryReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Query</summary>
    [grpc::BindServiceMethod(typeof(Query), "BindService")]
    public abstract partial class QueryBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryParamsResponse> Params(global::Injective.Ocr.V1Beta1.QueryParamsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the OCR FeedConfig for a given FeedId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse> FeedConfig(global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the OCR FeedConfigInfo for a given FeedId
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse> FeedConfigInfo(global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves latest round ID and data, including median answer for that round
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse> LatestRound(global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// LatestTransmissionDetails returns details about the latest trasmission
      /// recorded on chain for the given feed ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse> LatestTransmissionDetails(global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves transmitter's owed amount
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse> OwedAmount(global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Retrieves the entire OCR module's state
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.QueryModuleStateResponse> OcrModuleState(global::Injective.Ocr.V1Beta1.QueryModuleStateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Query</summary>
    public partial class QueryClient : grpc::ClientBase<QueryClient>
    {
      /// <summary>Creates a new client for Query</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Query that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public QueryClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected QueryClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryParamsResponse Params(global::Injective.Ocr.V1Beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Params(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryParamsResponse Params(global::Injective.Ocr.V1Beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Params, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryParamsResponse> ParamsAsync(global::Injective.Ocr.V1Beta1.QueryParamsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryParamsResponse> ParamsAsync(global::Injective.Ocr.V1Beta1.QueryParamsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Params, null, options, request);
      }
      /// <summary>
      /// Retrieves the OCR FeedConfig for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse FeedConfig(global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeedConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the OCR FeedConfig for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse FeedConfig(global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeedConfig, null, options, request);
      }
      /// <summary>
      /// Retrieves the OCR FeedConfig for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse> FeedConfigAsync(global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeedConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the OCR FeedConfig for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse> FeedConfigAsync(global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeedConfig, null, options, request);
      }
      /// <summary>
      /// Retrieves the OCR FeedConfigInfo for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse FeedConfigInfo(global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeedConfigInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the OCR FeedConfigInfo for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse FeedConfigInfo(global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FeedConfigInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves the OCR FeedConfigInfo for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse> FeedConfigInfoAsync(global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FeedConfigInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the OCR FeedConfigInfo for a given FeedId
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse> FeedConfigInfoAsync(global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FeedConfigInfo, null, options, request);
      }
      /// <summary>
      /// Retrieves latest round ID and data, including median answer for that round
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse LatestRound(global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LatestRound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves latest round ID and data, including median answer for that round
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse LatestRound(global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LatestRound, null, options, request);
      }
      /// <summary>
      /// Retrieves latest round ID and data, including median answer for that round
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse> LatestRoundAsync(global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LatestRoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves latest round ID and data, including median answer for that round
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse> LatestRoundAsync(global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LatestRound, null, options, request);
      }
      /// <summary>
      /// LatestTransmissionDetails returns details about the latest trasmission
      /// recorded on chain for the given feed ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse LatestTransmissionDetails(global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LatestTransmissionDetails(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LatestTransmissionDetails returns details about the latest trasmission
      /// recorded on chain for the given feed ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse LatestTransmissionDetails(global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LatestTransmissionDetails, null, options, request);
      }
      /// <summary>
      /// LatestTransmissionDetails returns details about the latest trasmission
      /// recorded on chain for the given feed ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse> LatestTransmissionDetailsAsync(global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LatestTransmissionDetailsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LatestTransmissionDetails returns details about the latest trasmission
      /// recorded on chain for the given feed ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse> LatestTransmissionDetailsAsync(global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LatestTransmissionDetails, null, options, request);
      }
      /// <summary>
      /// Retrieves transmitter's owed amount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse OwedAmount(global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OwedAmount(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves transmitter's owed amount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse OwedAmount(global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OwedAmount, null, options, request);
      }
      /// <summary>
      /// Retrieves transmitter's owed amount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse> OwedAmountAsync(global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OwedAmountAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves transmitter's owed amount
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse> OwedAmountAsync(global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OwedAmount, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire OCR module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryModuleStateResponse OcrModuleState(global::Injective.Ocr.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OcrModuleState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire OCR module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.QueryModuleStateResponse OcrModuleState(global::Injective.Ocr.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OcrModuleState, null, options, request);
      }
      /// <summary>
      /// Retrieves the entire OCR module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryModuleStateResponse> OcrModuleStateAsync(global::Injective.Ocr.V1Beta1.QueryModuleStateRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OcrModuleStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Retrieves the entire OCR module's state
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.QueryModuleStateResponse> OcrModuleStateAsync(global::Injective.Ocr.V1Beta1.QueryModuleStateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OcrModuleState, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override QueryClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueryClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(QueryBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Params, serviceImpl.Params)
          .AddMethod(__Method_FeedConfig, serviceImpl.FeedConfig)
          .AddMethod(__Method_FeedConfigInfo, serviceImpl.FeedConfigInfo)
          .AddMethod(__Method_LatestRound, serviceImpl.LatestRound)
          .AddMethod(__Method_LatestTransmissionDetails, serviceImpl.LatestTransmissionDetails)
          .AddMethod(__Method_OwedAmount, serviceImpl.OwedAmount)
          .AddMethod(__Method_OcrModuleState, serviceImpl.OcrModuleState).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueryBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Params, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryParamsRequest, global::Injective.Ocr.V1Beta1.QueryParamsResponse>(serviceImpl.Params));
      serviceBinder.AddMethod(__Method_FeedConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryFeedConfigRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigResponse>(serviceImpl.FeedConfig));
      serviceBinder.AddMethod(__Method_FeedConfigInfo, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoRequest, global::Injective.Ocr.V1Beta1.QueryFeedConfigInfoResponse>(serviceImpl.FeedConfigInfo));
      serviceBinder.AddMethod(__Method_LatestRound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryLatestRoundRequest, global::Injective.Ocr.V1Beta1.QueryLatestRoundResponse>(serviceImpl.LatestRound));
      serviceBinder.AddMethod(__Method_LatestTransmissionDetails, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsRequest, global::Injective.Ocr.V1Beta1.QueryLatestTransmissionDetailsResponse>(serviceImpl.LatestTransmissionDetails));
      serviceBinder.AddMethod(__Method_OwedAmount, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryOwedAmountRequest, global::Injective.Ocr.V1Beta1.QueryOwedAmountResponse>(serviceImpl.OwedAmount));
      serviceBinder.AddMethod(__Method_OcrModuleState, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.QueryModuleStateRequest, global::Injective.Ocr.V1Beta1.QueryModuleStateResponse>(serviceImpl.OcrModuleState));
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective/ocr/v1beta1/tx.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Injective.Ocr.V1Beta1 {
  /// <summary>
  /// Msg defines the OCR Msg service.
  /// </summary>
  public static partial class Msg
  {
    static readonly string __ServiceName = "injective.ocr.v1beta1.Msg";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgCreateFeed> __Marshaller_injective_ocr_v1beta1_MsgCreateFeed = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgCreateFeed.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse> __Marshaller_injective_ocr_v1beta1_MsgCreateFeedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgUpdateFeed> __Marshaller_injective_ocr_v1beta1_MsgUpdateFeed = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgUpdateFeed.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse> __Marshaller_injective_ocr_v1beta1_MsgUpdateFeedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgTransmit> __Marshaller_injective_ocr_v1beta1_MsgTransmit = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgTransmit.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgTransmitResponse> __Marshaller_injective_ocr_v1beta1_MsgTransmitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgTransmitResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool> __Marshaller_injective_ocr_v1beta1_MsgFundFeedRewardPool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse> __Marshaller_injective_ocr_v1beta1_MsgFundFeedRewardPoolResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool> __Marshaller_injective_ocr_v1beta1_MsgWithdrawFeedRewardPool = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse> __Marshaller_injective_ocr_v1beta1_MsgWithdrawFeedRewardPoolResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgSetPayees> __Marshaller_injective_ocr_v1beta1_MsgSetPayees = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgSetPayees.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse> __Marshaller_injective_ocr_v1beta1_MsgSetPayeesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgTransferPayeeship> __Marshaller_injective_ocr_v1beta1_MsgTransferPayeeship = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgTransferPayeeship.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse> __Marshaller_injective_ocr_v1beta1_MsgTransferPayeeshipResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship> __Marshaller_injective_ocr_v1beta1_MsgAcceptPayeeship = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse> __Marshaller_injective_ocr_v1beta1_MsgAcceptPayeeshipResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgUpdateParams> __Marshaller_injective_ocr_v1beta1_MsgUpdateParams = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgUpdateParams.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse> __Marshaller_injective_ocr_v1beta1_MsgUpdateParamsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgCreateFeed, global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse> __Method_CreateFeed = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgCreateFeed, global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateFeed",
        __Marshaller_injective_ocr_v1beta1_MsgCreateFeed,
        __Marshaller_injective_ocr_v1beta1_MsgCreateFeedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgUpdateFeed, global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse> __Method_UpdateFeed = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgUpdateFeed, global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateFeed",
        __Marshaller_injective_ocr_v1beta1_MsgUpdateFeed,
        __Marshaller_injective_ocr_v1beta1_MsgUpdateFeedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgTransmit, global::Injective.Ocr.V1Beta1.MsgTransmitResponse> __Method_Transmit = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgTransmit, global::Injective.Ocr.V1Beta1.MsgTransmitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Transmit",
        __Marshaller_injective_ocr_v1beta1_MsgTransmit,
        __Marshaller_injective_ocr_v1beta1_MsgTransmitResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse> __Method_FundFeedRewardPool = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FundFeedRewardPool",
        __Marshaller_injective_ocr_v1beta1_MsgFundFeedRewardPool,
        __Marshaller_injective_ocr_v1beta1_MsgFundFeedRewardPoolResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse> __Method_WithdrawFeedRewardPool = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "WithdrawFeedRewardPool",
        __Marshaller_injective_ocr_v1beta1_MsgWithdrawFeedRewardPool,
        __Marshaller_injective_ocr_v1beta1_MsgWithdrawFeedRewardPoolResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgSetPayees, global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse> __Method_SetPayees = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgSetPayees, global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetPayees",
        __Marshaller_injective_ocr_v1beta1_MsgSetPayees,
        __Marshaller_injective_ocr_v1beta1_MsgSetPayeesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgTransferPayeeship, global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse> __Method_TransferPayeeship = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgTransferPayeeship, global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TransferPayeeship",
        __Marshaller_injective_ocr_v1beta1_MsgTransferPayeeship,
        __Marshaller_injective_ocr_v1beta1_MsgTransferPayeeshipResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship, global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse> __Method_AcceptPayeeship = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship, global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcceptPayeeship",
        __Marshaller_injective_ocr_v1beta1_MsgAcceptPayeeship,
        __Marshaller_injective_ocr_v1beta1_MsgAcceptPayeeshipResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Injective.Ocr.V1Beta1.MsgUpdateParams, global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse> __Method_UpdateParams = new grpc::Method<global::Injective.Ocr.V1Beta1.MsgUpdateParams, global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateParams",
        __Marshaller_injective_ocr_v1beta1_MsgUpdateParams,
        __Marshaller_injective_ocr_v1beta1_MsgUpdateParamsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Injective.Ocr.V1Beta1.TxReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Msg</summary>
    [grpc::BindServiceMethod(typeof(Msg), "BindService")]
    public abstract partial class MsgBase
    {
      /// <summary>
      /// CreateFeed defines a method for creating feed by module admin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse> CreateFeed(global::Injective.Ocr.V1Beta1.MsgCreateFeed request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// CreateFeed defines a method for creating feed by feed admin or feed billing
      /// admin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse> UpdateFeed(global::Injective.Ocr.V1Beta1.MsgUpdateFeed request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Transmit defines a method for transmitting the feed info by transmitter
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgTransmitResponse> Transmit(global::Injective.Ocr.V1Beta1.MsgTransmit request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// FundFeedRewardPool defines a method to put funds into feed reward pool
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse> FundFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      /// admin or billing admin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse> WithdrawFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetPayees defines a method to set payees for transmitters (batch action)
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse> SetPayees(global::Injective.Ocr.V1Beta1.MsgSetPayees request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// TransferPayeeship defines a method for a payee to transfer reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse> TransferPayeeship(global::Injective.Ocr.V1Beta1.MsgTransferPayeeship request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// AcceptPayeeship defines a method for a new payee to accept reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse> AcceptPayeeship(global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse> UpdateParams(global::Injective.Ocr.V1Beta1.MsgUpdateParams request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Msg</summary>
    public partial class MsgClient : grpc::ClientBase<MsgClient>
    {
      /// <summary>Creates a new client for Msg</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Msg that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public MsgClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected MsgClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateFeed defines a method for creating feed by module admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse CreateFeed(global::Injective.Ocr.V1Beta1.MsgCreateFeed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by module admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse CreateFeed(global::Injective.Ocr.V1Beta1.MsgCreateFeed request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateFeed, null, options, request);
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by module admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse> CreateFeedAsync(global::Injective.Ocr.V1Beta1.MsgCreateFeed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by module admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse> CreateFeedAsync(global::Injective.Ocr.V1Beta1.MsgCreateFeed request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateFeed, null, options, request);
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by feed admin or feed billing
      /// admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse UpdateFeed(global::Injective.Ocr.V1Beta1.MsgUpdateFeed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by feed admin or feed billing
      /// admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse UpdateFeed(global::Injective.Ocr.V1Beta1.MsgUpdateFeed request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateFeed, null, options, request);
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by feed admin or feed billing
      /// admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse> UpdateFeedAsync(global::Injective.Ocr.V1Beta1.MsgUpdateFeed request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateFeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateFeed defines a method for creating feed by feed admin or feed billing
      /// admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse> UpdateFeedAsync(global::Injective.Ocr.V1Beta1.MsgUpdateFeed request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateFeed, null, options, request);
      }
      /// <summary>
      /// Transmit defines a method for transmitting the feed info by transmitter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgTransmitResponse Transmit(global::Injective.Ocr.V1Beta1.MsgTransmit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Transmit(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transmit defines a method for transmitting the feed info by transmitter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgTransmitResponse Transmit(global::Injective.Ocr.V1Beta1.MsgTransmit request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Transmit, null, options, request);
      }
      /// <summary>
      /// Transmit defines a method for transmitting the feed info by transmitter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgTransmitResponse> TransmitAsync(global::Injective.Ocr.V1Beta1.MsgTransmit request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransmitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Transmit defines a method for transmitting the feed info by transmitter
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgTransmitResponse> TransmitAsync(global::Injective.Ocr.V1Beta1.MsgTransmit request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Transmit, null, options, request);
      }
      /// <summary>
      /// FundFeedRewardPool defines a method to put funds into feed reward pool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse FundFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundFeedRewardPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundFeedRewardPool defines a method to put funds into feed reward pool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse FundFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FundFeedRewardPool, null, options, request);
      }
      /// <summary>
      /// FundFeedRewardPool defines a method to put funds into feed reward pool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse> FundFeedRewardPoolAsync(global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FundFeedRewardPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// FundFeedRewardPool defines a method to put funds into feed reward pool
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse> FundFeedRewardPoolAsync(global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FundFeedRewardPool, null, options, request);
      }
      /// <summary>
      /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      /// admin or billing admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse WithdrawFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawFeedRewardPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      /// admin or billing admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse WithdrawFeedRewardPool(global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_WithdrawFeedRewardPool, null, options, request);
      }
      /// <summary>
      /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      /// admin or billing admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse> WithdrawFeedRewardPoolAsync(global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WithdrawFeedRewardPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
      /// admin or billing admin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse> WithdrawFeedRewardPoolAsync(global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_WithdrawFeedRewardPool, null, options, request);
      }
      /// <summary>
      /// SetPayees defines a method to set payees for transmitters (batch action)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse SetPayees(global::Injective.Ocr.V1Beta1.MsgSetPayees request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPayees(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPayees defines a method to set payees for transmitters (batch action)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse SetPayees(global::Injective.Ocr.V1Beta1.MsgSetPayees request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetPayees, null, options, request);
      }
      /// <summary>
      /// SetPayees defines a method to set payees for transmitters (batch action)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse> SetPayeesAsync(global::Injective.Ocr.V1Beta1.MsgSetPayees request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetPayeesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetPayees defines a method to set payees for transmitters (batch action)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse> SetPayeesAsync(global::Injective.Ocr.V1Beta1.MsgSetPayees request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetPayees, null, options, request);
      }
      /// <summary>
      /// TransferPayeeship defines a method for a payee to transfer reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse TransferPayeeship(global::Injective.Ocr.V1Beta1.MsgTransferPayeeship request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferPayeeship(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferPayeeship defines a method for a payee to transfer reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse TransferPayeeship(global::Injective.Ocr.V1Beta1.MsgTransferPayeeship request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TransferPayeeship, null, options, request);
      }
      /// <summary>
      /// TransferPayeeship defines a method for a payee to transfer reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse> TransferPayeeshipAsync(global::Injective.Ocr.V1Beta1.MsgTransferPayeeship request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TransferPayeeshipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TransferPayeeship defines a method for a payee to transfer reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse> TransferPayeeshipAsync(global::Injective.Ocr.V1Beta1.MsgTransferPayeeship request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TransferPayeeship, null, options, request);
      }
      /// <summary>
      /// AcceptPayeeship defines a method for a new payee to accept reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse AcceptPayeeship(global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptPayeeship(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcceptPayeeship defines a method for a new payee to accept reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse AcceptPayeeship(global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcceptPayeeship, null, options, request);
      }
      /// <summary>
      /// AcceptPayeeship defines a method for a new payee to accept reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse> AcceptPayeeshipAsync(global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcceptPayeeshipAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcceptPayeeship defines a method for a new payee to accept reward receive
      /// ownership
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse> AcceptPayeeshipAsync(global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcceptPayeeship, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse UpdateParams(global::Injective.Ocr.V1Beta1.MsgUpdateParams request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParams(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse UpdateParams(global::Injective.Ocr.V1Beta1.MsgUpdateParams request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateParams, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse> UpdateParamsAsync(global::Injective.Ocr.V1Beta1.MsgUpdateParams request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateParamsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse> UpdateParamsAsync(global::Injective.Ocr.V1Beta1.MsgUpdateParams request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateParams, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override MsgClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MsgClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(MsgBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateFeed, serviceImpl.CreateFeed)
          .AddMethod(__Method_UpdateFeed, serviceImpl.UpdateFeed)
          .AddMethod(__Method_Transmit, serviceImpl.Transmit)
          .AddMethod(__Method_FundFeedRewardPool, serviceImpl.FundFeedRewardPool)
          .AddMethod(__Method_WithdrawFeedRewardPool, serviceImpl.WithdrawFeedRewardPool)
          .AddMethod(__Method_SetPayees, serviceImpl.SetPayees)
          .AddMethod(__Method_TransferPayeeship, serviceImpl.TransferPayeeship)
          .AddMethod(__Method_AcceptPayeeship, serviceImpl.AcceptPayeeship)
          .AddMethod(__Method_UpdateParams, serviceImpl.UpdateParams).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MsgBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgCreateFeed, global::Injective.Ocr.V1Beta1.MsgCreateFeedResponse>(serviceImpl.CreateFeed));
      serviceBinder.AddMethod(__Method_UpdateFeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgUpdateFeed, global::Injective.Ocr.V1Beta1.MsgUpdateFeedResponse>(serviceImpl.UpdateFeed));
      serviceBinder.AddMethod(__Method_Transmit, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgTransmit, global::Injective.Ocr.V1Beta1.MsgTransmitResponse>(serviceImpl.Transmit));
      serviceBinder.AddMethod(__Method_FundFeedRewardPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgFundFeedRewardPoolResponse>(serviceImpl.FundFeedRewardPool));
      serviceBinder.AddMethod(__Method_WithdrawFeedRewardPool, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPool, global::Injective.Ocr.V1Beta1.MsgWithdrawFeedRewardPoolResponse>(serviceImpl.WithdrawFeedRewardPool));
      serviceBinder.AddMethod(__Method_SetPayees, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgSetPayees, global::Injective.Ocr.V1Beta1.MsgSetPayeesResponse>(serviceImpl.SetPayees));
      serviceBinder.AddMethod(__Method_TransferPayeeship, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgTransferPayeeship, global::Injective.Ocr.V1Beta1.MsgTransferPayeeshipResponse>(serviceImpl.TransferPayeeship));
      serviceBinder.AddMethod(__Method_AcceptPayeeship, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgAcceptPayeeship, global::Injective.Ocr.V1Beta1.MsgAcceptPayeeshipResponse>(serviceImpl.AcceptPayeeship));
      serviceBinder.AddMethod(__Method_UpdateParams, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Injective.Ocr.V1Beta1.MsgUpdateParams, global::Injective.Ocr.V1Beta1.MsgUpdateParamsResponse>(serviceImpl.UpdateParams));
    }

  }
}
#endregion

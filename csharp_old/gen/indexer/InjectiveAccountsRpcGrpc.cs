// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective_accounts_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveAccountsRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveAccountsRpc {
  /// <summary>
  /// InjectiveAccountsRPC defines API of Exchange Accounts provider.
  /// </summary>
  public static partial class InjectiveAccountsRPC
  {
    static readonly string __ServiceName = "injective_accounts_rpc.InjectiveAccountsRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.PortfolioRequest> __Marshaller_injective_accounts_rpc_PortfolioRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.PortfolioRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.PortfolioResponse> __Marshaller_injective_accounts_rpc_PortfolioResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.PortfolioResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.OrderStatesRequest> __Marshaller_injective_accounts_rpc_OrderStatesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.OrderStatesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.OrderStatesResponse> __Marshaller_injective_accounts_rpc_OrderStatesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.OrderStatesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountsListRequest> __Marshaller_injective_accounts_rpc_SubaccountsListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountsListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountsListResponse> __Marshaller_injective_accounts_rpc_SubaccountsListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountsListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountBalancesListRequest> __Marshaller_injective_accounts_rpc_SubaccountBalancesListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountBalancesListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountBalancesListResponse> __Marshaller_injective_accounts_rpc_SubaccountBalancesListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountBalancesListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest> __Marshaller_injective_accounts_rpc_SubaccountBalanceEndpointRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse> __Marshaller_injective_accounts_rpc_SubaccountBalanceEndpointResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest> __Marshaller_injective_accounts_rpc_StreamSubaccountBalanceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse> __Marshaller_injective_accounts_rpc_StreamSubaccountBalanceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountHistoryRequest> __Marshaller_injective_accounts_rpc_SubaccountHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountHistoryResponse> __Marshaller_injective_accounts_rpc_SubaccountHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountHistoryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest> __Marshaller_injective_accounts_rpc_SubaccountOrderSummaryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse> __Marshaller_injective_accounts_rpc_SubaccountOrderSummaryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.RewardsRequest> __Marshaller_injective_accounts_rpc_RewardsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.RewardsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveAccountsRpc.RewardsResponse> __Marshaller_injective_accounts_rpc_RewardsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveAccountsRpc.RewardsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.PortfolioRequest, global::InjectiveAccountsRpc.PortfolioResponse> __Method_Portfolio = new grpc::Method<global::InjectiveAccountsRpc.PortfolioRequest, global::InjectiveAccountsRpc.PortfolioResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Portfolio",
        __Marshaller_injective_accounts_rpc_PortfolioRequest,
        __Marshaller_injective_accounts_rpc_PortfolioResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.OrderStatesRequest, global::InjectiveAccountsRpc.OrderStatesResponse> __Method_OrderStates = new grpc::Method<global::InjectiveAccountsRpc.OrderStatesRequest, global::InjectiveAccountsRpc.OrderStatesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OrderStates",
        __Marshaller_injective_accounts_rpc_OrderStatesRequest,
        __Marshaller_injective_accounts_rpc_OrderStatesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.SubaccountsListRequest, global::InjectiveAccountsRpc.SubaccountsListResponse> __Method_SubaccountsList = new grpc::Method<global::InjectiveAccountsRpc.SubaccountsListRequest, global::InjectiveAccountsRpc.SubaccountsListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountsList",
        __Marshaller_injective_accounts_rpc_SubaccountsListRequest,
        __Marshaller_injective_accounts_rpc_SubaccountsListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.SubaccountBalancesListRequest, global::InjectiveAccountsRpc.SubaccountBalancesListResponse> __Method_SubaccountBalancesList = new grpc::Method<global::InjectiveAccountsRpc.SubaccountBalancesListRequest, global::InjectiveAccountsRpc.SubaccountBalancesListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountBalancesList",
        __Marshaller_injective_accounts_rpc_SubaccountBalancesListRequest,
        __Marshaller_injective_accounts_rpc_SubaccountBalancesListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest, global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse> __Method_SubaccountBalanceEndpoint = new grpc::Method<global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest, global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountBalanceEndpoint",
        __Marshaller_injective_accounts_rpc_SubaccountBalanceEndpointRequest,
        __Marshaller_injective_accounts_rpc_SubaccountBalanceEndpointResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest, global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse> __Method_StreamSubaccountBalance = new grpc::Method<global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest, global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamSubaccountBalance",
        __Marshaller_injective_accounts_rpc_StreamSubaccountBalanceRequest,
        __Marshaller_injective_accounts_rpc_StreamSubaccountBalanceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.SubaccountHistoryRequest, global::InjectiveAccountsRpc.SubaccountHistoryResponse> __Method_SubaccountHistory = new grpc::Method<global::InjectiveAccountsRpc.SubaccountHistoryRequest, global::InjectiveAccountsRpc.SubaccountHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountHistory",
        __Marshaller_injective_accounts_rpc_SubaccountHistoryRequest,
        __Marshaller_injective_accounts_rpc_SubaccountHistoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest, global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse> __Method_SubaccountOrderSummary = new grpc::Method<global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest, global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubaccountOrderSummary",
        __Marshaller_injective_accounts_rpc_SubaccountOrderSummaryRequest,
        __Marshaller_injective_accounts_rpc_SubaccountOrderSummaryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveAccountsRpc.RewardsRequest, global::InjectiveAccountsRpc.RewardsResponse> __Method_Rewards = new grpc::Method<global::InjectiveAccountsRpc.RewardsRequest, global::InjectiveAccountsRpc.RewardsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Rewards",
        __Marshaller_injective_accounts_rpc_RewardsRequest,
        __Marshaller_injective_accounts_rpc_RewardsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveAccountsRpc.InjectiveAccountsRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for InjectiveAccountsRPC</summary>
    public partial class InjectiveAccountsRPCClient : grpc::ClientBase<InjectiveAccountsRPCClient>
    {
      /// <summary>Creates a new client for InjectiveAccountsRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveAccountsRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveAccountsRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveAccountsRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveAccountsRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveAccountsRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Provide the account's portfolio value in USD.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.PortfolioResponse Portfolio(global::InjectiveAccountsRpc.PortfolioRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Portfolio(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide the account's portfolio value in USD.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.PortfolioResponse Portfolio(global::InjectiveAccountsRpc.PortfolioRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Portfolio, null, options, request);
      }
      /// <summary>
      /// Provide the account's portfolio value in USD.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.PortfolioResponse> PortfolioAsync(global::InjectiveAccountsRpc.PortfolioRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PortfolioAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide the account's portfolio value in USD.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.PortfolioResponse> PortfolioAsync(global::InjectiveAccountsRpc.PortfolioRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Portfolio, null, options, request);
      }
      /// <summary>
      /// List order states by order hashes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.OrderStatesResponse OrderStates(global::InjectiveAccountsRpc.OrderStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderStates(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List order states by order hashes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.OrderStatesResponse OrderStates(global::InjectiveAccountsRpc.OrderStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OrderStates, null, options, request);
      }
      /// <summary>
      /// List order states by order hashes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.OrderStatesResponse> OrderStatesAsync(global::InjectiveAccountsRpc.OrderStatesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OrderStatesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List order states by order hashes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.OrderStatesResponse> OrderStatesAsync(global::InjectiveAccountsRpc.OrderStatesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OrderStates, null, options, request);
      }
      /// <summary>
      /// List all subaccounts IDs of an account address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountsListResponse SubaccountsList(global::InjectiveAccountsRpc.SubaccountsListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountsList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all subaccounts IDs of an account address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountsListResponse SubaccountsList(global::InjectiveAccountsRpc.SubaccountsListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountsList, null, options, request);
      }
      /// <summary>
      /// List all subaccounts IDs of an account address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountsListResponse> SubaccountsListAsync(global::InjectiveAccountsRpc.SubaccountsListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountsListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all subaccounts IDs of an account address
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountsListResponse> SubaccountsListAsync(global::InjectiveAccountsRpc.SubaccountsListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountsList, null, options, request);
      }
      /// <summary>
      /// List subaccount balances for the provided denoms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountBalancesListResponse SubaccountBalancesList(global::InjectiveAccountsRpc.SubaccountBalancesListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountBalancesList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List subaccount balances for the provided denoms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountBalancesListResponse SubaccountBalancesList(global::InjectiveAccountsRpc.SubaccountBalancesListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountBalancesList, null, options, request);
      }
      /// <summary>
      /// List subaccount balances for the provided denoms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountBalancesListResponse> SubaccountBalancesListAsync(global::InjectiveAccountsRpc.SubaccountBalancesListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountBalancesListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List subaccount balances for the provided denoms.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountBalancesListResponse> SubaccountBalancesListAsync(global::InjectiveAccountsRpc.SubaccountBalancesListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountBalancesList, null, options, request);
      }
      /// <summary>
      /// Gets a balance for specific coin denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse SubaccountBalanceEndpoint(global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountBalanceEndpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a balance for specific coin denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse SubaccountBalanceEndpoint(global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountBalanceEndpoint, null, options, request);
      }
      /// <summary>
      /// Gets a balance for specific coin denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse> SubaccountBalanceEndpointAsync(global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountBalanceEndpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets a balance for specific coin denom
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountBalanceEndpointResponse> SubaccountBalanceEndpointAsync(global::InjectiveAccountsRpc.SubaccountBalanceEndpointRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountBalanceEndpoint, null, options, request);
      }
      /// <summary>
      /// StreamSubaccountBalance streams new balance changes for a specified
      /// subaccount and denoms. If no denoms are provided, all denom changes are
      /// streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse> StreamSubaccountBalance(global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamSubaccountBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamSubaccountBalance streams new balance changes for a specified
      /// subaccount and denoms. If no denoms are provided, all denom changes are
      /// streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveAccountsRpc.StreamSubaccountBalanceResponse> StreamSubaccountBalance(global::InjectiveAccountsRpc.StreamSubaccountBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamSubaccountBalance, null, options, request);
      }
      /// <summary>
      /// Get subaccount's deposits and withdrawals history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountHistoryResponse SubaccountHistory(global::InjectiveAccountsRpc.SubaccountHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get subaccount's deposits and withdrawals history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountHistoryResponse SubaccountHistory(global::InjectiveAccountsRpc.SubaccountHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountHistory, null, options, request);
      }
      /// <summary>
      /// Get subaccount's deposits and withdrawals history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountHistoryResponse> SubaccountHistoryAsync(global::InjectiveAccountsRpc.SubaccountHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get subaccount's deposits and withdrawals history
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountHistoryResponse> SubaccountHistoryAsync(global::InjectiveAccountsRpc.SubaccountHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountHistory, null, options, request);
      }
      /// <summary>
      /// Get subaccount's orders summary
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse SubaccountOrderSummary(global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrderSummary(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get subaccount's orders summary
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse SubaccountOrderSummary(global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubaccountOrderSummary, null, options, request);
      }
      /// <summary>
      /// Get subaccount's orders summary
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse> SubaccountOrderSummaryAsync(global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubaccountOrderSummaryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get subaccount's orders summary
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.SubaccountOrderSummaryResponse> SubaccountOrderSummaryAsync(global::InjectiveAccountsRpc.SubaccountOrderSummaryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubaccountOrderSummary, null, options, request);
      }
      /// <summary>
      /// Provide historical trading rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.RewardsResponse Rewards(global::InjectiveAccountsRpc.RewardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Rewards(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide historical trading rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveAccountsRpc.RewardsResponse Rewards(global::InjectiveAccountsRpc.RewardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Rewards, null, options, request);
      }
      /// <summary>
      /// Provide historical trading rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.RewardsResponse> RewardsAsync(global::InjectiveAccountsRpc.RewardsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RewardsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Provide historical trading rewards
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveAccountsRpc.RewardsResponse> RewardsAsync(global::InjectiveAccountsRpc.RewardsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Rewards, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveAccountsRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveAccountsRPCClient(configuration);
      }
    }

  }
}
#endregion

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective_exchange_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveExchangeRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveExchangeRpc {
  /// <summary>
  /// InjectiveExchangeRPC defines gRPC API of an Injective Exchange service.
  /// </summary>
  public static partial class InjectiveExchangeRPC
  {
    static readonly string __ServiceName = "injective_exchange_rpc.InjectiveExchangeRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.GetTxRequest> __Marshaller_injective_exchange_rpc_GetTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.GetTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.GetTxResponse> __Marshaller_injective_exchange_rpc_GetTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.GetTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.PrepareTxRequest> __Marshaller_injective_exchange_rpc_PrepareTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.PrepareTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.PrepareTxResponse> __Marshaller_injective_exchange_rpc_PrepareTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.PrepareTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.BroadcastTxRequest> __Marshaller_injective_exchange_rpc_BroadcastTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.BroadcastTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.BroadcastTxResponse> __Marshaller_injective_exchange_rpc_BroadcastTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.BroadcastTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.PrepareCosmosTxRequest> __Marshaller_injective_exchange_rpc_PrepareCosmosTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.PrepareCosmosTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.PrepareCosmosTxResponse> __Marshaller_injective_exchange_rpc_PrepareCosmosTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.PrepareCosmosTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.BroadcastCosmosTxRequest> __Marshaller_injective_exchange_rpc_BroadcastCosmosTxRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.BroadcastCosmosTxRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.BroadcastCosmosTxResponse> __Marshaller_injective_exchange_rpc_BroadcastCosmosTxResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.BroadcastCosmosTxResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.GetFeePayerRequest> __Marshaller_injective_exchange_rpc_GetFeePayerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.GetFeePayerRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveExchangeRpc.GetFeePayerResponse> __Marshaller_injective_exchange_rpc_GetFeePayerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveExchangeRpc.GetFeePayerResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.GetTxRequest, global::InjectiveExchangeRpc.GetTxResponse> __Method_GetTx = new grpc::Method<global::InjectiveExchangeRpc.GetTxRequest, global::InjectiveExchangeRpc.GetTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTx",
        __Marshaller_injective_exchange_rpc_GetTxRequest,
        __Marshaller_injective_exchange_rpc_GetTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.PrepareTxRequest, global::InjectiveExchangeRpc.PrepareTxResponse> __Method_PrepareTx = new grpc::Method<global::InjectiveExchangeRpc.PrepareTxRequest, global::InjectiveExchangeRpc.PrepareTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareTx",
        __Marshaller_injective_exchange_rpc_PrepareTxRequest,
        __Marshaller_injective_exchange_rpc_PrepareTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.BroadcastTxRequest, global::InjectiveExchangeRpc.BroadcastTxResponse> __Method_BroadcastTx = new grpc::Method<global::InjectiveExchangeRpc.BroadcastTxRequest, global::InjectiveExchangeRpc.BroadcastTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastTx",
        __Marshaller_injective_exchange_rpc_BroadcastTxRequest,
        __Marshaller_injective_exchange_rpc_BroadcastTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.PrepareCosmosTxRequest, global::InjectiveExchangeRpc.PrepareCosmosTxResponse> __Method_PrepareCosmosTx = new grpc::Method<global::InjectiveExchangeRpc.PrepareCosmosTxRequest, global::InjectiveExchangeRpc.PrepareCosmosTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PrepareCosmosTx",
        __Marshaller_injective_exchange_rpc_PrepareCosmosTxRequest,
        __Marshaller_injective_exchange_rpc_PrepareCosmosTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.BroadcastCosmosTxRequest, global::InjectiveExchangeRpc.BroadcastCosmosTxResponse> __Method_BroadcastCosmosTx = new grpc::Method<global::InjectiveExchangeRpc.BroadcastCosmosTxRequest, global::InjectiveExchangeRpc.BroadcastCosmosTxResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BroadcastCosmosTx",
        __Marshaller_injective_exchange_rpc_BroadcastCosmosTxRequest,
        __Marshaller_injective_exchange_rpc_BroadcastCosmosTxResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveExchangeRpc.GetFeePayerRequest, global::InjectiveExchangeRpc.GetFeePayerResponse> __Method_GetFeePayer = new grpc::Method<global::InjectiveExchangeRpc.GetFeePayerRequest, global::InjectiveExchangeRpc.GetFeePayerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFeePayer",
        __Marshaller_injective_exchange_rpc_GetFeePayerRequest,
        __Marshaller_injective_exchange_rpc_GetFeePayerResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveExchangeRpc.InjectiveExchangeRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for InjectiveExchangeRPC</summary>
    public partial class InjectiveExchangeRPCClient : grpc::ClientBase<InjectiveExchangeRPCClient>
    {
      /// <summary>Creates a new client for InjectiveExchangeRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveExchangeRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveExchangeRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveExchangeRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveExchangeRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveExchangeRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetTx gets transaction details by hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.GetTxResponse GetTx(global::InjectiveExchangeRpc.GetTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTx gets transaction details by hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.GetTxResponse GetTx(global::InjectiveExchangeRpc.GetTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTx, null, options, request);
      }
      /// <summary>
      /// GetTx gets transaction details by hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.GetTxResponse> GetTxAsync(global::InjectiveExchangeRpc.GetTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTx gets transaction details by hash.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.GetTxResponse> GetTxAsync(global::InjectiveExchangeRpc.GetTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTx, null, options, request);
      }
      /// <summary>
      /// PrepareTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.PrepareTxResponse PrepareTx(global::InjectiveExchangeRpc.PrepareTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrepareTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.PrepareTxResponse PrepareTx(global::InjectiveExchangeRpc.PrepareTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareTx, null, options, request);
      }
      /// <summary>
      /// PrepareTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.PrepareTxResponse> PrepareTxAsync(global::InjectiveExchangeRpc.PrepareTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrepareTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.PrepareTxResponse> PrepareTxAsync(global::InjectiveExchangeRpc.PrepareTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareTx, null, options, request);
      }
      /// <summary>
      /// BroadcastTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.BroadcastTxResponse BroadcastTx(global::InjectiveExchangeRpc.BroadcastTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BroadcastTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.BroadcastTxResponse BroadcastTx(global::InjectiveExchangeRpc.BroadcastTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastTx, null, options, request);
      }
      /// <summary>
      /// BroadcastTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.BroadcastTxResponse> BroadcastTxAsync(global::InjectiveExchangeRpc.BroadcastTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BroadcastTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.BroadcastTxResponse> BroadcastTxAsync(global::InjectiveExchangeRpc.BroadcastTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastTx, null, options, request);
      }
      /// <summary>
      /// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.PrepareCosmosTxResponse PrepareCosmosTx(global::InjectiveExchangeRpc.PrepareCosmosTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareCosmosTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.PrepareCosmosTxResponse PrepareCosmosTx(global::InjectiveExchangeRpc.PrepareCosmosTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PrepareCosmosTx, null, options, request);
      }
      /// <summary>
      /// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.PrepareCosmosTxResponse> PrepareCosmosTxAsync(global::InjectiveExchangeRpc.PrepareCosmosTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PrepareCosmosTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PrepareCosmosTx generates a Web3-signable body for a Cosmos transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.PrepareCosmosTxResponse> PrepareCosmosTxAsync(global::InjectiveExchangeRpc.PrepareCosmosTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PrepareCosmosTx, null, options, request);
      }
      /// <summary>
      /// BroadcastCosmosTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.BroadcastCosmosTxResponse BroadcastCosmosTx(global::InjectiveExchangeRpc.BroadcastCosmosTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastCosmosTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BroadcastCosmosTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.BroadcastCosmosTxResponse BroadcastCosmosTx(global::InjectiveExchangeRpc.BroadcastCosmosTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BroadcastCosmosTx, null, options, request);
      }
      /// <summary>
      /// BroadcastCosmosTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.BroadcastCosmosTxResponse> BroadcastCosmosTxAsync(global::InjectiveExchangeRpc.BroadcastCosmosTxRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BroadcastCosmosTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BroadcastCosmosTx broadcasts a signed Web3 transaction
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.BroadcastCosmosTxResponse> BroadcastCosmosTxAsync(global::InjectiveExchangeRpc.BroadcastCosmosTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BroadcastCosmosTx, null, options, request);
      }
      /// <summary>
      /// Return fee payer information's
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.GetFeePayerResponse GetFeePayer(global::InjectiveExchangeRpc.GetFeePayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeePayer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return fee payer information's
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveExchangeRpc.GetFeePayerResponse GetFeePayer(global::InjectiveExchangeRpc.GetFeePayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFeePayer, null, options, request);
      }
      /// <summary>
      /// Return fee payer information's
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.GetFeePayerResponse> GetFeePayerAsync(global::InjectiveExchangeRpc.GetFeePayerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFeePayerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Return fee payer information's
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveExchangeRpc.GetFeePayerResponse> GetFeePayerAsync(global::InjectiveExchangeRpc.GetFeePayerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFeePayer, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveExchangeRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveExchangeRPCClient(configuration);
      }
    }

  }
}
#endregion

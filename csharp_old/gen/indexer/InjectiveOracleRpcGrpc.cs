// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: injective_oracle_rpc.proto
// </auto-generated>
// Original file comments:
// Code generated with goa v3.5.2, DO NOT EDIT.
//
// InjectiveOracleRPC protocol buffer definition
//
// Command:
// $$ goa gen github.com/InjectiveLabs/injective-indexer/api/design -o ../
//
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace InjectiveOracleRpc {
  /// <summary>
  /// InjectiveOracleRPC defines gRPC API of Exchange Oracle provider.
  /// </summary>
  public static partial class InjectiveOracleRPC
  {
    static readonly string __ServiceName = "injective_oracle_rpc.InjectiveOracleRPC";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.OracleListRequest> __Marshaller_injective_oracle_rpc_OracleListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.OracleListRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.OracleListResponse> __Marshaller_injective_oracle_rpc_OracleListResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.OracleListResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.PriceRequest> __Marshaller_injective_oracle_rpc_PriceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.PriceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.PriceResponse> __Marshaller_injective_oracle_rpc_PriceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.PriceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.StreamPricesRequest> __Marshaller_injective_oracle_rpc_StreamPricesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.StreamPricesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.StreamPricesResponse> __Marshaller_injective_oracle_rpc_StreamPricesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.StreamPricesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.StreamPricesByMarketsRequest> __Marshaller_injective_oracle_rpc_StreamPricesByMarketsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.StreamPricesByMarketsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::InjectiveOracleRpc.StreamPricesByMarketsResponse> __Marshaller_injective_oracle_rpc_StreamPricesByMarketsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::InjectiveOracleRpc.StreamPricesByMarketsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveOracleRpc.OracleListRequest, global::InjectiveOracleRpc.OracleListResponse> __Method_OracleList = new grpc::Method<global::InjectiveOracleRpc.OracleListRequest, global::InjectiveOracleRpc.OracleListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OracleList",
        __Marshaller_injective_oracle_rpc_OracleListRequest,
        __Marshaller_injective_oracle_rpc_OracleListResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveOracleRpc.PriceRequest, global::InjectiveOracleRpc.PriceResponse> __Method_Price = new grpc::Method<global::InjectiveOracleRpc.PriceRequest, global::InjectiveOracleRpc.PriceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Price",
        __Marshaller_injective_oracle_rpc_PriceRequest,
        __Marshaller_injective_oracle_rpc_PriceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveOracleRpc.StreamPricesRequest, global::InjectiveOracleRpc.StreamPricesResponse> __Method_StreamPrices = new grpc::Method<global::InjectiveOracleRpc.StreamPricesRequest, global::InjectiveOracleRpc.StreamPricesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamPrices",
        __Marshaller_injective_oracle_rpc_StreamPricesRequest,
        __Marshaller_injective_oracle_rpc_StreamPricesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::InjectiveOracleRpc.StreamPricesByMarketsRequest, global::InjectiveOracleRpc.StreamPricesByMarketsResponse> __Method_StreamPricesByMarkets = new grpc::Method<global::InjectiveOracleRpc.StreamPricesByMarketsRequest, global::InjectiveOracleRpc.StreamPricesByMarketsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "StreamPricesByMarkets",
        __Marshaller_injective_oracle_rpc_StreamPricesByMarketsRequest,
        __Marshaller_injective_oracle_rpc_StreamPricesByMarketsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::InjectiveOracleRpc.InjectiveOracleRpcReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for InjectiveOracleRPC</summary>
    public partial class InjectiveOracleRPCClient : grpc::ClientBase<InjectiveOracleRPCClient>
    {
      /// <summary>Creates a new client for InjectiveOracleRPC</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveOracleRPCClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for InjectiveOracleRPC that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public InjectiveOracleRPCClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveOracleRPCClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected InjectiveOracleRPCClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// List all oracles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveOracleRpc.OracleListResponse OracleList(global::InjectiveOracleRpc.OracleListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all oracles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveOracleRpc.OracleListResponse OracleList(global::InjectiveOracleRpc.OracleListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OracleList, null, options, request);
      }
      /// <summary>
      /// List all oracles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveOracleRpc.OracleListResponse> OracleListAsync(global::InjectiveOracleRpc.OracleListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OracleListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all oracles
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveOracleRpc.OracleListResponse> OracleListAsync(global::InjectiveOracleRpc.OracleListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OracleList, null, options, request);
      }
      /// <summary>
      /// Gets the price of the oracle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveOracleRpc.PriceResponse Price(global::InjectiveOracleRpc.PriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Price(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the price of the oracle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::InjectiveOracleRpc.PriceResponse Price(global::InjectiveOracleRpc.PriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Price, null, options, request);
      }
      /// <summary>
      /// Gets the price of the oracle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveOracleRpc.PriceResponse> PriceAsync(global::InjectiveOracleRpc.PriceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PriceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Gets the price of the oracle
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::InjectiveOracleRpc.PriceResponse> PriceAsync(global::InjectiveOracleRpc.PriceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Price, null, options, request);
      }
      /// <summary>
      /// StreamPrices streams new price changes for a specified oracle. If no oracles
      /// are provided, all price changes are streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveOracleRpc.StreamPricesResponse> StreamPrices(global::InjectiveOracleRpc.StreamPricesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamPrices(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamPrices streams new price changes for a specified oracle. If no oracles
      /// are provided, all price changes are streamed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveOracleRpc.StreamPricesResponse> StreamPrices(global::InjectiveOracleRpc.StreamPricesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamPrices, null, options, request);
      }
      /// <summary>
      /// StreamPrices streams new price changes markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveOracleRpc.StreamPricesByMarketsResponse> StreamPricesByMarkets(global::InjectiveOracleRpc.StreamPricesByMarketsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamPricesByMarkets(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StreamPrices streams new price changes markets
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::InjectiveOracleRpc.StreamPricesByMarketsResponse> StreamPricesByMarkets(global::InjectiveOracleRpc.StreamPricesByMarketsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_StreamPricesByMarkets, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override InjectiveOracleRPCClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InjectiveOracleRPCClient(configuration);
      }
    }

  }
}
#endregion

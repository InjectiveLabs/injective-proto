// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/fee.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/core/channel/v1/channel.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
class Fee;
struct FeeDefaultTypeInternal;
extern FeeDefaultTypeInternal _Fee_default_instance_;
class IdentifiedPacketFees;
struct IdentifiedPacketFeesDefaultTypeInternal;
extern IdentifiedPacketFeesDefaultTypeInternal _IdentifiedPacketFees_default_instance_;
class PacketFee;
struct PacketFeeDefaultTypeInternal;
extern PacketFeeDefaultTypeInternal _PacketFee_default_instance_;
class PacketFees;
struct PacketFeesDefaultTypeInternal;
extern PacketFeesDefaultTypeInternal _PacketFees_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::fee::v1::Fee* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::Fee>(Arena*);
template <>
::ibc::applications::fee::v1::IdentifiedPacketFees* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::IdentifiedPacketFees>(Arena*);
template <>
::ibc::applications::fee::v1::PacketFee* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::PacketFee>(Arena*);
template <>
::ibc::applications::fee::v1::PacketFees* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::PacketFees>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Fee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.Fee) */ {
 public:
  inline Fee() : Fee(nullptr) {}
  ~Fee() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Fee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fee(const Fee& from);
  Fee(Fee&& from) noexcept
    : Fee() {
    *this = ::std::move(from);
  }

  inline Fee& operator=(const Fee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fee& operator=(Fee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fee* internal_default_instance() {
    return reinterpret_cast<const Fee*>(
               &_Fee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Fee& a, Fee& b) {
    a.Swap(&b);
  }
  inline void Swap(Fee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fee& from) {
    Fee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.Fee";
  }
  protected:
  explicit Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvFeeFieldNumber = 1,
    kAckFeeFieldNumber = 2,
    kTimeoutFeeFieldNumber = 3,
  };
  // repeated .cosmos.base.v1beta1.Coin recv_fee = 1 [json_name = "recvFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int recv_fee_size() const;
  private:
  int _internal_recv_fee_size() const;

  public:
  void clear_recv_fee() ;
  ::cosmos::base::v1beta1::Coin* mutable_recv_fee(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_recv_fee();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_recv_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_recv_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_recv_fee() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_recv_fee();
  public:
  const ::cosmos::base::v1beta1::Coin& recv_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* add_recv_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      recv_fee() const;
  // repeated .cosmos.base.v1beta1.Coin ack_fee = 2 [json_name = "ackFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int ack_fee_size() const;
  private:
  int _internal_ack_fee_size() const;

  public:
  void clear_ack_fee() ;
  ::cosmos::base::v1beta1::Coin* mutable_ack_fee(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_ack_fee();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_ack_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_ack_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_ack_fee() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_ack_fee();
  public:
  const ::cosmos::base::v1beta1::Coin& ack_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* add_ack_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      ack_fee() const;
  // repeated .cosmos.base.v1beta1.Coin timeout_fee = 3 [json_name = "timeoutFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int timeout_fee_size() const;
  private:
  int _internal_timeout_fee_size() const;

  public:
  void clear_timeout_fee() ;
  ::cosmos::base::v1beta1::Coin* mutable_timeout_fee(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_timeout_fee();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_timeout_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_timeout_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_timeout_fee() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_timeout_fee();
  public:
  const ::cosmos::base::v1beta1::Coin& timeout_fee(int index) const;
  ::cosmos::base::v1beta1::Coin* add_timeout_fee();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      timeout_fee() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.Fee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > recv_fee_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > ack_fee_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > timeout_fee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
};// -------------------------------------------------------------------

class PacketFee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.PacketFee) */ {
 public:
  inline PacketFee() : PacketFee(nullptr) {}
  ~PacketFee() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketFee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketFee(const PacketFee& from);
  PacketFee(PacketFee&& from) noexcept
    : PacketFee() {
    *this = ::std::move(from);
  }

  inline PacketFee& operator=(const PacketFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketFee& operator=(PacketFee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketFee& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketFee* internal_default_instance() {
    return reinterpret_cast<const PacketFee*>(
               &_PacketFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PacketFee& a, PacketFee& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketFee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketFee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketFee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketFee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketFee& from) {
    PacketFee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketFee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.PacketFee";
  }
  protected:
  explicit PacketFee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayersFieldNumber = 3,
    kRefundAddressFieldNumber = 2,
    kFeeFieldNumber = 1,
  };
  // repeated string relayers = 3 [json_name = "relayers"];
  int relayers_size() const;
  private:
  int _internal_relayers_size() const;

  public:
  void clear_relayers() ;
  const std::string& relayers(int index) const;
  std::string* mutable_relayers(int index);
  void set_relayers(int index, const std::string& value);
  void set_relayers(int index, std::string&& value);
  void set_relayers(int index, const char* value);
  void set_relayers(int index, const char* value, std::size_t size);
  void set_relayers(int index, absl::string_view value);
  std::string* add_relayers();
  void add_relayers(const std::string& value);
  void add_relayers(std::string&& value);
  void add_relayers(const char* value);
  void add_relayers(const char* value, std::size_t size);
  void add_relayers(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_relayers();

  private:
  const std::string& _internal_relayers(int index) const;
  std::string* _internal_add_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_relayers();

  public:
  // string refund_address = 2 [json_name = "refundAddress"];
  void clear_refund_address() ;
  const std::string& refund_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_refund_address(Arg_&& arg, Args_... args);
  std::string* mutable_refund_address();
  PROTOBUF_NODISCARD std::string* release_refund_address();
  void set_allocated_refund_address(std::string* ptr);

  private:
  const std::string& _internal_refund_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refund_address(
      const std::string& value);
  std::string* _internal_mutable_refund_address();

  public:
  // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
  bool has_fee() const;
  void clear_fee() ;
  const ::ibc::applications::fee::v1::Fee& fee() const;
  PROTOBUF_NODISCARD ::ibc::applications::fee::v1::Fee* release_fee();
  ::ibc::applications::fee::v1::Fee* mutable_fee();
  void set_allocated_fee(::ibc::applications::fee::v1::Fee* fee);
  private:
  const ::ibc::applications::fee::v1::Fee& _internal_fee() const;
  ::ibc::applications::fee::v1::Fee* _internal_mutable_fee();
  public:
  void unsafe_arena_set_allocated_fee(
      ::ibc::applications::fee::v1::Fee* fee);
  ::ibc::applications::fee::v1::Fee* unsafe_arena_release_fee();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.PacketFee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> relayers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refund_address_;
    ::ibc::applications::fee::v1::Fee* fee_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
};// -------------------------------------------------------------------

class PacketFees final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.PacketFees) */ {
 public:
  inline PacketFees() : PacketFees(nullptr) {}
  ~PacketFees() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketFees(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketFees(const PacketFees& from);
  PacketFees(PacketFees&& from) noexcept
    : PacketFees() {
    *this = ::std::move(from);
  }

  inline PacketFees& operator=(const PacketFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketFees& operator=(PacketFees&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketFees& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketFees* internal_default_instance() {
    return reinterpret_cast<const PacketFees*>(
               &_PacketFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketFees& a, PacketFees& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketFees* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketFees* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketFees>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketFees& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketFees& from) {
    PacketFees::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketFees* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.PacketFees";
  }
  protected:
  explicit PacketFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFeesFieldNumber = 1,
  };
  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 1 [json_name = "packetFees", (.gogoproto.nullable) = false];
  int packet_fees_size() const;
  private:
  int _internal_packet_fees_size() const;

  public:
  void clear_packet_fees() ;
  ::ibc::applications::fee::v1::PacketFee* mutable_packet_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >*
      mutable_packet_fees();
  private:
  const ::ibc::applications::fee::v1::PacketFee& _internal_packet_fees(int index) const;
  ::ibc::applications::fee::v1::PacketFee* _internal_add_packet_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>& _internal_packet_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>* _internal_mutable_packet_fees();
  public:
  const ::ibc::applications::fee::v1::PacketFee& packet_fees(int index) const;
  ::ibc::applications::fee::v1::PacketFee* add_packet_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >&
      packet_fees() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.PacketFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee > packet_fees_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
};// -------------------------------------------------------------------

class IdentifiedPacketFees final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.IdentifiedPacketFees) */ {
 public:
  inline IdentifiedPacketFees() : IdentifiedPacketFees(nullptr) {}
  ~IdentifiedPacketFees() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifiedPacketFees(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifiedPacketFees(const IdentifiedPacketFees& from);
  IdentifiedPacketFees(IdentifiedPacketFees&& from) noexcept
    : IdentifiedPacketFees() {
    *this = ::std::move(from);
  }

  inline IdentifiedPacketFees& operator=(const IdentifiedPacketFees& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifiedPacketFees& operator=(IdentifiedPacketFees&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifiedPacketFees& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifiedPacketFees* internal_default_instance() {
    return reinterpret_cast<const IdentifiedPacketFees*>(
               &_IdentifiedPacketFees_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IdentifiedPacketFees& a, IdentifiedPacketFees& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifiedPacketFees* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifiedPacketFees* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifiedPacketFees* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdentifiedPacketFees>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdentifiedPacketFees& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdentifiedPacketFees& from) {
    IdentifiedPacketFees::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifiedPacketFees* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.IdentifiedPacketFees";
  }
  protected:
  explicit IdentifiedPacketFees(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketFeesFieldNumber = 2,
    kPacketIdFieldNumber = 1,
  };
  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 2 [json_name = "packetFees", (.gogoproto.nullable) = false];
  int packet_fees_size() const;
  private:
  int _internal_packet_fees_size() const;

  public:
  void clear_packet_fees() ;
  ::ibc::applications::fee::v1::PacketFee* mutable_packet_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >*
      mutable_packet_fees();
  private:
  const ::ibc::applications::fee::v1::PacketFee& _internal_packet_fees(int index) const;
  ::ibc::applications::fee::v1::PacketFee* _internal_add_packet_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>& _internal_packet_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>* _internal_mutable_packet_fees();
  public:
  const ::ibc::applications::fee::v1::PacketFee& packet_fees(int index) const;
  ::ibc::applications::fee::v1::PacketFee* add_packet_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >&
      packet_fees() const;
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.IdentifiedPacketFees)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee > packet_fees_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Fee

// repeated .cosmos.base.v1beta1.Coin recv_fee = 1 [json_name = "recvFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Fee::_internal_recv_fee_size() const {
  return _impl_.recv_fee_.size();
}
inline int Fee::recv_fee_size() const {
  return _internal_recv_fee_size();
}
inline ::cosmos::base::v1beta1::Coin* Fee::mutable_recv_fee(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.Fee.recv_fee)
  return _internal_mutable_recv_fee()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Fee::mutable_recv_fee() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.Fee.recv_fee)
  return _internal_mutable_recv_fee();
}
inline const ::cosmos::base::v1beta1::Coin& Fee::_internal_recv_fee(int index) const {
  return _internal_recv_fee().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Fee::recv_fee(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.Fee.recv_fee)
  return _internal_recv_fee(index);
}
inline ::cosmos::base::v1beta1::Coin* Fee::_internal_add_recv_fee() {
  return _internal_mutable_recv_fee()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Fee::add_recv_fee() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_recv_fee();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.Fee.recv_fee)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Fee::recv_fee() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.Fee.recv_fee)
  return _internal_recv_fee();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Fee::_internal_recv_fee() const {
  return _impl_.recv_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Fee::_internal_mutable_recv_fee() {
  return &_impl_.recv_fee_;
}

// repeated .cosmos.base.v1beta1.Coin ack_fee = 2 [json_name = "ackFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Fee::_internal_ack_fee_size() const {
  return _impl_.ack_fee_.size();
}
inline int Fee::ack_fee_size() const {
  return _internal_ack_fee_size();
}
inline ::cosmos::base::v1beta1::Coin* Fee::mutable_ack_fee(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.Fee.ack_fee)
  return _internal_mutable_ack_fee()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Fee::mutable_ack_fee() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.Fee.ack_fee)
  return _internal_mutable_ack_fee();
}
inline const ::cosmos::base::v1beta1::Coin& Fee::_internal_ack_fee(int index) const {
  return _internal_ack_fee().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Fee::ack_fee(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.Fee.ack_fee)
  return _internal_ack_fee(index);
}
inline ::cosmos::base::v1beta1::Coin* Fee::_internal_add_ack_fee() {
  return _internal_mutable_ack_fee()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Fee::add_ack_fee() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_ack_fee();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.Fee.ack_fee)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Fee::ack_fee() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.Fee.ack_fee)
  return _internal_ack_fee();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Fee::_internal_ack_fee() const {
  return _impl_.ack_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Fee::_internal_mutable_ack_fee() {
  return &_impl_.ack_fee_;
}

// repeated .cosmos.base.v1beta1.Coin timeout_fee = 3 [json_name = "timeoutFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int Fee::_internal_timeout_fee_size() const {
  return _impl_.timeout_fee_.size();
}
inline int Fee::timeout_fee_size() const {
  return _internal_timeout_fee_size();
}
inline ::cosmos::base::v1beta1::Coin* Fee::mutable_timeout_fee(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.Fee.timeout_fee)
  return _internal_mutable_timeout_fee()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
Fee::mutable_timeout_fee() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.Fee.timeout_fee)
  return _internal_mutable_timeout_fee();
}
inline const ::cosmos::base::v1beta1::Coin& Fee::_internal_timeout_fee(int index) const {
  return _internal_timeout_fee().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& Fee::timeout_fee(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.Fee.timeout_fee)
  return _internal_timeout_fee(index);
}
inline ::cosmos::base::v1beta1::Coin* Fee::_internal_add_timeout_fee() {
  return _internal_mutable_timeout_fee()->Add();
}
inline ::cosmos::base::v1beta1::Coin* Fee::add_timeout_fee() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_timeout_fee();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.Fee.timeout_fee)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
Fee::timeout_fee() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.Fee.timeout_fee)
  return _internal_timeout_fee();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
Fee::_internal_timeout_fee() const {
  return _impl_.timeout_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
Fee::_internal_mutable_timeout_fee() {
  return &_impl_.timeout_fee_;
}

// -------------------------------------------------------------------

// PacketFee

// .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
inline bool PacketFee::has_fee() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fee_ != nullptr);
  return value;
}
inline void PacketFee::clear_fee() {
  if (_impl_.fee_ != nullptr) _impl_.fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::applications::fee::v1::Fee& PacketFee::_internal_fee() const {
  const ::ibc::applications::fee::v1::Fee* p = _impl_.fee_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::fee::v1::Fee&>(
      ::ibc::applications::fee::v1::_Fee_default_instance_);
}
inline const ::ibc::applications::fee::v1::Fee& PacketFee::fee() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.PacketFee.fee)
  return _internal_fee();
}
inline void PacketFee::unsafe_arena_set_allocated_fee(
    ::ibc::applications::fee::v1::Fee* fee) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fee_);
  }
  _impl_.fee_ = fee;
  if (fee) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.PacketFee.fee)
}
inline ::ibc::applications::fee::v1::Fee* PacketFee::release_fee() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::fee::v1::Fee* temp = _impl_.fee_;
  _impl_.fee_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::fee::v1::Fee* PacketFee::unsafe_arena_release_fee() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.PacketFee.fee)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::fee::v1::Fee* temp = _impl_.fee_;
  _impl_.fee_ = nullptr;
  return temp;
}
inline ::ibc::applications::fee::v1::Fee* PacketFee::_internal_mutable_fee() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::fee::v1::Fee>(GetArenaForAllocation());
    _impl_.fee_ = p;
  }
  return _impl_.fee_;
}
inline ::ibc::applications::fee::v1::Fee* PacketFee::mutable_fee() {
  ::ibc::applications::fee::v1::Fee* _msg = _internal_mutable_fee();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.PacketFee.fee)
  return _msg;
}
inline void PacketFee::set_allocated_fee(::ibc::applications::fee::v1::Fee* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fee);
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.PacketFee.fee)
}

// string refund_address = 2 [json_name = "refundAddress"];
inline void PacketFee::clear_refund_address() {
  _impl_.refund_address_.ClearToEmpty();
}
inline const std::string& PacketFee::refund_address() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.PacketFee.refund_address)
  return _internal_refund_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketFee::set_refund_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.refund_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.PacketFee.refund_address)
}
inline std::string* PacketFee::mutable_refund_address() {
  std::string* _s = _internal_mutable_refund_address();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.PacketFee.refund_address)
  return _s;
}
inline const std::string& PacketFee::_internal_refund_address() const {
  return _impl_.refund_address_.Get();
}
inline void PacketFee::_internal_set_refund_address(const std::string& value) {
  ;


  _impl_.refund_address_.Set(value, GetArenaForAllocation());
}
inline std::string* PacketFee::_internal_mutable_refund_address() {
  ;
  return _impl_.refund_address_.Mutable( GetArenaForAllocation());
}
inline std::string* PacketFee::release_refund_address() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.PacketFee.refund_address)
  return _impl_.refund_address_.Release();
}
inline void PacketFee::set_allocated_refund_address(std::string* value) {
  _impl_.refund_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.refund_address_.IsDefault()) {
          _impl_.refund_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.PacketFee.refund_address)
}

// repeated string relayers = 3 [json_name = "relayers"];
inline int PacketFee::_internal_relayers_size() const {
  return _impl_.relayers_.size();
}
inline int PacketFee::relayers_size() const {
  return _internal_relayers_size();
}
inline void PacketFee::clear_relayers() {
  _internal_mutable_relayers()->Clear();
}
inline std::string* PacketFee::add_relayers() {
  std::string* _s = _internal_add_relayers();
  // @@protoc_insertion_point(field_add_mutable:ibc.applications.fee.v1.PacketFee.relayers)
  return _s;
}
inline const std::string& PacketFee::relayers(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.PacketFee.relayers)
  return _internal_relayers(index);
}
inline std::string* PacketFee::mutable_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.PacketFee.relayers)
  return _internal_mutable_relayers()->Mutable(index);
}
inline void PacketFee::set_relayers(int index, const std::string& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::set_relayers(int index, std::string&& value) {
  _internal_mutable_relayers()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::set_relayers(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::set_relayers(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_relayers()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::set_relayers(int index, absl::string_view value) {
  _internal_mutable_relayers()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::add_relayers(const std::string& value) {
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::add_relayers(std::string&& value) {
  _internal_mutable_relayers()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::add_relayers(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_relayers()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::add_relayers(const char* value, std::size_t size) {
  _internal_mutable_relayers()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.applications.fee.v1.PacketFee.relayers)
}
inline void PacketFee::add_relayers(absl::string_view value) {
  _internal_mutable_relayers()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.applications.fee.v1.PacketFee.relayers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PacketFee::relayers() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.PacketFee.relayers)
  return _internal_relayers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* PacketFee::mutable_relayers() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.PacketFee.relayers)
  return _internal_mutable_relayers();
}
inline const std::string& PacketFee::_internal_relayers(int index) const {
  return _internal_relayers().Get(index);
}
inline std::string* PacketFee::_internal_add_relayers() {
  return _internal_mutable_relayers()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PacketFee::_internal_relayers() const {
  return _impl_.relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PacketFee::_internal_mutable_relayers() {
  return &_impl_.relayers_;
}

// -------------------------------------------------------------------

// PacketFees

// repeated .ibc.applications.fee.v1.PacketFee packet_fees = 1 [json_name = "packetFees", (.gogoproto.nullable) = false];
inline int PacketFees::_internal_packet_fees_size() const {
  return _impl_.packet_fees_.size();
}
inline int PacketFees::packet_fees_size() const {
  return _internal_packet_fees_size();
}
inline void PacketFees::clear_packet_fees() {
  _internal_mutable_packet_fees()->Clear();
}
inline ::ibc::applications::fee::v1::PacketFee* PacketFees::mutable_packet_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.PacketFees.packet_fees)
  return _internal_mutable_packet_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >*
PacketFees::mutable_packet_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.PacketFees.packet_fees)
  return _internal_mutable_packet_fees();
}
inline const ::ibc::applications::fee::v1::PacketFee& PacketFees::_internal_packet_fees(int index) const {
  return _internal_packet_fees().Get(index);
}
inline const ::ibc::applications::fee::v1::PacketFee& PacketFees::packet_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.PacketFees.packet_fees)
  return _internal_packet_fees(index);
}
inline ::ibc::applications::fee::v1::PacketFee* PacketFees::_internal_add_packet_fees() {
  return _internal_mutable_packet_fees()->Add();
}
inline ::ibc::applications::fee::v1::PacketFee* PacketFees::add_packet_fees() {
  ::ibc::applications::fee::v1::PacketFee* _add = _internal_add_packet_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.PacketFees.packet_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >&
PacketFees::packet_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.PacketFees.packet_fees)
  return _internal_packet_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>&
PacketFees::_internal_packet_fees() const {
  return _impl_.packet_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>*
PacketFees::_internal_mutable_packet_fees() {
  return &_impl_.packet_fees_;
}

// -------------------------------------------------------------------

// IdentifiedPacketFees

// .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool IdentifiedPacketFees::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& IdentifiedPacketFees::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& IdentifiedPacketFees::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.IdentifiedPacketFees.packet_id)
  return _internal_packet_id();
}
inline void IdentifiedPacketFees::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.IdentifiedPacketFees.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* IdentifiedPacketFees::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* IdentifiedPacketFees::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.IdentifiedPacketFees.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* IdentifiedPacketFees::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* IdentifiedPacketFees::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.IdentifiedPacketFees.packet_id)
  return _msg;
}
inline void IdentifiedPacketFees::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.IdentifiedPacketFees.packet_id)
}

// repeated .ibc.applications.fee.v1.PacketFee packet_fees = 2 [json_name = "packetFees", (.gogoproto.nullable) = false];
inline int IdentifiedPacketFees::_internal_packet_fees_size() const {
  return _impl_.packet_fees_.size();
}
inline int IdentifiedPacketFees::packet_fees_size() const {
  return _internal_packet_fees_size();
}
inline void IdentifiedPacketFees::clear_packet_fees() {
  _internal_mutable_packet_fees()->Clear();
}
inline ::ibc::applications::fee::v1::PacketFee* IdentifiedPacketFees::mutable_packet_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.IdentifiedPacketFees.packet_fees)
  return _internal_mutable_packet_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >*
IdentifiedPacketFees::mutable_packet_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.IdentifiedPacketFees.packet_fees)
  return _internal_mutable_packet_fees();
}
inline const ::ibc::applications::fee::v1::PacketFee& IdentifiedPacketFees::_internal_packet_fees(int index) const {
  return _internal_packet_fees().Get(index);
}
inline const ::ibc::applications::fee::v1::PacketFee& IdentifiedPacketFees::packet_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.IdentifiedPacketFees.packet_fees)
  return _internal_packet_fees(index);
}
inline ::ibc::applications::fee::v1::PacketFee* IdentifiedPacketFees::_internal_add_packet_fees() {
  return _internal_mutable_packet_fees()->Add();
}
inline ::ibc::applications::fee::v1::PacketFee* IdentifiedPacketFees::add_packet_fees() {
  ::ibc::applications::fee::v1::PacketFee* _add = _internal_add_packet_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.IdentifiedPacketFees.packet_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::PacketFee >&
IdentifiedPacketFees::packet_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.IdentifiedPacketFees.packet_fees)
  return _internal_packet_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>&
IdentifiedPacketFees::_internal_packet_fees() const {
  return _impl_.packet_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::PacketFee>*
IdentifiedPacketFees::_internal_mutable_packet_fees() {
  return &_impl_.packet_fees_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_2epb_2eh

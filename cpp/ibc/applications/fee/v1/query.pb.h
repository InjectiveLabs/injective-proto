// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/api/annotations.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "ibc/applications/fee/v1/fee.pb.h"
#include "ibc/applications/fee/v1/genesis.pb.h"
#include "ibc/core/channel/v1/channel.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
class QueryCounterpartyPayeeRequest;
struct QueryCounterpartyPayeeRequestDefaultTypeInternal;
extern QueryCounterpartyPayeeRequestDefaultTypeInternal _QueryCounterpartyPayeeRequest_default_instance_;
class QueryCounterpartyPayeeResponse;
struct QueryCounterpartyPayeeResponseDefaultTypeInternal;
extern QueryCounterpartyPayeeResponseDefaultTypeInternal _QueryCounterpartyPayeeResponse_default_instance_;
class QueryFeeEnabledChannelRequest;
struct QueryFeeEnabledChannelRequestDefaultTypeInternal;
extern QueryFeeEnabledChannelRequestDefaultTypeInternal _QueryFeeEnabledChannelRequest_default_instance_;
class QueryFeeEnabledChannelResponse;
struct QueryFeeEnabledChannelResponseDefaultTypeInternal;
extern QueryFeeEnabledChannelResponseDefaultTypeInternal _QueryFeeEnabledChannelResponse_default_instance_;
class QueryFeeEnabledChannelsRequest;
struct QueryFeeEnabledChannelsRequestDefaultTypeInternal;
extern QueryFeeEnabledChannelsRequestDefaultTypeInternal _QueryFeeEnabledChannelsRequest_default_instance_;
class QueryFeeEnabledChannelsResponse;
struct QueryFeeEnabledChannelsResponseDefaultTypeInternal;
extern QueryFeeEnabledChannelsResponseDefaultTypeInternal _QueryFeeEnabledChannelsResponse_default_instance_;
class QueryIncentivizedPacketRequest;
struct QueryIncentivizedPacketRequestDefaultTypeInternal;
extern QueryIncentivizedPacketRequestDefaultTypeInternal _QueryIncentivizedPacketRequest_default_instance_;
class QueryIncentivizedPacketResponse;
struct QueryIncentivizedPacketResponseDefaultTypeInternal;
extern QueryIncentivizedPacketResponseDefaultTypeInternal _QueryIncentivizedPacketResponse_default_instance_;
class QueryIncentivizedPacketsForChannelRequest;
struct QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal;
extern QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal _QueryIncentivizedPacketsForChannelRequest_default_instance_;
class QueryIncentivizedPacketsForChannelResponse;
struct QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal;
extern QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal _QueryIncentivizedPacketsForChannelResponse_default_instance_;
class QueryIncentivizedPacketsRequest;
struct QueryIncentivizedPacketsRequestDefaultTypeInternal;
extern QueryIncentivizedPacketsRequestDefaultTypeInternal _QueryIncentivizedPacketsRequest_default_instance_;
class QueryIncentivizedPacketsResponse;
struct QueryIncentivizedPacketsResponseDefaultTypeInternal;
extern QueryIncentivizedPacketsResponseDefaultTypeInternal _QueryIncentivizedPacketsResponse_default_instance_;
class QueryPayeeRequest;
struct QueryPayeeRequestDefaultTypeInternal;
extern QueryPayeeRequestDefaultTypeInternal _QueryPayeeRequest_default_instance_;
class QueryPayeeResponse;
struct QueryPayeeResponseDefaultTypeInternal;
extern QueryPayeeResponseDefaultTypeInternal _QueryPayeeResponse_default_instance_;
class QueryTotalAckFeesRequest;
struct QueryTotalAckFeesRequestDefaultTypeInternal;
extern QueryTotalAckFeesRequestDefaultTypeInternal _QueryTotalAckFeesRequest_default_instance_;
class QueryTotalAckFeesResponse;
struct QueryTotalAckFeesResponseDefaultTypeInternal;
extern QueryTotalAckFeesResponseDefaultTypeInternal _QueryTotalAckFeesResponse_default_instance_;
class QueryTotalRecvFeesRequest;
struct QueryTotalRecvFeesRequestDefaultTypeInternal;
extern QueryTotalRecvFeesRequestDefaultTypeInternal _QueryTotalRecvFeesRequest_default_instance_;
class QueryTotalRecvFeesResponse;
struct QueryTotalRecvFeesResponseDefaultTypeInternal;
extern QueryTotalRecvFeesResponseDefaultTypeInternal _QueryTotalRecvFeesResponse_default_instance_;
class QueryTotalTimeoutFeesRequest;
struct QueryTotalTimeoutFeesRequestDefaultTypeInternal;
extern QueryTotalTimeoutFeesRequestDefaultTypeInternal _QueryTotalTimeoutFeesRequest_default_instance_;
class QueryTotalTimeoutFeesResponse;
struct QueryTotalTimeoutFeesResponseDefaultTypeInternal;
extern QueryTotalTimeoutFeesResponseDefaultTypeInternal _QueryTotalTimeoutFeesResponse_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryPayeeRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryPayeeRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryPayeeResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryPayeeResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalAckFeesRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalAckFeesRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalAckFeesResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalAckFeesResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalRecvFeesRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest>(Arena*);
template <>
::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryIncentivizedPacketsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest) */ {
 public:
  inline QueryIncentivizedPacketsRequest() : QueryIncentivizedPacketsRequest(nullptr) {}
  ~QueryIncentivizedPacketsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketsRequest(const QueryIncentivizedPacketsRequest& from);
  QueryIncentivizedPacketsRequest(QueryIncentivizedPacketsRequest&& from) noexcept
    : QueryIncentivizedPacketsRequest() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketsRequest& operator=(const QueryIncentivizedPacketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketsRequest& operator=(QueryIncentivizedPacketsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketsRequest*>(
               &_QueryIncentivizedPacketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryIncentivizedPacketsRequest& a, QueryIncentivizedPacketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketsRequest& from) {
    QueryIncentivizedPacketsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketsRequest";
  }
  protected:
  explicit QueryIncentivizedPacketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kQueryHeightFieldNumber = 2,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 query_height = 2 [json_name = "queryHeight"];
  void clear_query_height() ;
  ::uint64_t query_height() const;
  void set_query_height(::uint64_t value);

  private:
  ::uint64_t _internal_query_height() const;
  void _internal_set_query_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t query_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryIncentivizedPacketsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse) */ {
 public:
  inline QueryIncentivizedPacketsResponse() : QueryIncentivizedPacketsResponse(nullptr) {}
  ~QueryIncentivizedPacketsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketsResponse(const QueryIncentivizedPacketsResponse& from);
  QueryIncentivizedPacketsResponse(QueryIncentivizedPacketsResponse&& from) noexcept
    : QueryIncentivizedPacketsResponse() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketsResponse& operator=(const QueryIncentivizedPacketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketsResponse& operator=(QueryIncentivizedPacketsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketsResponse*>(
               &_QueryIncentivizedPacketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryIncentivizedPacketsResponse& a, QueryIncentivizedPacketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketsResponse& from) {
    QueryIncentivizedPacketsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketsResponse";
  }
  protected:
  explicit QueryIncentivizedPacketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncentivizedPacketsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets", (.gogoproto.nullable) = false];
  int incentivized_packets_size() const;
  private:
  int _internal_incentivized_packets_size() const;

  public:
  void clear_incentivized_packets() ;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* mutable_incentivized_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
      mutable_incentivized_packets();
  private:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& _internal_incentivized_packets(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _internal_add_incentivized_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>& _internal_incentivized_packets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>* _internal_mutable_incentivized_packets();
  public:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& incentivized_packets(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* add_incentivized_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
      incentivized_packets() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees > incentivized_packets_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryIncentivizedPacketRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketRequest) */ {
 public:
  inline QueryIncentivizedPacketRequest() : QueryIncentivizedPacketRequest(nullptr) {}
  ~QueryIncentivizedPacketRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketRequest(const QueryIncentivizedPacketRequest& from);
  QueryIncentivizedPacketRequest(QueryIncentivizedPacketRequest&& from) noexcept
    : QueryIncentivizedPacketRequest() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketRequest& operator=(const QueryIncentivizedPacketRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketRequest& operator=(QueryIncentivizedPacketRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketRequest* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketRequest*>(
               &_QueryIncentivizedPacketRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryIncentivizedPacketRequest& a, QueryIncentivizedPacketRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketRequest& from) {
    QueryIncentivizedPacketRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketRequest";
  }
  protected:
  explicit QueryIncentivizedPacketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
    kQueryHeightFieldNumber = 2,
  };
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // uint64 query_height = 2 [json_name = "queryHeight"];
  void clear_query_height() ;
  ::uint64_t query_height() const;
  void set_query_height(::uint64_t value);

  private:
  ::uint64_t _internal_query_height() const;
  void _internal_set_query_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
    ::uint64_t query_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryIncentivizedPacketResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketResponse) */ {
 public:
  inline QueryIncentivizedPacketResponse() : QueryIncentivizedPacketResponse(nullptr) {}
  ~QueryIncentivizedPacketResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketResponse(const QueryIncentivizedPacketResponse& from);
  QueryIncentivizedPacketResponse(QueryIncentivizedPacketResponse&& from) noexcept
    : QueryIncentivizedPacketResponse() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketResponse& operator=(const QueryIncentivizedPacketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketResponse& operator=(QueryIncentivizedPacketResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketResponse* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketResponse*>(
               &_QueryIncentivizedPacketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryIncentivizedPacketResponse& a, QueryIncentivizedPacketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketResponse& from) {
    QueryIncentivizedPacketResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketResponse";
  }
  protected:
  explicit QueryIncentivizedPacketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncentivizedPacketFieldNumber = 1,
  };
  // .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [json_name = "incentivizedPacket", (.gogoproto.nullable) = false];
  bool has_incentivized_packet() const;
  void clear_incentivized_packet() ;
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& incentivized_packet() const;
  PROTOBUF_NODISCARD ::ibc::applications::fee::v1::IdentifiedPacketFees* release_incentivized_packet();
  ::ibc::applications::fee::v1::IdentifiedPacketFees* mutable_incentivized_packet();
  void set_allocated_incentivized_packet(::ibc::applications::fee::v1::IdentifiedPacketFees* incentivized_packet);
  private:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& _internal_incentivized_packet() const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _internal_mutable_incentivized_packet();
  public:
  void unsafe_arena_set_allocated_incentivized_packet(
      ::ibc::applications::fee::v1::IdentifiedPacketFees* incentivized_packet);
  ::ibc::applications::fee::v1::IdentifiedPacketFees* unsafe_arena_release_incentivized_packet();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::applications::fee::v1::IdentifiedPacketFees* incentivized_packet_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryIncentivizedPacketsForChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest) */ {
 public:
  inline QueryIncentivizedPacketsForChannelRequest() : QueryIncentivizedPacketsForChannelRequest(nullptr) {}
  ~QueryIncentivizedPacketsForChannelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketsForChannelRequest(const QueryIncentivizedPacketsForChannelRequest& from);
  QueryIncentivizedPacketsForChannelRequest(QueryIncentivizedPacketsForChannelRequest&& from) noexcept
    : QueryIncentivizedPacketsForChannelRequest() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketsForChannelRequest& operator=(const QueryIncentivizedPacketsForChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketsForChannelRequest& operator=(QueryIncentivizedPacketsForChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketsForChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketsForChannelRequest* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketsForChannelRequest*>(
               &_QueryIncentivizedPacketsForChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryIncentivizedPacketsForChannelRequest& a, QueryIncentivizedPacketsForChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketsForChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketsForChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketsForChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketsForChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketsForChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketsForChannelRequest& from) {
    QueryIncentivizedPacketsForChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketsForChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest";
  }
  protected:
  explicit QueryIncentivizedPacketsForChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kPaginationFieldNumber = 1,
    kQueryHeightFieldNumber = 4,
  };
  // string port_id = 2 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 3 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 query_height = 4 [json_name = "queryHeight"];
  void clear_query_height() ;
  ::uint64_t query_height() const;
  void set_query_height(::uint64_t value);

  private:
  ::uint64_t _internal_query_height() const;
  void _internal_set_query_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t query_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryIncentivizedPacketsForChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse) */ {
 public:
  inline QueryIncentivizedPacketsForChannelResponse() : QueryIncentivizedPacketsForChannelResponse(nullptr) {}
  ~QueryIncentivizedPacketsForChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryIncentivizedPacketsForChannelResponse(const QueryIncentivizedPacketsForChannelResponse& from);
  QueryIncentivizedPacketsForChannelResponse(QueryIncentivizedPacketsForChannelResponse&& from) noexcept
    : QueryIncentivizedPacketsForChannelResponse() {
    *this = ::std::move(from);
  }

  inline QueryIncentivizedPacketsForChannelResponse& operator=(const QueryIncentivizedPacketsForChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryIncentivizedPacketsForChannelResponse& operator=(QueryIncentivizedPacketsForChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryIncentivizedPacketsForChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryIncentivizedPacketsForChannelResponse* internal_default_instance() {
    return reinterpret_cast<const QueryIncentivizedPacketsForChannelResponse*>(
               &_QueryIncentivizedPacketsForChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryIncentivizedPacketsForChannelResponse& a, QueryIncentivizedPacketsForChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryIncentivizedPacketsForChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryIncentivizedPacketsForChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryIncentivizedPacketsForChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryIncentivizedPacketsForChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryIncentivizedPacketsForChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryIncentivizedPacketsForChannelResponse& from) {
    QueryIncentivizedPacketsForChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryIncentivizedPacketsForChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse";
  }
  protected:
  explicit QueryIncentivizedPacketsForChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncentivizedPacketsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets"];
  int incentivized_packets_size() const;
  private:
  int _internal_incentivized_packets_size() const;

  public:
  void clear_incentivized_packets() ;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* mutable_incentivized_packets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
      mutable_incentivized_packets();
  private:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& _internal_incentivized_packets(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _internal_add_incentivized_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>& _internal_incentivized_packets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>* _internal_mutable_incentivized_packets();
  public:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& incentivized_packets(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* add_incentivized_packets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
      incentivized_packets() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees > incentivized_packets_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalRecvFeesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalRecvFeesRequest) */ {
 public:
  inline QueryTotalRecvFeesRequest() : QueryTotalRecvFeesRequest(nullptr) {}
  ~QueryTotalRecvFeesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalRecvFeesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalRecvFeesRequest(const QueryTotalRecvFeesRequest& from);
  QueryTotalRecvFeesRequest(QueryTotalRecvFeesRequest&& from) noexcept
    : QueryTotalRecvFeesRequest() {
    *this = ::std::move(from);
  }

  inline QueryTotalRecvFeesRequest& operator=(const QueryTotalRecvFeesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalRecvFeesRequest& operator=(QueryTotalRecvFeesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalRecvFeesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalRecvFeesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTotalRecvFeesRequest*>(
               &_QueryTotalRecvFeesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryTotalRecvFeesRequest& a, QueryTotalRecvFeesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalRecvFeesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalRecvFeesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalRecvFeesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalRecvFeesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalRecvFeesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalRecvFeesRequest& from) {
    QueryTotalRecvFeesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalRecvFeesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalRecvFeesRequest";
  }
  protected:
  explicit QueryTotalRecvFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
  };
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalRecvFeesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalRecvFeesResponse) */ {
 public:
  inline QueryTotalRecvFeesResponse() : QueryTotalRecvFeesResponse(nullptr) {}
  ~QueryTotalRecvFeesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalRecvFeesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalRecvFeesResponse(const QueryTotalRecvFeesResponse& from);
  QueryTotalRecvFeesResponse(QueryTotalRecvFeesResponse&& from) noexcept
    : QueryTotalRecvFeesResponse() {
    *this = ::std::move(from);
  }

  inline QueryTotalRecvFeesResponse& operator=(const QueryTotalRecvFeesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalRecvFeesResponse& operator=(QueryTotalRecvFeesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalRecvFeesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalRecvFeesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTotalRecvFeesResponse*>(
               &_QueryTotalRecvFeesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryTotalRecvFeesResponse& a, QueryTotalRecvFeesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalRecvFeesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalRecvFeesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalRecvFeesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalRecvFeesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalRecvFeesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalRecvFeesResponse& from) {
    QueryTotalRecvFeesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalRecvFeesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalRecvFeesResponse";
  }
  protected:
  explicit QueryTotalRecvFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvFeesFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin recv_fees = 1 [json_name = "recvFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int recv_fees_size() const;
  private:
  int _internal_recv_fees_size() const;

  public:
  void clear_recv_fees() ;
  ::cosmos::base::v1beta1::Coin* mutable_recv_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_recv_fees();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_recv_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_recv_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_recv_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_recv_fees();
  public:
  const ::cosmos::base::v1beta1::Coin& recv_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* add_recv_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      recv_fees() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > recv_fees_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalAckFeesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalAckFeesRequest) */ {
 public:
  inline QueryTotalAckFeesRequest() : QueryTotalAckFeesRequest(nullptr) {}
  ~QueryTotalAckFeesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalAckFeesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalAckFeesRequest(const QueryTotalAckFeesRequest& from);
  QueryTotalAckFeesRequest(QueryTotalAckFeesRequest&& from) noexcept
    : QueryTotalAckFeesRequest() {
    *this = ::std::move(from);
  }

  inline QueryTotalAckFeesRequest& operator=(const QueryTotalAckFeesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalAckFeesRequest& operator=(QueryTotalAckFeesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalAckFeesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalAckFeesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTotalAckFeesRequest*>(
               &_QueryTotalAckFeesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryTotalAckFeesRequest& a, QueryTotalAckFeesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalAckFeesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalAckFeesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalAckFeesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalAckFeesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalAckFeesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalAckFeesRequest& from) {
    QueryTotalAckFeesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalAckFeesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalAckFeesRequest";
  }
  protected:
  explicit QueryTotalAckFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
  };
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalAckFeesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalAckFeesResponse) */ {
 public:
  inline QueryTotalAckFeesResponse() : QueryTotalAckFeesResponse(nullptr) {}
  ~QueryTotalAckFeesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalAckFeesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalAckFeesResponse(const QueryTotalAckFeesResponse& from);
  QueryTotalAckFeesResponse(QueryTotalAckFeesResponse&& from) noexcept
    : QueryTotalAckFeesResponse() {
    *this = ::std::move(from);
  }

  inline QueryTotalAckFeesResponse& operator=(const QueryTotalAckFeesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalAckFeesResponse& operator=(QueryTotalAckFeesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalAckFeesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalAckFeesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTotalAckFeesResponse*>(
               &_QueryTotalAckFeesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryTotalAckFeesResponse& a, QueryTotalAckFeesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalAckFeesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalAckFeesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalAckFeesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalAckFeesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalAckFeesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalAckFeesResponse& from) {
    QueryTotalAckFeesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalAckFeesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalAckFeesResponse";
  }
  protected:
  explicit QueryTotalAckFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckFeesFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin ack_fees = 1 [json_name = "ackFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int ack_fees_size() const;
  private:
  int _internal_ack_fees_size() const;

  public:
  void clear_ack_fees() ;
  ::cosmos::base::v1beta1::Coin* mutable_ack_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_ack_fees();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_ack_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_ack_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_ack_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_ack_fees();
  public:
  const ::cosmos::base::v1beta1::Coin& ack_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* add_ack_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      ack_fees() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > ack_fees_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalTimeoutFeesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest) */ {
 public:
  inline QueryTotalTimeoutFeesRequest() : QueryTotalTimeoutFeesRequest(nullptr) {}
  ~QueryTotalTimeoutFeesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalTimeoutFeesRequest(const QueryTotalTimeoutFeesRequest& from);
  QueryTotalTimeoutFeesRequest(QueryTotalTimeoutFeesRequest&& from) noexcept
    : QueryTotalTimeoutFeesRequest() {
    *this = ::std::move(from);
  }

  inline QueryTotalTimeoutFeesRequest& operator=(const QueryTotalTimeoutFeesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalTimeoutFeesRequest& operator=(QueryTotalTimeoutFeesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalTimeoutFeesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalTimeoutFeesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTotalTimeoutFeesRequest*>(
               &_QueryTotalTimeoutFeesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryTotalTimeoutFeesRequest& a, QueryTotalTimeoutFeesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalTimeoutFeesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalTimeoutFeesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalTimeoutFeesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalTimeoutFeesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalTimeoutFeesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalTimeoutFeesRequest& from) {
    QueryTotalTimeoutFeesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalTimeoutFeesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest";
  }
  protected:
  explicit QueryTotalTimeoutFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketIdFieldNumber = 1,
  };
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalTimeoutFeesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse) */ {
 public:
  inline QueryTotalTimeoutFeesResponse() : QueryTotalTimeoutFeesResponse(nullptr) {}
  ~QueryTotalTimeoutFeesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalTimeoutFeesResponse(const QueryTotalTimeoutFeesResponse& from);
  QueryTotalTimeoutFeesResponse(QueryTotalTimeoutFeesResponse&& from) noexcept
    : QueryTotalTimeoutFeesResponse() {
    *this = ::std::move(from);
  }

  inline QueryTotalTimeoutFeesResponse& operator=(const QueryTotalTimeoutFeesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalTimeoutFeesResponse& operator=(QueryTotalTimeoutFeesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalTimeoutFeesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalTimeoutFeesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTotalTimeoutFeesResponse*>(
               &_QueryTotalTimeoutFeesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryTotalTimeoutFeesResponse& a, QueryTotalTimeoutFeesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalTimeoutFeesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalTimeoutFeesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalTimeoutFeesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalTimeoutFeesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalTimeoutFeesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalTimeoutFeesResponse& from) {
    QueryTotalTimeoutFeesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalTimeoutFeesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse";
  }
  protected:
  explicit QueryTotalTimeoutFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutFeesFieldNumber = 1,
  };
  // repeated .cosmos.base.v1beta1.Coin timeout_fees = 1 [json_name = "timeoutFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  int timeout_fees_size() const;
  private:
  int _internal_timeout_fees_size() const;

  public:
  void clear_timeout_fees() ;
  ::cosmos::base::v1beta1::Coin* mutable_timeout_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
      mutable_timeout_fees();
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_timeout_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* _internal_add_timeout_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>& _internal_timeout_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>* _internal_mutable_timeout_fees();
  public:
  const ::cosmos::base::v1beta1::Coin& timeout_fees(int index) const;
  ::cosmos::base::v1beta1::Coin* add_timeout_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
      timeout_fees() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin > timeout_fees_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPayeeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryPayeeRequest) */ {
 public:
  inline QueryPayeeRequest() : QueryPayeeRequest(nullptr) {}
  ~QueryPayeeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPayeeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPayeeRequest(const QueryPayeeRequest& from);
  QueryPayeeRequest(QueryPayeeRequest&& from) noexcept
    : QueryPayeeRequest() {
    *this = ::std::move(from);
  }

  inline QueryPayeeRequest& operator=(const QueryPayeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPayeeRequest& operator=(QueryPayeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPayeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPayeeRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPayeeRequest*>(
               &_QueryPayeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryPayeeRequest& a, QueryPayeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPayeeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPayeeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPayeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPayeeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPayeeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPayeeRequest& from) {
    QueryPayeeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPayeeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryPayeeRequest";
  }
  protected:
  explicit QueryPayeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kRelayerFieldNumber = 2,
  };
  // string channel_id = 1 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string relayer = 2 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryPayeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPayeeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryPayeeResponse) */ {
 public:
  inline QueryPayeeResponse() : QueryPayeeResponse(nullptr) {}
  ~QueryPayeeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPayeeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPayeeResponse(const QueryPayeeResponse& from);
  QueryPayeeResponse(QueryPayeeResponse&& from) noexcept
    : QueryPayeeResponse() {
    *this = ::std::move(from);
  }

  inline QueryPayeeResponse& operator=(const QueryPayeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPayeeResponse& operator=(QueryPayeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPayeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPayeeResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPayeeResponse*>(
               &_QueryPayeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryPayeeResponse& a, QueryPayeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPayeeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPayeeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPayeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPayeeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPayeeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPayeeResponse& from) {
    QueryPayeeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPayeeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryPayeeResponse";
  }
  protected:
  explicit QueryPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayeeAddressFieldNumber = 1,
  };
  // string payee_address = 1 [json_name = "payeeAddress"];
  void clear_payee_address() ;
  const std::string& payee_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payee_address(Arg_&& arg, Args_... args);
  std::string* mutable_payee_address();
  PROTOBUF_NODISCARD std::string* release_payee_address();
  void set_allocated_payee_address(std::string* ptr);

  private:
  const std::string& _internal_payee_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payee_address(
      const std::string& value);
  std::string* _internal_mutable_payee_address();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryPayeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCounterpartyPayeeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest) */ {
 public:
  inline QueryCounterpartyPayeeRequest() : QueryCounterpartyPayeeRequest(nullptr) {}
  ~QueryCounterpartyPayeeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCounterpartyPayeeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCounterpartyPayeeRequest(const QueryCounterpartyPayeeRequest& from);
  QueryCounterpartyPayeeRequest(QueryCounterpartyPayeeRequest&& from) noexcept
    : QueryCounterpartyPayeeRequest() {
    *this = ::std::move(from);
  }

  inline QueryCounterpartyPayeeRequest& operator=(const QueryCounterpartyPayeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCounterpartyPayeeRequest& operator=(QueryCounterpartyPayeeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCounterpartyPayeeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCounterpartyPayeeRequest* internal_default_instance() {
    return reinterpret_cast<const QueryCounterpartyPayeeRequest*>(
               &_QueryCounterpartyPayeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryCounterpartyPayeeRequest& a, QueryCounterpartyPayeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCounterpartyPayeeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCounterpartyPayeeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCounterpartyPayeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCounterpartyPayeeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCounterpartyPayeeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCounterpartyPayeeRequest& from) {
    QueryCounterpartyPayeeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCounterpartyPayeeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest";
  }
  protected:
  explicit QueryCounterpartyPayeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kRelayerFieldNumber = 2,
  };
  // string channel_id = 1 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string relayer = 2 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryCounterpartyPayeeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse) */ {
 public:
  inline QueryCounterpartyPayeeResponse() : QueryCounterpartyPayeeResponse(nullptr) {}
  ~QueryCounterpartyPayeeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryCounterpartyPayeeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryCounterpartyPayeeResponse(const QueryCounterpartyPayeeResponse& from);
  QueryCounterpartyPayeeResponse(QueryCounterpartyPayeeResponse&& from) noexcept
    : QueryCounterpartyPayeeResponse() {
    *this = ::std::move(from);
  }

  inline QueryCounterpartyPayeeResponse& operator=(const QueryCounterpartyPayeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryCounterpartyPayeeResponse& operator=(QueryCounterpartyPayeeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryCounterpartyPayeeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryCounterpartyPayeeResponse* internal_default_instance() {
    return reinterpret_cast<const QueryCounterpartyPayeeResponse*>(
               &_QueryCounterpartyPayeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryCounterpartyPayeeResponse& a, QueryCounterpartyPayeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryCounterpartyPayeeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryCounterpartyPayeeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryCounterpartyPayeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryCounterpartyPayeeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryCounterpartyPayeeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryCounterpartyPayeeResponse& from) {
    QueryCounterpartyPayeeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryCounterpartyPayeeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse";
  }
  protected:
  explicit QueryCounterpartyPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterpartyPayeeFieldNumber = 1,
  };
  // string counterparty_payee = 1 [json_name = "counterpartyPayee"];
  void clear_counterparty_payee() ;
  const std::string& counterparty_payee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_counterparty_payee(Arg_&& arg, Args_... args);
  std::string* mutable_counterparty_payee();
  PROTOBUF_NODISCARD std::string* release_counterparty_payee();
  void set_allocated_counterparty_payee(std::string* ptr);

  private:
  const std::string& _internal_counterparty_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counterparty_payee(
      const std::string& value);
  std::string* _internal_mutable_counterparty_payee();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counterparty_payee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeeEnabledChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest) */ {
 public:
  inline QueryFeeEnabledChannelsRequest() : QueryFeeEnabledChannelsRequest(nullptr) {}
  ~QueryFeeEnabledChannelsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeeEnabledChannelsRequest(const QueryFeeEnabledChannelsRequest& from);
  QueryFeeEnabledChannelsRequest(QueryFeeEnabledChannelsRequest&& from) noexcept
    : QueryFeeEnabledChannelsRequest() {
    *this = ::std::move(from);
  }

  inline QueryFeeEnabledChannelsRequest& operator=(const QueryFeeEnabledChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeeEnabledChannelsRequest& operator=(QueryFeeEnabledChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeeEnabledChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeeEnabledChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryFeeEnabledChannelsRequest*>(
               &_QueryFeeEnabledChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryFeeEnabledChannelsRequest& a, QueryFeeEnabledChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeeEnabledChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeeEnabledChannelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeeEnabledChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeeEnabledChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeeEnabledChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeeEnabledChannelsRequest& from) {
    QueryFeeEnabledChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeeEnabledChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest";
  }
  protected:
  explicit QueryFeeEnabledChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
    kQueryHeightFieldNumber = 2,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // uint64 query_height = 2 [json_name = "queryHeight"];
  void clear_query_height() ;
  ::uint64_t query_height() const;
  void set_query_height(::uint64_t value);

  private:
  ::uint64_t _internal_query_height() const;
  void _internal_set_query_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
    ::uint64_t query_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeeEnabledChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse) */ {
 public:
  inline QueryFeeEnabledChannelsResponse() : QueryFeeEnabledChannelsResponse(nullptr) {}
  ~QueryFeeEnabledChannelsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeeEnabledChannelsResponse(const QueryFeeEnabledChannelsResponse& from);
  QueryFeeEnabledChannelsResponse(QueryFeeEnabledChannelsResponse&& from) noexcept
    : QueryFeeEnabledChannelsResponse() {
    *this = ::std::move(from);
  }

  inline QueryFeeEnabledChannelsResponse& operator=(const QueryFeeEnabledChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeeEnabledChannelsResponse& operator=(QueryFeeEnabledChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeeEnabledChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeeEnabledChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryFeeEnabledChannelsResponse*>(
               &_QueryFeeEnabledChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryFeeEnabledChannelsResponse& a, QueryFeeEnabledChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeeEnabledChannelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeeEnabledChannelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeeEnabledChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeeEnabledChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeeEnabledChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeeEnabledChannelsResponse& from) {
    QueryFeeEnabledChannelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeeEnabledChannelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse";
  }
  protected:
  explicit QueryFeeEnabledChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeEnabledChannelsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  int fee_enabled_channels_size() const;
  private:
  int _internal_fee_enabled_channels_size() const;

  public:
  void clear_fee_enabled_channels() ;
  ::ibc::applications::fee::v1::FeeEnabledChannel* mutable_fee_enabled_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >*
      mutable_fee_enabled_channels();
  private:
  const ::ibc::applications::fee::v1::FeeEnabledChannel& _internal_fee_enabled_channels(int index) const;
  ::ibc::applications::fee::v1::FeeEnabledChannel* _internal_add_fee_enabled_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>& _internal_fee_enabled_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>* _internal_mutable_fee_enabled_channels();
  public:
  const ::ibc::applications::fee::v1::FeeEnabledChannel& fee_enabled_channels(int index) const;
  ::ibc::applications::fee::v1::FeeEnabledChannel* add_fee_enabled_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >&
      fee_enabled_channels() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel > fee_enabled_channels_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeeEnabledChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest) */ {
 public:
  inline QueryFeeEnabledChannelRequest() : QueryFeeEnabledChannelRequest(nullptr) {}
  ~QueryFeeEnabledChannelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeeEnabledChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeeEnabledChannelRequest(const QueryFeeEnabledChannelRequest& from);
  QueryFeeEnabledChannelRequest(QueryFeeEnabledChannelRequest&& from) noexcept
    : QueryFeeEnabledChannelRequest() {
    *this = ::std::move(from);
  }

  inline QueryFeeEnabledChannelRequest& operator=(const QueryFeeEnabledChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeeEnabledChannelRequest& operator=(QueryFeeEnabledChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeeEnabledChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeeEnabledChannelRequest* internal_default_instance() {
    return reinterpret_cast<const QueryFeeEnabledChannelRequest*>(
               &_QueryFeeEnabledChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryFeeEnabledChannelRequest& a, QueryFeeEnabledChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeeEnabledChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeeEnabledChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeeEnabledChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeeEnabledChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeeEnabledChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeeEnabledChannelRequest& from) {
    QueryFeeEnabledChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeeEnabledChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest";
  }
  protected:
  explicit QueryFeeEnabledChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryFeeEnabledChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse) */ {
 public:
  inline QueryFeeEnabledChannelResponse() : QueryFeeEnabledChannelResponse(nullptr) {}
  ~QueryFeeEnabledChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryFeeEnabledChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryFeeEnabledChannelResponse(const QueryFeeEnabledChannelResponse& from);
  QueryFeeEnabledChannelResponse(QueryFeeEnabledChannelResponse&& from) noexcept
    : QueryFeeEnabledChannelResponse() {
    *this = ::std::move(from);
  }

  inline QueryFeeEnabledChannelResponse& operator=(const QueryFeeEnabledChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFeeEnabledChannelResponse& operator=(QueryFeeEnabledChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryFeeEnabledChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryFeeEnabledChannelResponse* internal_default_instance() {
    return reinterpret_cast<const QueryFeeEnabledChannelResponse*>(
               &_QueryFeeEnabledChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryFeeEnabledChannelResponse& a, QueryFeeEnabledChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFeeEnabledChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryFeeEnabledChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryFeeEnabledChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryFeeEnabledChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryFeeEnabledChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryFeeEnabledChannelResponse& from) {
    QueryFeeEnabledChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFeeEnabledChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.QueryFeeEnabledChannelResponse";
  }
  protected:
  explicit QueryFeeEnabledChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeEnabledFieldNumber = 1,
  };
  // bool fee_enabled = 1 [json_name = "feeEnabled"];
  void clear_fee_enabled() ;
  bool fee_enabled() const;
  void set_fee_enabled(bool value);

  private:
  bool _internal_fee_enabled() const;
  void _internal_set_fee_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool fee_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryIncentivizedPacketsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryIncentivizedPacketsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryIncentivizedPacketsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryIncentivizedPacketsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination)
  return _internal_pagination();
}
inline void QueryIncentivizedPacketsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination)
  return _msg;
}
inline void QueryIncentivizedPacketsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.pagination)
}

// uint64 query_height = 2 [json_name = "queryHeight"];
inline void QueryIncentivizedPacketsRequest::clear_query_height() {
  _impl_.query_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryIncentivizedPacketsRequest::query_height() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.query_height)
  return _internal_query_height();
}
inline void QueryIncentivizedPacketsRequest::set_query_height(::uint64_t value) {
  _internal_set_query_height(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest.query_height)
}
inline ::uint64_t QueryIncentivizedPacketsRequest::_internal_query_height() const {
  return _impl_.query_height_;
}
inline void QueryIncentivizedPacketsRequest::_internal_set_query_height(::uint64_t value) {
  ;
  _impl_.query_height_ = value;
}

// -------------------------------------------------------------------

// QueryIncentivizedPacketsResponse

// repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets", (.gogoproto.nullable) = false];
inline int QueryIncentivizedPacketsResponse::_internal_incentivized_packets_size() const {
  return _impl_.incentivized_packets_.size();
}
inline int QueryIncentivizedPacketsResponse::incentivized_packets_size() const {
  return _internal_incentivized_packets_size();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsResponse::mutable_incentivized_packets(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets)
  return _internal_mutable_incentivized_packets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
QueryIncentivizedPacketsResponse::mutable_incentivized_packets() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets)
  return _internal_mutable_incentivized_packets();
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketsResponse::_internal_incentivized_packets(int index) const {
  return _internal_incentivized_packets().Get(index);
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketsResponse::incentivized_packets(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets)
  return _internal_incentivized_packets(index);
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsResponse::_internal_add_incentivized_packets() {
  return _internal_mutable_incentivized_packets()->Add();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsResponse::add_incentivized_packets() {
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _add = _internal_add_incentivized_packets();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
QueryIncentivizedPacketsResponse::incentivized_packets() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.incentivized_packets)
  return _internal_incentivized_packets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>&
QueryIncentivizedPacketsResponse::_internal_incentivized_packets() const {
  return _impl_.incentivized_packets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>*
QueryIncentivizedPacketsResponse::_internal_mutable_incentivized_packets() {
  return &_impl_.incentivized_packets_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryIncentivizedPacketsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryIncentivizedPacketsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryIncentivizedPacketsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.pagination)
  return _internal_pagination();
}
inline void QueryIncentivizedPacketsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.pagination)
  return _msg;
}
inline void QueryIncentivizedPacketsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryIncentivizedPacketRequest

// .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool QueryIncentivizedPacketRequest::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& QueryIncentivizedPacketRequest::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& QueryIncentivizedPacketRequest::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id)
  return _internal_packet_id();
}
inline void QueryIncentivizedPacketRequest::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* QueryIncentivizedPacketRequest::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryIncentivizedPacketRequest::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryIncentivizedPacketRequest::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* QueryIncentivizedPacketRequest::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id)
  return _msg;
}
inline void QueryIncentivizedPacketRequest::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.packet_id)
}

// uint64 query_height = 2 [json_name = "queryHeight"];
inline void QueryIncentivizedPacketRequest::clear_query_height() {
  _impl_.query_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryIncentivizedPacketRequest::query_height() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.query_height)
  return _internal_query_height();
}
inline void QueryIncentivizedPacketRequest::set_query_height(::uint64_t value) {
  _internal_set_query_height(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryIncentivizedPacketRequest.query_height)
}
inline ::uint64_t QueryIncentivizedPacketRequest::_internal_query_height() const {
  return _impl_.query_height_;
}
inline void QueryIncentivizedPacketRequest::_internal_set_query_height(::uint64_t value) {
  ;
  _impl_.query_height_ = value;
}

// -------------------------------------------------------------------

// QueryIncentivizedPacketResponse

// .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [json_name = "incentivizedPacket", (.gogoproto.nullable) = false];
inline bool QueryIncentivizedPacketResponse::has_incentivized_packet() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.incentivized_packet_ != nullptr);
  return value;
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketResponse::_internal_incentivized_packet() const {
  const ::ibc::applications::fee::v1::IdentifiedPacketFees* p = _impl_.incentivized_packet_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::fee::v1::IdentifiedPacketFees&>(
      ::ibc::applications::fee::v1::_IdentifiedPacketFees_default_instance_);
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketResponse::incentivized_packet() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet)
  return _internal_incentivized_packet();
}
inline void QueryIncentivizedPacketResponse::unsafe_arena_set_allocated_incentivized_packet(
    ::ibc::applications::fee::v1::IdentifiedPacketFees* incentivized_packet) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incentivized_packet_);
  }
  _impl_.incentivized_packet_ = incentivized_packet;
  if (incentivized_packet) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet)
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketResponse::release_incentivized_packet() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* temp = _impl_.incentivized_packet_;
  _impl_.incentivized_packet_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketResponse::unsafe_arena_release_incentivized_packet() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* temp = _impl_.incentivized_packet_;
  _impl_.incentivized_packet_ = nullptr;
  return temp;
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketResponse::_internal_mutable_incentivized_packet() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.incentivized_packet_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::fee::v1::IdentifiedPacketFees>(GetArenaForAllocation());
    _impl_.incentivized_packet_ = p;
  }
  return _impl_.incentivized_packet_;
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketResponse::mutable_incentivized_packet() {
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _msg = _internal_mutable_incentivized_packet();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet)
  return _msg;
}
inline void QueryIncentivizedPacketResponse::set_allocated_incentivized_packet(::ibc::applications::fee::v1::IdentifiedPacketFees* incentivized_packet) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.incentivized_packet_);
  }
  if (incentivized_packet) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(incentivized_packet));
    if (message_arena != submessage_arena) {
      incentivized_packet = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, incentivized_packet, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.incentivized_packet_ = incentivized_packet;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketResponse.incentivized_packet)
}

// -------------------------------------------------------------------

// QueryIncentivizedPacketsForChannelRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryIncentivizedPacketsForChannelRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryIncentivizedPacketsForChannelRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryIncentivizedPacketsForChannelRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination)
  return _internal_pagination();
}
inline void QueryIncentivizedPacketsForChannelRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsForChannelRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsForChannelRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsForChannelRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryIncentivizedPacketsForChannelRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination)
  return _msg;
}
inline void QueryIncentivizedPacketsForChannelRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.pagination)
}

// string port_id = 2 [json_name = "portId"];
inline void QueryIncentivizedPacketsForChannelRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryIncentivizedPacketsForChannelRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryIncentivizedPacketsForChannelRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id)
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id)
  return _s;
}
inline const std::string& QueryIncentivizedPacketsForChannelRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryIncentivizedPacketsForChannelRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryIncentivizedPacketsForChannelRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id)
}

// string channel_id = 3 [json_name = "channelId"];
inline void QueryIncentivizedPacketsForChannelRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryIncentivizedPacketsForChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryIncentivizedPacketsForChannelRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id)
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id)
  return _s;
}
inline const std::string& QueryIncentivizedPacketsForChannelRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryIncentivizedPacketsForChannelRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryIncentivizedPacketsForChannelRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryIncentivizedPacketsForChannelRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id)
}

// uint64 query_height = 4 [json_name = "queryHeight"];
inline void QueryIncentivizedPacketsForChannelRequest::clear_query_height() {
  _impl_.query_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryIncentivizedPacketsForChannelRequest::query_height() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.query_height)
  return _internal_query_height();
}
inline void QueryIncentivizedPacketsForChannelRequest::set_query_height(::uint64_t value) {
  _internal_set_query_height(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.query_height)
}
inline ::uint64_t QueryIncentivizedPacketsForChannelRequest::_internal_query_height() const {
  return _impl_.query_height_;
}
inline void QueryIncentivizedPacketsForChannelRequest::_internal_set_query_height(::uint64_t value) {
  ;
  _impl_.query_height_ = value;
}

// -------------------------------------------------------------------

// QueryIncentivizedPacketsForChannelResponse

// repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets"];
inline int QueryIncentivizedPacketsForChannelResponse::_internal_incentivized_packets_size() const {
  return _impl_.incentivized_packets_.size();
}
inline int QueryIncentivizedPacketsForChannelResponse::incentivized_packets_size() const {
  return _internal_incentivized_packets_size();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsForChannelResponse::mutable_incentivized_packets(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets)
  return _internal_mutable_incentivized_packets()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
QueryIncentivizedPacketsForChannelResponse::mutable_incentivized_packets() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets)
  return _internal_mutable_incentivized_packets();
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketsForChannelResponse::_internal_incentivized_packets(int index) const {
  return _internal_incentivized_packets().Get(index);
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& QueryIncentivizedPacketsForChannelResponse::incentivized_packets(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets)
  return _internal_incentivized_packets(index);
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsForChannelResponse::_internal_add_incentivized_packets() {
  return _internal_mutable_incentivized_packets()->Add();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* QueryIncentivizedPacketsForChannelResponse::add_incentivized_packets() {
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _add = _internal_add_incentivized_packets();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
QueryIncentivizedPacketsForChannelResponse::incentivized_packets() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.incentivized_packets)
  return _internal_incentivized_packets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>&
QueryIncentivizedPacketsForChannelResponse::_internal_incentivized_packets() const {
  return _impl_.incentivized_packets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>*
QueryIncentivizedPacketsForChannelResponse::_internal_mutable_incentivized_packets() {
  return &_impl_.incentivized_packets_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryIncentivizedPacketsForChannelResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryIncentivizedPacketsForChannelResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryIncentivizedPacketsForChannelResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.pagination)
  return _internal_pagination();
}
inline void QueryIncentivizedPacketsForChannelResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsForChannelResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsForChannelResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsForChannelResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryIncentivizedPacketsForChannelResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.pagination)
  return _msg;
}
inline void QueryIncentivizedPacketsForChannelResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse.pagination)
}

// -------------------------------------------------------------------

// QueryTotalRecvFeesRequest

// .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool QueryTotalRecvFeesRequest::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalRecvFeesRequest::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalRecvFeesRequest::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id)
  return _internal_packet_id();
}
inline void QueryTotalRecvFeesRequest::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalRecvFeesRequest::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalRecvFeesRequest::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalRecvFeesRequest::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalRecvFeesRequest::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id)
  return _msg;
}
inline void QueryTotalRecvFeesRequest::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryTotalRecvFeesRequest.packet_id)
}

// -------------------------------------------------------------------

// QueryTotalRecvFeesResponse

// repeated .cosmos.base.v1beta1.Coin recv_fees = 1 [json_name = "recvFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int QueryTotalRecvFeesResponse::_internal_recv_fees_size() const {
  return _impl_.recv_fees_.size();
}
inline int QueryTotalRecvFeesResponse::recv_fees_size() const {
  return _internal_recv_fees_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalRecvFeesResponse::mutable_recv_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees)
  return _internal_mutable_recv_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryTotalRecvFeesResponse::mutable_recv_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees)
  return _internal_mutable_recv_fees();
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalRecvFeesResponse::_internal_recv_fees(int index) const {
  return _internal_recv_fees().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalRecvFeesResponse::recv_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees)
  return _internal_recv_fees(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalRecvFeesResponse::_internal_add_recv_fees() {
  return _internal_mutable_recv_fees()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalRecvFeesResponse::add_recv_fees() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_recv_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryTotalRecvFeesResponse::recv_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryTotalRecvFeesResponse.recv_fees)
  return _internal_recv_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryTotalRecvFeesResponse::_internal_recv_fees() const {
  return _impl_.recv_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryTotalRecvFeesResponse::_internal_mutable_recv_fees() {
  return &_impl_.recv_fees_;
}

// -------------------------------------------------------------------

// QueryTotalAckFeesRequest

// .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool QueryTotalAckFeesRequest::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalAckFeesRequest::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalAckFeesRequest::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id)
  return _internal_packet_id();
}
inline void QueryTotalAckFeesRequest::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalAckFeesRequest::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalAckFeesRequest::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalAckFeesRequest::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalAckFeesRequest::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id)
  return _msg;
}
inline void QueryTotalAckFeesRequest::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryTotalAckFeesRequest.packet_id)
}

// -------------------------------------------------------------------

// QueryTotalAckFeesResponse

// repeated .cosmos.base.v1beta1.Coin ack_fees = 1 [json_name = "ackFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int QueryTotalAckFeesResponse::_internal_ack_fees_size() const {
  return _impl_.ack_fees_.size();
}
inline int QueryTotalAckFeesResponse::ack_fees_size() const {
  return _internal_ack_fees_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalAckFeesResponse::mutable_ack_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees)
  return _internal_mutable_ack_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryTotalAckFeesResponse::mutable_ack_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees)
  return _internal_mutable_ack_fees();
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalAckFeesResponse::_internal_ack_fees(int index) const {
  return _internal_ack_fees().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalAckFeesResponse::ack_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees)
  return _internal_ack_fees(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalAckFeesResponse::_internal_add_ack_fees() {
  return _internal_mutable_ack_fees()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalAckFeesResponse::add_ack_fees() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_ack_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryTotalAckFeesResponse::ack_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryTotalAckFeesResponse.ack_fees)
  return _internal_ack_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryTotalAckFeesResponse::_internal_ack_fees() const {
  return _impl_.ack_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryTotalAckFeesResponse::_internal_mutable_ack_fees() {
  return &_impl_.ack_fees_;
}

// -------------------------------------------------------------------

// QueryTotalTimeoutFeesRequest

// .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool QueryTotalTimeoutFeesRequest::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalTimeoutFeesRequest::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& QueryTotalTimeoutFeesRequest::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id)
  return _internal_packet_id();
}
inline void QueryTotalTimeoutFeesRequest::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalTimeoutFeesRequest::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalTimeoutFeesRequest::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalTimeoutFeesRequest::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* QueryTotalTimeoutFeesRequest::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id)
  return _msg;
}
inline void QueryTotalTimeoutFeesRequest::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest.packet_id)
}

// -------------------------------------------------------------------

// QueryTotalTimeoutFeesResponse

// repeated .cosmos.base.v1beta1.Coin timeout_fees = 1 [json_name = "timeoutFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
inline int QueryTotalTimeoutFeesResponse::_internal_timeout_fees_size() const {
  return _impl_.timeout_fees_.size();
}
inline int QueryTotalTimeoutFeesResponse::timeout_fees_size() const {
  return _internal_timeout_fees_size();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalTimeoutFeesResponse::mutable_timeout_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees)
  return _internal_mutable_timeout_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >*
QueryTotalTimeoutFeesResponse::mutable_timeout_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees)
  return _internal_mutable_timeout_fees();
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalTimeoutFeesResponse::_internal_timeout_fees(int index) const {
  return _internal_timeout_fees().Get(index);
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalTimeoutFeesResponse::timeout_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees)
  return _internal_timeout_fees(index);
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalTimeoutFeesResponse::_internal_add_timeout_fees() {
  return _internal_mutable_timeout_fees()->Add();
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalTimeoutFeesResponse::add_timeout_fees() {
  ::cosmos::base::v1beta1::Coin* _add = _internal_add_timeout_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::base::v1beta1::Coin >&
QueryTotalTimeoutFeesResponse::timeout_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse.timeout_fees)
  return _internal_timeout_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>&
QueryTotalTimeoutFeesResponse::_internal_timeout_fees() const {
  return _impl_.timeout_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::base::v1beta1::Coin>*
QueryTotalTimeoutFeesResponse::_internal_mutable_timeout_fees() {
  return &_impl_.timeout_fees_;
}

// -------------------------------------------------------------------

// QueryPayeeRequest

// string channel_id = 1 [json_name = "channelId"];
inline void QueryPayeeRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPayeeRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryPayeeRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPayeeRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryPayeeRequest.channel_id)
}
inline std::string* QueryPayeeRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryPayeeRequest.channel_id)
  return _s;
}
inline const std::string& QueryPayeeRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPayeeRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPayeeRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPayeeRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryPayeeRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPayeeRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryPayeeRequest.channel_id)
}

// string relayer = 2 [json_name = "relayer"];
inline void QueryPayeeRequest::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& QueryPayeeRequest::relayer() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryPayeeRequest.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPayeeRequest::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryPayeeRequest.relayer)
}
inline std::string* QueryPayeeRequest::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryPayeeRequest.relayer)
  return _s;
}
inline const std::string& QueryPayeeRequest::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void QueryPayeeRequest::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPayeeRequest::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPayeeRequest::release_relayer() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryPayeeRequest.relayer)
  return _impl_.relayer_.Release();
}
inline void QueryPayeeRequest::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryPayeeRequest.relayer)
}

// -------------------------------------------------------------------

// QueryPayeeResponse

// string payee_address = 1 [json_name = "payeeAddress"];
inline void QueryPayeeResponse::clear_payee_address() {
  _impl_.payee_address_.ClearToEmpty();
}
inline const std::string& QueryPayeeResponse::payee_address() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryPayeeResponse.payee_address)
  return _internal_payee_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPayeeResponse::set_payee_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payee_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryPayeeResponse.payee_address)
}
inline std::string* QueryPayeeResponse::mutable_payee_address() {
  std::string* _s = _internal_mutable_payee_address();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryPayeeResponse.payee_address)
  return _s;
}
inline const std::string& QueryPayeeResponse::_internal_payee_address() const {
  return _impl_.payee_address_.Get();
}
inline void QueryPayeeResponse::_internal_set_payee_address(const std::string& value) {
  ;


  _impl_.payee_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPayeeResponse::_internal_mutable_payee_address() {
  ;
  return _impl_.payee_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPayeeResponse::release_payee_address() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryPayeeResponse.payee_address)
  return _impl_.payee_address_.Release();
}
inline void QueryPayeeResponse::set_allocated_payee_address(std::string* value) {
  _impl_.payee_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payee_address_.IsDefault()) {
          _impl_.payee_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryPayeeResponse.payee_address)
}

// -------------------------------------------------------------------

// QueryCounterpartyPayeeRequest

// string channel_id = 1 [json_name = "channelId"];
inline void QueryCounterpartyPayeeRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryCounterpartyPayeeRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCounterpartyPayeeRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id)
}
inline std::string* QueryCounterpartyPayeeRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id)
  return _s;
}
inline const std::string& QueryCounterpartyPayeeRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryCounterpartyPayeeRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryCounterpartyPayeeRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id)
}

// string relayer = 2 [json_name = "relayer"];
inline void QueryCounterpartyPayeeRequest::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& QueryCounterpartyPayeeRequest::relayer() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCounterpartyPayeeRequest::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer)
}
inline std::string* QueryCounterpartyPayeeRequest::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer)
  return _s;
}
inline const std::string& QueryCounterpartyPayeeRequest::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void QueryCounterpartyPayeeRequest::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeRequest::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeRequest::release_relayer() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer)
  return _impl_.relayer_.Release();
}
inline void QueryCounterpartyPayeeRequest::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer)
}

// -------------------------------------------------------------------

// QueryCounterpartyPayeeResponse

// string counterparty_payee = 1 [json_name = "counterpartyPayee"];
inline void QueryCounterpartyPayeeResponse::clear_counterparty_payee() {
  _impl_.counterparty_payee_.ClearToEmpty();
}
inline const std::string& QueryCounterpartyPayeeResponse::counterparty_payee() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee)
  return _internal_counterparty_payee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryCounterpartyPayeeResponse::set_counterparty_payee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.counterparty_payee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee)
}
inline std::string* QueryCounterpartyPayeeResponse::mutable_counterparty_payee() {
  std::string* _s = _internal_mutable_counterparty_payee();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee)
  return _s;
}
inline const std::string& QueryCounterpartyPayeeResponse::_internal_counterparty_payee() const {
  return _impl_.counterparty_payee_.Get();
}
inline void QueryCounterpartyPayeeResponse::_internal_set_counterparty_payee(const std::string& value) {
  ;


  _impl_.counterparty_payee_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeResponse::_internal_mutable_counterparty_payee() {
  ;
  return _impl_.counterparty_payee_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryCounterpartyPayeeResponse::release_counterparty_payee() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee)
  return _impl_.counterparty_payee_.Release();
}
inline void QueryCounterpartyPayeeResponse::set_allocated_counterparty_payee(std::string* value) {
  _impl_.counterparty_payee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.counterparty_payee_.IsDefault()) {
          _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee)
}

// -------------------------------------------------------------------

// QueryFeeEnabledChannelsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryFeeEnabledChannelsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryFeeEnabledChannelsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryFeeEnabledChannelsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination)
  return _internal_pagination();
}
inline void QueryFeeEnabledChannelsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryFeeEnabledChannelsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryFeeEnabledChannelsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryFeeEnabledChannelsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryFeeEnabledChannelsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination)
  return _msg;
}
inline void QueryFeeEnabledChannelsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.pagination)
}

// uint64 query_height = 2 [json_name = "queryHeight"];
inline void QueryFeeEnabledChannelsRequest::clear_query_height() {
  _impl_.query_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryFeeEnabledChannelsRequest::query_height() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.query_height)
  return _internal_query_height();
}
inline void QueryFeeEnabledChannelsRequest::set_query_height(::uint64_t value) {
  _internal_set_query_height(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest.query_height)
}
inline ::uint64_t QueryFeeEnabledChannelsRequest::_internal_query_height() const {
  return _impl_.query_height_;
}
inline void QueryFeeEnabledChannelsRequest::_internal_set_query_height(::uint64_t value) {
  ;
  _impl_.query_height_ = value;
}

// -------------------------------------------------------------------

// QueryFeeEnabledChannelsResponse

// repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
inline int QueryFeeEnabledChannelsResponse::_internal_fee_enabled_channels_size() const {
  return _impl_.fee_enabled_channels_.size();
}
inline int QueryFeeEnabledChannelsResponse::fee_enabled_channels_size() const {
  return _internal_fee_enabled_channels_size();
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* QueryFeeEnabledChannelsResponse::mutable_fee_enabled_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels)
  return _internal_mutable_fee_enabled_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >*
QueryFeeEnabledChannelsResponse::mutable_fee_enabled_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels)
  return _internal_mutable_fee_enabled_channels();
}
inline const ::ibc::applications::fee::v1::FeeEnabledChannel& QueryFeeEnabledChannelsResponse::_internal_fee_enabled_channels(int index) const {
  return _internal_fee_enabled_channels().Get(index);
}
inline const ::ibc::applications::fee::v1::FeeEnabledChannel& QueryFeeEnabledChannelsResponse::fee_enabled_channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels)
  return _internal_fee_enabled_channels(index);
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* QueryFeeEnabledChannelsResponse::_internal_add_fee_enabled_channels() {
  return _internal_mutable_fee_enabled_channels()->Add();
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* QueryFeeEnabledChannelsResponse::add_fee_enabled_channels() {
  ::ibc::applications::fee::v1::FeeEnabledChannel* _add = _internal_add_fee_enabled_channels();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >&
QueryFeeEnabledChannelsResponse::fee_enabled_channels() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.fee_enabled_channels)
  return _internal_fee_enabled_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>&
QueryFeeEnabledChannelsResponse::_internal_fee_enabled_channels() const {
  return _impl_.fee_enabled_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>*
QueryFeeEnabledChannelsResponse::_internal_mutable_fee_enabled_channels() {
  return &_impl_.fee_enabled_channels_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryFeeEnabledChannelsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryFeeEnabledChannelsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryFeeEnabledChannelsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.pagination)
  return _internal_pagination();
}
inline void QueryFeeEnabledChannelsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryFeeEnabledChannelsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryFeeEnabledChannelsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryFeeEnabledChannelsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryFeeEnabledChannelsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.pagination)
  return _msg;
}
inline void QueryFeeEnabledChannelsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryFeeEnabledChannelRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryFeeEnabledChannelRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryFeeEnabledChannelRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryFeeEnabledChannelRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id)
}
inline std::string* QueryFeeEnabledChannelRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id)
  return _s;
}
inline const std::string& QueryFeeEnabledChannelRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryFeeEnabledChannelRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryFeeEnabledChannelRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryFeeEnabledChannelRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryFeeEnabledChannelRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryFeeEnabledChannelRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryFeeEnabledChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryFeeEnabledChannelRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id)
}
inline std::string* QueryFeeEnabledChannelRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id)
  return _s;
}
inline const std::string& QueryFeeEnabledChannelRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryFeeEnabledChannelRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryFeeEnabledChannelRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryFeeEnabledChannelRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryFeeEnabledChannelRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryFeeEnabledChannelResponse

// bool fee_enabled = 1 [json_name = "feeEnabled"];
inline void QueryFeeEnabledChannelResponse::clear_fee_enabled() {
  _impl_.fee_enabled_ = false;
}
inline bool QueryFeeEnabledChannelResponse::fee_enabled() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse.fee_enabled)
  return _internal_fee_enabled();
}
inline void QueryFeeEnabledChannelResponse::set_fee_enabled(bool value) {
  _internal_set_fee_enabled(value);
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse.fee_enabled)
}
inline bool QueryFeeEnabledChannelResponse::_internal_fee_enabled() const {
  return _impl_.fee_enabled_;
}
inline void QueryFeeEnabledChannelResponse::_internal_set_fee_enabled(bool value) {
  ;
  _impl_.fee_enabled_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_2epb_2eh

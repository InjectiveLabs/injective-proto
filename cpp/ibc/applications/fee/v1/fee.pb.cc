// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/fee.proto

#include "ibc/applications/fee/v1/fee.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Fee::Fee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recv_fee_)*/{}
  , /*decltype(_impl_.ack_fee_)*/{}
  , /*decltype(_impl_.timeout_fee_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeDefaultTypeInternal() {}
  union {
    Fee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeDefaultTypeInternal _Fee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketFee::PacketFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.refund_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/nullptr} {}
struct PacketFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketFeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketFeeDefaultTypeInternal() {}
  union {
    PacketFee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketFeeDefaultTypeInternal _PacketFee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketFees::PacketFees(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_fees_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketFeesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketFeesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketFeesDefaultTypeInternal() {}
  union {
    PacketFees _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketFeesDefaultTypeInternal _PacketFees_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IdentifiedPacketFees::IdentifiedPacketFees(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_fees_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr} {}
struct IdentifiedPacketFeesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentifiedPacketFeesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentifiedPacketFeesDefaultTypeInternal() {}
  union {
    IdentifiedPacketFees _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentifiedPacketFeesDefaultTypeInternal _IdentifiedPacketFees_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::Fee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::Fee, _impl_.recv_fee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::Fee, _impl_.ack_fee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::Fee, _impl_.timeout_fee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFee, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFee, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFee, _impl_.refund_address_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFee, _impl_.relayers_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFees, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::PacketFees, _impl_.packet_fees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::IdentifiedPacketFees, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::IdentifiedPacketFees, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::IdentifiedPacketFees, _impl_.packet_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::IdentifiedPacketFees, _impl_.packet_fees_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::fee::v1::Fee)},
        { 11, 22, -1, sizeof(::ibc::applications::fee::v1::PacketFee)},
        { 25, -1, -1, sizeof(::ibc::applications::fee::v1::PacketFees)},
        { 34, 44, -1, sizeof(::ibc::applications::fee::v1::IdentifiedPacketFees)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::fee::v1::_Fee_default_instance_._instance,
    &::ibc::applications::fee::v1::_PacketFee_default_instance_._instance,
    &::ibc::applications::fee::v1::_PacketFees_default_instance_._instance,
    &::ibc::applications::fee::v1::_IdentifiedPacketFees_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!ibc/applications/fee/v1/fee.proto\022\027ibc"
    ".applications.fee.v1\032\036cosmos/base/v1beta"
    "1/coin.proto\032\024gogoproto/gogo.proto\032!ibc/"
    "core/channel/v1/channel.proto\"\301\002\n\003Fee\022f\n"
    "\010recv_fee\030\001 \003(\0132\031.cosmos.base.v1beta1.Co"
    "inB0\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk"
    "/types.CoinsR\007recvFee\022d\n\007ack_fee\030\002 \003(\0132\031"
    ".cosmos.base.v1beta1.CoinB0\310\336\037\000\252\337\037(githu"
    "b.com/cosmos/cosmos-sdk/types.CoinsR\006ack"
    "Fee\022l\n\013timeout_fee\030\003 \003(\0132\031.cosmos.base.v"
    "1beta1.CoinB0\310\336\037\000\252\337\037(github.com/cosmos/c"
    "osmos-sdk/types.CoinsR\ntimeoutFee\"\204\001\n\tPa"
    "cketFee\0224\n\003fee\030\001 \001(\0132\034.ibc.applications."
    "fee.v1.FeeB\004\310\336\037\000R\003fee\022%\n\016refund_address\030"
    "\002 \001(\tR\rrefundAddress\022\032\n\010relayers\030\003 \003(\tR\010"
    "relayers\"W\n\nPacketFees\022I\n\013packet_fees\030\001 "
    "\003(\0132\".ibc.applications.fee.v1.PacketFeeB"
    "\004\310\336\037\000R\npacketFees\"\243\001\n\024IdentifiedPacketFe"
    "es\022@\n\tpacket_id\030\001 \001(\0132\035.ibc.core.channel"
    ".v1.PacketIdB\004\310\336\037\000R\010packetId\022I\n\013packet_f"
    "ees\030\002 \003(\0132\".ibc.applications.fee.v1.Pack"
    "etFeeB\004\310\336\037\000R\npacketFeesB\335\001\n\033com.ibc.appl"
    "ications.fee.v1B\010FeeProtoP\001Z5github.com/"
    "cosmos/ibc-go/v7/modules/apps/29-fee/typ"
    "es\242\002\003IAF\252\002\027Ibc.Applications.Fee.V1\312\002\027Ibc"
    "\\Applications\\Fee\\V1\342\002#Ibc\\Applications\\"
    "Fee\\V1\\GPBMetadata\352\002\032Ibc::Applications::"
    "Fee::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto = {
    false,
    false,
    1095,
    descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
    "ibc/applications/fee/v1/fee.proto",
    &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once,
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_deps,
    3,
    4,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto(&descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto);
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
// ===================================================================

class Fee::_Internal {
 public:
};

void Fee::clear_recv_fee() {
  _internal_mutable_recv_fee()->Clear();
}
void Fee::clear_ack_fee() {
  _internal_mutable_ack_fee()->Clear();
}
void Fee::clear_timeout_fee() {
  _internal_mutable_timeout_fee()->Clear();
}
Fee::Fee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.Fee)
}
Fee::Fee(const Fee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Fee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_fee_){from._impl_.recv_fee_}
    , decltype(_impl_.ack_fee_){from._impl_.ack_fee_}
    , decltype(_impl_.timeout_fee_){from._impl_.timeout_fee_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.Fee)
}

inline void Fee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_fee_){arena}
    , decltype(_impl_.ack_fee_){arena}
    , decltype(_impl_.timeout_fee_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fee::~Fee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.Fee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_recv_fee()->~RepeatedPtrField();
  _internal_mutable_ack_fee()->~RepeatedPtrField();
  _internal_mutable_timeout_fee()->~RepeatedPtrField();
}

void Fee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.Fee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_recv_fee()->Clear();
  _internal_mutable_ack_fee()->Clear();
  _internal_mutable_timeout_fee()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin recv_fee = 1 [json_name = "recvFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recv_fee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin ack_fee = 2 [json_name = "ackFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ack_fee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin timeout_fee = 3 [json_name = "timeoutFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timeout_fee(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Fee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.Fee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin recv_fee = 1 [json_name = "recvFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recv_fee_size()); i < n; i++) {
    const auto& repfield = this->_internal_recv_fee(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin ack_fee = 2 [json_name = "ackFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ack_fee_size()); i < n; i++) {
    const auto& repfield = this->_internal_ack_fee(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .cosmos.base.v1beta1.Coin timeout_fee = 3 [json_name = "timeoutFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timeout_fee_size()); i < n; i++) {
    const auto& repfield = this->_internal_timeout_fee(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.Fee)
  return target;
}

::size_t Fee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.Fee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin recv_fee = 1 [json_name = "recvFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_recv_fee_size();
  for (const auto& msg : this->_internal_recv_fee()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin ack_fee = 2 [json_name = "ackFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_ack_fee_size();
  for (const auto& msg : this->_internal_ack_fee()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cosmos.base.v1beta1.Coin timeout_fee = 3 [json_name = "timeoutFee", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_timeout_fee_size();
  for (const auto& msg : this->_internal_timeout_fee()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fee::GetClassData() const { return &_class_data_; }


void Fee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fee*>(&to_msg);
  auto& from = static_cast<const Fee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.Fee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_recv_fee()->MergeFrom(from._internal_recv_fee());
  _this->_internal_mutable_ack_fee()->MergeFrom(from._internal_ack_fee());
  _this->_internal_mutable_timeout_fee()->MergeFrom(from._internal_timeout_fee());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fee::CopyFrom(const Fee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.Fee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fee::IsInitialized() const {
  return true;
}

void Fee::InternalSwap(Fee* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_recv_fee()->InternalSwap(other->_internal_mutable_recv_fee());
  _internal_mutable_ack_fee()->InternalSwap(other->_internal_mutable_ack_fee());
  _internal_mutable_timeout_fee()->InternalSwap(other->_internal_mutable_timeout_fee());
}

::PROTOBUF_NAMESPACE_ID::Metadata Fee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[0]);
}
// ===================================================================

class PacketFee::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketFee>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketFee, _impl_._has_bits_);
  static const ::ibc::applications::fee::v1::Fee& fee(const PacketFee* msg);
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::applications::fee::v1::Fee&
PacketFee::_Internal::fee(const PacketFee* msg) {
  return *msg->_impl_.fee_;
}
PacketFee::PacketFee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.PacketFee)
}
PacketFee::PacketFee(const PacketFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.refund_address_) {}

    , decltype(_impl_.fee_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.refund_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.refund_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_refund_address().empty()) {
    _this->_impl_.refund_address_.Set(from._internal_refund_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_ = new ::ibc::applications::fee::v1::Fee(*from._impl_.fee_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.PacketFee)
}

inline void PacketFee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relayers_){arena}
    , decltype(_impl_.refund_address_) {}

    , decltype(_impl_.fee_){nullptr}
  };
  _impl_.refund_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.refund_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketFee::~PacketFee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.PacketFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketFee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.refund_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_;
}

void PacketFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketFee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.PacketFee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.refund_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_ != nullptr);
    _impl_.fee_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string refund_address = 2 [json_name = "refundAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_refund_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.PacketFee.refund_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 3 [json_name = "relayers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.PacketFee.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketFee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.PacketFee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // string refund_address = 2 [json_name = "refundAddress"];
  if (!this->_internal_refund_address().empty()) {
    const std::string& _s = this->_internal_refund_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.PacketFee.refund_address");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated string relayers = 3 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.PacketFee.relayers");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.PacketFee)
  return target;
}

::size_t PacketFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.PacketFee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 3 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string refund_address = 2 [json_name = "refundAddress"];
  if (!this->_internal_refund_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_refund_address());
  }

  // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketFee::GetClassData() const { return &_class_data_; }


void PacketFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketFee*>(&to_msg);
  auto& from = static_cast<const PacketFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.PacketFee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_refund_address().empty()) {
    _this->_internal_set_refund_address(from._internal_refund_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee()->::ibc::applications::fee::v1::Fee::MergeFrom(
        from._internal_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketFee::CopyFrom(const PacketFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.PacketFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketFee::IsInitialized() const {
  return true;
}

void PacketFee::InternalSwap(PacketFee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.refund_address_, lhs_arena,
                                       &other->_impl_.refund_address_, rhs_arena);
  swap(_impl_.fee_, other->_impl_.fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[1]);
}
// ===================================================================

class PacketFees::_Internal {
 public:
};

PacketFees::PacketFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.PacketFees)
}
PacketFees::PacketFees(const PacketFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketFees* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_fees_){from._impl_.packet_fees_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.PacketFees)
}

inline void PacketFees::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_fees_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PacketFees::~PacketFees() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.PacketFees)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketFees::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_packet_fees()->~RepeatedPtrField();
}

void PacketFees::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketFees::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.PacketFees)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_fees()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketFees::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 1 [json_name = "packetFees", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketFees::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.PacketFees)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 1 [json_name = "packetFees", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packet_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_packet_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.PacketFees)
  return target;
}

::size_t PacketFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.PacketFees)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 1 [json_name = "packetFees", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_packet_fees_size();
  for (const auto& msg : this->_internal_packet_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketFees::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketFees::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketFees::GetClassData() const { return &_class_data_; }


void PacketFees::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketFees*>(&to_msg);
  auto& from = static_cast<const PacketFees&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.PacketFees)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_packet_fees()->MergeFrom(from._internal_packet_fees());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketFees::CopyFrom(const PacketFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.PacketFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketFees::IsInitialized() const {
  return true;
}

void PacketFees::InternalSwap(PacketFees* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_packet_fees()->InternalSwap(other->_internal_mutable_packet_fees());
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketFees::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[2]);
}
// ===================================================================

class IdentifiedPacketFees::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifiedPacketFees>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IdentifiedPacketFees, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const IdentifiedPacketFees* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
IdentifiedPacketFees::_Internal::packet_id(const IdentifiedPacketFees* msg) {
  return *msg->_impl_.packet_id_;
}
void IdentifiedPacketFees::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IdentifiedPacketFees::IdentifiedPacketFees(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.IdentifiedPacketFees)
}
IdentifiedPacketFees::IdentifiedPacketFees(const IdentifiedPacketFees& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentifiedPacketFees* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_fees_){from._impl_.packet_fees_}
    , decltype(_impl_.packet_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.IdentifiedPacketFees)
}

inline void IdentifiedPacketFees::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_fees_){arena}
    , decltype(_impl_.packet_id_){nullptr}
  };
}

IdentifiedPacketFees::~IdentifiedPacketFees() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.IdentifiedPacketFees)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentifiedPacketFees::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_packet_fees()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void IdentifiedPacketFees::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentifiedPacketFees::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.IdentifiedPacketFees)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_fees()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifiedPacketFees::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 2 [json_name = "packetFees", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packet_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IdentifiedPacketFees::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.IdentifiedPacketFees)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 2 [json_name = "packetFees", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_packet_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_packet_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.IdentifiedPacketFees)
  return target;
}

::size_t IdentifiedPacketFees::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.IdentifiedPacketFees)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.PacketFee packet_fees = 2 [json_name = "packetFees", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_packet_fees_size();
  for (const auto& msg : this->_internal_packet_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifiedPacketFees::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentifiedPacketFees::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifiedPacketFees::GetClassData() const { return &_class_data_; }


void IdentifiedPacketFees::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentifiedPacketFees*>(&to_msg);
  auto& from = static_cast<const IdentifiedPacketFees&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.IdentifiedPacketFees)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_packet_fees()->MergeFrom(from._internal_packet_fees());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifiedPacketFees::CopyFrom(const IdentifiedPacketFees& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.IdentifiedPacketFees)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifiedPacketFees::IsInitialized() const {
  return true;
}

void IdentifiedPacketFees::InternalSwap(IdentifiedPacketFees* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_packet_fees()->InternalSwap(other->_internal_mutable_packet_fees());
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifiedPacketFees::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::Fee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::Fee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::Fee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::PacketFee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::PacketFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::PacketFee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::PacketFees*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::PacketFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::PacketFees >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::IdentifiedPacketFees*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::IdentifiedPacketFees >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::IdentifiedPacketFees >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/fee/v1/query.proto

#include "ibc/applications/fee/v1/query.pb.h"
#include "ibc/applications/fee/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

static const char* Query_method_names[] = {
  "/ibc.applications.fee.v1.Query/IncentivizedPackets",
  "/ibc.applications.fee.v1.Query/IncentivizedPacket",
  "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
  "/ibc.applications.fee.v1.Query/TotalRecvFees",
  "/ibc.applications.fee.v1.Query/TotalAckFees",
  "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
  "/ibc.applications.fee.v1.Query/Payee",
  "/ibc.applications.fee.v1.Query/CounterpartyPayee",
  "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
  "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IncentivizedPackets_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IncentivizedPacket_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IncentivizedPacketsForChannel_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalRecvFees_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalAckFees_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalTimeoutFees_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Payee_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CounterpartyPayee_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeEnabledChannels_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeEnabledChannel_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IncentivizedPackets_, context, request, response);
}

void Query::Stub::async::IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPackets_, context, request, response, std::move(f));
}

void Query::Stub::async::IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPackets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* Query::Stub::PrepareAsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IncentivizedPackets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* Query::Stub::AsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIncentivizedPacketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IncentivizedPacket_, context, request, response);
}

void Query::Stub::async::IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPacket_, context, request, response, std::move(f));
}

void Query::Stub::async::IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPacket_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* Query::Stub::PrepareAsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IncentivizedPacket_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* Query::Stub::AsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIncentivizedPacketRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IncentivizedPacketsForChannel_, context, request, response);
}

void Query::Stub::async::IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPacketsForChannel_, context, request, response, std::move(f));
}

void Query::Stub::async::IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IncentivizedPacketsForChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* Query::Stub::PrepareAsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IncentivizedPacketsForChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* Query::Stub::AsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIncentivizedPacketsForChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalRecvFees_, context, request, response);
}

void Query::Stub::async::TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalRecvFees_, context, request, response, std::move(f));
}

void Query::Stub::async::TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalRecvFees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* Query::Stub::PrepareAsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalRecvFees_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* Query::Stub::AsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalRecvFeesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalAckFees_, context, request, response);
}

void Query::Stub::async::TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalAckFees_, context, request, response, std::move(f));
}

void Query::Stub::async::TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalAckFees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* Query::Stub::PrepareAsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse, ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalAckFees_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* Query::Stub::AsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalAckFeesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalTimeoutFees_, context, request, response);
}

void Query::Stub::async::TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalTimeoutFees_, context, request, response, std::move(f));
}

void Query::Stub::async::TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalTimeoutFees_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* Query::Stub::PrepareAsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalTimeoutFees_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* Query::Stub::AsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalTimeoutFeesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::ibc::applications::fee::v1::QueryPayeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Payee_, context, request, response);
}

void Query::Stub::async::Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Payee_, context, request, response, std::move(f));
}

void Query::Stub::async::Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Payee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>* Query::Stub::PrepareAsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryPayeeResponse, ::ibc::applications::fee::v1::QueryPayeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Payee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>* Query::Stub::AsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPayeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CounterpartyPayee_, context, request, response);
}

void Query::Stub::async::CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CounterpartyPayee_, context, request, response, std::move(f));
}

void Query::Stub::async::CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CounterpartyPayee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* Query::Stub::PrepareAsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CounterpartyPayee_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* Query::Stub::AsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCounterpartyPayeeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeEnabledChannels_, context, request, response);
}

void Query::Stub::async::FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeEnabledChannels_, context, request, response, std::move(f));
}

void Query::Stub::async::FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeEnabledChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* Query::Stub::PrepareAsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeEnabledChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* Query::Stub::AsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeEnabledChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FeeEnabledChannel_, context, request, response);
}

void Query::Stub::async::FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeEnabledChannel_, context, request, response, std::move(f));
}

void Query::Stub::async::FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FeeEnabledChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* Query::Stub::PrepareAsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FeeEnabledChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* Query::Stub::AsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFeeEnabledChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* req,
             ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* resp) {
               return service->IncentivizedPackets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* req,
             ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* resp) {
               return service->IncentivizedPacket(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* req,
             ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* resp) {
               return service->IncentivizedPacketsForChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* req,
             ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* resp) {
               return service->TotalRecvFees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* req,
             ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* resp) {
               return service->TotalAckFees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* req,
             ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* resp) {
               return service->TotalTimeoutFees(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryPayeeRequest* req,
             ::ibc::applications::fee::v1::QueryPayeeResponse* resp) {
               return service->Payee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* req,
             ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* resp) {
               return service->CounterpartyPayee(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* req,
             ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* resp) {
               return service->FeeEnabledChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* req,
             ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* resp) {
               return service->FeeEnabledChannel(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::IncentivizedPackets(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::IncentivizedPacket(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::IncentivizedPacketsForChannel(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TotalRecvFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TotalAckFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TotalTimeoutFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Payee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::CounterpartyPayee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeeEnabledChannels(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::FeeEnabledChannel(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace applications
}  // namespace fee
}  // namespace v1


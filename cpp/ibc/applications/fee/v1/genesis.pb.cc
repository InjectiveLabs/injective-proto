// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/genesis.proto

#include "ibc/applications/fee/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identified_fees_)*/{}
  , /*decltype(_impl_.fee_enabled_channels_)*/{}
  , /*decltype(_impl_.registered_payees_)*/{}
  , /*decltype(_impl_.registered_counterparty_payees_)*/{}
  , /*decltype(_impl_.forward_relayers_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FeeEnabledChannel::FeeEnabledChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeeEnabledChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeeEnabledChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeeEnabledChannelDefaultTypeInternal() {}
  union {
    FeeEnabledChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeeEnabledChannelDefaultTypeInternal _FeeEnabledChannel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RegisteredPayee::RegisteredPayee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisteredPayeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredPayeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredPayeeDefaultTypeInternal() {}
  union {
    RegisteredPayee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredPayeeDefaultTypeInternal _RegisteredPayee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RegisteredCounterpartyPayee::RegisteredCounterpartyPayee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisteredCounterpartyPayeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredCounterpartyPayeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredCounterpartyPayeeDefaultTypeInternal() {}
  union {
    RegisteredCounterpartyPayee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredCounterpartyPayeeDefaultTypeInternal _RegisteredCounterpartyPayee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ForwardRelayerAddress::ForwardRelayerAddress(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_id_)*/nullptr} {}
struct ForwardRelayerAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForwardRelayerAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForwardRelayerAddressDefaultTypeInternal() {}
  union {
    ForwardRelayerAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForwardRelayerAddressDefaultTypeInternal _ForwardRelayerAddress_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _impl_.identified_fees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _impl_.fee_enabled_channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _impl_.registered_payees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _impl_.registered_counterparty_payees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::GenesisState, _impl_.forward_relayers_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::FeeEnabledChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::FeeEnabledChannel, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::FeeEnabledChannel, _impl_.channel_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredPayee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredPayee, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredPayee, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredPayee, _impl_.payee_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredCounterpartyPayee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredCounterpartyPayee, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredCounterpartyPayee, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::RegisteredCounterpartyPayee, _impl_.counterparty_payee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::ForwardRelayerAddress, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::ForwardRelayerAddress, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::ForwardRelayerAddress, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::ForwardRelayerAddress, _impl_.packet_id_),
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::fee::v1::GenesisState)},
        { 13, -1, -1, sizeof(::ibc::applications::fee::v1::FeeEnabledChannel)},
        { 23, -1, -1, sizeof(::ibc::applications::fee::v1::RegisteredPayee)},
        { 34, -1, -1, sizeof(::ibc::applications::fee::v1::RegisteredCounterpartyPayee)},
        { 45, 55, -1, sizeof(::ibc::applications::fee::v1::ForwardRelayerAddress)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::fee::v1::_GenesisState_default_instance_._instance,
    &::ibc::applications::fee::v1::_FeeEnabledChannel_default_instance_._instance,
    &::ibc::applications::fee::v1::_RegisteredPayee_default_instance_._instance,
    &::ibc::applications::fee::v1::_RegisteredCounterpartyPayee_default_instance_._instance,
    &::ibc::applications::fee::v1::_ForwardRelayerAddress_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%ibc/applications/fee/v1/genesis.proto\022"
    "\027ibc.applications.fee.v1\032\024gogoproto/gogo"
    ".proto\032!ibc/applications/fee/v1/fee.prot"
    "o\032!ibc/core/channel/v1/channel.proto\"\221\004\n"
    "\014GenesisState\022\\\n\017identified_fees\030\001 \003(\0132-"
    ".ibc.applications.fee.v1.IdentifiedPacke"
    "tFeesB\004\310\336\037\000R\016identifiedFees\022b\n\024fee_enabl"
    "ed_channels\030\002 \003(\0132*.ibc.applications.fee"
    ".v1.FeeEnabledChannelB\004\310\336\037\000R\022feeEnabledC"
    "hannels\022[\n\021registered_payees\030\003 \003(\0132(.ibc"
    ".applications.fee.v1.RegisteredPayeeB\004\310\336"
    "\037\000R\020registeredPayees\022\200\001\n\036registered_coun"
    "terparty_payees\030\004 \003(\01324.ibc.applications"
    ".fee.v1.RegisteredCounterpartyPayeeB\004\310\336\037"
    "\000R\034registeredCounterpartyPayees\022_\n\020forwa"
    "rd_relayers\030\005 \003(\0132..ibc.applications.fee"
    ".v1.ForwardRelayerAddressB\004\310\336\037\000R\017forward"
    "Relayers\"K\n\021FeeEnabledChannel\022\027\n\007port_id"
    "\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\tchan"
    "nelId\"`\n\017RegisteredPayee\022\035\n\nchannel_id\030\001"
    " \001(\tR\tchannelId\022\030\n\007relayer\030\002 \001(\tR\007relaye"
    "r\022\024\n\005payee\030\003 \001(\tR\005payee\"\205\001\n\033RegisteredCo"
    "unterpartyPayee\022\035\n\nchannel_id\030\001 \001(\tR\tcha"
    "nnelId\022\030\n\007relayer\030\002 \001(\tR\007relayer\022-\n\022coun"
    "terparty_payee\030\003 \001(\tR\021counterpartyPayee\""
    "s\n\025ForwardRelayerAddress\022\030\n\007address\030\001 \001("
    "\tR\007address\022@\n\tpacket_id\030\002 \001(\0132\035.ibc.core"
    ".channel.v1.PacketIdB\004\310\336\037\000R\010packetIdB\341\001\n"
    "\033com.ibc.applications.fee.v1B\014GenesisPro"
    "toP\001Z5github.com/cosmos/ibc-go/v7/module"
    "s/apps/29-fee/types\242\002\003IAF\252\002\027Ibc.Applicat"
    "ions.Fee.V1\312\002\027Ibc\\Applications\\Fee\\V1\342\002#"
    "Ibc\\Applications\\Fee\\V1\\GPBMetadata\352\002\032Ib"
    "c::Applications::Fee::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto = {
    false,
    false,
    1352,
    descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto,
    "ibc/applications/fee/v1/genesis.proto",
    &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto(&descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto);
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
};

void GenesisState::clear_identified_fees() {
  _internal_mutable_identified_fees()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identified_fees_){from._impl_.identified_fees_}
    , decltype(_impl_.fee_enabled_channels_){from._impl_.fee_enabled_channels_}
    , decltype(_impl_.registered_payees_){from._impl_.registered_payees_}
    , decltype(_impl_.registered_counterparty_payees_){from._impl_.registered_counterparty_payees_}
    , decltype(_impl_.forward_relayers_){from._impl_.forward_relayers_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.identified_fees_){arena}
    , decltype(_impl_.fee_enabled_channels_){arena}
    , decltype(_impl_.registered_payees_){arena}
    , decltype(_impl_.registered_counterparty_payees_){arena}
    , decltype(_impl_.forward_relayers_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_identified_fees()->~RepeatedPtrField();
  _internal_mutable_fee_enabled_channels()->~RepeatedPtrField();
  _internal_mutable_registered_payees()->~RepeatedPtrField();
  _internal_mutable_registered_counterparty_payees()->~RepeatedPtrField();
  _internal_mutable_forward_relayers()->~RepeatedPtrField();
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_identified_fees()->Clear();
  _internal_mutable_fee_enabled_channels()->Clear();
  _internal_mutable_registered_payees()->Clear();
  _internal_mutable_registered_counterparty_payees()->Clear();
  _internal_mutable_forward_relayers()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.fee.v1.IdentifiedPacketFees identified_fees = 1 [json_name = "identifiedFees", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identified_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 2 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fee_enabled_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.fee.v1.RegisteredPayee registered_payees = 3 [json_name = "registeredPayees", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registered_payees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.fee.v1.RegisteredCounterpartyPayee registered_counterparty_payees = 4 [json_name = "registeredCounterpartyPayees", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registered_counterparty_payees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.fee.v1.ForwardRelayerAddress forward_relayers = 5 [json_name = "forwardRelayers", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forward_relayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees identified_fees = 1 [json_name = "identifiedFees", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identified_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_identified_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 2 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fee_enabled_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_fee_enabled_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.fee.v1.RegisteredPayee registered_payees = 3 [json_name = "registeredPayees", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_registered_payees_size()); i < n; i++) {
    const auto& repfield = this->_internal_registered_payees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.fee.v1.RegisteredCounterpartyPayee registered_counterparty_payees = 4 [json_name = "registeredCounterpartyPayees", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_registered_counterparty_payees_size()); i < n; i++) {
    const auto& repfield = this->_internal_registered_counterparty_payees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.fee.v1.ForwardRelayerAddress forward_relayers = 5 [json_name = "forwardRelayers", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forward_relayers_size()); i < n; i++) {
    const auto& repfield = this->_internal_forward_relayers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees identified_fees = 1 [json_name = "identifiedFees", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_identified_fees_size();
  for (const auto& msg : this->_internal_identified_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 2 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fee_enabled_channels_size();
  for (const auto& msg : this->_internal_fee_enabled_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.fee.v1.RegisteredPayee registered_payees = 3 [json_name = "registeredPayees", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_registered_payees_size();
  for (const auto& msg : this->_internal_registered_payees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.fee.v1.RegisteredCounterpartyPayee registered_counterparty_payees = 4 [json_name = "registeredCounterpartyPayees", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_registered_counterparty_payees_size();
  for (const auto& msg : this->_internal_registered_counterparty_payees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.fee.v1.ForwardRelayerAddress forward_relayers = 5 [json_name = "forwardRelayers", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_forward_relayers_size();
  for (const auto& msg : this->_internal_forward_relayers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_identified_fees()->MergeFrom(from._internal_identified_fees());
  _this->_internal_mutable_fee_enabled_channels()->MergeFrom(from._internal_fee_enabled_channels());
  _this->_internal_mutable_registered_payees()->MergeFrom(from._internal_registered_payees());
  _this->_internal_mutable_registered_counterparty_payees()->MergeFrom(from._internal_registered_counterparty_payees());
  _this->_internal_mutable_forward_relayers()->MergeFrom(from._internal_forward_relayers());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_identified_fees()->InternalSwap(other->_internal_mutable_identified_fees());
  _internal_mutable_fee_enabled_channels()->InternalSwap(other->_internal_mutable_fee_enabled_channels());
  _internal_mutable_registered_payees()->InternalSwap(other->_internal_mutable_registered_payees());
  _internal_mutable_registered_counterparty_payees()->InternalSwap(other->_internal_mutable_registered_counterparty_payees());
  _internal_mutable_forward_relayers()->InternalSwap(other->_internal_mutable_forward_relayers());
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[0]);
}
// ===================================================================

class FeeEnabledChannel::_Internal {
 public:
};

FeeEnabledChannel::FeeEnabledChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.FeeEnabledChannel)
}
FeeEnabledChannel::FeeEnabledChannel(const FeeEnabledChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeeEnabledChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.FeeEnabledChannel)
}

inline void FeeEnabledChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeeEnabledChannel::~FeeEnabledChannel() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.FeeEnabledChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeeEnabledChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void FeeEnabledChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeeEnabledChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.FeeEnabledChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeeEnabledChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.FeeEnabledChannel.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.FeeEnabledChannel.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FeeEnabledChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.FeeEnabledChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.FeeEnabledChannel.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.FeeEnabledChannel.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.FeeEnabledChannel)
  return target;
}

::size_t FeeEnabledChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.FeeEnabledChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeeEnabledChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeeEnabledChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeeEnabledChannel::GetClassData() const { return &_class_data_; }


void FeeEnabledChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeeEnabledChannel*>(&to_msg);
  auto& from = static_cast<const FeeEnabledChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.FeeEnabledChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeeEnabledChannel::CopyFrom(const FeeEnabledChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.FeeEnabledChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeEnabledChannel::IsInitialized() const {
  return true;
}

void FeeEnabledChannel::InternalSwap(FeeEnabledChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeEnabledChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[1]);
}
// ===================================================================

class RegisteredPayee::_Internal {
 public:
};

RegisteredPayee::RegisteredPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.RegisteredPayee)
}
RegisteredPayee::RegisteredPayee(const RegisteredPayee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredPayee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee().empty()) {
    _this->_impl_.payee_.Set(from._internal_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.RegisteredPayee)
}

inline void RegisteredPayee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredPayee::~RegisteredPayee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.RegisteredPayee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredPayee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
  _impl_.payee_.Destroy();
}

void RegisteredPayee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredPayee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.RegisteredPayee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _impl_.payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredPayee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredPayee.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 2 [json_name = "relayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredPayee.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string payee = 3 [json_name = "payee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredPayee.payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisteredPayee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.RegisteredPayee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredPayee.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredPayee.relayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string payee = 3 [json_name = "payee"];
  if (!this->_internal_payee().empty()) {
    const std::string& _s = this->_internal_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredPayee.payee");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.RegisteredPayee)
  return target;
}

::size_t RegisteredPayee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.RegisteredPayee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string payee = 3 [json_name = "payee"];
  if (!this->_internal_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredPayee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredPayee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredPayee::GetClassData() const { return &_class_data_; }


void RegisteredPayee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredPayee*>(&to_msg);
  auto& from = static_cast<const RegisteredPayee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.RegisteredPayee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_payee().empty()) {
    _this->_internal_set_payee(from._internal_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredPayee::CopyFrom(const RegisteredPayee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.RegisteredPayee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredPayee::IsInitialized() const {
  return true;
}

void RegisteredPayee::InternalSwap(RegisteredPayee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payee_, lhs_arena,
                                       &other->_impl_.payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredPayee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[2]);
}
// ===================================================================

class RegisteredCounterpartyPayee::_Internal {
 public:
};

RegisteredCounterpartyPayee::RegisteredCounterpartyPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
}
RegisteredCounterpartyPayee::RegisteredCounterpartyPayee(const RegisteredCounterpartyPayee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredCounterpartyPayee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_payee().empty()) {
    _this->_impl_.counterparty_payee_.Set(from._internal_counterparty_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
}

inline void RegisteredCounterpartyPayee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredCounterpartyPayee::~RegisteredCounterpartyPayee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredCounterpartyPayee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
  _impl_.counterparty_payee_.Destroy();
}

void RegisteredCounterpartyPayee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredCounterpartyPayee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _impl_.counterparty_payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredCounterpartyPayee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 2 [json_name = "relayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_payee = 3 [json_name = "counterpartyPayee"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_counterparty_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisteredCounterpartyPayee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string counterparty_payee = 3 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    const std::string& _s = this->_internal_counterparty_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  return target;
}

::size_t RegisteredCounterpartyPayee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string counterparty_payee = 3 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredCounterpartyPayee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredCounterpartyPayee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredCounterpartyPayee::GetClassData() const { return &_class_data_; }


void RegisteredCounterpartyPayee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredCounterpartyPayee*>(&to_msg);
  auto& from = static_cast<const RegisteredCounterpartyPayee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_counterparty_payee().empty()) {
    _this->_internal_set_counterparty_payee(from._internal_counterparty_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredCounterpartyPayee::CopyFrom(const RegisteredCounterpartyPayee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredCounterpartyPayee::IsInitialized() const {
  return true;
}

void RegisteredCounterpartyPayee::InternalSwap(RegisteredCounterpartyPayee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_payee_, lhs_arena,
                                       &other->_impl_.counterparty_payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredCounterpartyPayee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[3]);
}
// ===================================================================

class ForwardRelayerAddress::_Internal {
 public:
  using HasBits = decltype(std::declval<ForwardRelayerAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ForwardRelayerAddress, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const ForwardRelayerAddress* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
ForwardRelayerAddress::_Internal::packet_id(const ForwardRelayerAddress* msg) {
  return *msg->_impl_.packet_id_;
}
void ForwardRelayerAddress::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ForwardRelayerAddress::ForwardRelayerAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.ForwardRelayerAddress)
}
ForwardRelayerAddress::ForwardRelayerAddress(const ForwardRelayerAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForwardRelayerAddress* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.packet_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.ForwardRelayerAddress)
}

inline void ForwardRelayerAddress::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.address_) {}

    , decltype(_impl_.packet_id_){nullptr}
  };
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForwardRelayerAddress::~ForwardRelayerAddress() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.ForwardRelayerAddress)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForwardRelayerAddress::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void ForwardRelayerAddress::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForwardRelayerAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.ForwardRelayerAddress)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForwardRelayerAddress::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string address = 1 [json_name = "address"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.ForwardRelayerAddress.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.PacketId packet_id = 2 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ForwardRelayerAddress::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.ForwardRelayerAddress)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.ForwardRelayerAddress.address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 2 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.ForwardRelayerAddress)
  return target;
}

::size_t ForwardRelayerAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.ForwardRelayerAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // .ibc.core.channel.v1.PacketId packet_id = 2 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForwardRelayerAddress::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForwardRelayerAddress::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForwardRelayerAddress::GetClassData() const { return &_class_data_; }


void ForwardRelayerAddress::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForwardRelayerAddress*>(&to_msg);
  auto& from = static_cast<const ForwardRelayerAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.ForwardRelayerAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForwardRelayerAddress::CopyFrom(const ForwardRelayerAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.ForwardRelayerAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardRelayerAddress::IsInitialized() const {
  return true;
}

void ForwardRelayerAddress::InternalSwap(ForwardRelayerAddress* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardRelayerAddress::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::GenesisState*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::FeeEnabledChannel*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::FeeEnabledChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::FeeEnabledChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::RegisteredPayee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::RegisteredPayee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::RegisteredPayee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::RegisteredCounterpartyPayee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::ForwardRelayerAddress*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::ForwardRelayerAddress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::ForwardRelayerAddress >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

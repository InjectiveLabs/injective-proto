// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/fee/v1/query.proto
#ifndef GRPC_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto__INCLUDED

#include "ibc/applications/fee/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

// Query defines the ICS29 gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.applications.fee.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // IncentivizedPackets returns all incentivized packets and their associated fees
    virtual ::grpc::Status IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>> AsyncIncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>>(AsyncIncentivizedPacketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>> PrepareAsyncIncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>>(PrepareAsyncIncentivizedPacketsRaw(context, request, cq));
    }
    // IncentivizedPacket returns all packet fees for a packet given its identifier
    virtual ::grpc::Status IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>> AsyncIncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>>(AsyncIncentivizedPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>> PrepareAsyncIncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>>(PrepareAsyncIncentivizedPacketRaw(context, request, cq));
    }
    // Gets all incentivized packets for a specific channel
    virtual ::grpc::Status IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>> AsyncIncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>>(AsyncIncentivizedPacketsForChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>> PrepareAsyncIncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>>(PrepareAsyncIncentivizedPacketsForChannelRaw(context, request, cq));
    }
    // TotalRecvFees returns the total receive fees for a packet given its identifier
    virtual ::grpc::Status TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>> AsyncTotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>>(AsyncTotalRecvFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>> PrepareAsyncTotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>>(PrepareAsyncTotalRecvFeesRaw(context, request, cq));
    }
    // TotalAckFees returns the total acknowledgement fees for a packet given its identifier
    virtual ::grpc::Status TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>> AsyncTotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>>(AsyncTotalAckFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>> PrepareAsyncTotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>>(PrepareAsyncTotalAckFeesRaw(context, request, cq));
    }
    // TotalTimeoutFees returns the total timeout fees for a packet given its identifier
    virtual ::grpc::Status TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>> AsyncTotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>>(AsyncTotalTimeoutFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>> PrepareAsyncTotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>>(PrepareAsyncTotalTimeoutFeesRaw(context, request, cq));
    }
    // Payee returns the registered payee address for a specific channel given the relayer address
    virtual ::grpc::Status Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::ibc::applications::fee::v1::QueryPayeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>> AsyncPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>>(AsyncPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>> PrepareAsyncPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>>(PrepareAsyncPayeeRaw(context, request, cq));
    }
    // CounterpartyPayee returns the registered counterparty payee for forward relaying
    virtual ::grpc::Status CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>> AsyncCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>>(AsyncCounterpartyPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>> PrepareAsyncCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>>(PrepareAsyncCounterpartyPayeeRaw(context, request, cq));
    }
    // FeeEnabledChannels returns a list of all fee enabled channels
    virtual ::grpc::Status FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>> AsyncFeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>>(AsyncFeeEnabledChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>> PrepareAsyncFeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>>(PrepareAsyncFeeEnabledChannelsRaw(context, request, cq));
    }
    // FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
    virtual ::grpc::Status FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>> AsyncFeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>>(AsyncFeeEnabledChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>> PrepareAsyncFeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>>(PrepareAsyncFeeEnabledChannelRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // IncentivizedPackets returns all incentivized packets and their associated fees
      virtual void IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // IncentivizedPacket returns all packet fees for a packet given its identifier
      virtual void IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets all incentivized packets for a specific channel
      virtual void IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TotalRecvFees returns the total receive fees for a packet given its identifier
      virtual void TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TotalAckFees returns the total acknowledgement fees for a packet given its identifier
      virtual void TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TotalTimeoutFees returns the total timeout fees for a packet given its identifier
      virtual void TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Payee returns the registered payee address for a specific channel given the relayer address
      virtual void Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // CounterpartyPayee returns the registered counterparty payee for forward relaying
      virtual void CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // FeeEnabledChannels returns a list of all fee enabled channels
      virtual void FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
      virtual void FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* AsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* PrepareAsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* AsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* PrepareAsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* AsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* PrepareAsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* AsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* PrepareAsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* AsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* PrepareAsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* AsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* PrepareAsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>* AsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryPayeeResponse>* PrepareAsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* AsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* PrepareAsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* AsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* PrepareAsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* AsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* PrepareAsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>> AsyncIncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>>(AsyncIncentivizedPacketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>> PrepareAsyncIncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>>(PrepareAsyncIncentivizedPacketsRaw(context, request, cq));
    }
    ::grpc::Status IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>> AsyncIncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>>(AsyncIncentivizedPacketRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>> PrepareAsyncIncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>>(PrepareAsyncIncentivizedPacketRaw(context, request, cq));
    }
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>> AsyncIncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>>(AsyncIncentivizedPacketsForChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>> PrepareAsyncIncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>>(PrepareAsyncIncentivizedPacketsForChannelRaw(context, request, cq));
    }
    ::grpc::Status TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>> AsyncTotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>>(AsyncTotalRecvFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>> PrepareAsyncTotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>>(PrepareAsyncTotalRecvFeesRaw(context, request, cq));
    }
    ::grpc::Status TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>> AsyncTotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>>(AsyncTotalAckFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>> PrepareAsyncTotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>>(PrepareAsyncTotalAckFeesRaw(context, request, cq));
    }
    ::grpc::Status TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>> AsyncTotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>>(AsyncTotalTimeoutFeesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>> PrepareAsyncTotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>>(PrepareAsyncTotalTimeoutFeesRaw(context, request, cq));
    }
    ::grpc::Status Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::ibc::applications::fee::v1::QueryPayeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>> AsyncPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>>(AsyncPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>> PrepareAsyncPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>>(PrepareAsyncPayeeRaw(context, request, cq));
    }
    ::grpc::Status CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>> AsyncCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>>(AsyncCounterpartyPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>> PrepareAsyncCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>>(PrepareAsyncCounterpartyPayeeRaw(context, request, cq));
    }
    ::grpc::Status FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>> AsyncFeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>>(AsyncFeeEnabledChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>> PrepareAsyncFeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>>(PrepareAsyncFeeEnabledChannelsRaw(context, request, cq));
    }
    ::grpc::Status FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>> AsyncFeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>>(AsyncFeeEnabledChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>> PrepareAsyncFeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>>(PrepareAsyncFeeEnabledChannelRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, std::function<void(::grpc::Status)>) override;
      void IncentivizedPackets(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, std::function<void(::grpc::Status)>) override;
      void IncentivizedPacket(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void IncentivizedPacketsForChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, std::function<void(::grpc::Status)>) override;
      void TotalRecvFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, std::function<void(::grpc::Status)>) override;
      void TotalAckFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, std::function<void(::grpc::Status)>) override;
      void TotalTimeoutFees(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, std::function<void(::grpc::Status)>) override;
      void Payee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, std::function<void(::grpc::Status)>) override;
      void CounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void FeeEnabledChannels(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void FeeEnabledChannel(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* AsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* PrepareAsyncIncentivizedPacketsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* AsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* PrepareAsyncIncentivizedPacketRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* AsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* PrepareAsyncIncentivizedPacketsForChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* AsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* PrepareAsyncTotalRecvFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* AsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* PrepareAsyncTotalAckFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* AsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* PrepareAsyncTotalTimeoutFeesRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>* AsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryPayeeResponse>* PrepareAsyncPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* AsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* PrepareAsyncCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* AsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* PrepareAsyncFeeEnabledChannelsRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* AsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* PrepareAsyncFeeEnabledChannelRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IncentivizedPackets_;
    const ::grpc::internal::RpcMethod rpcmethod_IncentivizedPacket_;
    const ::grpc::internal::RpcMethod rpcmethod_IncentivizedPacketsForChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalRecvFees_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalAckFees_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalTimeoutFees_;
    const ::grpc::internal::RpcMethod rpcmethod_Payee_;
    const ::grpc::internal::RpcMethod rpcmethod_CounterpartyPayee_;
    const ::grpc::internal::RpcMethod rpcmethod_FeeEnabledChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_FeeEnabledChannel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // IncentivizedPackets returns all incentivized packets and their associated fees
    virtual ::grpc::Status IncentivizedPackets(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response);
    // IncentivizedPacket returns all packet fees for a packet given its identifier
    virtual ::grpc::Status IncentivizedPacket(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response);
    // Gets all incentivized packets for a specific channel
    virtual ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response);
    // TotalRecvFees returns the total receive fees for a packet given its identifier
    virtual ::grpc::Status TotalRecvFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response);
    // TotalAckFees returns the total acknowledgement fees for a packet given its identifier
    virtual ::grpc::Status TotalAckFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response);
    // TotalTimeoutFees returns the total timeout fees for a packet given its identifier
    virtual ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response);
    // Payee returns the registered payee address for a specific channel given the relayer address
    virtual ::grpc::Status Payee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response);
    // CounterpartyPayee returns the registered counterparty payee for forward relaying
    virtual ::grpc::Status CounterpartyPayee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response);
    // FeeEnabledChannels returns a list of all fee enabled channels
    virtual ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response);
    // FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
    virtual ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPackets(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPacket(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPacketsForChannel(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalRecvFees(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalAckFees(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTimeoutFees(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Payee() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayee(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryPayeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCounterpartyPayee(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeeEnabledChannels(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeeEnabledChannel(::grpc::ServerContext* context, ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IncentivizedPackets<WithAsyncMethod_IncentivizedPacket<WithAsyncMethod_IncentivizedPacketsForChannel<WithAsyncMethod_TotalRecvFees<WithAsyncMethod_TotalAckFees<WithAsyncMethod_TotalTimeoutFees<WithAsyncMethod_Payee<WithAsyncMethod_CounterpartyPayee<WithAsyncMethod_FeeEnabledChannels<WithAsyncMethod_FeeEnabledChannel<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* response) { return this->IncentivizedPackets(context, request, response); }));}
    void SetMessageAllocatorFor_IncentivizedPackets(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPackets(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* response) { return this->IncentivizedPacket(context, request, response); }));}
    void SetMessageAllocatorFor_IncentivizedPacket(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPacket(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* request, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* response) { return this->IncentivizedPacketsForChannel(context, request, response); }));}
    void SetMessageAllocatorFor_IncentivizedPacketsForChannel(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPacketsForChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* response) { return this->TotalRecvFees(context, request, response); }));}
    void SetMessageAllocatorFor_TotalRecvFees(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalRecvFees(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* response) { return this->TotalAckFees(context, request, response); }));}
    void SetMessageAllocatorFor_TotalAckFees(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalAckFees(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* request, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* response) { return this->TotalTimeoutFees(context, request, response); }));}
    void SetMessageAllocatorFor_TotalTimeoutFees(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalTimeoutFees(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Payee() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryPayeeRequest* request, ::ibc::applications::fee::v1::QueryPayeeResponse* response) { return this->Payee(context, request, response); }));}
    void SetMessageAllocatorFor_Payee(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Payee(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* request, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* response) { return this->CounterpartyPayee(context, request, response); }));}
    void SetMessageAllocatorFor_CounterpartyPayee(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CounterpartyPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* response) { return this->FeeEnabledChannels(context, request, response); }));}
    void SetMessageAllocatorFor_FeeEnabledChannels(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeeEnabledChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* request, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* response) { return this->FeeEnabledChannel(context, request, response); }));}
    void SetMessageAllocatorFor_FeeEnabledChannel(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeeEnabledChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_IncentivizedPackets<WithCallbackMethod_IncentivizedPacket<WithCallbackMethod_IncentivizedPacketsForChannel<WithCallbackMethod_TotalRecvFees<WithCallbackMethod_TotalAckFees<WithCallbackMethod_TotalTimeoutFees<WithCallbackMethod_Payee<WithCallbackMethod_CounterpartyPayee<WithCallbackMethod_FeeEnabledChannels<WithCallbackMethod_FeeEnabledChannel<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Payee() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPackets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPacket(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIncentivizedPacketsForChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalRecvFees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalAckFees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalTimeoutFees(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Payee() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCounterpartyPayee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeeEnabledChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFeeEnabledChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IncentivizedPackets(context, request, response); }));
    }
    ~WithRawCallbackMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPackets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IncentivizedPacket(context, request, response); }));
    }
    ~WithRawCallbackMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPacket(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IncentivizedPacketsForChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IncentivizedPacketsForChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalRecvFees(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalRecvFees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalAckFees(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalAckFees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalTimeoutFees(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalTimeoutFees(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Payee() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Payee(context, request, response); }));
    }
    ~WithRawCallbackMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Payee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CounterpartyPayee(context, request, response); }));
    }
    ~WithRawCallbackMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CounterpartyPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FeeEnabledChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeeEnabledChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FeeEnabledChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FeeEnabledChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncentivizedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IncentivizedPackets() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* streamer) {
                       return this->StreamedIncentivizedPackets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IncentivizedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncentivizedPackets(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncentivizedPackets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest,::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncentivizedPacket : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IncentivizedPacket() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* streamer) {
                       return this->StreamedIncentivizedPacket(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IncentivizedPacket() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncentivizedPacket(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncentivizedPacket(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest,::ibc::applications::fee::v1::QueryIncentivizedPacketResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IncentivizedPacketsForChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IncentivizedPacketsForChannel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* streamer) {
                       return this->StreamedIncentivizedPacketsForChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IncentivizedPacketsForChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IncentivizedPacketsForChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIncentivizedPacketsForChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest,::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalRecvFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalRecvFees() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* streamer) {
                       return this->StreamedTotalRecvFees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalRecvFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalRecvFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalRecvFees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest,::ibc::applications::fee::v1::QueryTotalRecvFeesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalAckFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalAckFees() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryTotalAckFeesRequest, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* streamer) {
                       return this->StreamedTotalAckFees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalAckFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalAckFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalAckFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalAckFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalAckFees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest,::ibc::applications::fee::v1::QueryTotalAckFeesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalTimeoutFees : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalTimeoutFees() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* streamer) {
                       return this->StreamedTotalTimeoutFees(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalTimeoutFees() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalTimeoutFees(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest* /*request*/, ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalTimeoutFees(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest,::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Payee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Payee() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryPayeeRequest, ::ibc::applications::fee::v1::QueryPayeeResponse>* streamer) {
                       return this->StreamedPayee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Payee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Payee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPayee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryPayeeRequest,::ibc::applications::fee::v1::QueryPayeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CounterpartyPayee() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* streamer) {
                       return this->StreamedCounterpartyPayee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest* /*request*/, ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCounterpartyPayee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest,::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FeeEnabledChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FeeEnabledChannels() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* streamer) {
                       return this->StreamedFeeEnabledChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FeeEnabledChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FeeEnabledChannels(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFeeEnabledChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest,::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FeeEnabledChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FeeEnabledChannel() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* streamer) {
                       return this->StreamedFeeEnabledChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FeeEnabledChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FeeEnabledChannel(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest* /*request*/, ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFeeEnabledChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest,::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IncentivizedPackets<WithStreamedUnaryMethod_IncentivizedPacket<WithStreamedUnaryMethod_IncentivizedPacketsForChannel<WithStreamedUnaryMethod_TotalRecvFees<WithStreamedUnaryMethod_TotalAckFees<WithStreamedUnaryMethod_TotalTimeoutFees<WithStreamedUnaryMethod_Payee<WithStreamedUnaryMethod_CounterpartyPayee<WithStreamedUnaryMethod_FeeEnabledChannels<WithStreamedUnaryMethod_FeeEnabledChannel<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_IncentivizedPackets<WithStreamedUnaryMethod_IncentivizedPacket<WithStreamedUnaryMethod_IncentivizedPacketsForChannel<WithStreamedUnaryMethod_TotalRecvFees<WithStreamedUnaryMethod_TotalAckFees<WithStreamedUnaryMethod_TotalTimeoutFees<WithStreamedUnaryMethod_Payee<WithStreamedUnaryMethod_CounterpartyPayee<WithStreamedUnaryMethod_FeeEnabledChannels<WithStreamedUnaryMethod_FeeEnabledChannel<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc


#endif  // GRPC_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/applications/fee/v1/fee.pb.h"
#include "ibc/core/channel/v1/channel.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
class FeeEnabledChannel;
struct FeeEnabledChannelDefaultTypeInternal;
extern FeeEnabledChannelDefaultTypeInternal _FeeEnabledChannel_default_instance_;
class ForwardRelayerAddress;
struct ForwardRelayerAddressDefaultTypeInternal;
extern ForwardRelayerAddressDefaultTypeInternal _ForwardRelayerAddress_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class RegisteredCounterpartyPayee;
struct RegisteredCounterpartyPayeeDefaultTypeInternal;
extern RegisteredCounterpartyPayeeDefaultTypeInternal _RegisteredCounterpartyPayee_default_instance_;
class RegisteredPayee;
struct RegisteredPayeeDefaultTypeInternal;
extern RegisteredPayeeDefaultTypeInternal _RegisteredPayee_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::fee::v1::FeeEnabledChannel* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::FeeEnabledChannel>(Arena*);
template <>
::ibc::applications::fee::v1::ForwardRelayerAddress* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::ForwardRelayerAddress>(Arena*);
template <>
::ibc::applications::fee::v1::GenesisState* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::GenesisState>(Arena*);
template <>
::ibc::applications::fee::v1::RegisteredCounterpartyPayee* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::RegisteredCounterpartyPayee>(Arena*);
template <>
::ibc::applications::fee::v1::RegisteredPayee* Arena::CreateMaybeMessage<::ibc::applications::fee::v1::RegisteredPayee>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifiedFeesFieldNumber = 1,
    kFeeEnabledChannelsFieldNumber = 2,
    kRegisteredPayeesFieldNumber = 3,
    kRegisteredCounterpartyPayeesFieldNumber = 4,
    kForwardRelayersFieldNumber = 5,
  };
  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees identified_fees = 1 [json_name = "identifiedFees", (.gogoproto.nullable) = false];
  int identified_fees_size() const;
  private:
  int _internal_identified_fees_size() const;

  public:
  void clear_identified_fees() ;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* mutable_identified_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
      mutable_identified_fees();
  private:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& _internal_identified_fees(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _internal_add_identified_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>& _internal_identified_fees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>* _internal_mutable_identified_fees();
  public:
  const ::ibc::applications::fee::v1::IdentifiedPacketFees& identified_fees(int index) const;
  ::ibc::applications::fee::v1::IdentifiedPacketFees* add_identified_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
      identified_fees() const;
  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 2 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  int fee_enabled_channels_size() const;
  private:
  int _internal_fee_enabled_channels_size() const;

  public:
  void clear_fee_enabled_channels() ;
  ::ibc::applications::fee::v1::FeeEnabledChannel* mutable_fee_enabled_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >*
      mutable_fee_enabled_channels();
  private:
  const ::ibc::applications::fee::v1::FeeEnabledChannel& _internal_fee_enabled_channels(int index) const;
  ::ibc::applications::fee::v1::FeeEnabledChannel* _internal_add_fee_enabled_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>& _internal_fee_enabled_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>* _internal_mutable_fee_enabled_channels();
  public:
  const ::ibc::applications::fee::v1::FeeEnabledChannel& fee_enabled_channels(int index) const;
  ::ibc::applications::fee::v1::FeeEnabledChannel* add_fee_enabled_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >&
      fee_enabled_channels() const;
  // repeated .ibc.applications.fee.v1.RegisteredPayee registered_payees = 3 [json_name = "registeredPayees", (.gogoproto.nullable) = false];
  int registered_payees_size() const;
  private:
  int _internal_registered_payees_size() const;

  public:
  void clear_registered_payees() ;
  ::ibc::applications::fee::v1::RegisteredPayee* mutable_registered_payees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredPayee >*
      mutable_registered_payees();
  private:
  const ::ibc::applications::fee::v1::RegisteredPayee& _internal_registered_payees(int index) const;
  ::ibc::applications::fee::v1::RegisteredPayee* _internal_add_registered_payees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredPayee>& _internal_registered_payees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredPayee>* _internal_mutable_registered_payees();
  public:
  const ::ibc::applications::fee::v1::RegisteredPayee& registered_payees(int index) const;
  ::ibc::applications::fee::v1::RegisteredPayee* add_registered_payees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredPayee >&
      registered_payees() const;
  // repeated .ibc.applications.fee.v1.RegisteredCounterpartyPayee registered_counterparty_payees = 4 [json_name = "registeredCounterpartyPayees", (.gogoproto.nullable) = false];
  int registered_counterparty_payees_size() const;
  private:
  int _internal_registered_counterparty_payees_size() const;

  public:
  void clear_registered_counterparty_payees() ;
  ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* mutable_registered_counterparty_payees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >*
      mutable_registered_counterparty_payees();
  private:
  const ::ibc::applications::fee::v1::RegisteredCounterpartyPayee& _internal_registered_counterparty_payees(int index) const;
  ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* _internal_add_registered_counterparty_payees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredCounterpartyPayee>& _internal_registered_counterparty_payees() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredCounterpartyPayee>* _internal_mutable_registered_counterparty_payees();
  public:
  const ::ibc::applications::fee::v1::RegisteredCounterpartyPayee& registered_counterparty_payees(int index) const;
  ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* add_registered_counterparty_payees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >&
      registered_counterparty_payees() const;
  // repeated .ibc.applications.fee.v1.ForwardRelayerAddress forward_relayers = 5 [json_name = "forwardRelayers", (.gogoproto.nullable) = false];
  int forward_relayers_size() const;
  private:
  int _internal_forward_relayers_size() const;

  public:
  void clear_forward_relayers() ;
  ::ibc::applications::fee::v1::ForwardRelayerAddress* mutable_forward_relayers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::ForwardRelayerAddress >*
      mutable_forward_relayers();
  private:
  const ::ibc::applications::fee::v1::ForwardRelayerAddress& _internal_forward_relayers(int index) const;
  ::ibc::applications::fee::v1::ForwardRelayerAddress* _internal_add_forward_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::ForwardRelayerAddress>& _internal_forward_relayers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::ForwardRelayerAddress>* _internal_mutable_forward_relayers();
  public:
  const ::ibc::applications::fee::v1::ForwardRelayerAddress& forward_relayers(int index) const;
  ::ibc::applications::fee::v1::ForwardRelayerAddress* add_forward_relayers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::ForwardRelayerAddress >&
      forward_relayers() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees > identified_fees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel > fee_enabled_channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredPayee > registered_payees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee > registered_counterparty_payees_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::ForwardRelayerAddress > forward_relayers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class FeeEnabledChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.FeeEnabledChannel) */ {
 public:
  inline FeeEnabledChannel() : FeeEnabledChannel(nullptr) {}
  ~FeeEnabledChannel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeeEnabledChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeeEnabledChannel(const FeeEnabledChannel& from);
  FeeEnabledChannel(FeeEnabledChannel&& from) noexcept
    : FeeEnabledChannel() {
    *this = ::std::move(from);
  }

  inline FeeEnabledChannel& operator=(const FeeEnabledChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeEnabledChannel& operator=(FeeEnabledChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeeEnabledChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeeEnabledChannel* internal_default_instance() {
    return reinterpret_cast<const FeeEnabledChannel*>(
               &_FeeEnabledChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeeEnabledChannel& a, FeeEnabledChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeEnabledChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeeEnabledChannel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeeEnabledChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeeEnabledChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FeeEnabledChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FeeEnabledChannel& from) {
    FeeEnabledChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeEnabledChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.FeeEnabledChannel";
  }
  protected:
  explicit FeeEnabledChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.FeeEnabledChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class RegisteredPayee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.RegisteredPayee) */ {
 public:
  inline RegisteredPayee() : RegisteredPayee(nullptr) {}
  ~RegisteredPayee() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteredPayee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisteredPayee(const RegisteredPayee& from);
  RegisteredPayee(RegisteredPayee&& from) noexcept
    : RegisteredPayee() {
    *this = ::std::move(from);
  }

  inline RegisteredPayee& operator=(const RegisteredPayee& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredPayee& operator=(RegisteredPayee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteredPayee& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteredPayee* internal_default_instance() {
    return reinterpret_cast<const RegisteredPayee*>(
               &_RegisteredPayee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisteredPayee& a, RegisteredPayee& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredPayee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredPayee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteredPayee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteredPayee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisteredPayee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisteredPayee& from) {
    RegisteredPayee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredPayee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.RegisteredPayee";
  }
  protected:
  explicit RegisteredPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kRelayerFieldNumber = 2,
    kPayeeFieldNumber = 3,
  };
  // string channel_id = 1 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string relayer = 2 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // string payee = 3 [json_name = "payee"];
  void clear_payee() ;
  const std::string& payee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payee(Arg_&& arg, Args_... args);
  std::string* mutable_payee();
  PROTOBUF_NODISCARD std::string* release_payee();
  void set_allocated_payee(std::string* ptr);

  private:
  const std::string& _internal_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payee(
      const std::string& value);
  std::string* _internal_mutable_payee();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.RegisteredPayee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class RegisteredCounterpartyPayee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.RegisteredCounterpartyPayee) */ {
 public:
  inline RegisteredCounterpartyPayee() : RegisteredCounterpartyPayee(nullptr) {}
  ~RegisteredCounterpartyPayee() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteredCounterpartyPayee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisteredCounterpartyPayee(const RegisteredCounterpartyPayee& from);
  RegisteredCounterpartyPayee(RegisteredCounterpartyPayee&& from) noexcept
    : RegisteredCounterpartyPayee() {
    *this = ::std::move(from);
  }

  inline RegisteredCounterpartyPayee& operator=(const RegisteredCounterpartyPayee& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredCounterpartyPayee& operator=(RegisteredCounterpartyPayee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteredCounterpartyPayee& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteredCounterpartyPayee* internal_default_instance() {
    return reinterpret_cast<const RegisteredCounterpartyPayee*>(
               &_RegisteredCounterpartyPayee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisteredCounterpartyPayee& a, RegisteredCounterpartyPayee& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredCounterpartyPayee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredCounterpartyPayee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteredCounterpartyPayee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteredCounterpartyPayee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisteredCounterpartyPayee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisteredCounterpartyPayee& from) {
    RegisteredCounterpartyPayee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredCounterpartyPayee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.RegisteredCounterpartyPayee";
  }
  protected:
  explicit RegisteredCounterpartyPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kRelayerFieldNumber = 2,
    kCounterpartyPayeeFieldNumber = 3,
  };
  // string channel_id = 1 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string relayer = 2 [json_name = "relayer"];
  void clear_relayer() ;
  const std::string& relayer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_relayer(Arg_&& arg, Args_... args);
  std::string* mutable_relayer();
  PROTOBUF_NODISCARD std::string* release_relayer();
  void set_allocated_relayer(std::string* ptr);

  private:
  const std::string& _internal_relayer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relayer(
      const std::string& value);
  std::string* _internal_mutable_relayer();

  public:
  // string counterparty_payee = 3 [json_name = "counterpartyPayee"];
  void clear_counterparty_payee() ;
  const std::string& counterparty_payee() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_counterparty_payee(Arg_&& arg, Args_... args);
  std::string* mutable_counterparty_payee();
  PROTOBUF_NODISCARD std::string* release_counterparty_payee();
  void set_allocated_counterparty_payee(std::string* ptr);

  private:
  const std::string& _internal_counterparty_payee() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counterparty_payee(
      const std::string& value);
  std::string* _internal_mutable_counterparty_payee();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.RegisteredCounterpartyPayee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relayer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counterparty_payee_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ForwardRelayerAddress final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.fee.v1.ForwardRelayerAddress) */ {
 public:
  inline ForwardRelayerAddress() : ForwardRelayerAddress(nullptr) {}
  ~ForwardRelayerAddress() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ForwardRelayerAddress(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ForwardRelayerAddress(const ForwardRelayerAddress& from);
  ForwardRelayerAddress(ForwardRelayerAddress&& from) noexcept
    : ForwardRelayerAddress() {
    *this = ::std::move(from);
  }

  inline ForwardRelayerAddress& operator=(const ForwardRelayerAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardRelayerAddress& operator=(ForwardRelayerAddress&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ForwardRelayerAddress& default_instance() {
    return *internal_default_instance();
  }
  static inline const ForwardRelayerAddress* internal_default_instance() {
    return reinterpret_cast<const ForwardRelayerAddress*>(
               &_ForwardRelayerAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ForwardRelayerAddress& a, ForwardRelayerAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardRelayerAddress* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ForwardRelayerAddress* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ForwardRelayerAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ForwardRelayerAddress>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ForwardRelayerAddress& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ForwardRelayerAddress& from) {
    ForwardRelayerAddress::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardRelayerAddress* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.fee.v1.ForwardRelayerAddress";
  }
  protected:
  explicit ForwardRelayerAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPacketIdFieldNumber = 2,
  };
  // string address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .ibc.core.channel.v1.PacketId packet_id = 2 [json_name = "packetId", (.gogoproto.nullable) = false];
  bool has_packet_id() const;
  void clear_packet_id() ;
  const ::ibc::core::channel::v1::PacketId& packet_id() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::PacketId* release_packet_id();
  ::ibc::core::channel::v1::PacketId* mutable_packet_id();
  void set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id);
  private:
  const ::ibc::core::channel::v1::PacketId& _internal_packet_id() const;
  ::ibc::core::channel::v1::PacketId* _internal_mutable_packet_id();
  public:
  void unsafe_arena_set_allocated_packet_id(
      ::ibc::core::channel::v1::PacketId* packet_id);
  ::ibc::core::channel::v1::PacketId* unsafe_arena_release_packet_id();
  // @@protoc_insertion_point(class_scope:ibc.applications.fee.v1.ForwardRelayerAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::ibc::core::channel::v1::PacketId* packet_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// repeated .ibc.applications.fee.v1.IdentifiedPacketFees identified_fees = 1 [json_name = "identifiedFees", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_identified_fees_size() const {
  return _impl_.identified_fees_.size();
}
inline int GenesisState::identified_fees_size() const {
  return _internal_identified_fees_size();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* GenesisState::mutable_identified_fees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.GenesisState.identified_fees)
  return _internal_mutable_identified_fees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >*
GenesisState::mutable_identified_fees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.GenesisState.identified_fees)
  return _internal_mutable_identified_fees();
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& GenesisState::_internal_identified_fees(int index) const {
  return _internal_identified_fees().Get(index);
}
inline const ::ibc::applications::fee::v1::IdentifiedPacketFees& GenesisState::identified_fees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.GenesisState.identified_fees)
  return _internal_identified_fees(index);
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* GenesisState::_internal_add_identified_fees() {
  return _internal_mutable_identified_fees()->Add();
}
inline ::ibc::applications::fee::v1::IdentifiedPacketFees* GenesisState::add_identified_fees() {
  ::ibc::applications::fee::v1::IdentifiedPacketFees* _add = _internal_add_identified_fees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.GenesisState.identified_fees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::IdentifiedPacketFees >&
GenesisState::identified_fees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.GenesisState.identified_fees)
  return _internal_identified_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>&
GenesisState::_internal_identified_fees() const {
  return _impl_.identified_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::IdentifiedPacketFees>*
GenesisState::_internal_mutable_identified_fees() {
  return &_impl_.identified_fees_;
}

// repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 2 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_fee_enabled_channels_size() const {
  return _impl_.fee_enabled_channels_.size();
}
inline int GenesisState::fee_enabled_channels_size() const {
  return _internal_fee_enabled_channels_size();
}
inline void GenesisState::clear_fee_enabled_channels() {
  _internal_mutable_fee_enabled_channels()->Clear();
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* GenesisState::mutable_fee_enabled_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.GenesisState.fee_enabled_channels)
  return _internal_mutable_fee_enabled_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >*
GenesisState::mutable_fee_enabled_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.GenesisState.fee_enabled_channels)
  return _internal_mutable_fee_enabled_channels();
}
inline const ::ibc::applications::fee::v1::FeeEnabledChannel& GenesisState::_internal_fee_enabled_channels(int index) const {
  return _internal_fee_enabled_channels().Get(index);
}
inline const ::ibc::applications::fee::v1::FeeEnabledChannel& GenesisState::fee_enabled_channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.GenesisState.fee_enabled_channels)
  return _internal_fee_enabled_channels(index);
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* GenesisState::_internal_add_fee_enabled_channels() {
  return _internal_mutable_fee_enabled_channels()->Add();
}
inline ::ibc::applications::fee::v1::FeeEnabledChannel* GenesisState::add_fee_enabled_channels() {
  ::ibc::applications::fee::v1::FeeEnabledChannel* _add = _internal_add_fee_enabled_channels();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.GenesisState.fee_enabled_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::FeeEnabledChannel >&
GenesisState::fee_enabled_channels() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.GenesisState.fee_enabled_channels)
  return _internal_fee_enabled_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>&
GenesisState::_internal_fee_enabled_channels() const {
  return _impl_.fee_enabled_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::FeeEnabledChannel>*
GenesisState::_internal_mutable_fee_enabled_channels() {
  return &_impl_.fee_enabled_channels_;
}

// repeated .ibc.applications.fee.v1.RegisteredPayee registered_payees = 3 [json_name = "registeredPayees", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_registered_payees_size() const {
  return _impl_.registered_payees_.size();
}
inline int GenesisState::registered_payees_size() const {
  return _internal_registered_payees_size();
}
inline void GenesisState::clear_registered_payees() {
  _internal_mutable_registered_payees()->Clear();
}
inline ::ibc::applications::fee::v1::RegisteredPayee* GenesisState::mutable_registered_payees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.GenesisState.registered_payees)
  return _internal_mutable_registered_payees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredPayee >*
GenesisState::mutable_registered_payees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.GenesisState.registered_payees)
  return _internal_mutable_registered_payees();
}
inline const ::ibc::applications::fee::v1::RegisteredPayee& GenesisState::_internal_registered_payees(int index) const {
  return _internal_registered_payees().Get(index);
}
inline const ::ibc::applications::fee::v1::RegisteredPayee& GenesisState::registered_payees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.GenesisState.registered_payees)
  return _internal_registered_payees(index);
}
inline ::ibc::applications::fee::v1::RegisteredPayee* GenesisState::_internal_add_registered_payees() {
  return _internal_mutable_registered_payees()->Add();
}
inline ::ibc::applications::fee::v1::RegisteredPayee* GenesisState::add_registered_payees() {
  ::ibc::applications::fee::v1::RegisteredPayee* _add = _internal_add_registered_payees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.GenesisState.registered_payees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredPayee >&
GenesisState::registered_payees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.GenesisState.registered_payees)
  return _internal_registered_payees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredPayee>&
GenesisState::_internal_registered_payees() const {
  return _impl_.registered_payees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredPayee>*
GenesisState::_internal_mutable_registered_payees() {
  return &_impl_.registered_payees_;
}

// repeated .ibc.applications.fee.v1.RegisteredCounterpartyPayee registered_counterparty_payees = 4 [json_name = "registeredCounterpartyPayees", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_registered_counterparty_payees_size() const {
  return _impl_.registered_counterparty_payees_.size();
}
inline int GenesisState::registered_counterparty_payees_size() const {
  return _internal_registered_counterparty_payees_size();
}
inline void GenesisState::clear_registered_counterparty_payees() {
  _internal_mutable_registered_counterparty_payees()->Clear();
}
inline ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* GenesisState::mutable_registered_counterparty_payees(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.GenesisState.registered_counterparty_payees)
  return _internal_mutable_registered_counterparty_payees()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >*
GenesisState::mutable_registered_counterparty_payees() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.GenesisState.registered_counterparty_payees)
  return _internal_mutable_registered_counterparty_payees();
}
inline const ::ibc::applications::fee::v1::RegisteredCounterpartyPayee& GenesisState::_internal_registered_counterparty_payees(int index) const {
  return _internal_registered_counterparty_payees().Get(index);
}
inline const ::ibc::applications::fee::v1::RegisteredCounterpartyPayee& GenesisState::registered_counterparty_payees(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.GenesisState.registered_counterparty_payees)
  return _internal_registered_counterparty_payees(index);
}
inline ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* GenesisState::_internal_add_registered_counterparty_payees() {
  return _internal_mutable_registered_counterparty_payees()->Add();
}
inline ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* GenesisState::add_registered_counterparty_payees() {
  ::ibc::applications::fee::v1::RegisteredCounterpartyPayee* _add = _internal_add_registered_counterparty_payees();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.GenesisState.registered_counterparty_payees)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::RegisteredCounterpartyPayee >&
GenesisState::registered_counterparty_payees() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.GenesisState.registered_counterparty_payees)
  return _internal_registered_counterparty_payees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredCounterpartyPayee>&
GenesisState::_internal_registered_counterparty_payees() const {
  return _impl_.registered_counterparty_payees_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::RegisteredCounterpartyPayee>*
GenesisState::_internal_mutable_registered_counterparty_payees() {
  return &_impl_.registered_counterparty_payees_;
}

// repeated .ibc.applications.fee.v1.ForwardRelayerAddress forward_relayers = 5 [json_name = "forwardRelayers", (.gogoproto.nullable) = false];
inline int GenesisState::_internal_forward_relayers_size() const {
  return _impl_.forward_relayers_.size();
}
inline int GenesisState::forward_relayers_size() const {
  return _internal_forward_relayers_size();
}
inline void GenesisState::clear_forward_relayers() {
  _internal_mutable_forward_relayers()->Clear();
}
inline ::ibc::applications::fee::v1::ForwardRelayerAddress* GenesisState::mutable_forward_relayers(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.GenesisState.forward_relayers)
  return _internal_mutable_forward_relayers()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::ForwardRelayerAddress >*
GenesisState::mutable_forward_relayers() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.fee.v1.GenesisState.forward_relayers)
  return _internal_mutable_forward_relayers();
}
inline const ::ibc::applications::fee::v1::ForwardRelayerAddress& GenesisState::_internal_forward_relayers(int index) const {
  return _internal_forward_relayers().Get(index);
}
inline const ::ibc::applications::fee::v1::ForwardRelayerAddress& GenesisState::forward_relayers(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.GenesisState.forward_relayers)
  return _internal_forward_relayers(index);
}
inline ::ibc::applications::fee::v1::ForwardRelayerAddress* GenesisState::_internal_add_forward_relayers() {
  return _internal_mutable_forward_relayers()->Add();
}
inline ::ibc::applications::fee::v1::ForwardRelayerAddress* GenesisState::add_forward_relayers() {
  ::ibc::applications::fee::v1::ForwardRelayerAddress* _add = _internal_add_forward_relayers();
  // @@protoc_insertion_point(field_add:ibc.applications.fee.v1.GenesisState.forward_relayers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::fee::v1::ForwardRelayerAddress >&
GenesisState::forward_relayers() const {
  // @@protoc_insertion_point(field_list:ibc.applications.fee.v1.GenesisState.forward_relayers)
  return _internal_forward_relayers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::ForwardRelayerAddress>&
GenesisState::_internal_forward_relayers() const {
  return _impl_.forward_relayers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::fee::v1::ForwardRelayerAddress>*
GenesisState::_internal_mutable_forward_relayers() {
  return &_impl_.forward_relayers_;
}

// -------------------------------------------------------------------

// FeeEnabledChannel

// string port_id = 1 [json_name = "portId"];
inline void FeeEnabledChannel::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& FeeEnabledChannel::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.FeeEnabledChannel.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeeEnabledChannel::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.FeeEnabledChannel.port_id)
}
inline std::string* FeeEnabledChannel::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.FeeEnabledChannel.port_id)
  return _s;
}
inline const std::string& FeeEnabledChannel::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void FeeEnabledChannel::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeeEnabledChannel::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeeEnabledChannel::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.FeeEnabledChannel.port_id)
  return _impl_.port_id_.Release();
}
inline void FeeEnabledChannel::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.FeeEnabledChannel.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void FeeEnabledChannel::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& FeeEnabledChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.FeeEnabledChannel.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeeEnabledChannel::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.FeeEnabledChannel.channel_id)
}
inline std::string* FeeEnabledChannel::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.FeeEnabledChannel.channel_id)
  return _s;
}
inline const std::string& FeeEnabledChannel::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void FeeEnabledChannel::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* FeeEnabledChannel::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* FeeEnabledChannel::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.FeeEnabledChannel.channel_id)
  return _impl_.channel_id_.Release();
}
inline void FeeEnabledChannel::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.FeeEnabledChannel.channel_id)
}

// -------------------------------------------------------------------

// RegisteredPayee

// string channel_id = 1 [json_name = "channelId"];
inline void RegisteredPayee::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& RegisteredPayee::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredPayee.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredPayee::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredPayee.channel_id)
}
inline std::string* RegisteredPayee::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredPayee.channel_id)
  return _s;
}
inline const std::string& RegisteredPayee::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void RegisteredPayee::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredPayee::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredPayee::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredPayee.channel_id)
  return _impl_.channel_id_.Release();
}
inline void RegisteredPayee::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredPayee.channel_id)
}

// string relayer = 2 [json_name = "relayer"];
inline void RegisteredPayee::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& RegisteredPayee::relayer() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredPayee.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredPayee::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredPayee.relayer)
}
inline std::string* RegisteredPayee::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredPayee.relayer)
  return _s;
}
inline const std::string& RegisteredPayee::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void RegisteredPayee::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredPayee::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredPayee::release_relayer() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredPayee.relayer)
  return _impl_.relayer_.Release();
}
inline void RegisteredPayee::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredPayee.relayer)
}

// string payee = 3 [json_name = "payee"];
inline void RegisteredPayee::clear_payee() {
  _impl_.payee_.ClearToEmpty();
}
inline const std::string& RegisteredPayee::payee() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredPayee.payee)
  return _internal_payee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredPayee::set_payee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.payee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredPayee.payee)
}
inline std::string* RegisteredPayee::mutable_payee() {
  std::string* _s = _internal_mutable_payee();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredPayee.payee)
  return _s;
}
inline const std::string& RegisteredPayee::_internal_payee() const {
  return _impl_.payee_.Get();
}
inline void RegisteredPayee::_internal_set_payee(const std::string& value) {
  ;


  _impl_.payee_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredPayee::_internal_mutable_payee() {
  ;
  return _impl_.payee_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredPayee::release_payee() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredPayee.payee)
  return _impl_.payee_.Release();
}
inline void RegisteredPayee::set_allocated_payee(std::string* value) {
  _impl_.payee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payee_.IsDefault()) {
          _impl_.payee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredPayee.payee)
}

// -------------------------------------------------------------------

// RegisteredCounterpartyPayee

// string channel_id = 1 [json_name = "channelId"];
inline void RegisteredCounterpartyPayee::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& RegisteredCounterpartyPayee::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredCounterpartyPayee::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id)
}
inline std::string* RegisteredCounterpartyPayee::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id)
  return _s;
}
inline const std::string& RegisteredCounterpartyPayee::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void RegisteredCounterpartyPayee::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id)
  return _impl_.channel_id_.Release();
}
inline void RegisteredCounterpartyPayee::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredCounterpartyPayee.channel_id)
}

// string relayer = 2 [json_name = "relayer"];
inline void RegisteredCounterpartyPayee::clear_relayer() {
  _impl_.relayer_.ClearToEmpty();
}
inline const std::string& RegisteredCounterpartyPayee::relayer() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer)
  return _internal_relayer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredCounterpartyPayee::set_relayer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.relayer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer)
}
inline std::string* RegisteredCounterpartyPayee::mutable_relayer() {
  std::string* _s = _internal_mutable_relayer();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer)
  return _s;
}
inline const std::string& RegisteredCounterpartyPayee::_internal_relayer() const {
  return _impl_.relayer_.Get();
}
inline void RegisteredCounterpartyPayee::_internal_set_relayer(const std::string& value) {
  ;


  _impl_.relayer_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::_internal_mutable_relayer() {
  ;
  return _impl_.relayer_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::release_relayer() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer)
  return _impl_.relayer_.Release();
}
inline void RegisteredCounterpartyPayee::set_allocated_relayer(std::string* value) {
  _impl_.relayer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.relayer_.IsDefault()) {
          _impl_.relayer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredCounterpartyPayee.relayer)
}

// string counterparty_payee = 3 [json_name = "counterpartyPayee"];
inline void RegisteredCounterpartyPayee::clear_counterparty_payee() {
  _impl_.counterparty_payee_.ClearToEmpty();
}
inline const std::string& RegisteredCounterpartyPayee::counterparty_payee() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee)
  return _internal_counterparty_payee();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredCounterpartyPayee::set_counterparty_payee(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.counterparty_payee_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee)
}
inline std::string* RegisteredCounterpartyPayee::mutable_counterparty_payee() {
  std::string* _s = _internal_mutable_counterparty_payee();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee)
  return _s;
}
inline const std::string& RegisteredCounterpartyPayee::_internal_counterparty_payee() const {
  return _impl_.counterparty_payee_.Get();
}
inline void RegisteredCounterpartyPayee::_internal_set_counterparty_payee(const std::string& value) {
  ;


  _impl_.counterparty_payee_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::_internal_mutable_counterparty_payee() {
  ;
  return _impl_.counterparty_payee_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredCounterpartyPayee::release_counterparty_payee() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee)
  return _impl_.counterparty_payee_.Release();
}
inline void RegisteredCounterpartyPayee::set_allocated_counterparty_payee(std::string* value) {
  _impl_.counterparty_payee_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.counterparty_payee_.IsDefault()) {
          _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.RegisteredCounterpartyPayee.counterparty_payee)
}

// -------------------------------------------------------------------

// ForwardRelayerAddress

// string address = 1 [json_name = "address"];
inline void ForwardRelayerAddress::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& ForwardRelayerAddress::address() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.ForwardRelayerAddress.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ForwardRelayerAddress::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.fee.v1.ForwardRelayerAddress.address)
}
inline std::string* ForwardRelayerAddress::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.ForwardRelayerAddress.address)
  return _s;
}
inline const std::string& ForwardRelayerAddress::_internal_address() const {
  return _impl_.address_.Get();
}
inline void ForwardRelayerAddress::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* ForwardRelayerAddress::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* ForwardRelayerAddress::release_address() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.ForwardRelayerAddress.address)
  return _impl_.address_.Release();
}
inline void ForwardRelayerAddress::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.ForwardRelayerAddress.address)
}

// .ibc.core.channel.v1.PacketId packet_id = 2 [json_name = "packetId", (.gogoproto.nullable) = false];
inline bool ForwardRelayerAddress::has_packet_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_id_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::PacketId& ForwardRelayerAddress::_internal_packet_id() const {
  const ::ibc::core::channel::v1::PacketId* p = _impl_.packet_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::PacketId&>(
      ::ibc::core::channel::v1::_PacketId_default_instance_);
}
inline const ::ibc::core::channel::v1::PacketId& ForwardRelayerAddress::packet_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.fee.v1.ForwardRelayerAddress.packet_id)
  return _internal_packet_id();
}
inline void ForwardRelayerAddress::unsafe_arena_set_allocated_packet_id(
    ::ibc::core::channel::v1::PacketId* packet_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  _impl_.packet_id_ = packet_id;
  if (packet_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.fee.v1.ForwardRelayerAddress.packet_id)
}
inline ::ibc::core::channel::v1::PacketId* ForwardRelayerAddress::release_packet_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* ForwardRelayerAddress::unsafe_arena_release_packet_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.fee.v1.ForwardRelayerAddress.packet_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::PacketId* temp = _impl_.packet_id_;
  _impl_.packet_id_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::PacketId* ForwardRelayerAddress::_internal_mutable_packet_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::PacketId>(GetArenaForAllocation());
    _impl_.packet_id_ = p;
  }
  return _impl_.packet_id_;
}
inline ::ibc::core::channel::v1::PacketId* ForwardRelayerAddress::mutable_packet_id() {
  ::ibc::core::channel::v1::PacketId* _msg = _internal_mutable_packet_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.fee.v1.ForwardRelayerAddress.packet_id)
  return _msg;
}
inline void ForwardRelayerAddress::set_allocated_packet_id(::ibc::core::channel::v1::PacketId* packet_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_id_);
  }
  if (packet_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_id));
    if (message_arena != submessage_arena) {
      packet_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_id_ = packet_id;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.fee.v1.ForwardRelayerAddress.packet_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto_2epb_2eh

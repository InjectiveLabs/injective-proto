// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/tx.proto

#include "ibc/applications/fee/v1/tx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MsgRegisterPayee::MsgRegisterPayee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgRegisterPayeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRegisterPayeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRegisterPayeeDefaultTypeInternal() {}
  union {
    MsgRegisterPayee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRegisterPayeeDefaultTypeInternal _MsgRegisterPayee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRegisterPayeeResponse::MsgRegisterPayeeResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgRegisterPayeeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRegisterPayeeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRegisterPayeeResponseDefaultTypeInternal() {}
  union {
    MsgRegisterPayeeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRegisterPayeeResponseDefaultTypeInternal _MsgRegisterPayeeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRegisterCounterpartyPayee::MsgRegisterCounterpartyPayee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgRegisterCounterpartyPayeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRegisterCounterpartyPayeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRegisterCounterpartyPayeeDefaultTypeInternal() {}
  union {
    MsgRegisterCounterpartyPayee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRegisterCounterpartyPayeeDefaultTypeInternal _MsgRegisterCounterpartyPayee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRegisterCounterpartyPayeeResponse::MsgRegisterCounterpartyPayeeResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgRegisterCounterpartyPayeeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRegisterCounterpartyPayeeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRegisterCounterpartyPayeeResponseDefaultTypeInternal() {}
  union {
    MsgRegisterCounterpartyPayeeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRegisterCounterpartyPayeeResponseDefaultTypeInternal _MsgRegisterCounterpartyPayeeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPayPacketFee::MsgPayPacketFee(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relayers_)*/{}
  , /*decltype(_impl_.source_port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fee_)*/nullptr} {}
struct MsgPayPacketFeeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPayPacketFeeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPayPacketFeeDefaultTypeInternal() {}
  union {
    MsgPayPacketFee _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPayPacketFeeDefaultTypeInternal _MsgPayPacketFee_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPayPacketFeeResponse::MsgPayPacketFeeResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgPayPacketFeeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPayPacketFeeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPayPacketFeeResponseDefaultTypeInternal() {}
  union {
    MsgPayPacketFeeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPayPacketFeeResponseDefaultTypeInternal _MsgPayPacketFeeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPayPacketFeeAsync::MsgPayPacketFeeAsync(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr
  , /*decltype(_impl_.packet_fee_)*/nullptr} {}
struct MsgPayPacketFeeAsyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPayPacketFeeAsyncDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPayPacketFeeAsyncDefaultTypeInternal() {}
  union {
    MsgPayPacketFeeAsync _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPayPacketFeeAsyncDefaultTypeInternal _MsgPayPacketFeeAsync_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgPayPacketFeeAsyncResponse::MsgPayPacketFeeAsyncResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgPayPacketFeeAsyncResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPayPacketFeeAsyncResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPayPacketFeeAsyncResponseDefaultTypeInternal() {}
  union {
    MsgPayPacketFeeAsyncResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPayPacketFeeAsyncResponseDefaultTypeInternal _MsgPayPacketFeeAsyncResponse_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[8];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayee, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayee, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayee, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayee, _impl_.payee_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterPayeeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, _impl_.relayer_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, _impl_.counterparty_payee_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_.fee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_.source_port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_.source_channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_.signer_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFee, _impl_.relayers_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeAsync, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeAsync, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeAsync, _impl_.packet_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeAsync, _impl_.packet_fee_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::fee::v1::MsgRegisterPayee)},
        { 12, -1, -1, sizeof(::ibc::applications::fee::v1::MsgRegisterPayeeResponse)},
        { 20, -1, -1, sizeof(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee)},
        { 32, -1, -1, sizeof(::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse)},
        { 40, 53, -1, sizeof(::ibc::applications::fee::v1::MsgPayPacketFee)},
        { 58, -1, -1, sizeof(::ibc::applications::fee::v1::MsgPayPacketFeeResponse)},
        { 66, 76, -1, sizeof(::ibc::applications::fee::v1::MsgPayPacketFeeAsync)},
        { 78, -1, -1, sizeof(::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::fee::v1::_MsgRegisterPayee_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgRegisterPayeeResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgRegisterCounterpartyPayee_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgRegisterCounterpartyPayeeResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgPayPacketFee_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgPayPacketFeeResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgPayPacketFeeAsync_default_instance_._instance,
    &::ibc::applications::fee::v1::_MsgPayPacketFeeAsyncResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n ibc/applications/fee/v1/tx.proto\022\027ibc."
    "applications.fee.v1\032\024gogoproto/gogo.prot"
    "o\032!ibc/applications/fee/v1/fee.proto\032!ib"
    "c/core/channel/v1/channel.proto\032\027cosmos/"
    "msg/v1/msg.proto\"\214\001\n\020MsgRegisterPayee\022\027\n"
    "\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001"
    "(\tR\tchannelId\022\030\n\007relayer\030\003 \001(\tR\007relayer\022"
    "\024\n\005payee\030\004 \001(\tR\005payee:\020\210\240\037\000\202\347\260*\007relayer\""
    "\032\n\030MsgRegisterPayeeResponse\"\261\001\n\034MsgRegis"
    "terCounterpartyPayee\022\027\n\007port_id\030\001 \001(\tR\006p"
    "ortId\022\035\n\nchannel_id\030\002 \001(\tR\tchannelId\022\030\n\007"
    "relayer\030\003 \001(\tR\007relayer\022-\n\022counterparty_p"
    "ayee\030\004 \001(\tR\021counterpartyPayee:\020\210\240\037\000\202\347\260*\007"
    "relayer\"&\n$MsgRegisterCounterpartyPayeeR"
    "esponse\"\336\001\n\017MsgPayPacketFee\0224\n\003fee\030\001 \001(\013"
    "2\034.ibc.applications.fee.v1.FeeB\004\310\336\037\000R\003fe"
    "e\022$\n\016source_port_id\030\002 \001(\tR\014sourcePortId\022"
    "*\n\021source_channel_id\030\003 \001(\tR\017sourceChanne"
    "lId\022\026\n\006signer\030\004 \001(\tR\006signer\022\032\n\010relayers\030"
    "\005 \003(\tR\010relayers:\017\210\240\037\000\202\347\260*\006signer\"\031\n\027MsgP"
    "ayPacketFeeResponse\"\304\001\n\024MsgPayPacketFeeA"
    "sync\022@\n\tpacket_id\030\001 \001(\0132\035.ibc.core.chann"
    "el.v1.PacketIdB\004\310\336\037\000R\010packetId\022G\n\npacket"
    "_fee\030\002 \001(\0132\".ibc.applications.fee.v1.Pac"
    "ketFeeB\004\310\336\037\000R\tpacketFee:!\210\240\037\000\202\347\260*\030packet"
    "_fee.refundaddress\"\036\n\034MsgPayPacketFeeAsy"
    "ncResponse2\366\003\n\003Msg\022m\n\rRegisterPayee\022).ib"
    "c.applications.fee.v1.MsgRegisterPayee\0321"
    ".ibc.applications.fee.v1.MsgRegisterPaye"
    "eResponse\022\221\001\n\031RegisterCounterpartyPayee\022"
    "5.ibc.applications.fee.v1.MsgRegisterCou"
    "nterpartyPayee\032=.ibc.applications.fee.v1"
    ".MsgRegisterCounterpartyPayeeResponse\022j\n"
    "\014PayPacketFee\022(.ibc.applications.fee.v1."
    "MsgPayPacketFee\0320.ibc.applications.fee.v"
    "1.MsgPayPacketFeeResponse\022y\n\021PayPacketFe"
    "eAsync\022-.ibc.applications.fee.v1.MsgPayP"
    "acketFeeAsync\0325.ibc.applications.fee.v1."
    "MsgPayPacketFeeAsyncResponse\032\005\200\347\260*\001B\334\001\n\033"
    "com.ibc.applications.fee.v1B\007TxProtoP\001Z5"
    "github.com/cosmos/ibc-go/v7/modules/apps"
    "/29-fee/types\242\002\003IAF\252\002\027Ibc.Applications.F"
    "ee.V1\312\002\027Ibc\\Applications\\Fee\\V1\342\002#Ibc\\Ap"
    "plications\\Fee\\V1\\GPBMetadata\352\002\032Ibc::App"
    "lications::Fee::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto = {
    false,
    false,
    1786,
    descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto,
    "ibc/applications/fee/v1/tx.proto",
    &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_deps,
    4,
    8,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto(&descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto);
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
// ===================================================================

class MsgRegisterPayee::_Internal {
 public:
};

MsgRegisterPayee::MsgRegisterPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgRegisterPayee)
}
MsgRegisterPayee::MsgRegisterPayee(const MsgRegisterPayee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRegisterPayee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee().empty()) {
    _this->_impl_.payee_.Set(from._internal_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgRegisterPayee)
}

inline void MsgRegisterPayee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgRegisterPayee::~MsgRegisterPayee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.MsgRegisterPayee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRegisterPayee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
  _impl_.payee_.Destroy();
}

void MsgRegisterPayee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRegisterPayee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.MsgRegisterPayee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _impl_.payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterPayee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterPayee.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterPayee.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 3 [json_name = "relayer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterPayee.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string payee = 4 [json_name = "payee"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterPayee.payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgRegisterPayee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.MsgRegisterPayee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterPayee.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterPayee.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string relayer = 3 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterPayee.relayer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string payee = 4 [json_name = "payee"];
  if (!this->_internal_payee().empty()) {
    const std::string& _s = this->_internal_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterPayee.payee");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.MsgRegisterPayee)
  return target;
}

::size_t MsgRegisterPayee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.MsgRegisterPayee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 3 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string payee = 4 [json_name = "payee"];
  if (!this->_internal_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRegisterPayee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRegisterPayee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRegisterPayee::GetClassData() const { return &_class_data_; }


void MsgRegisterPayee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRegisterPayee*>(&to_msg);
  auto& from = static_cast<const MsgRegisterPayee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.MsgRegisterPayee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_payee().empty()) {
    _this->_internal_set_payee(from._internal_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRegisterPayee::CopyFrom(const MsgRegisterPayee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.MsgRegisterPayee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterPayee::IsInitialized() const {
  return true;
}

void MsgRegisterPayee::InternalSwap(MsgRegisterPayee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payee_, lhs_arena,
                                       &other->_impl_.payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterPayee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[0]);
}
// ===================================================================

class MsgRegisterPayeeResponse::_Internal {
 public:
};

MsgRegisterPayeeResponse::MsgRegisterPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgRegisterPayeeResponse)
}
MsgRegisterPayeeResponse::MsgRegisterPayeeResponse(const MsgRegisterPayeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgRegisterPayeeResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgRegisterPayeeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRegisterPayeeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRegisterPayeeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterPayeeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[1]);
}
// ===================================================================

class MsgRegisterCounterpartyPayee::_Internal {
 public:
};

MsgRegisterCounterpartyPayee::MsgRegisterCounterpartyPayee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
}
MsgRegisterCounterpartyPayee::MsgRegisterCounterpartyPayee(const MsgRegisterCounterpartyPayee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRegisterCounterpartyPayee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_payee().empty()) {
    _this->_impl_.counterparty_payee_.Set(from._internal_counterparty_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
}

inline void MsgRegisterCounterpartyPayee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgRegisterCounterpartyPayee::~MsgRegisterCounterpartyPayee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRegisterCounterpartyPayee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
  _impl_.counterparty_payee_.Destroy();
}

void MsgRegisterCounterpartyPayee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRegisterCounterpartyPayee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _impl_.counterparty_payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRegisterCounterpartyPayee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 3 [json_name = "relayer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_payee = 4 [json_name = "counterpartyPayee"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_counterparty_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.counterparty_payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgRegisterCounterpartyPayee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string relayer = 3 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.relayer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string counterparty_payee = 4 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    const std::string& _s = this->_internal_counterparty_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgRegisterCounterpartyPayee.counterparty_payee");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  return target;
}

::size_t MsgRegisterCounterpartyPayee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 3 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  // string counterparty_payee = 4 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRegisterCounterpartyPayee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRegisterCounterpartyPayee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRegisterCounterpartyPayee::GetClassData() const { return &_class_data_; }


void MsgRegisterCounterpartyPayee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRegisterCounterpartyPayee*>(&to_msg);
  auto& from = static_cast<const MsgRegisterCounterpartyPayee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  if (!from._internal_counterparty_payee().empty()) {
    _this->_internal_set_counterparty_payee(from._internal_counterparty_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRegisterCounterpartyPayee::CopyFrom(const MsgRegisterCounterpartyPayee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.MsgRegisterCounterpartyPayee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRegisterCounterpartyPayee::IsInitialized() const {
  return true;
}

void MsgRegisterCounterpartyPayee::InternalSwap(MsgRegisterCounterpartyPayee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_payee_, lhs_arena,
                                       &other->_impl_.counterparty_payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterCounterpartyPayee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[2]);
}
// ===================================================================

class MsgRegisterCounterpartyPayeeResponse::_Internal {
 public:
};

MsgRegisterCounterpartyPayeeResponse::MsgRegisterCounterpartyPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse)
}
MsgRegisterCounterpartyPayeeResponse::MsgRegisterCounterpartyPayeeResponse(const MsgRegisterCounterpartyPayeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgRegisterCounterpartyPayeeResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgRegisterCounterpartyPayeeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRegisterCounterpartyPayeeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRegisterCounterpartyPayeeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgRegisterCounterpartyPayeeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[3]);
}
// ===================================================================

class MsgPayPacketFee::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgPayPacketFee>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgPayPacketFee, _impl_._has_bits_);
  static const ::ibc::applications::fee::v1::Fee& fee(const MsgPayPacketFee* msg);
  static void set_has_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::applications::fee::v1::Fee&
MsgPayPacketFee::_Internal::fee(const MsgPayPacketFee* msg) {
  return *msg->_impl_.fee_;
}
void MsgPayPacketFee::clear_fee() {
  if (_impl_.fee_ != nullptr) _impl_.fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgPayPacketFee::MsgPayPacketFee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgPayPacketFee)
}
MsgPayPacketFee::MsgPayPacketFee(const MsgPayPacketFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPayPacketFee* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relayers_){from._impl_.relayers_}
    , decltype(_impl_.source_port_id_) {}

    , decltype(_impl_.source_channel_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.fee_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_port_id().empty()) {
    _this->_impl_.source_port_id_.Set(from._internal_source_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.source_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_channel_id().empty()) {
    _this->_impl_.source_channel_id_.Set(from._internal_source_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.fee_ = new ::ibc::applications::fee::v1::Fee(*from._impl_.fee_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgPayPacketFee)
}

inline void MsgPayPacketFee::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relayers_){arena}
    , decltype(_impl_.source_port_id_) {}

    , decltype(_impl_.source_channel_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.fee_){nullptr}
  };
  _impl_.source_port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgPayPacketFee::~MsgPayPacketFee() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.MsgPayPacketFee)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPayPacketFee::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_relayers()->~RepeatedPtrField();
  _impl_.source_port_id_.Destroy();
  _impl_.source_channel_id_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.fee_;
}

void MsgPayPacketFee::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPayPacketFee::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.MsgPayPacketFee)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_relayers()->Clear();
  _impl_.source_port_id_.ClearToEmpty();
  _impl_.source_channel_id_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.fee_ != nullptr);
    _impl_.fee_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPayPacketFee::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_port_id = 2 [json_name = "sourcePortId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgPayPacketFee.source_port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_channel_id = 3 [json_name = "sourceChannelId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgPayPacketFee.source_channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 4 [json_name = "signer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgPayPacketFee.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string relayers = 5 [json_name = "relayers"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_relayers();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.MsgPayPacketFee.relayers"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgPayPacketFee::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.MsgPayPacketFee)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fee(this),
        _Internal::fee(this).GetCachedSize(), target, stream);
  }

  // string source_port_id = 2 [json_name = "sourcePortId"];
  if (!this->_internal_source_port_id().empty()) {
    const std::string& _s = this->_internal_source_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgPayPacketFee.source_port_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string source_channel_id = 3 [json_name = "sourceChannelId"];
  if (!this->_internal_source_channel_id().empty()) {
    const std::string& _s = this->_internal_source_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgPayPacketFee.source_channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgPayPacketFee.signer");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated string relayers = 5 [json_name = "relayers"];
  for (int i = 0, n = this->_internal_relayers_size(); i < n; ++i) {
    const auto& s = this->_internal_relayers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.MsgPayPacketFee.relayers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.MsgPayPacketFee)
  return target;
}

::size_t MsgPayPacketFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.MsgPayPacketFee)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string relayers = 5 [json_name = "relayers"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_relayers().size());
  for (int i = 0, n = _internal_relayers().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_relayers().Get(i));
  }

  // string source_port_id = 2 [json_name = "sourcePortId"];
  if (!this->_internal_source_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_port_id());
  }

  // string source_channel_id = 3 [json_name = "sourceChannelId"];
  if (!this->_internal_source_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_channel_id());
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.applications.fee.v1.Fee fee = 1 [json_name = "fee", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fee_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPayPacketFee::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPayPacketFee::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPayPacketFee::GetClassData() const { return &_class_data_; }


void MsgPayPacketFee::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPayPacketFee*>(&to_msg);
  auto& from = static_cast<const MsgPayPacketFee&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.MsgPayPacketFee)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relayers()->MergeFrom(from._internal_relayers());
  if (!from._internal_source_port_id().empty()) {
    _this->_internal_set_source_port_id(from._internal_source_port_id());
  }
  if (!from._internal_source_channel_id().empty()) {
    _this->_internal_set_source_channel_id(from._internal_source_channel_id());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_fee()->::ibc::applications::fee::v1::Fee::MergeFrom(
        from._internal_fee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPayPacketFee::CopyFrom(const MsgPayPacketFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.MsgPayPacketFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPayPacketFee::IsInitialized() const {
  return true;
}

void MsgPayPacketFee::InternalSwap(MsgPayPacketFee* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_relayers()->InternalSwap(
      other->_internal_mutable_relayers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_port_id_, lhs_arena,
                                       &other->_impl_.source_port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_channel_id_, lhs_arena,
                                       &other->_impl_.source_channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.fee_, other->_impl_.fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPayPacketFee::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[4]);
}
// ===================================================================

class MsgPayPacketFeeResponse::_Internal {
 public:
};

MsgPayPacketFeeResponse::MsgPayPacketFeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgPayPacketFeeResponse)
}
MsgPayPacketFeeResponse::MsgPayPacketFeeResponse(const MsgPayPacketFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgPayPacketFeeResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgPayPacketFeeResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPayPacketFeeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPayPacketFeeResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgPayPacketFeeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[5]);
}
// ===================================================================

class MsgPayPacketFeeAsync::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgPayPacketFeeAsync>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgPayPacketFeeAsync, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const MsgPayPacketFeeAsync* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::applications::fee::v1::PacketFee& packet_fee(const MsgPayPacketFeeAsync* msg);
  static void set_has_packet_fee(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::PacketId&
MsgPayPacketFeeAsync::_Internal::packet_id(const MsgPayPacketFeeAsync* msg) {
  return *msg->_impl_.packet_id_;
}
const ::ibc::applications::fee::v1::PacketFee&
MsgPayPacketFeeAsync::_Internal::packet_fee(const MsgPayPacketFeeAsync* msg) {
  return *msg->_impl_.packet_fee_;
}
void MsgPayPacketFeeAsync::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgPayPacketFeeAsync::clear_packet_fee() {
  if (_impl_.packet_fee_ != nullptr) _impl_.packet_fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgPayPacketFeeAsync::MsgPayPacketFeeAsync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
}
MsgPayPacketFeeAsync::MsgPayPacketFeeAsync(const MsgPayPacketFeeAsync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPayPacketFeeAsync* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_fee_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.packet_fee_ = new ::ibc::applications::fee::v1::PacketFee(*from._impl_.packet_fee_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
}

inline void MsgPayPacketFeeAsync::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.packet_fee_){nullptr}
  };
}

MsgPayPacketFeeAsync::~MsgPayPacketFeeAsync() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPayPacketFeeAsync::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
  if (this != internal_default_instance()) delete _impl_.packet_fee_;
}

void MsgPayPacketFeeAsync::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPayPacketFeeAsync::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_id_ != nullptr);
      _impl_.packet_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.packet_fee_ != nullptr);
      _impl_.packet_fee_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPayPacketFeeAsync::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.applications.fee.v1.PacketFee packet_fee = 2 [json_name = "packetFee", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_fee(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgPayPacketFeeAsync::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  // .ibc.applications.fee.v1.PacketFee packet_fee = 2 [json_name = "packetFee", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::packet_fee(this),
        _Internal::packet_fee(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  return target;
}

::size_t MsgPayPacketFeeAsync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_id_);
    }

    // .ibc.applications.fee.v1.PacketFee packet_fee = 2 [json_name = "packetFee", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_fee_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPayPacketFeeAsync::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPayPacketFeeAsync::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPayPacketFeeAsync::GetClassData() const { return &_class_data_; }


void MsgPayPacketFeeAsync::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPayPacketFeeAsync*>(&to_msg);
  auto& from = static_cast<const MsgPayPacketFeeAsync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
          from._internal_packet_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_packet_fee()->::ibc::applications::fee::v1::PacketFee::MergeFrom(
          from._internal_packet_fee());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPayPacketFeeAsync::CopyFrom(const MsgPayPacketFeeAsync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.MsgPayPacketFeeAsync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPayPacketFeeAsync::IsInitialized() const {
  return true;
}

void MsgPayPacketFeeAsync::InternalSwap(MsgPayPacketFeeAsync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPayPacketFeeAsync, _impl_.packet_fee_)
      + sizeof(MsgPayPacketFeeAsync::_impl_.packet_fee_)
      - PROTOBUF_FIELD_OFFSET(MsgPayPacketFeeAsync, _impl_.packet_id_)>(
          reinterpret_cast<char*>(&_impl_.packet_id_),
          reinterpret_cast<char*>(&other->_impl_.packet_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPayPacketFeeAsync::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[6]);
}
// ===================================================================

class MsgPayPacketFeeAsyncResponse::_Internal {
 public:
};

MsgPayPacketFeeAsyncResponse::MsgPayPacketFeeAsyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse)
}
MsgPayPacketFeeAsyncResponse::MsgPayPacketFeeAsyncResponse(const MsgPayPacketFeeAsyncResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgPayPacketFeeAsyncResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.MsgPayPacketFeeAsyncResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPayPacketFeeAsyncResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPayPacketFeeAsyncResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgPayPacketFeeAsyncResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgRegisterPayee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgRegisterPayee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgRegisterPayee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgRegisterPayeeResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgPayPacketFee*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgPayPacketFee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgPayPacketFee >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgPayPacketFeeResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgPayPacketFeeAsync*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

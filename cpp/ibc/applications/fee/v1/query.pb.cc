// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/fee/v1/query.proto

#include "ibc/applications/fee/v1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketsRequest::QueryIncentivizedPacketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.query_height_)*/ ::uint64_t{0u}
} {}
struct QueryIncentivizedPacketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketsRequestDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketsRequestDefaultTypeInternal _QueryIncentivizedPacketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketsResponse::QueryIncentivizedPacketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.incentivized_packets_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryIncentivizedPacketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketsResponseDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketsResponseDefaultTypeInternal _QueryIncentivizedPacketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketRequest::QueryIncentivizedPacketRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr
  , /*decltype(_impl_.query_height_)*/ ::uint64_t{0u}
} {}
struct QueryIncentivizedPacketRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketRequestDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketRequestDefaultTypeInternal _QueryIncentivizedPacketRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketResponse::QueryIncentivizedPacketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.incentivized_packet_)*/nullptr} {}
struct QueryIncentivizedPacketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketResponseDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketResponseDefaultTypeInternal _QueryIncentivizedPacketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelRequest::QueryIncentivizedPacketsForChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.query_height_)*/ ::uint64_t{0u}
} {}
struct QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketsForChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketsForChannelRequestDefaultTypeInternal _QueryIncentivizedPacketsForChannelRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelResponse::QueryIncentivizedPacketsForChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.incentivized_packets_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal() {}
  union {
    QueryIncentivizedPacketsForChannelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryIncentivizedPacketsForChannelResponseDefaultTypeInternal _QueryIncentivizedPacketsForChannelResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalRecvFeesRequest::QueryTotalRecvFeesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr} {}
struct QueryTotalRecvFeesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalRecvFeesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalRecvFeesRequestDefaultTypeInternal() {}
  union {
    QueryTotalRecvFeesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalRecvFeesRequestDefaultTypeInternal _QueryTotalRecvFeesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalRecvFeesResponse::QueryTotalRecvFeesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recv_fees_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTotalRecvFeesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalRecvFeesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalRecvFeesResponseDefaultTypeInternal() {}
  union {
    QueryTotalRecvFeesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalRecvFeesResponseDefaultTypeInternal _QueryTotalRecvFeesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalAckFeesRequest::QueryTotalAckFeesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr} {}
struct QueryTotalAckFeesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalAckFeesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalAckFeesRequestDefaultTypeInternal() {}
  union {
    QueryTotalAckFeesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalAckFeesRequestDefaultTypeInternal _QueryTotalAckFeesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalAckFeesResponse::QueryTotalAckFeesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ack_fees_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTotalAckFeesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalAckFeesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalAckFeesResponseDefaultTypeInternal() {}
  union {
    QueryTotalAckFeesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalAckFeesResponseDefaultTypeInternal _QueryTotalAckFeesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesRequest::QueryTotalTimeoutFeesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_id_)*/nullptr} {}
struct QueryTotalTimeoutFeesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalTimeoutFeesRequestDefaultTypeInternal() {}
  union {
    QueryTotalTimeoutFeesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalTimeoutFeesRequestDefaultTypeInternal _QueryTotalTimeoutFeesRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesResponse::QueryTotalTimeoutFeesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeout_fees_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryTotalTimeoutFeesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryTotalTimeoutFeesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryTotalTimeoutFeesResponseDefaultTypeInternal() {}
  union {
    QueryTotalTimeoutFeesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryTotalTimeoutFeesResponseDefaultTypeInternal _QueryTotalTimeoutFeesResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPayeeRequest::QueryPayeeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPayeeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPayeeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPayeeRequestDefaultTypeInternal() {}
  union {
    QueryPayeeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPayeeRequestDefaultTypeInternal _QueryPayeeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPayeeResponse::QueryPayeeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payee_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPayeeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPayeeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPayeeResponseDefaultTypeInternal() {}
  union {
    QueryPayeeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPayeeResponseDefaultTypeInternal _QueryPayeeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryCounterpartyPayeeRequest::QueryCounterpartyPayeeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.relayer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryCounterpartyPayeeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCounterpartyPayeeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCounterpartyPayeeRequestDefaultTypeInternal() {}
  union {
    QueryCounterpartyPayeeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCounterpartyPayeeRequestDefaultTypeInternal _QueryCounterpartyPayeeRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryCounterpartyPayeeResponse::QueryCounterpartyPayeeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.counterparty_payee_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryCounterpartyPayeeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryCounterpartyPayeeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryCounterpartyPayeeResponseDefaultTypeInternal() {}
  union {
    QueryCounterpartyPayeeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryCounterpartyPayeeResponseDefaultTypeInternal _QueryCounterpartyPayeeResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsRequest::QueryFeeEnabledChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.query_height_)*/ ::uint64_t{0u}
} {}
struct QueryFeeEnabledChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeEnabledChannelsRequestDefaultTypeInternal() {}
  union {
    QueryFeeEnabledChannelsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeEnabledChannelsRequestDefaultTypeInternal _QueryFeeEnabledChannelsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsResponse::QueryFeeEnabledChannelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.fee_enabled_channels_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryFeeEnabledChannelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeEnabledChannelsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeEnabledChannelsResponseDefaultTypeInternal() {}
  union {
    QueryFeeEnabledChannelsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeEnabledChannelsResponseDefaultTypeInternal _QueryFeeEnabledChannelsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeEnabledChannelRequest::QueryFeeEnabledChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeeEnabledChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeEnabledChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeEnabledChannelRequestDefaultTypeInternal() {}
  union {
    QueryFeeEnabledChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeEnabledChannelRequestDefaultTypeInternal _QueryFeeEnabledChannelRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryFeeEnabledChannelResponse::QueryFeeEnabledChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fee_enabled_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryFeeEnabledChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryFeeEnabledChannelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryFeeEnabledChannelResponseDefaultTypeInternal() {}
  union {
    QueryFeeEnabledChannelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryFeeEnabledChannelResponseDefaultTypeInternal _QueryFeeEnabledChannelResponse_default_instance_;
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[20];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest, _impl_.query_height_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, _impl_.incentivized_packets_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, _impl_.packet_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketRequest, _impl_.query_height_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketResponse, _impl_.incentivized_packet_),
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest, _impl_.query_height_),
    0,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, _impl_.incentivized_packets_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalRecvFeesRequest, _impl_.packet_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalRecvFeesResponse, _impl_.recv_fees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalAckFeesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalAckFeesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalAckFeesRequest, _impl_.packet_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalAckFeesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalAckFeesResponse, _impl_.ack_fees_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest, _impl_.packet_id_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse, _impl_.timeout_fees_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryPayeeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryPayeeRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryPayeeRequest, _impl_.relayer_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryPayeeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryPayeeResponse, _impl_.payee_address_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest, _impl_.relayer_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse, _impl_.counterparty_payee_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest, _impl_.query_height_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, _impl_.fee_enabled_channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse, _impl_.pagination_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest, _impl_.channel_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse, _impl_.fee_enabled_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest)},
        { 12, 22, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse)},
        { 24, 34, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketRequest)},
        { 36, 45, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketResponse)},
        { 46, 58, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest)},
        { 62, 72, -1, sizeof(::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse)},
        { 74, 83, -1, sizeof(::ibc::applications::fee::v1::QueryTotalRecvFeesRequest)},
        { 84, -1, -1, sizeof(::ibc::applications::fee::v1::QueryTotalRecvFeesResponse)},
        { 93, 102, -1, sizeof(::ibc::applications::fee::v1::QueryTotalAckFeesRequest)},
        { 103, -1, -1, sizeof(::ibc::applications::fee::v1::QueryTotalAckFeesResponse)},
        { 112, 121, -1, sizeof(::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest)},
        { 122, -1, -1, sizeof(::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse)},
        { 131, -1, -1, sizeof(::ibc::applications::fee::v1::QueryPayeeRequest)},
        { 141, -1, -1, sizeof(::ibc::applications::fee::v1::QueryPayeeResponse)},
        { 150, -1, -1, sizeof(::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest)},
        { 160, -1, -1, sizeof(::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse)},
        { 169, 179, -1, sizeof(::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest)},
        { 181, 191, -1, sizeof(::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse)},
        { 193, -1, -1, sizeof(::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest)},
        { 203, -1, -1, sizeof(::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketsRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketsResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketsForChannelRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryIncentivizedPacketsForChannelResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalRecvFeesRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalRecvFeesResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalAckFeesRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalAckFeesResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalTimeoutFeesRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryTotalTimeoutFeesResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryPayeeRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryPayeeResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryCounterpartyPayeeRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryCounterpartyPayeeResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryFeeEnabledChannelsRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryFeeEnabledChannelsResponse_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryFeeEnabledChannelRequest_default_instance_._instance,
    &::ibc::applications::fee::v1::_QueryFeeEnabledChannelResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n#ibc/applications/fee/v1/query.proto\022\027i"
    "bc.applications.fee.v1\032\024gogoproto/gogo.p"
    "roto\032\034google/api/annotations.proto\032\036cosm"
    "os/base/v1beta1/coin.proto\032*cosmos/base/"
    "query/v1beta1/pagination.proto\032!ibc/appl"
    "ications/fee/v1/fee.proto\032%ibc/applicati"
    "ons/fee/v1/genesis.proto\032!ibc/core/chann"
    "el/v1/channel.proto\"\214\001\n\037QueryIncentivize"
    "dPacketsRequest\022F\n\npagination\030\001 \001(\0132&.co"
    "smos.base.query.v1beta1.PageRequestR\npag"
    "ination\022!\n\014query_height\030\002 \001(\004R\013queryHeig"
    "ht\"\323\001\n QueryIncentivizedPacketsResponse\022"
    "f\n\024incentivized_packets\030\001 \003(\0132-.ibc.appl"
    "ications.fee.v1.IdentifiedPacketFeesB\004\310\336"
    "\037\000R\023incentivizedPackets\022G\n\npagination\030\002 "
    "\001(\0132\'.cosmos.base.query.v1beta1.PageResp"
    "onseR\npagination\"\205\001\n\036QueryIncentivizedPa"
    "cketRequest\022@\n\tpacket_id\030\001 \001(\0132\035.ibc.cor"
    "e.channel.v1.PacketIdB\004\310\336\037\000R\010packetId\022!\n"
    "\014query_height\030\002 \001(\004R\013queryHeight\"\207\001\n\037Que"
    "ryIncentivizedPacketResponse\022d\n\023incentiv"
    "ized_packet\030\001 \001(\0132-.ibc.applications.fee"
    ".v1.IdentifiedPacketFeesB\004\310\336\037\000R\022incentiv"
    "izedPacket\"\316\001\n)QueryIncentivizedPacketsF"
    "orChannelRequest\022F\n\npagination\030\001 \001(\0132&.c"
    "osmos.base.query.v1beta1.PageRequestR\npa"
    "gination\022\027\n\007port_id\030\002 \001(\tR\006portId\022\035\n\ncha"
    "nnel_id\030\003 \001(\tR\tchannelId\022!\n\014query_height"
    "\030\004 \001(\004R\013queryHeight\"\327\001\n*QueryIncentivize"
    "dPacketsForChannelResponse\022`\n\024incentiviz"
    "ed_packets\030\001 \003(\0132-.ibc.applications.fee."
    "v1.IdentifiedPacketFeesR\023incentivizedPac"
    "kets\022G\n\npagination\030\002 \001(\0132\'.cosmos.base.q"
    "uery.v1beta1.PageResponseR\npagination\"]\n"
    "\031QueryTotalRecvFeesRequest\022@\n\tpacket_id\030"
    "\001 \001(\0132\035.ibc.core.channel.v1.PacketIdB\004\310\336"
    "\037\000R\010packetId\"\206\001\n\032QueryTotalRecvFeesRespo"
    "nse\022h\n\trecv_fees\030\001 \003(\0132\031.cosmos.base.v1b"
    "eta1.CoinB0\310\336\037\000\252\337\037(github.com/cosmos/cos"
    "mos-sdk/types.CoinsR\010recvFees\"\\\n\030QueryTo"
    "talAckFeesRequest\022@\n\tpacket_id\030\001 \001(\0132\035.i"
    "bc.core.channel.v1.PacketIdB\004\310\336\037\000R\010packe"
    "tId\"\203\001\n\031QueryTotalAckFeesResponse\022f\n\010ack"
    "_fees\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB0"
    "\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/typ"
    "es.CoinsR\007ackFees\"`\n\034QueryTotalTimeoutFe"
    "esRequest\022@\n\tpacket_id\030\001 \001(\0132\035.ibc.core."
    "channel.v1.PacketIdB\004\310\336\037\000R\010packetId\"\217\001\n\035"
    "QueryTotalTimeoutFeesResponse\022n\n\014timeout"
    "_fees\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB0"
    "\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/typ"
    "es.CoinsR\013timeoutFees\"L\n\021QueryPayeeReque"
    "st\022\035\n\nchannel_id\030\001 \001(\tR\tchannelId\022\030\n\007rel"
    "ayer\030\002 \001(\tR\007relayer\"9\n\022QueryPayeeRespons"
    "e\022#\n\rpayee_address\030\001 \001(\tR\014payeeAddress\"X"
    "\n\035QueryCounterpartyPayeeRequest\022\035\n\nchann"
    "el_id\030\001 \001(\tR\tchannelId\022\030\n\007relayer\030\002 \001(\tR"
    "\007relayer\"O\n\036QueryCounterpartyPayeeRespon"
    "se\022-\n\022counterparty_payee\030\001 \001(\tR\021counterp"
    "artyPayee\"\213\001\n\036QueryFeeEnabledChannelsReq"
    "uest\022F\n\npagination\030\001 \001(\0132&.cosmos.base.q"
    "uery.v1beta1.PageRequestR\npagination\022!\n\014"
    "query_height\030\002 \001(\004R\013queryHeight\"\316\001\n\037Quer"
    "yFeeEnabledChannelsResponse\022b\n\024fee_enabl"
    "ed_channels\030\001 \003(\0132*.ibc.applications.fee"
    ".v1.FeeEnabledChannelB\004\310\336\037\000R\022feeEnabledC"
    "hannels\022G\n\npagination\030\002 \001(\0132\'.cosmos.bas"
    "e.query.v1beta1.PageResponseR\npagination"
    "\"W\n\035QueryFeeEnabledChannelRequest\022\027\n\007por"
    "t_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\t"
    "channelId\"A\n\036QueryFeeEnabledChannelRespo"
    "nse\022\037\n\013fee_enabled\030\001 \001(\010R\nfeeEnabled2\346\021\n"
    "\005Query\022\271\001\n\023IncentivizedPackets\0228.ibc.app"
    "lications.fee.v1.QueryIncentivizedPacket"
    "sRequest\0329.ibc.applications.fee.v1.Query"
    "IncentivizedPacketsResponse\"-\202\323\344\223\002\'\022%/ib"
    "c/apps/fee/v1/incentivized_packets\022\217\002\n\022I"
    "ncentivizedPacket\0227.ibc.applications.fee"
    ".v1.QueryIncentivizedPacketRequest\0328.ibc"
    ".applications.fee.v1.QueryIncentivizedPa"
    "cketResponse\"\205\001\202\323\344\223\002\177\022}/ibc/apps/fee/v1/"
    "channels/{packet_id.channel_id}/ports/{p"
    "acket_id.port_id}/sequences/{packet_id.s"
    "equence}/incentivized_packet\022\375\001\n\035Incenti"
    "vizedPacketsForChannel\022B.ibc.application"
    "s.fee.v1.QueryIncentivizedPacketsForChan"
    "nelRequest\032C.ibc.applications.fee.v1.Que"
    "ryIncentivizedPacketsForChannelResponse\""
    "S\202\323\344\223\002M\022K/ibc/apps/fee/v1/channels/{chan"
    "nel_id}/ports/{port_id}/incentivized_pac"
    "kets\022\374\001\n\rTotalRecvFees\0222.ibc.application"
    "s.fee.v1.QueryTotalRecvFeesRequest\0323.ibc"
    ".applications.fee.v1.QueryTotalRecvFeesR"
    "esponse\"\201\001\202\323\344\223\002{\022y/ibc/apps/fee/v1/chann"
    "els/{packet_id.channel_id}/ports/{packet"
    "_id.port_id}/sequences/{packet_id.sequen"
    "ce}/total_recv_fees\022\370\001\n\014TotalAckFees\0221.i"
    "bc.applications.fee.v1.QueryTotalAckFees"
    "Request\0322.ibc.applications.fee.v1.QueryT"
    "otalAckFeesResponse\"\200\001\202\323\344\223\002z\022x/ibc/apps/"
    "fee/v1/channels/{packet_id.channel_id}/p"
    "orts/{packet_id.port_id}/sequences/{pack"
    "et_id.sequence}/total_ack_fees\022\210\002\n\020Total"
    "TimeoutFees\0225.ibc.applications.fee.v1.Qu"
    "eryTotalTimeoutFeesRequest\0326.ibc.applica"
    "tions.fee.v1.QueryTotalTimeoutFeesRespon"
    "se\"\204\001\202\323\344\223\002~\022|/ibc/apps/fee/v1/channels/{"
    "packet_id.channel_id}/ports/{packet_id.p"
    "ort_id}/sequences/{packet_id.sequence}/t"
    "otal_timeout_fees\022\251\001\n\005Payee\022*.ibc.applic"
    "ations.fee.v1.QueryPayeeRequest\032+.ibc.ap"
    "plications.fee.v1.QueryPayeeResponse\"G\202\323"
    "\344\223\002A\022\?/ibc/apps/fee/v1/channels/{channel"
    "_id}/relayers/{relayer}/payee\022\332\001\n\021Counte"
    "rpartyPayee\0226.ibc.applications.fee.v1.Qu"
    "eryCounterpartyPayeeRequest\0327.ibc.applic"
    "ations.fee.v1.QueryCounterpartyPayeeResp"
    "onse\"T\202\323\344\223\002N\022L/ibc/apps/fee/v1/channels/"
    "{channel_id}/relayers/{relayer}/counterp"
    "arty_payee\022\255\001\n\022FeeEnabledChannels\0227.ibc."
    "applications.fee.v1.QueryFeeEnabledChann"
    "elsRequest\0328.ibc.applications.fee.v1.Que"
    "ryFeeEnabledChannelsResponse\"$\202\323\344\223\002\036\022\034/i"
    "bc/apps/fee/v1/fee_enabled\022\320\001\n\021FeeEnable"
    "dChannel\0226.ibc.applications.fee.v1.Query"
    "FeeEnabledChannelRequest\0327.ibc.applicati"
    "ons.fee.v1.QueryFeeEnabledChannelRespons"
    "e\"J\202\323\344\223\002D\022B/ibc/apps/fee/v1/channels/{ch"
    "annel_id}/ports/{port_id}/fee_enabledB\337\001"
    "\n\033com.ibc.applications.fee.v1B\nQueryProt"
    "oP\001Z5github.com/cosmos/ibc-go/v7/modules"
    "/apps/29-fee/types\242\002\003IAF\252\002\027Ibc.Applicati"
    "ons.Fee.V1\312\002\027Ibc\\Applications\\Fee\\V1\342\002#I"
    "bc\\Applications\\Fee\\V1\\GPBMetadata\352\002\032Ibc"
    "::Applications::Fee::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_deps[7] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_ibc_2fapplications_2ffee_2fv1_2ffee_2eproto,
        &::descriptor_table_ibc_2fapplications_2ffee_2fv1_2fgenesis_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto = {
    false,
    false,
    5391,
    descriptor_table_protodef_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto,
    "ibc/applications/fee/v1/query.proto",
    &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
    descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_deps,
    7,
    20,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto(&descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto);
namespace ibc {
namespace applications {
namespace fee {
namespace v1 {
// ===================================================================

class QueryIncentivizedPacketsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryIncentivizedPacketsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryIncentivizedPacketsRequest::_Internal::pagination(const QueryIncentivizedPacketsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryIncentivizedPacketsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketsRequest::QueryIncentivizedPacketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
}
QueryIncentivizedPacketsRequest::QueryIncentivizedPacketsRequest(const QueryIncentivizedPacketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.query_height_ = from._impl_.query_height_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
}

inline void QueryIncentivizedPacketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) { ::uint64_t{0u} }

  };
}

QueryIncentivizedPacketsRequest::~QueryIncentivizedPacketsRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryIncentivizedPacketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.query_height_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 query_height = 2 [json_name = "queryHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.query_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_query_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  return target;
}

::size_t QueryIncentivizedPacketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_query_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketsRequest::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketsRequest*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_query_height() != 0) {
    _this->_internal_set_query_height(from._internal_query_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketsRequest::CopyFrom(const QueryIncentivizedPacketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketsRequest::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketsRequest::InternalSwap(QueryIncentivizedPacketsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsRequest, _impl_.query_height_)
      + sizeof(QueryIncentivizedPacketsRequest::_impl_.query_height_)
      - PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryIncentivizedPacketsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryIncentivizedPacketsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryIncentivizedPacketsResponse::_Internal::pagination(const QueryIncentivizedPacketsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryIncentivizedPacketsResponse::clear_incentivized_packets() {
  _internal_mutable_incentivized_packets()->Clear();
}
void QueryIncentivizedPacketsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketsResponse::QueryIncentivizedPacketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
}
QueryIncentivizedPacketsResponse::QueryIncentivizedPacketsResponse(const QueryIncentivizedPacketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packets_){from._impl_.incentivized_packets_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
}

inline void QueryIncentivizedPacketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packets_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryIncentivizedPacketsResponse::~QueryIncentivizedPacketsResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_incentivized_packets()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryIncentivizedPacketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_incentivized_packets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incentivized_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incentivized_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_incentivized_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  return target;
}

::size_t QueryIncentivizedPacketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_incentivized_packets_size();
  for (const auto& msg : this->_internal_incentivized_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketsResponse::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketsResponse*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_incentivized_packets()->MergeFrom(from._internal_incentivized_packets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketsResponse::CopyFrom(const QueryIncentivizedPacketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketsResponse::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketsResponse::InternalSwap(QueryIncentivizedPacketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_incentivized_packets()->InternalSwap(other->_internal_mutable_incentivized_packets());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryIncentivizedPacketRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketRequest, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const QueryIncentivizedPacketRequest* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
QueryIncentivizedPacketRequest::_Internal::packet_id(const QueryIncentivizedPacketRequest* msg) {
  return *msg->_impl_.packet_id_;
}
void QueryIncentivizedPacketRequest::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketRequest::QueryIncentivizedPacketRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
}
QueryIncentivizedPacketRequest::QueryIncentivizedPacketRequest(const QueryIncentivizedPacketRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.query_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  _this->_impl_.query_height_ = from._impl_.query_height_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
}

inline void QueryIncentivizedPacketRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
    , decltype(_impl_.query_height_) { ::uint64_t{0u} }

  };
}

QueryIncentivizedPacketRequest::~QueryIncentivizedPacketRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void QueryIncentivizedPacketRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_.query_height_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 query_height = 2 [json_name = "queryHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.query_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_query_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  return target;
}

::size_t QueryIncentivizedPacketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_query_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketRequest::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketRequest*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  if (from._internal_query_height() != 0) {
    _this->_internal_set_query_height(from._internal_query_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketRequest::CopyFrom(const QueryIncentivizedPacketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketRequest::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketRequest::InternalSwap(QueryIncentivizedPacketRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketRequest, _impl_.query_height_)
      + sizeof(QueryIncentivizedPacketRequest::_impl_.query_height_)
      - PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketRequest, _impl_.packet_id_)>(
          reinterpret_cast<char*>(&_impl_.packet_id_),
          reinterpret_cast<char*>(&other->_impl_.packet_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryIncentivizedPacketResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketResponse, _impl_._has_bits_);
  static const ::ibc::applications::fee::v1::IdentifiedPacketFees& incentivized_packet(const QueryIncentivizedPacketResponse* msg);
  static void set_has_incentivized_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::applications::fee::v1::IdentifiedPacketFees&
QueryIncentivizedPacketResponse::_Internal::incentivized_packet(const QueryIncentivizedPacketResponse* msg) {
  return *msg->_impl_.incentivized_packet_;
}
void QueryIncentivizedPacketResponse::clear_incentivized_packet() {
  if (_impl_.incentivized_packet_ != nullptr) _impl_.incentivized_packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketResponse::QueryIncentivizedPacketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
}
QueryIncentivizedPacketResponse::QueryIncentivizedPacketResponse(const QueryIncentivizedPacketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.incentivized_packet_ = new ::ibc::applications::fee::v1::IdentifiedPacketFees(*from._impl_.incentivized_packet_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
}

inline void QueryIncentivizedPacketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packet_){nullptr}
  };
}

QueryIncentivizedPacketResponse::~QueryIncentivizedPacketResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.incentivized_packet_;
}

void QueryIncentivizedPacketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.incentivized_packet_ != nullptr);
    _impl_.incentivized_packet_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [json_name = "incentivizedPacket", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_incentivized_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [json_name = "incentivizedPacket", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::incentivized_packet(this),
        _Internal::incentivized_packet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  return target;
}

::size_t QueryIncentivizedPacketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packet = 1 [json_name = "incentivizedPacket", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.incentivized_packet_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketResponse::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketResponse*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_incentivized_packet()->::ibc::applications::fee::v1::IdentifiedPacketFees::MergeFrom(
        from._internal_incentivized_packet());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketResponse::CopyFrom(const QueryIncentivizedPacketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketResponse::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketResponse::InternalSwap(QueryIncentivizedPacketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.incentivized_packet_, other->_impl_.incentivized_packet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryIncentivizedPacketsForChannelRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketsForChannelRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsForChannelRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryIncentivizedPacketsForChannelRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryIncentivizedPacketsForChannelRequest::_Internal::pagination(const QueryIncentivizedPacketsForChannelRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryIncentivizedPacketsForChannelRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketsForChannelRequest::QueryIncentivizedPacketsForChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
}
QueryIncentivizedPacketsForChannelRequest::QueryIncentivizedPacketsForChannelRequest(const QueryIncentivizedPacketsForChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketsForChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.query_height_ = from._impl_.query_height_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
}

inline void QueryIncentivizedPacketsForChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) { ::uint64_t{0u} }

  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryIncentivizedPacketsForChannelRequest::~QueryIncentivizedPacketsForChannelRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketsForChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryIncentivizedPacketsForChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketsForChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.query_height_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketsForChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string port_id = 2 [json_name = "portId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 3 [json_name = "channelId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 query_height = 4 [json_name = "queryHeight"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.query_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketsForChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.port_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string channel_id = 3 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // uint64 query_height = 4 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_query_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  return target;
}

::size_t QueryIncentivizedPacketsForChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 3 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 query_height = 4 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_query_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketsForChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketsForChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketsForChannelRequest::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketsForChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketsForChannelRequest*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketsForChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_query_height() != 0) {
    _this->_internal_set_query_height(from._internal_query_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketsForChannelRequest::CopyFrom(const QueryIncentivizedPacketsForChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketsForChannelRequest::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketsForChannelRequest::InternalSwap(QueryIncentivizedPacketsForChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsForChannelRequest, _impl_.query_height_)
      + sizeof(QueryIncentivizedPacketsForChannelRequest::_impl_.query_height_)
      - PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsForChannelRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketsForChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryIncentivizedPacketsForChannelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryIncentivizedPacketsForChannelResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryIncentivizedPacketsForChannelResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryIncentivizedPacketsForChannelResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryIncentivizedPacketsForChannelResponse::_Internal::pagination(const QueryIncentivizedPacketsForChannelResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryIncentivizedPacketsForChannelResponse::clear_incentivized_packets() {
  _internal_mutable_incentivized_packets()->Clear();
}
void QueryIncentivizedPacketsForChannelResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryIncentivizedPacketsForChannelResponse::QueryIncentivizedPacketsForChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
}
QueryIncentivizedPacketsForChannelResponse::QueryIncentivizedPacketsForChannelResponse(const QueryIncentivizedPacketsForChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryIncentivizedPacketsForChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packets_){from._impl_.incentivized_packets_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
}

inline void QueryIncentivizedPacketsForChannelResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.incentivized_packets_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryIncentivizedPacketsForChannelResponse::~QueryIncentivizedPacketsForChannelResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryIncentivizedPacketsForChannelResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_incentivized_packets()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryIncentivizedPacketsForChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryIncentivizedPacketsForChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_incentivized_packets()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryIncentivizedPacketsForChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incentivized_packets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryIncentivizedPacketsForChannelResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_incentivized_packets_size()); i < n; i++) {
    const auto& repfield = this->_internal_incentivized_packets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  return target;
}

::size_t QueryIncentivizedPacketsForChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.IdentifiedPacketFees incentivized_packets = 1 [json_name = "incentivizedPackets"];
  total_size += 1UL * this->_internal_incentivized_packets_size();
  for (const auto& msg : this->_internal_incentivized_packets()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryIncentivizedPacketsForChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryIncentivizedPacketsForChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryIncentivizedPacketsForChannelResponse::GetClassData() const { return &_class_data_; }


void QueryIncentivizedPacketsForChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryIncentivizedPacketsForChannelResponse*>(&to_msg);
  auto& from = static_cast<const QueryIncentivizedPacketsForChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_incentivized_packets()->MergeFrom(from._internal_incentivized_packets());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryIncentivizedPacketsForChannelResponse::CopyFrom(const QueryIncentivizedPacketsForChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryIncentivizedPacketsForChannelResponse::IsInitialized() const {
  return true;
}

void QueryIncentivizedPacketsForChannelResponse::InternalSwap(QueryIncentivizedPacketsForChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_incentivized_packets()->InternalSwap(other->_internal_mutable_incentivized_packets());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryIncentivizedPacketsForChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryTotalRecvFeesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTotalRecvFeesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTotalRecvFeesRequest, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const QueryTotalRecvFeesRequest* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
QueryTotalRecvFeesRequest::_Internal::packet_id(const QueryTotalRecvFeesRequest* msg) {
  return *msg->_impl_.packet_id_;
}
void QueryTotalRecvFeesRequest::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTotalRecvFeesRequest::QueryTotalRecvFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
}
QueryTotalRecvFeesRequest::QueryTotalRecvFeesRequest(const QueryTotalRecvFeesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalRecvFeesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
}

inline void QueryTotalRecvFeesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
  };
}

QueryTotalRecvFeesRequest::~QueryTotalRecvFeesRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalRecvFeesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void QueryTotalRecvFeesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalRecvFeesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalRecvFeesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalRecvFeesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  return target;
}

::size_t QueryTotalRecvFeesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalRecvFeesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalRecvFeesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalRecvFeesRequest::GetClassData() const { return &_class_data_; }


void QueryTotalRecvFeesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalRecvFeesRequest*>(&to_msg);
  auto& from = static_cast<const QueryTotalRecvFeesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalRecvFeesRequest::CopyFrom(const QueryTotalRecvFeesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalRecvFeesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalRecvFeesRequest::IsInitialized() const {
  return true;
}

void QueryTotalRecvFeesRequest::InternalSwap(QueryTotalRecvFeesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalRecvFeesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryTotalRecvFeesResponse::_Internal {
 public:
};

void QueryTotalRecvFeesResponse::clear_recv_fees() {
  _internal_mutable_recv_fees()->Clear();
}
QueryTotalRecvFeesResponse::QueryTotalRecvFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
}
QueryTotalRecvFeesResponse::QueryTotalRecvFeesResponse(const QueryTotalRecvFeesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalRecvFeesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_fees_){from._impl_.recv_fees_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
}

inline void QueryTotalRecvFeesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.recv_fees_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTotalRecvFeesResponse::~QueryTotalRecvFeesResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalRecvFeesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_recv_fees()->~RepeatedPtrField();
}

void QueryTotalRecvFeesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalRecvFeesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_recv_fees()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalRecvFeesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin recv_fees = 1 [json_name = "recvFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recv_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalRecvFeesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin recv_fees = 1 [json_name = "recvFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recv_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_recv_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  return target;
}

::size_t QueryTotalRecvFeesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin recv_fees = 1 [json_name = "recvFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_recv_fees_size();
  for (const auto& msg : this->_internal_recv_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalRecvFeesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalRecvFeesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalRecvFeesResponse::GetClassData() const { return &_class_data_; }


void QueryTotalRecvFeesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalRecvFeesResponse*>(&to_msg);
  auto& from = static_cast<const QueryTotalRecvFeesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_recv_fees()->MergeFrom(from._internal_recv_fees());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalRecvFeesResponse::CopyFrom(const QueryTotalRecvFeesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalRecvFeesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalRecvFeesResponse::IsInitialized() const {
  return true;
}

void QueryTotalRecvFeesResponse::InternalSwap(QueryTotalRecvFeesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_recv_fees()->InternalSwap(other->_internal_mutable_recv_fees());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalRecvFeesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryTotalAckFeesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTotalAckFeesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTotalAckFeesRequest, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const QueryTotalAckFeesRequest* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
QueryTotalAckFeesRequest::_Internal::packet_id(const QueryTotalAckFeesRequest* msg) {
  return *msg->_impl_.packet_id_;
}
void QueryTotalAckFeesRequest::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTotalAckFeesRequest::QueryTotalAckFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
}
QueryTotalAckFeesRequest::QueryTotalAckFeesRequest(const QueryTotalAckFeesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalAckFeesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
}

inline void QueryTotalAckFeesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
  };
}

QueryTotalAckFeesRequest::~QueryTotalAckFeesRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalAckFeesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void QueryTotalAckFeesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalAckFeesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalAckFeesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalAckFeesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  return target;
}

::size_t QueryTotalAckFeesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalAckFeesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalAckFeesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalAckFeesRequest::GetClassData() const { return &_class_data_; }


void QueryTotalAckFeesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalAckFeesRequest*>(&to_msg);
  auto& from = static_cast<const QueryTotalAckFeesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalAckFeesRequest::CopyFrom(const QueryTotalAckFeesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalAckFeesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalAckFeesRequest::IsInitialized() const {
  return true;
}

void QueryTotalAckFeesRequest::InternalSwap(QueryTotalAckFeesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalAckFeesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryTotalAckFeesResponse::_Internal {
 public:
};

void QueryTotalAckFeesResponse::clear_ack_fees() {
  _internal_mutable_ack_fees()->Clear();
}
QueryTotalAckFeesResponse::QueryTotalAckFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
}
QueryTotalAckFeesResponse::QueryTotalAckFeesResponse(const QueryTotalAckFeesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalAckFeesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_fees_){from._impl_.ack_fees_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
}

inline void QueryTotalAckFeesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ack_fees_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTotalAckFeesResponse::~QueryTotalAckFeesResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalAckFeesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ack_fees()->~RepeatedPtrField();
}

void QueryTotalAckFeesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalAckFeesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ack_fees()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalAckFeesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin ack_fees = 1 [json_name = "ackFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ack_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalAckFeesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin ack_fees = 1 [json_name = "ackFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ack_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_ack_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  return target;
}

::size_t QueryTotalAckFeesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin ack_fees = 1 [json_name = "ackFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_ack_fees_size();
  for (const auto& msg : this->_internal_ack_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalAckFeesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalAckFeesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalAckFeesResponse::GetClassData() const { return &_class_data_; }


void QueryTotalAckFeesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalAckFeesResponse*>(&to_msg);
  auto& from = static_cast<const QueryTotalAckFeesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_fees()->MergeFrom(from._internal_ack_fees());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalAckFeesResponse::CopyFrom(const QueryTotalAckFeesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalAckFeesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalAckFeesResponse::IsInitialized() const {
  return true;
}

void QueryTotalAckFeesResponse::InternalSwap(QueryTotalAckFeesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_ack_fees()->InternalSwap(other->_internal_mutable_ack_fees());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalAckFeesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryTotalTimeoutFeesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryTotalTimeoutFeesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryTotalTimeoutFeesRequest, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::PacketId& packet_id(const QueryTotalTimeoutFeesRequest* msg);
  static void set_has_packet_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::PacketId&
QueryTotalTimeoutFeesRequest::_Internal::packet_id(const QueryTotalTimeoutFeesRequest* msg) {
  return *msg->_impl_.packet_id_;
}
void QueryTotalTimeoutFeesRequest::clear_packet_id() {
  if (_impl_.packet_id_ != nullptr) _impl_.packet_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryTotalTimeoutFeesRequest::QueryTotalTimeoutFeesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
}
QueryTotalTimeoutFeesRequest::QueryTotalTimeoutFeesRequest(const QueryTotalTimeoutFeesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalTimeoutFeesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_id_ = new ::ibc::core::channel::v1::PacketId(*from._impl_.packet_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
}

inline void QueryTotalTimeoutFeesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_id_){nullptr}
  };
}

QueryTotalTimeoutFeesRequest::~QueryTotalTimeoutFeesRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalTimeoutFeesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.packet_id_;
}

void QueryTotalTimeoutFeesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalTimeoutFeesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.packet_id_ != nullptr);
    _impl_.packet_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalTimeoutFeesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalTimeoutFeesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet_id(this),
        _Internal::packet_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  return target;
}

::size_t QueryTotalTimeoutFeesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.PacketId packet_id = 1 [json_name = "packetId", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.packet_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalTimeoutFeesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalTimeoutFeesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalTimeoutFeesRequest::GetClassData() const { return &_class_data_; }


void QueryTotalTimeoutFeesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalTimeoutFeesRequest*>(&to_msg);
  auto& from = static_cast<const QueryTotalTimeoutFeesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_packet_id()->::ibc::core::channel::v1::PacketId::MergeFrom(
        from._internal_packet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalTimeoutFeesRequest::CopyFrom(const QueryTotalTimeoutFeesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalTimeoutFeesRequest::IsInitialized() const {
  return true;
}

void QueryTotalTimeoutFeesRequest::InternalSwap(QueryTotalTimeoutFeesRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.packet_id_, other->_impl_.packet_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalTimeoutFeesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryTotalTimeoutFeesResponse::_Internal {
 public:
};

void QueryTotalTimeoutFeesResponse::clear_timeout_fees() {
  _internal_mutable_timeout_fees()->Clear();
}
QueryTotalTimeoutFeesResponse::QueryTotalTimeoutFeesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
}
QueryTotalTimeoutFeesResponse::QueryTotalTimeoutFeesResponse(const QueryTotalTimeoutFeesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryTotalTimeoutFeesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_fees_){from._impl_.timeout_fees_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
}

inline void QueryTotalTimeoutFeesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_fees_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryTotalTimeoutFeesResponse::~QueryTotalTimeoutFeesResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryTotalTimeoutFeesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_timeout_fees()->~RepeatedPtrField();
}

void QueryTotalTimeoutFeesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryTotalTimeoutFeesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_timeout_fees()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryTotalTimeoutFeesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.base.v1beta1.Coin timeout_fees = 1 [json_name = "timeoutFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_timeout_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryTotalTimeoutFeesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin timeout_fees = 1 [json_name = "timeoutFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_timeout_fees_size()); i < n; i++) {
    const auto& repfield = this->_internal_timeout_fees(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  return target;
}

::size_t QueryTotalTimeoutFeesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin timeout_fees = 1 [json_name = "timeoutFees", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_timeout_fees_size();
  for (const auto& msg : this->_internal_timeout_fees()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryTotalTimeoutFeesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryTotalTimeoutFeesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryTotalTimeoutFeesResponse::GetClassData() const { return &_class_data_; }


void QueryTotalTimeoutFeesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryTotalTimeoutFeesResponse*>(&to_msg);
  auto& from = static_cast<const QueryTotalTimeoutFeesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_timeout_fees()->MergeFrom(from._internal_timeout_fees());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryTotalTimeoutFeesResponse::CopyFrom(const QueryTotalTimeoutFeesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTotalTimeoutFeesResponse::IsInitialized() const {
  return true;
}

void QueryTotalTimeoutFeesResponse::InternalSwap(QueryTotalTimeoutFeesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_timeout_fees()->InternalSwap(other->_internal_mutable_timeout_fees());
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryTotalTimeoutFeesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryPayeeRequest::_Internal {
 public:
};

QueryPayeeRequest::QueryPayeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryPayeeRequest)
}
QueryPayeeRequest::QueryPayeeRequest(const QueryPayeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPayeeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryPayeeRequest)
}

inline void QueryPayeeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPayeeRequest::~QueryPayeeRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryPayeeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPayeeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
}

void QueryPayeeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPayeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryPayeeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPayeeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryPayeeRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 2 [json_name = "relayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryPayeeRequest.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPayeeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryPayeeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryPayeeRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryPayeeRequest.relayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryPayeeRequest)
  return target;
}

::size_t QueryPayeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryPayeeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPayeeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPayeeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPayeeRequest::GetClassData() const { return &_class_data_; }


void QueryPayeeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPayeeRequest*>(&to_msg);
  auto& from = static_cast<const QueryPayeeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryPayeeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPayeeRequest::CopyFrom(const QueryPayeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryPayeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPayeeRequest::IsInitialized() const {
  return true;
}

void QueryPayeeRequest::InternalSwap(QueryPayeeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPayeeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryPayeeResponse::_Internal {
 public:
};

QueryPayeeResponse::QueryPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryPayeeResponse)
}
QueryPayeeResponse::QueryPayeeResponse(const QueryPayeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPayeeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payee_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payee_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payee_address().empty()) {
    _this->_impl_.payee_address_.Set(from._internal_payee_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryPayeeResponse)
}

inline void QueryPayeeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payee_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payee_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payee_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPayeeResponse::~QueryPayeeResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryPayeeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPayeeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payee_address_.Destroy();
}

void QueryPayeeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPayeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryPayeeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payee_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPayeeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string payee_address = 1 [json_name = "payeeAddress"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payee_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryPayeeResponse.payee_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPayeeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryPayeeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string payee_address = 1 [json_name = "payeeAddress"];
  if (!this->_internal_payee_address().empty()) {
    const std::string& _s = this->_internal_payee_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryPayeeResponse.payee_address");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryPayeeResponse)
  return target;
}

::size_t QueryPayeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryPayeeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payee_address = 1 [json_name = "payeeAddress"];
  if (!this->_internal_payee_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_payee_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPayeeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPayeeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPayeeResponse::GetClassData() const { return &_class_data_; }


void QueryPayeeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPayeeResponse*>(&to_msg);
  auto& from = static_cast<const QueryPayeeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryPayeeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payee_address().empty()) {
    _this->_internal_set_payee_address(from._internal_payee_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPayeeResponse::CopyFrom(const QueryPayeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryPayeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPayeeResponse::IsInitialized() const {
  return true;
}

void QueryPayeeResponse::InternalSwap(QueryPayeeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payee_address_, lhs_arena,
                                       &other->_impl_.payee_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPayeeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryCounterpartyPayeeRequest::_Internal {
 public:
};

QueryCounterpartyPayeeRequest::QueryCounterpartyPayeeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
}
QueryCounterpartyPayeeRequest::QueryCounterpartyPayeeRequest(const QueryCounterpartyPayeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryCounterpartyPayeeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_relayer().empty()) {
    _this->_impl_.relayer_.Set(from._internal_relayer(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
}

inline void QueryCounterpartyPayeeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.relayer_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.relayer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.relayer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryCounterpartyPayeeRequest::~QueryCounterpartyPayeeRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryCounterpartyPayeeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.relayer_.Destroy();
}

void QueryCounterpartyPayeeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryCounterpartyPayeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.relayer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCounterpartyPayeeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string relayer = 2 [json_name = "relayer"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_relayer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryCounterpartyPayeeRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    const std::string& _s = this->_internal_relayer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryCounterpartyPayeeRequest.relayer");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  return target;
}

::size_t QueryCounterpartyPayeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string relayer = 2 [json_name = "relayer"];
  if (!this->_internal_relayer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_relayer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryCounterpartyPayeeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryCounterpartyPayeeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryCounterpartyPayeeRequest::GetClassData() const { return &_class_data_; }


void QueryCounterpartyPayeeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryCounterpartyPayeeRequest*>(&to_msg);
  auto& from = static_cast<const QueryCounterpartyPayeeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_relayer().empty()) {
    _this->_internal_set_relayer(from._internal_relayer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCounterpartyPayeeRequest::CopyFrom(const QueryCounterpartyPayeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryCounterpartyPayeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCounterpartyPayeeRequest::IsInitialized() const {
  return true;
}

void QueryCounterpartyPayeeRequest::InternalSwap(QueryCounterpartyPayeeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relayer_, lhs_arena,
                                       &other->_impl_.relayer_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCounterpartyPayeeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryCounterpartyPayeeResponse::_Internal {
 public:
};

QueryCounterpartyPayeeResponse::QueryCounterpartyPayeeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
}
QueryCounterpartyPayeeResponse::QueryCounterpartyPayeeResponse(const QueryCounterpartyPayeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryCounterpartyPayeeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_payee().empty()) {
    _this->_impl_.counterparty_payee_.Set(from._internal_counterparty_payee(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
}

inline void QueryCounterpartyPayeeResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.counterparty_payee_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.counterparty_payee_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_payee_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryCounterpartyPayeeResponse::~QueryCounterpartyPayeeResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryCounterpartyPayeeResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.counterparty_payee_.Destroy();
}

void QueryCounterpartyPayeeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryCounterpartyPayeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.counterparty_payee_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryCounterpartyPayeeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string counterparty_payee = 1 [json_name = "counterpartyPayee"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_counterparty_payee();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryCounterpartyPayeeResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string counterparty_payee = 1 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    const std::string& _s = this->_internal_counterparty_payee();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryCounterpartyPayeeResponse.counterparty_payee");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  return target;
}

::size_t QueryCounterpartyPayeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string counterparty_payee = 1 [json_name = "counterpartyPayee"];
  if (!this->_internal_counterparty_payee().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_payee());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryCounterpartyPayeeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryCounterpartyPayeeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryCounterpartyPayeeResponse::GetClassData() const { return &_class_data_; }


void QueryCounterpartyPayeeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryCounterpartyPayeeResponse*>(&to_msg);
  auto& from = static_cast<const QueryCounterpartyPayeeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_counterparty_payee().empty()) {
    _this->_internal_set_counterparty_payee(from._internal_counterparty_payee());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryCounterpartyPayeeResponse::CopyFrom(const QueryCounterpartyPayeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryCounterpartyPayeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCounterpartyPayeeResponse::IsInitialized() const {
  return true;
}

void QueryCounterpartyPayeeResponse::InternalSwap(QueryCounterpartyPayeeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_payee_, lhs_arena,
                                       &other->_impl_.counterparty_payee_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryCounterpartyPayeeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryFeeEnabledChannelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeeEnabledChannelsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeeEnabledChannelsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryFeeEnabledChannelsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryFeeEnabledChannelsRequest::_Internal::pagination(const QueryFeeEnabledChannelsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryFeeEnabledChannelsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryFeeEnabledChannelsRequest::QueryFeeEnabledChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
}
QueryFeeEnabledChannelsRequest::QueryFeeEnabledChannelsRequest(const QueryFeeEnabledChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeEnabledChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  _this->_impl_.query_height_ = from._impl_.query_height_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
}

inline void QueryFeeEnabledChannelsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.query_height_) { ::uint64_t{0u} }

  };
}

QueryFeeEnabledChannelsRequest::~QueryFeeEnabledChannelsRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeEnabledChannelsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryFeeEnabledChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeEnabledChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_.query_height_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeEnabledChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 query_height = 2 [json_name = "queryHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.query_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeEnabledChannelsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_query_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  return target;
}

::size_t QueryFeeEnabledChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  // uint64 query_height = 2 [json_name = "queryHeight"];
  if (this->_internal_query_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_query_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeEnabledChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeEnabledChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeEnabledChannelsRequest::GetClassData() const { return &_class_data_; }


void QueryFeeEnabledChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeEnabledChannelsRequest*>(&to_msg);
  auto& from = static_cast<const QueryFeeEnabledChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  if (from._internal_query_height() != 0) {
    _this->_internal_set_query_height(from._internal_query_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeEnabledChannelsRequest::CopyFrom(const QueryFeeEnabledChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeEnabledChannelsRequest::IsInitialized() const {
  return true;
}

void QueryFeeEnabledChannelsRequest::InternalSwap(QueryFeeEnabledChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryFeeEnabledChannelsRequest, _impl_.query_height_)
      + sizeof(QueryFeeEnabledChannelsRequest::_impl_.query_height_)
      - PROTOBUF_FIELD_OFFSET(QueryFeeEnabledChannelsRequest, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeEnabledChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryFeeEnabledChannelsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryFeeEnabledChannelsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryFeeEnabledChannelsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryFeeEnabledChannelsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryFeeEnabledChannelsResponse::_Internal::pagination(const QueryFeeEnabledChannelsResponse* msg) {
  return *msg->_impl_.pagination_;
}
void QueryFeeEnabledChannelsResponse::clear_fee_enabled_channels() {
  _internal_mutable_fee_enabled_channels()->Clear();
}
void QueryFeeEnabledChannelsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryFeeEnabledChannelsResponse::QueryFeeEnabledChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
}
QueryFeeEnabledChannelsResponse::QueryFeeEnabledChannelsResponse(const QueryFeeEnabledChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeEnabledChannelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_enabled_channels_){from._impl_.fee_enabled_channels_}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
}

inline void QueryFeeEnabledChannelsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.fee_enabled_channels_){arena}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryFeeEnabledChannelsResponse::~QueryFeeEnabledChannelsResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeEnabledChannelsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_fee_enabled_channels()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryFeeEnabledChannelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeEnabledChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_fee_enabled_channels()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeEnabledChannelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fee_enabled_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeEnabledChannelsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fee_enabled_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_fee_enabled_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  return target;
}

::size_t QueryFeeEnabledChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.fee.v1.FeeEnabledChannel fee_enabled_channels = 1 [json_name = "feeEnabledChannels", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_fee_enabled_channels_size();
  for (const auto& msg : this->_internal_fee_enabled_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeEnabledChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeEnabledChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeEnabledChannelsResponse::GetClassData() const { return &_class_data_; }


void QueryFeeEnabledChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeEnabledChannelsResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeeEnabledChannelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fee_enabled_channels()->MergeFrom(from._internal_fee_enabled_channels());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeEnabledChannelsResponse::CopyFrom(const QueryFeeEnabledChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeEnabledChannelsResponse::IsInitialized() const {
  return true;
}

void QueryFeeEnabledChannelsResponse::InternalSwap(QueryFeeEnabledChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_fee_enabled_channels()->InternalSwap(other->_internal_mutable_fee_enabled_channels());
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeEnabledChannelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryFeeEnabledChannelRequest::_Internal {
 public:
};

QueryFeeEnabledChannelRequest::QueryFeeEnabledChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
}
QueryFeeEnabledChannelRequest::QueryFeeEnabledChannelRequest(const QueryFeeEnabledChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryFeeEnabledChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
}

inline void QueryFeeEnabledChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryFeeEnabledChannelRequest::~QueryFeeEnabledChannelRequest() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeEnabledChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryFeeEnabledChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeEnabledChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeEnabledChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeEnabledChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.fee.v1.QueryFeeEnabledChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  return target;
}

::size_t QueryFeeEnabledChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeEnabledChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeEnabledChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeEnabledChannelRequest::GetClassData() const { return &_class_data_; }


void QueryFeeEnabledChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeEnabledChannelRequest*>(&to_msg);
  auto& from = static_cast<const QueryFeeEnabledChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeEnabledChannelRequest::CopyFrom(const QueryFeeEnabledChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeEnabledChannelRequest::IsInitialized() const {
  return true;
}

void QueryFeeEnabledChannelRequest::InternalSwap(QueryFeeEnabledChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeEnabledChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[18]);
}
// ===================================================================

class QueryFeeEnabledChannelResponse::_Internal {
 public:
};

QueryFeeEnabledChannelResponse::QueryFeeEnabledChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
}
QueryFeeEnabledChannelResponse::QueryFeeEnabledChannelResponse(const QueryFeeEnabledChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
}

inline void QueryFeeEnabledChannelResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.fee_enabled_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueryFeeEnabledChannelResponse::~QueryFeeEnabledChannelResponse() {
  // @@protoc_insertion_point(destructor:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryFeeEnabledChannelResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryFeeEnabledChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryFeeEnabledChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fee_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryFeeEnabledChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool fee_enabled = 1 [json_name = "feeEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.fee_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryFeeEnabledChannelResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fee_enabled = 1 [json_name = "feeEnabled"];
  if (this->_internal_fee_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_fee_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  return target;
}

::size_t QueryFeeEnabledChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool fee_enabled = 1 [json_name = "feeEnabled"];
  if (this->_internal_fee_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryFeeEnabledChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryFeeEnabledChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryFeeEnabledChannelResponse::GetClassData() const { return &_class_data_; }


void QueryFeeEnabledChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryFeeEnabledChannelResponse*>(&to_msg);
  auto& from = static_cast<const QueryFeeEnabledChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_fee_enabled() != 0) {
    _this->_internal_set_fee_enabled(from._internal_fee_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryFeeEnabledChannelResponse::CopyFrom(const QueryFeeEnabledChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.fee.v1.QueryFeeEnabledChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFeeEnabledChannelResponse::IsInitialized() const {
  return true;
}

void QueryFeeEnabledChannelResponse::InternalSwap(QueryFeeEnabledChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.fee_enabled_, other->_impl_.fee_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryFeeEnabledChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ffee_2fv1_2fquery_2eproto[19]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryIncentivizedPacketsForChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalRecvFeesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalRecvFeesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalAckFeesRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalAckFeesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalAckFeesResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalAckFeesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryTotalTimeoutFeesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryPayeeRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryPayeeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryPayeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryPayeeResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryPayeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryPayeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryCounterpartyPayeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryCounterpartyPayeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryFeeEnabledChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryFeeEnabledChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse*
Arena::CreateMaybeMessage< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::fee::v1::QueryFeeEnabledChannelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

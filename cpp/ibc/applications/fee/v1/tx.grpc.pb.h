// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/fee/v1/tx.proto
#ifndef GRPC_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto__INCLUDED

#include "ibc/applications/fee/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace applications {
namespace fee {
namespace v1 {

// Msg defines the ICS29 Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.applications.fee.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RegisterPayee defines a rpc handler method for MsgRegisterPayee
    // RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
    // payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
    // the source chain from which packets originate as this is where fee distribution takes place. This function may be
    // called more than once by a relayer, in which case, the latest payee is always used.
    virtual ::grpc::Status RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>> AsyncRegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>>(AsyncRegisterPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>> PrepareAsyncRegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>>(PrepareAsyncRegisterPayeeRaw(context, request, cq));
    }
    // RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
    // RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
    // payee address before relaying. This ensures they will be properly compensated for forward relaying since
    // the destination chain must include the registered counterparty payee address in the acknowledgement. This function
    // may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
    virtual ::grpc::Status RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>> AsyncRegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>>(AsyncRegisterCounterpartyPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>> PrepareAsyncRegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>>(PrepareAsyncRegisterCounterpartyPayeeRaw(context, request, cq));
    }
    // PayPacketFee defines a rpc handler method for MsgPayPacketFee
    // PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
    // incentivize the relaying of the packet at the next sequence
    // NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
    // initiates the lifecycle of the incentivized packet
    virtual ::grpc::Status PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>> AsyncPayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>>(AsyncPayPacketFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>> PrepareAsyncPayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>>(PrepareAsyncPayPacketFeeRaw(context, request, cq));
    }
    // PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
    // PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
    // incentivize the relaying of a known packet (i.e. at a particular sequence)
    virtual ::grpc::Status PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>> AsyncPayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>>(AsyncPayPacketFeeAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>> PrepareAsyncPayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>>(PrepareAsyncPayPacketFeeAsyncRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RegisterPayee defines a rpc handler method for MsgRegisterPayee
      // RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
      // payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
      // the source chain from which packets originate as this is where fee distribution takes place. This function may be
      // called more than once by a relayer, in which case, the latest payee is always used.
      virtual void RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
      // RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
      // payee address before relaying. This ensures they will be properly compensated for forward relaying since
      // the destination chain must include the registered counterparty payee address in the acknowledgement. This function
      // may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
      virtual void RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PayPacketFee defines a rpc handler method for MsgPayPacketFee
      // PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
      // incentivize the relaying of the packet at the next sequence
      // NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
      // initiates the lifecycle of the incentivized packet
      virtual void PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
      // PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
      // incentivize the relaying of a known packet (i.e. at a particular sequence)
      virtual void PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* AsyncRegisterPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* PrepareAsyncRegisterPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* AsyncRegisterCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* PrepareAsyncRegisterCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* AsyncPayPacketFeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* PrepareAsyncPayPacketFeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* AsyncPayPacketFeeAsyncRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* PrepareAsyncPayPacketFeeAsyncRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>> AsyncRegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>>(AsyncRegisterPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>> PrepareAsyncRegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>>(PrepareAsyncRegisterPayeeRaw(context, request, cq));
    }
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>> AsyncRegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>>(AsyncRegisterCounterpartyPayeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>> PrepareAsyncRegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>>(PrepareAsyncRegisterCounterpartyPayeeRaw(context, request, cq));
    }
    ::grpc::Status PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>> AsyncPayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>>(AsyncPayPacketFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>> PrepareAsyncPayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>>(PrepareAsyncPayPacketFeeRaw(context, request, cq));
    }
    ::grpc::Status PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>> AsyncPayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>>(AsyncPayPacketFeeAsyncRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>> PrepareAsyncPayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>>(PrepareAsyncPayPacketFeeAsyncRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterCounterpartyPayee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void PayPacketFee(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response, std::function<void(::grpc::Status)>) override;
      void PayPacketFeeAsync(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* AsyncRegisterPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* PrepareAsyncRegisterPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* AsyncRegisterCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* PrepareAsyncRegisterCounterpartyPayeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* AsyncPayPacketFeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* PrepareAsyncPayPacketFeeRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* AsyncPayPacketFeeAsyncRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* PrepareAsyncPayPacketFeeAsyncRaw(::grpc::ClientContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterPayee_;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterCounterpartyPayee_;
    const ::grpc::internal::RpcMethod rpcmethod_PayPacketFee_;
    const ::grpc::internal::RpcMethod rpcmethod_PayPacketFeeAsync_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RegisterPayee defines a rpc handler method for MsgRegisterPayee
    // RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
    // payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
    // the source chain from which packets originate as this is where fee distribution takes place. This function may be
    // called more than once by a relayer, in which case, the latest payee is always used.
    virtual ::grpc::Status RegisterPayee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response);
    // RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
    // RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
    // payee address before relaying. This ensures they will be properly compensated for forward relaying since
    // the destination chain must include the registered counterparty payee address in the acknowledgement. This function
    // may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
    virtual ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response);
    // PayPacketFee defines a rpc handler method for MsgPayPacketFee
    // PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
    // incentivize the relaying of the packet at the next sequence
    // NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
    // initiates the lifecycle of the incentivized packet
    virtual ::grpc::Status PayPacketFee(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response);
    // PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
    // PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
    // incentivize the relaying of a known packet (i.e. at a particular sequence)
    virtual ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPayee(::grpc::ServerContext* context, ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterCounterpartyPayee(::grpc::ServerContext* context, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayPacketFee(::grpc::ServerContext* context, ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayPacketFeeAsync(::grpc::ServerContext* context, ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterPayee<WithAsyncMethod_RegisterCounterpartyPayee<WithAsyncMethod_PayPacketFee<WithAsyncMethod_PayPacketFeeAsync<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgRegisterPayee, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::MsgRegisterPayee* request, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* response) { return this->RegisterPayee(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterPayee(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::MsgRegisterPayee, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgRegisterPayee, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* request, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* response) { return this->RegisterCounterpartyPayee(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterCounterpartyPayee(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterCounterpartyPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgPayPacketFee, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFee* request, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* response) { return this->PayPacketFee(context, request, response); }));}
    void SetMessageAllocatorFor_PayPacketFee(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::MsgPayPacketFee, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgPayPacketFee, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PayPacketFee(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* request, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* response) { return this->PayPacketFeeAsync(context, request, response); }));}
    void SetMessageAllocatorFor_PayPacketFeeAsync(
        ::grpc::MessageAllocator< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PayPacketFeeAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterPayee<WithCallbackMethod_RegisterCounterpartyPayee<WithCallbackMethod_PayPacketFee<WithCallbackMethod_PayPacketFeeAsync<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterPayee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterCounterpartyPayee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayPacketFee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPayPacketFeeAsync(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterPayee(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterCounterpartyPayee(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterCounterpartyPayee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PayPacketFee(context, request, response); }));
    }
    ~WithRawCallbackMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PayPacketFee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PayPacketFeeAsync(context, request, response); }));
    }
    ~WithRawCallbackMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PayPacketFeeAsync(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterPayee() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::MsgRegisterPayee, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::MsgRegisterPayee, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* streamer) {
                       return this->StreamedRegisterPayee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterPayee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::MsgRegisterPayee,::ibc::applications::fee::v1::MsgRegisterPayeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterCounterpartyPayee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterCounterpartyPayee() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* streamer) {
                       return this->StreamedRegisterCounterpartyPayee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterCounterpartyPayee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterCounterpartyPayee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee* /*request*/, ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterCounterpartyPayee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::MsgRegisterCounterpartyPayee,::ibc::applications::fee::v1::MsgRegisterCounterpartyPayeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PayPacketFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PayPacketFee() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::MsgPayPacketFee, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::MsgPayPacketFee, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* streamer) {
                       return this->StreamedPayPacketFee(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PayPacketFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PayPacketFee(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFee* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPayPacketFee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::MsgPayPacketFee,::ibc::applications::fee::v1::MsgPayPacketFeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PayPacketFeeAsync : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PayPacketFeeAsync() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::fee::v1::MsgPayPacketFeeAsync, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::fee::v1::MsgPayPacketFeeAsync, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* streamer) {
                       return this->StreamedPayPacketFeeAsync(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PayPacketFeeAsync() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PayPacketFeeAsync(::grpc::ServerContext* /*context*/, const ::ibc::applications::fee::v1::MsgPayPacketFeeAsync* /*request*/, ::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPayPacketFeeAsync(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::fee::v1::MsgPayPacketFeeAsync,::ibc::applications::fee::v1::MsgPayPacketFeeAsyncResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterPayee<WithStreamedUnaryMethod_RegisterCounterpartyPayee<WithStreamedUnaryMethod_PayPacketFee<WithStreamedUnaryMethod_PayPacketFeeAsync<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterPayee<WithStreamedUnaryMethod_RegisterCounterpartyPayee<WithStreamedUnaryMethod_PayPacketFee<WithStreamedUnaryMethod_PayPacketFeeAsync<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace fee
}  // namespace applications
}  // namespace ibc


#endif  // GRPC_ibc_2fapplications_2ffee_2fv1_2ftx_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/transfer/v2/packet.proto

#include "ibc/applications/transfer/v2/packet.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace transfer {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR FungibleTokenPacketData::FungibleTokenPacketData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.amount_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sender_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receiver_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.memo_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FungibleTokenPacketDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FungibleTokenPacketDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FungibleTokenPacketDataDefaultTypeInternal() {}
  union {
    FungibleTokenPacketData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FungibleTokenPacketDataDefaultTypeInternal _FungibleTokenPacketData_default_instance_;
}  // namespace v2
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _impl_.denom_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _impl_.amount_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _impl_.sender_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _impl_.receiver_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v2::FungibleTokenPacketData, _impl_.memo_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::transfer::v2::FungibleTokenPacketData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::transfer::v2::_FungibleTokenPacketData_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n)ibc/applications/transfer/v2/packet.pr"
    "oto\022\034ibc.applications.transfer.v2\"\217\001\n\027Fu"
    "ngibleTokenPacketData\022\024\n\005denom\030\001 \001(\tR\005de"
    "nom\022\026\n\006amount\030\002 \001(\tR\006amount\022\026\n\006sender\030\003 "
    "\001(\tR\006sender\022\032\n\010receiver\030\004 \001(\tR\010receiver\022"
    "\022\n\004memo\030\005 \001(\tR\004memoB\373\001\n com.ibc.applicat"
    "ions.transfer.v2B\013PacketProtoP\001Z7github."
    "com/cosmos/ibc-go/v7/modules/apps/transf"
    "er/types\242\002\003IAT\252\002\034Ibc.Applications.Transf"
    "er.V2\312\002\034Ibc\\Applications\\Transfer\\V2\342\002(I"
    "bc\\Applications\\Transfer\\V2\\GPBMetadata\352"
    "\002\037Ibc::Applications::Transfer::V2b\006proto"
    "3"
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto = {
    false,
    false,
    481,
    descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto,
    "ibc/applications/transfer/v2/packet.proto",
    &descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto(&descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto);
namespace ibc {
namespace applications {
namespace transfer {
namespace v2 {
// ===================================================================

class FungibleTokenPacketData::_Internal {
 public:
};

FungibleTokenPacketData::FungibleTokenPacketData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v2.FungibleTokenPacketData)
}
FungibleTokenPacketData::FungibleTokenPacketData(const FungibleTokenPacketData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FungibleTokenPacketData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.memo_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_denom().empty()) {
    _this->_impl_.denom_.Set(from._internal_denom(), _this->GetArenaForAllocation());
  }
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_amount().empty()) {
    _this->_impl_.amount_.Set(from._internal_amount(), _this->GetArenaForAllocation());
  }
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender().empty()) {
    _this->_impl_.sender_.Set(from._internal_sender(), _this->GetArenaForAllocation());
  }
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_receiver().empty()) {
    _this->_impl_.receiver_.Set(from._internal_receiver(), _this->GetArenaForAllocation());
  }
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_memo().empty()) {
    _this->_impl_.memo_.Set(from._internal_memo(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v2.FungibleTokenPacketData)
}

inline void FungibleTokenPacketData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.denom_) {}

    , decltype(_impl_.amount_) {}

    , decltype(_impl_.sender_) {}

    , decltype(_impl_.receiver_) {}

    , decltype(_impl_.memo_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.amount_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.amount_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sender_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sender_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receiver_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receiver_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.memo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.memo_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FungibleTokenPacketData::~FungibleTokenPacketData() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v2.FungibleTokenPacketData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FungibleTokenPacketData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.denom_.Destroy();
  _impl_.amount_.Destroy();
  _impl_.sender_.Destroy();
  _impl_.receiver_.Destroy();
  _impl_.memo_.Destroy();
}

void FungibleTokenPacketData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FungibleTokenPacketData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v2.FungibleTokenPacketData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denom_.ClearToEmpty();
  _impl_.amount_.ClearToEmpty();
  _impl_.sender_.ClearToEmpty();
  _impl_.receiver_.ClearToEmpty();
  _impl_.memo_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FungibleTokenPacketData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string denom = 1 [json_name = "denom"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v2.FungibleTokenPacketData.denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string amount = 2 [json_name = "amount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_amount();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v2.FungibleTokenPacketData.amount"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string sender = 3 [json_name = "sender"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sender();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v2.FungibleTokenPacketData.sender"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string receiver = 4 [json_name = "receiver"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_receiver();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v2.FungibleTokenPacketData.receiver"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string memo = 5 [json_name = "memo"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_memo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v2.FungibleTokenPacketData.memo"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FungibleTokenPacketData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v2.FungibleTokenPacketData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    const std::string& _s = this->_internal_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v2.FungibleTokenPacketData.denom");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    const std::string& _s = this->_internal_amount();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v2.FungibleTokenPacketData.amount");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string sender = 3 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    const std::string& _s = this->_internal_sender();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v2.FungibleTokenPacketData.sender");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string receiver = 4 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    const std::string& _s = this->_internal_receiver();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v2.FungibleTokenPacketData.receiver");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string memo = 5 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    const std::string& _s = this->_internal_memo();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v2.FungibleTokenPacketData.memo");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v2.FungibleTokenPacketData)
  return target;
}

::size_t FungibleTokenPacketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v2.FungibleTokenPacketData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denom = 1 [json_name = "denom"];
  if (!this->_internal_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_denom());
  }

  // string amount = 2 [json_name = "amount"];
  if (!this->_internal_amount().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_amount());
  }

  // string sender = 3 [json_name = "sender"];
  if (!this->_internal_sender().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_sender());
  }

  // string receiver = 4 [json_name = "receiver"];
  if (!this->_internal_receiver().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_receiver());
  }

  // string memo = 5 [json_name = "memo"];
  if (!this->_internal_memo().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_memo());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FungibleTokenPacketData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FungibleTokenPacketData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FungibleTokenPacketData::GetClassData() const { return &_class_data_; }


void FungibleTokenPacketData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FungibleTokenPacketData*>(&to_msg);
  auto& from = static_cast<const FungibleTokenPacketData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v2.FungibleTokenPacketData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denom().empty()) {
    _this->_internal_set_denom(from._internal_denom());
  }
  if (!from._internal_amount().empty()) {
    _this->_internal_set_amount(from._internal_amount());
  }
  if (!from._internal_sender().empty()) {
    _this->_internal_set_sender(from._internal_sender());
  }
  if (!from._internal_receiver().empty()) {
    _this->_internal_set_receiver(from._internal_receiver());
  }
  if (!from._internal_memo().empty()) {
    _this->_internal_set_memo(from._internal_memo());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FungibleTokenPacketData::CopyFrom(const FungibleTokenPacketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v2.FungibleTokenPacketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FungibleTokenPacketData::IsInitialized() const {
  return true;
}

void FungibleTokenPacketData::InternalSwap(FungibleTokenPacketData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denom_, lhs_arena,
                                       &other->_impl_.denom_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.amount_, lhs_arena,
                                       &other->_impl_.amount_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_, lhs_arena,
                                       &other->_impl_.sender_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receiver_, lhs_arena,
                                       &other->_impl_.receiver_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.memo_, lhs_arena,
                                       &other->_impl_.memo_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata FungibleTokenPacketData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_getter, &descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v2::FungibleTokenPacketData*
Arena::CreateMaybeMessage< ::ibc::applications::transfer::v2::FungibleTokenPacketData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v2::FungibleTokenPacketData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

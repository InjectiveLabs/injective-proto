// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/transfer/v2/packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto;
namespace ibc {
namespace applications {
namespace transfer {
namespace v2 {
class FungibleTokenPacketData;
struct FungibleTokenPacketDataDefaultTypeInternal;
extern FungibleTokenPacketDataDefaultTypeInternal _FungibleTokenPacketData_default_instance_;
}  // namespace v2
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::transfer::v2::FungibleTokenPacketData* Arena::CreateMaybeMessage<::ibc::applications::transfer::v2::FungibleTokenPacketData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace transfer {
namespace v2 {

// ===================================================================


// -------------------------------------------------------------------

class FungibleTokenPacketData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v2.FungibleTokenPacketData) */ {
 public:
  inline FungibleTokenPacketData() : FungibleTokenPacketData(nullptr) {}
  ~FungibleTokenPacketData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FungibleTokenPacketData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FungibleTokenPacketData(const FungibleTokenPacketData& from);
  FungibleTokenPacketData(FungibleTokenPacketData&& from) noexcept
    : FungibleTokenPacketData() {
    *this = ::std::move(from);
  }

  inline FungibleTokenPacketData& operator=(const FungibleTokenPacketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FungibleTokenPacketData& operator=(FungibleTokenPacketData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FungibleTokenPacketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FungibleTokenPacketData* internal_default_instance() {
    return reinterpret_cast<const FungibleTokenPacketData*>(
               &_FungibleTokenPacketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FungibleTokenPacketData& a, FungibleTokenPacketData& b) {
    a.Swap(&b);
  }
  inline void Swap(FungibleTokenPacketData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FungibleTokenPacketData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FungibleTokenPacketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FungibleTokenPacketData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FungibleTokenPacketData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FungibleTokenPacketData& from) {
    FungibleTokenPacketData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FungibleTokenPacketData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v2.FungibleTokenPacketData";
  }
  protected:
  explicit FungibleTokenPacketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
    kAmountFieldNumber = 2,
    kSenderFieldNumber = 3,
    kReceiverFieldNumber = 4,
    kMemoFieldNumber = 5,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // string amount = 2 [json_name = "amount"];
  void clear_amount() ;
  const std::string& amount() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_amount(Arg_&& arg, Args_... args);
  std::string* mutable_amount();
  PROTOBUF_NODISCARD std::string* release_amount();
  void set_allocated_amount(std::string* ptr);

  private:
  const std::string& _internal_amount() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_amount(
      const std::string& value);
  std::string* _internal_mutable_amount();

  public:
  // string sender = 3 [json_name = "sender"];
  void clear_sender() ;
  const std::string& sender() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* ptr);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string receiver = 4 [json_name = "receiver"];
  void clear_receiver() ;
  const std::string& receiver() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receiver(Arg_&& arg, Args_... args);
  std::string* mutable_receiver();
  PROTOBUF_NODISCARD std::string* release_receiver();
  void set_allocated_receiver(std::string* ptr);

  private:
  const std::string& _internal_receiver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receiver(
      const std::string& value);
  std::string* _internal_mutable_receiver();

  public:
  // string memo = 5 [json_name = "memo"];
  void clear_memo() ;
  const std::string& memo() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memo(Arg_&& arg, Args_... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* ptr);

  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(
      const std::string& value);
  std::string* _internal_mutable_memo();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v2.FungibleTokenPacketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FungibleTokenPacketData

// string denom = 1 [json_name = "denom"];
inline void FungibleTokenPacketData::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& FungibleTokenPacketData::denom() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FungibleTokenPacketData::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
}
inline std::string* FungibleTokenPacketData::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
  return _s;
}
inline const std::string& FungibleTokenPacketData::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void FungibleTokenPacketData::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::release_denom() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
  return _impl_.denom_.Release();
}
inline void FungibleTokenPacketData::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v2.FungibleTokenPacketData.denom)
}

// string amount = 2 [json_name = "amount"];
inline void FungibleTokenPacketData::clear_amount() {
  _impl_.amount_.ClearToEmpty();
}
inline const std::string& FungibleTokenPacketData::amount() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
  return _internal_amount();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FungibleTokenPacketData::set_amount(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.amount_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
}
inline std::string* FungibleTokenPacketData::mutable_amount() {
  std::string* _s = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
  return _s;
}
inline const std::string& FungibleTokenPacketData::_internal_amount() const {
  return _impl_.amount_.Get();
}
inline void FungibleTokenPacketData::_internal_set_amount(const std::string& value) {
  ;


  _impl_.amount_.Set(value, GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::_internal_mutable_amount() {
  ;
  return _impl_.amount_.Mutable( GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::release_amount() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
  return _impl_.amount_.Release();
}
inline void FungibleTokenPacketData::set_allocated_amount(std::string* value) {
  _impl_.amount_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.amount_.IsDefault()) {
          _impl_.amount_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v2.FungibleTokenPacketData.amount)
}

// string sender = 3 [json_name = "sender"];
inline void FungibleTokenPacketData::clear_sender() {
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& FungibleTokenPacketData::sender() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FungibleTokenPacketData::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
}
inline std::string* FungibleTokenPacketData::mutable_sender() {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
  return _s;
}
inline const std::string& FungibleTokenPacketData::_internal_sender() const {
  return _impl_.sender_.Get();
}
inline void FungibleTokenPacketData::_internal_set_sender(const std::string& value) {
  ;


  _impl_.sender_.Set(value, GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::_internal_mutable_sender() {
  ;
  return _impl_.sender_.Mutable( GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::release_sender() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
  return _impl_.sender_.Release();
}
inline void FungibleTokenPacketData::set_allocated_sender(std::string* value) {
  _impl_.sender_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sender_.IsDefault()) {
          _impl_.sender_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v2.FungibleTokenPacketData.sender)
}

// string receiver = 4 [json_name = "receiver"];
inline void FungibleTokenPacketData::clear_receiver() {
  _impl_.receiver_.ClearToEmpty();
}
inline const std::string& FungibleTokenPacketData::receiver() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
  return _internal_receiver();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FungibleTokenPacketData::set_receiver(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.receiver_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
}
inline std::string* FungibleTokenPacketData::mutable_receiver() {
  std::string* _s = _internal_mutable_receiver();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
  return _s;
}
inline const std::string& FungibleTokenPacketData::_internal_receiver() const {
  return _impl_.receiver_.Get();
}
inline void FungibleTokenPacketData::_internal_set_receiver(const std::string& value) {
  ;


  _impl_.receiver_.Set(value, GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::_internal_mutable_receiver() {
  ;
  return _impl_.receiver_.Mutable( GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::release_receiver() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
  return _impl_.receiver_.Release();
}
inline void FungibleTokenPacketData::set_allocated_receiver(std::string* value) {
  _impl_.receiver_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.receiver_.IsDefault()) {
          _impl_.receiver_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v2.FungibleTokenPacketData.receiver)
}

// string memo = 5 [json_name = "memo"];
inline void FungibleTokenPacketData::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& FungibleTokenPacketData::memo() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v2.FungibleTokenPacketData.memo)
  return _internal_memo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FungibleTokenPacketData::set_memo(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.memo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v2.FungibleTokenPacketData.memo)
}
inline std::string* FungibleTokenPacketData::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v2.FungibleTokenPacketData.memo)
  return _s;
}
inline const std::string& FungibleTokenPacketData::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void FungibleTokenPacketData::_internal_set_memo(const std::string& value) {
  ;


  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::_internal_mutable_memo() {
  ;
  return _impl_.memo_.Mutable( GetArenaForAllocation());
}
inline std::string* FungibleTokenPacketData::release_memo() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v2.FungibleTokenPacketData.memo)
  return _impl_.memo_.Release();
}
inline void FungibleTokenPacketData::set_allocated_memo(std::string* value) {
  _impl_.memo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memo_.IsDefault()) {
          _impl_.memo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v2.FungibleTokenPacketData.memo)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv2_2fpacket_2eproto_2epb_2eh

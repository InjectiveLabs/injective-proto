// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/transfer/v1/tx.proto
#ifndef GRPC_ibc_2fapplications_2ftransfer_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_ibc_2fapplications_2ftransfer_2fv1_2ftx_2eproto__INCLUDED

#include "ibc/applications/transfer/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// Msg defines the ibc/transfer Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.applications.transfer.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Transfer defines a rpc handler method for MsgTransfer.
    virtual ::grpc::Status Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::ibc::applications::transfer::v1::MsgTransferResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>> AsyncTransfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    // UpdateParams defines a rpc handler for MsgUpdateParams.
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Transfer defines a rpc handler method for MsgTransfer.
      virtual void Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines a rpc handler for MsgUpdateParams.
      virtual void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>* AsyncTransferRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgTransferResponse>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::ibc::applications::transfer::v1::MsgTransferResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>> AsyncTransfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>>(AsyncTransferRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>> PrepareAsyncTransfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>>(PrepareAsyncTransferRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response, std::function<void(::grpc::Status)>) override;
      void Transfer(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>* AsyncTransferRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgTransferResponse>* PrepareAsyncTransferRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgTransfer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Transfer_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Transfer defines a rpc handler method for MsgTransfer.
    virtual ::grpc::Status Transfer(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response);
    // UpdateParams defines a rpc handler for MsgUpdateParams.
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transfer() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::MsgTransfer* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::MsgTransferResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Transfer<WithAsyncMethod_UpdateParams<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Transfer() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::MsgTransfer, ::ibc::applications::transfer::v1::MsgTransferResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::MsgTransfer* request, ::ibc::applications::transfer::v1::MsgTransferResponse* response) { return this->Transfer(context, request, response); }));}
    void SetMessageAllocatorFor_Transfer(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::MsgTransfer, ::ibc::applications::transfer::v1::MsgTransferResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::MsgTransfer, ::ibc::applications::transfer::v1::MsgTransferResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::MsgUpdateParams, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::MsgUpdateParams* request, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::MsgUpdateParams, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::MsgUpdateParams, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Transfer<WithCallbackMethod_UpdateParams<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transfer() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transfer() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTransfer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Transfer() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transfer(context, request, response); }));
    }
    ~WithRawCallbackMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Transfer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transfer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transfer() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::MsgTransfer, ::ibc::applications::transfer::v1::MsgTransferResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::MsgTransfer, ::ibc::applications::transfer::v1::MsgTransferResponse>* streamer) {
                       return this->StreamedTransfer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Transfer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transfer(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgTransfer* /*request*/, ::ibc::applications::transfer::v1::MsgTransferResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTransfer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::MsgTransfer,::ibc::applications::transfer::v1::MsgTransferResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::MsgUpdateParams, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::MsgUpdateParams, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::MsgUpdateParams* /*request*/, ::ibc::applications::transfer::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::MsgUpdateParams,::ibc::applications::transfer::v1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_UpdateParams<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Transfer<WithStreamedUnaryMethod_UpdateParams<Service > > StreamedService;
};

}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


#endif  // GRPC_ibc_2fapplications_2ftransfer_2fv1_2ftx_2eproto__INCLUDED

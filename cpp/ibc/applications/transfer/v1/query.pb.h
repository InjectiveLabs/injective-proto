// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/transfer/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/base/v1beta1/coin.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "ibc/applications/transfer/v1/transfer.pb.h"
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
class QueryDenomHashRequest;
struct QueryDenomHashRequestDefaultTypeInternal;
extern QueryDenomHashRequestDefaultTypeInternal _QueryDenomHashRequest_default_instance_;
class QueryDenomHashResponse;
struct QueryDenomHashResponseDefaultTypeInternal;
extern QueryDenomHashResponseDefaultTypeInternal _QueryDenomHashResponse_default_instance_;
class QueryDenomTraceRequest;
struct QueryDenomTraceRequestDefaultTypeInternal;
extern QueryDenomTraceRequestDefaultTypeInternal _QueryDenomTraceRequest_default_instance_;
class QueryDenomTraceResponse;
struct QueryDenomTraceResponseDefaultTypeInternal;
extern QueryDenomTraceResponseDefaultTypeInternal _QueryDenomTraceResponse_default_instance_;
class QueryDenomTracesRequest;
struct QueryDenomTracesRequestDefaultTypeInternal;
extern QueryDenomTracesRequestDefaultTypeInternal _QueryDenomTracesRequest_default_instance_;
class QueryDenomTracesResponse;
struct QueryDenomTracesResponseDefaultTypeInternal;
extern QueryDenomTracesResponseDefaultTypeInternal _QueryDenomTracesResponse_default_instance_;
class QueryEscrowAddressRequest;
struct QueryEscrowAddressRequestDefaultTypeInternal;
extern QueryEscrowAddressRequestDefaultTypeInternal _QueryEscrowAddressRequest_default_instance_;
class QueryEscrowAddressResponse;
struct QueryEscrowAddressResponseDefaultTypeInternal;
extern QueryEscrowAddressResponseDefaultTypeInternal _QueryEscrowAddressResponse_default_instance_;
class QueryParamsRequest;
struct QueryParamsRequestDefaultTypeInternal;
extern QueryParamsRequestDefaultTypeInternal _QueryParamsRequest_default_instance_;
class QueryParamsResponse;
struct QueryParamsResponseDefaultTypeInternal;
extern QueryParamsResponseDefaultTypeInternal _QueryParamsResponse_default_instance_;
class QueryTotalEscrowForDenomRequest;
struct QueryTotalEscrowForDenomRequestDefaultTypeInternal;
extern QueryTotalEscrowForDenomRequestDefaultTypeInternal _QueryTotalEscrowForDenomRequest_default_instance_;
class QueryTotalEscrowForDenomResponse;
struct QueryTotalEscrowForDenomResponseDefaultTypeInternal;
extern QueryTotalEscrowForDenomResponseDefaultTypeInternal _QueryTotalEscrowForDenomResponse_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::transfer::v1::QueryDenomHashRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomHashRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryDenomHashResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomHashResponse>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryDenomTraceRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomTraceRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryDenomTraceResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomTraceResponse>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryDenomTracesRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomTracesRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryDenomTracesResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryDenomTracesResponse>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryEscrowAddressRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryEscrowAddressRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryEscrowAddressResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryEscrowAddressResponse>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryParamsRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryParamsRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryParamsResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryParamsResponse>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest>(Arena*);
template <>
::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* Arena::CreateMaybeMessage<::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryDenomTraceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomTraceRequest) */ {
 public:
  inline QueryDenomTraceRequest() : QueryDenomTraceRequest(nullptr) {}
  ~QueryDenomTraceRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomTraceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomTraceRequest(const QueryDenomTraceRequest& from);
  QueryDenomTraceRequest(QueryDenomTraceRequest&& from) noexcept
    : QueryDenomTraceRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomTraceRequest& operator=(const QueryDenomTraceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomTraceRequest& operator=(QueryDenomTraceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomTraceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomTraceRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomTraceRequest*>(
               &_QueryDenomTraceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryDenomTraceRequest& a, QueryDenomTraceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomTraceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomTraceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomTraceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomTraceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomTraceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomTraceRequest& from) {
    QueryDenomTraceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomTraceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomTraceRequest";
  }
  protected:
  explicit QueryDenomTraceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // string hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomTraceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomTraceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomTraceResponse) */ {
 public:
  inline QueryDenomTraceResponse() : QueryDenomTraceResponse(nullptr) {}
  ~QueryDenomTraceResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomTraceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomTraceResponse(const QueryDenomTraceResponse& from);
  QueryDenomTraceResponse(QueryDenomTraceResponse&& from) noexcept
    : QueryDenomTraceResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomTraceResponse& operator=(const QueryDenomTraceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomTraceResponse& operator=(QueryDenomTraceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomTraceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomTraceResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomTraceResponse*>(
               &_QueryDenomTraceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryDenomTraceResponse& a, QueryDenomTraceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomTraceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomTraceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomTraceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomTraceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomTraceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomTraceResponse& from) {
    QueryDenomTraceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomTraceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomTraceResponse";
  }
  protected:
  explicit QueryDenomTraceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomTraceFieldNumber = 1,
  };
  // .ibc.applications.transfer.v1.DenomTrace denom_trace = 1 [json_name = "denomTrace"];
  bool has_denom_trace() const;
  void clear_denom_trace() ;
  const ::ibc::applications::transfer::v1::DenomTrace& denom_trace() const;
  PROTOBUF_NODISCARD ::ibc::applications::transfer::v1::DenomTrace* release_denom_trace();
  ::ibc::applications::transfer::v1::DenomTrace* mutable_denom_trace();
  void set_allocated_denom_trace(::ibc::applications::transfer::v1::DenomTrace* denom_trace);
  private:
  const ::ibc::applications::transfer::v1::DenomTrace& _internal_denom_trace() const;
  ::ibc::applications::transfer::v1::DenomTrace* _internal_mutable_denom_trace();
  public:
  void unsafe_arena_set_allocated_denom_trace(
      ::ibc::applications::transfer::v1::DenomTrace* denom_trace);
  ::ibc::applications::transfer::v1::DenomTrace* unsafe_arena_release_denom_trace();
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomTraceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::applications::transfer::v1::DenomTrace* denom_trace_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomTracesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomTracesRequest) */ {
 public:
  inline QueryDenomTracesRequest() : QueryDenomTracesRequest(nullptr) {}
  ~QueryDenomTracesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomTracesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomTracesRequest(const QueryDenomTracesRequest& from);
  QueryDenomTracesRequest(QueryDenomTracesRequest&& from) noexcept
    : QueryDenomTracesRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomTracesRequest& operator=(const QueryDenomTracesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomTracesRequest& operator=(QueryDenomTracesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomTracesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomTracesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomTracesRequest*>(
               &_QueryDenomTracesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryDenomTracesRequest& a, QueryDenomTracesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomTracesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomTracesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomTracesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomTracesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomTracesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomTracesRequest& from) {
    QueryDenomTracesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomTracesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomTracesRequest";
  }
  protected:
  explicit QueryDenomTracesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomTracesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomTracesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomTracesResponse) */ {
 public:
  inline QueryDenomTracesResponse() : QueryDenomTracesResponse(nullptr) {}
  ~QueryDenomTracesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomTracesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomTracesResponse(const QueryDenomTracesResponse& from);
  QueryDenomTracesResponse(QueryDenomTracesResponse&& from) noexcept
    : QueryDenomTracesResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomTracesResponse& operator=(const QueryDenomTracesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomTracesResponse& operator=(QueryDenomTracesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomTracesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomTracesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomTracesResponse*>(
               &_QueryDenomTracesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryDenomTracesResponse& a, QueryDenomTracesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomTracesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomTracesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomTracesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomTracesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomTracesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomTracesResponse& from) {
    QueryDenomTracesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomTracesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomTracesResponse";
  }
  protected:
  explicit QueryDenomTracesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomTracesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.applications.transfer.v1.DenomTrace denom_traces = 1 [json_name = "denomTraces", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "Traces"];
  int denom_traces_size() const;
  private:
  int _internal_denom_traces_size() const;

  public:
  void clear_denom_traces() ;
  ::ibc::applications::transfer::v1::DenomTrace* mutable_denom_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::transfer::v1::DenomTrace >*
      mutable_denom_traces();
  private:
  const ::ibc::applications::transfer::v1::DenomTrace& _internal_denom_traces(int index) const;
  ::ibc::applications::transfer::v1::DenomTrace* _internal_add_denom_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::transfer::v1::DenomTrace>& _internal_denom_traces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::transfer::v1::DenomTrace>* _internal_mutable_denom_traces();
  public:
  const ::ibc::applications::transfer::v1::DenomTrace& denom_traces(int index) const;
  ::ibc::applications::transfer::v1::DenomTrace* add_denom_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::transfer::v1::DenomTrace >&
      denom_traces() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomTracesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::transfer::v1::DenomTrace > denom_traces_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryParamsRequest) */ {
 public:
  inline QueryParamsRequest() : QueryParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsRequest(const QueryParamsRequest& from);
  QueryParamsRequest(QueryParamsRequest&& from) noexcept
    : QueryParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryParamsRequest& operator=(const QueryParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsRequest& operator=(QueryParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryParamsRequest*>(
               &_QueryParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryParamsRequest& a, QueryParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryParamsRequest";
  }
  protected:
  explicit QueryParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryParamsResponse) */ {
 public:
  inline QueryParamsResponse() : QueryParamsResponse(nullptr) {}
  ~QueryParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryParamsResponse(const QueryParamsResponse& from);
  QueryParamsResponse(QueryParamsResponse&& from) noexcept
    : QueryParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryParamsResponse& operator=(const QueryParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryParamsResponse& operator=(QueryParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryParamsResponse*>(
               &_QueryParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryParamsResponse& a, QueryParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryParamsResponse& from) {
    QueryParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryParamsResponse";
  }
  protected:
  explicit QueryParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .ibc.applications.transfer.v1.Params params = 1 [json_name = "params"];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::applications::transfer::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::applications::transfer::v1::Params* release_params();
  ::ibc::applications::transfer::v1::Params* mutable_params();
  void set_allocated_params(::ibc::applications::transfer::v1::Params* params);
  private:
  const ::ibc::applications::transfer::v1::Params& _internal_params() const;
  ::ibc::applications::transfer::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::applications::transfer::v1::Params* params);
  ::ibc::applications::transfer::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::applications::transfer::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomHashRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomHashRequest) */ {
 public:
  inline QueryDenomHashRequest() : QueryDenomHashRequest(nullptr) {}
  ~QueryDenomHashRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomHashRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomHashRequest(const QueryDenomHashRequest& from);
  QueryDenomHashRequest(QueryDenomHashRequest&& from) noexcept
    : QueryDenomHashRequest() {
    *this = ::std::move(from);
  }

  inline QueryDenomHashRequest& operator=(const QueryDenomHashRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomHashRequest& operator=(QueryDenomHashRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomHashRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomHashRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDenomHashRequest*>(
               &_QueryDenomHashRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryDenomHashRequest& a, QueryDenomHashRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomHashRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomHashRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomHashRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomHashRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomHashRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomHashRequest& from) {
    QueryDenomHashRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomHashRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomHashRequest";
  }
  protected:
  explicit QueryDenomHashRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceFieldNumber = 1,
  };
  // string trace = 1 [json_name = "trace"];
  void clear_trace() ;
  const std::string& trace() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trace(Arg_&& arg, Args_... args);
  std::string* mutable_trace();
  PROTOBUF_NODISCARD std::string* release_trace();
  void set_allocated_trace(std::string* ptr);

  private:
  const std::string& _internal_trace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trace(
      const std::string& value);
  std::string* _internal_mutable_trace();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomHashRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trace_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryDenomHashResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryDenomHashResponse) */ {
 public:
  inline QueryDenomHashResponse() : QueryDenomHashResponse(nullptr) {}
  ~QueryDenomHashResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryDenomHashResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDenomHashResponse(const QueryDenomHashResponse& from);
  QueryDenomHashResponse(QueryDenomHashResponse&& from) noexcept
    : QueryDenomHashResponse() {
    *this = ::std::move(from);
  }

  inline QueryDenomHashResponse& operator=(const QueryDenomHashResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDenomHashResponse& operator=(QueryDenomHashResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDenomHashResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDenomHashResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDenomHashResponse*>(
               &_QueryDenomHashResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryDenomHashResponse& a, QueryDenomHashResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDenomHashResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDenomHashResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryDenomHashResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryDenomHashResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryDenomHashResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryDenomHashResponse& from) {
    QueryDenomHashResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDenomHashResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryDenomHashResponse";
  }
  protected:
  explicit QueryDenomHashResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
  };
  // string hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryDenomHashResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEscrowAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryEscrowAddressRequest) */ {
 public:
  inline QueryEscrowAddressRequest() : QueryEscrowAddressRequest(nullptr) {}
  ~QueryEscrowAddressRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEscrowAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEscrowAddressRequest(const QueryEscrowAddressRequest& from);
  QueryEscrowAddressRequest(QueryEscrowAddressRequest&& from) noexcept
    : QueryEscrowAddressRequest() {
    *this = ::std::move(from);
  }

  inline QueryEscrowAddressRequest& operator=(const QueryEscrowAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEscrowAddressRequest& operator=(QueryEscrowAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEscrowAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEscrowAddressRequest* internal_default_instance() {
    return reinterpret_cast<const QueryEscrowAddressRequest*>(
               &_QueryEscrowAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryEscrowAddressRequest& a, QueryEscrowAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEscrowAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEscrowAddressRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEscrowAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEscrowAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEscrowAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEscrowAddressRequest& from) {
    QueryEscrowAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEscrowAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryEscrowAddressRequest";
  }
  protected:
  explicit QueryEscrowAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryEscrowAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryEscrowAddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryEscrowAddressResponse) */ {
 public:
  inline QueryEscrowAddressResponse() : QueryEscrowAddressResponse(nullptr) {}
  ~QueryEscrowAddressResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryEscrowAddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEscrowAddressResponse(const QueryEscrowAddressResponse& from);
  QueryEscrowAddressResponse(QueryEscrowAddressResponse&& from) noexcept
    : QueryEscrowAddressResponse() {
    *this = ::std::move(from);
  }

  inline QueryEscrowAddressResponse& operator=(const QueryEscrowAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEscrowAddressResponse& operator=(QueryEscrowAddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEscrowAddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEscrowAddressResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEscrowAddressResponse*>(
               &_QueryEscrowAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryEscrowAddressResponse& a, QueryEscrowAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEscrowAddressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEscrowAddressResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryEscrowAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryEscrowAddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryEscrowAddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryEscrowAddressResponse& from) {
    QueryEscrowAddressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEscrowAddressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryEscrowAddressResponse";
  }
  protected:
  explicit QueryEscrowAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEscrowAddressFieldNumber = 1,
  };
  // string escrow_address = 1 [json_name = "escrowAddress"];
  void clear_escrow_address() ;
  const std::string& escrow_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_escrow_address(Arg_&& arg, Args_... args);
  std::string* mutable_escrow_address();
  PROTOBUF_NODISCARD std::string* release_escrow_address();
  void set_allocated_escrow_address(std::string* ptr);

  private:
  const std::string& _internal_escrow_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_escrow_address(
      const std::string& value);
  std::string* _internal_mutable_escrow_address();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryEscrowAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr escrow_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalEscrowForDenomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest) */ {
 public:
  inline QueryTotalEscrowForDenomRequest() : QueryTotalEscrowForDenomRequest(nullptr) {}
  ~QueryTotalEscrowForDenomRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalEscrowForDenomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalEscrowForDenomRequest(const QueryTotalEscrowForDenomRequest& from);
  QueryTotalEscrowForDenomRequest(QueryTotalEscrowForDenomRequest&& from) noexcept
    : QueryTotalEscrowForDenomRequest() {
    *this = ::std::move(from);
  }

  inline QueryTotalEscrowForDenomRequest& operator=(const QueryTotalEscrowForDenomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalEscrowForDenomRequest& operator=(QueryTotalEscrowForDenomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalEscrowForDenomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalEscrowForDenomRequest* internal_default_instance() {
    return reinterpret_cast<const QueryTotalEscrowForDenomRequest*>(
               &_QueryTotalEscrowForDenomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryTotalEscrowForDenomRequest& a, QueryTotalEscrowForDenomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalEscrowForDenomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalEscrowForDenomRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalEscrowForDenomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalEscrowForDenomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalEscrowForDenomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalEscrowForDenomRequest& from) {
    QueryTotalEscrowForDenomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalEscrowForDenomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest";
  }
  protected:
  explicit QueryTotalEscrowForDenomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDenomFieldNumber = 1,
  };
  // string denom = 1 [json_name = "denom"];
  void clear_denom() ;
  const std::string& denom() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_denom(Arg_&& arg, Args_... args);
  std::string* mutable_denom();
  PROTOBUF_NODISCARD std::string* release_denom();
  void set_allocated_denom(std::string* ptr);

  private:
  const std::string& _internal_denom() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_denom(
      const std::string& value);
  std::string* _internal_mutable_denom();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr denom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryTotalEscrowForDenomResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse) */ {
 public:
  inline QueryTotalEscrowForDenomResponse() : QueryTotalEscrowForDenomResponse(nullptr) {}
  ~QueryTotalEscrowForDenomResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryTotalEscrowForDenomResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryTotalEscrowForDenomResponse(const QueryTotalEscrowForDenomResponse& from);
  QueryTotalEscrowForDenomResponse(QueryTotalEscrowForDenomResponse&& from) noexcept
    : QueryTotalEscrowForDenomResponse() {
    *this = ::std::move(from);
  }

  inline QueryTotalEscrowForDenomResponse& operator=(const QueryTotalEscrowForDenomResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryTotalEscrowForDenomResponse& operator=(QueryTotalEscrowForDenomResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryTotalEscrowForDenomResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryTotalEscrowForDenomResponse* internal_default_instance() {
    return reinterpret_cast<const QueryTotalEscrowForDenomResponse*>(
               &_QueryTotalEscrowForDenomResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryTotalEscrowForDenomResponse& a, QueryTotalEscrowForDenomResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryTotalEscrowForDenomResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryTotalEscrowForDenomResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryTotalEscrowForDenomResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryTotalEscrowForDenomResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryTotalEscrowForDenomResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryTotalEscrowForDenomResponse& from) {
    QueryTotalEscrowForDenomResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryTotalEscrowForDenomResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse";
  }
  protected:
  explicit QueryTotalEscrowForDenomResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
  bool has_amount() const;
  void clear_amount() ;
  const ::cosmos::base::v1beta1::Coin& amount() const;
  PROTOBUF_NODISCARD ::cosmos::base::v1beta1::Coin* release_amount();
  ::cosmos::base::v1beta1::Coin* mutable_amount();
  void set_allocated_amount(::cosmos::base::v1beta1::Coin* amount);
  private:
  const ::cosmos::base::v1beta1::Coin& _internal_amount() const;
  ::cosmos::base::v1beta1::Coin* _internal_mutable_amount();
  public:
  void unsafe_arena_set_allocated_amount(
      ::cosmos::base::v1beta1::Coin* amount);
  ::cosmos::base::v1beta1::Coin* unsafe_arena_release_amount();
  // @@protoc_insertion_point(class_scope:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::v1beta1::Coin* amount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryDenomTraceRequest

// string hash = 1 [json_name = "hash"];
inline void QueryDenomTraceRequest::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& QueryDenomTraceRequest::hash() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomTraceRequest::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
}
inline std::string* QueryDenomTraceRequest::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
  return _s;
}
inline const std::string& QueryDenomTraceRequest::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void QueryDenomTraceRequest::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomTraceRequest::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomTraceRequest::release_hash() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
  return _impl_.hash_.Release();
}
inline void QueryDenomTraceRequest::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomTraceRequest.hash)
}

// -------------------------------------------------------------------

// QueryDenomTraceResponse

// .ibc.applications.transfer.v1.DenomTrace denom_trace = 1 [json_name = "denomTrace"];
inline bool QueryDenomTraceResponse::has_denom_trace() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.denom_trace_ != nullptr);
  return value;
}
inline const ::ibc::applications::transfer::v1::DenomTrace& QueryDenomTraceResponse::_internal_denom_trace() const {
  const ::ibc::applications::transfer::v1::DenomTrace* p = _impl_.denom_trace_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::transfer::v1::DenomTrace&>(
      ::ibc::applications::transfer::v1::_DenomTrace_default_instance_);
}
inline const ::ibc::applications::transfer::v1::DenomTrace& QueryDenomTraceResponse::denom_trace() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
  return _internal_denom_trace();
}
inline void QueryDenomTraceResponse::unsafe_arena_set_allocated_denom_trace(
    ::ibc::applications::transfer::v1::DenomTrace* denom_trace) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denom_trace_);
  }
  _impl_.denom_trace_ = denom_trace;
  if (denom_trace) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTraceResponse::release_denom_trace() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::DenomTrace* temp = _impl_.denom_trace_;
  _impl_.denom_trace_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTraceResponse::unsafe_arena_release_denom_trace() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::DenomTrace* temp = _impl_.denom_trace_;
  _impl_.denom_trace_ = nullptr;
  return temp;
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTraceResponse::_internal_mutable_denom_trace() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.denom_trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::transfer::v1::DenomTrace>(GetArenaForAllocation());
    _impl_.denom_trace_ = p;
  }
  return _impl_.denom_trace_;
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTraceResponse::mutable_denom_trace() {
  ::ibc::applications::transfer::v1::DenomTrace* _msg = _internal_mutable_denom_trace();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
  return _msg;
}
inline void QueryDenomTraceResponse::set_allocated_denom_trace(::ibc::applications::transfer::v1::DenomTrace* denom_trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.denom_trace_);
  }
  if (denom_trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(denom_trace));
    if (message_arena != submessage_arena) {
      denom_trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, denom_trace, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.denom_trace_ = denom_trace;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace)
}

// -------------------------------------------------------------------

// QueryDenomTracesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryDenomTracesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomTracesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryDenomTracesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
  return _internal_pagination();
}
inline void QueryDenomTracesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomTracesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomTracesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomTracesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryDenomTracesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
  return _msg;
}
inline void QueryDenomTracesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryDenomTracesResponse

// repeated .ibc.applications.transfer.v1.DenomTrace denom_traces = 1 [json_name = "denomTraces", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "Traces"];
inline int QueryDenomTracesResponse::_internal_denom_traces_size() const {
  return _impl_.denom_traces_.size();
}
inline int QueryDenomTracesResponse::denom_traces_size() const {
  return _internal_denom_traces_size();
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTracesResponse::mutable_denom_traces(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
  return _internal_mutable_denom_traces()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::transfer::v1::DenomTrace >*
QueryDenomTracesResponse::mutable_denom_traces() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
  return _internal_mutable_denom_traces();
}
inline const ::ibc::applications::transfer::v1::DenomTrace& QueryDenomTracesResponse::_internal_denom_traces(int index) const {
  return _internal_denom_traces().Get(index);
}
inline const ::ibc::applications::transfer::v1::DenomTrace& QueryDenomTracesResponse::denom_traces(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
  return _internal_denom_traces(index);
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTracesResponse::_internal_add_denom_traces() {
  return _internal_mutable_denom_traces()->Add();
}
inline ::ibc::applications::transfer::v1::DenomTrace* QueryDenomTracesResponse::add_denom_traces() {
  ::ibc::applications::transfer::v1::DenomTrace* _add = _internal_add_denom_traces();
  // @@protoc_insertion_point(field_add:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::transfer::v1::DenomTrace >&
QueryDenomTracesResponse::denom_traces() const {
  // @@protoc_insertion_point(field_list:ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces)
  return _internal_denom_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::transfer::v1::DenomTrace>&
QueryDenomTracesResponse::_internal_denom_traces() const {
  return _impl_.denom_traces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::transfer::v1::DenomTrace>*
QueryDenomTracesResponse::_internal_mutable_denom_traces() {
  return &_impl_.denom_traces_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryDenomTracesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomTracesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryDenomTracesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
  return _internal_pagination();
}
inline void QueryDenomTracesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomTracesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomTracesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomTracesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryDenomTracesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
  return _msg;
}
inline void QueryDenomTracesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryParamsRequest

// -------------------------------------------------------------------

// QueryParamsResponse

// .ibc.applications.transfer.v1.Params params = 1 [json_name = "params"];
inline bool QueryParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::applications::transfer::v1::Params& QueryParamsResponse::_internal_params() const {
  const ::ibc::applications::transfer::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::transfer::v1::Params&>(
      ::ibc::applications::transfer::v1::_Params_default_instance_);
}
inline const ::ibc::applications::transfer::v1::Params& QueryParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryParamsResponse.params)
  return _internal_params();
}
inline void QueryParamsResponse::unsafe_arena_set_allocated_params(
    ::ibc::applications::transfer::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.QueryParamsResponse.params)
}
inline ::ibc::applications::transfer::v1::Params* QueryParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::transfer::v1::Params* QueryParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::transfer::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::applications::transfer::v1::Params* QueryParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::transfer::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::applications::transfer::v1::Params* QueryParamsResponse::mutable_params() {
  ::ibc::applications::transfer::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryParamsResponse.params)
  return _msg;
}
inline void QueryParamsResponse::set_allocated_params(::ibc::applications::transfer::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryDenomHashRequest

// string trace = 1 [json_name = "trace"];
inline void QueryDenomHashRequest::clear_trace() {
  _impl_.trace_.ClearToEmpty();
}
inline const std::string& QueryDenomHashRequest::trace() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
  return _internal_trace();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomHashRequest::set_trace(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trace_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
}
inline std::string* QueryDenomHashRequest::mutable_trace() {
  std::string* _s = _internal_mutable_trace();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
  return _s;
}
inline const std::string& QueryDenomHashRequest::_internal_trace() const {
  return _impl_.trace_.Get();
}
inline void QueryDenomHashRequest::_internal_set_trace(const std::string& value) {
  ;


  _impl_.trace_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomHashRequest::_internal_mutable_trace() {
  ;
  return _impl_.trace_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomHashRequest::release_trace() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
  return _impl_.trace_.Release();
}
inline void QueryDenomHashRequest::set_allocated_trace(std::string* value) {
  _impl_.trace_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trace_.IsDefault()) {
          _impl_.trace_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomHashRequest.trace)
}

// -------------------------------------------------------------------

// QueryDenomHashResponse

// string hash = 1 [json_name = "hash"];
inline void QueryDenomHashResponse::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& QueryDenomHashResponse::hash() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryDenomHashResponse::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
}
inline std::string* QueryDenomHashResponse::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
  return _s;
}
inline const std::string& QueryDenomHashResponse::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void QueryDenomHashResponse::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryDenomHashResponse::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryDenomHashResponse::release_hash() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
  return _impl_.hash_.Release();
}
inline void QueryDenomHashResponse::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryDenomHashResponse.hash)
}

// -------------------------------------------------------------------

// QueryEscrowAddressRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryEscrowAddressRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryEscrowAddressRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryEscrowAddressRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEscrowAddressRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryEscrowAddressRequest.port_id)
}
inline std::string* QueryEscrowAddressRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryEscrowAddressRequest.port_id)
  return _s;
}
inline const std::string& QueryEscrowAddressRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryEscrowAddressRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryEscrowAddressRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryEscrowAddressRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryEscrowAddressRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryEscrowAddressRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryEscrowAddressRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryEscrowAddressRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEscrowAddressRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryEscrowAddressRequest.channel_id)
}
inline std::string* QueryEscrowAddressRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryEscrowAddressRequest.channel_id)
  return _s;
}
inline const std::string& QueryEscrowAddressRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryEscrowAddressRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryEscrowAddressRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryEscrowAddressRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryEscrowAddressRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryEscrowAddressResponse

// string escrow_address = 1 [json_name = "escrowAddress"];
inline void QueryEscrowAddressResponse::clear_escrow_address() {
  _impl_.escrow_address_.ClearToEmpty();
}
inline const std::string& QueryEscrowAddressResponse::escrow_address() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryEscrowAddressResponse.escrow_address)
  return _internal_escrow_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryEscrowAddressResponse::set_escrow_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.escrow_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryEscrowAddressResponse.escrow_address)
}
inline std::string* QueryEscrowAddressResponse::mutable_escrow_address() {
  std::string* _s = _internal_mutable_escrow_address();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryEscrowAddressResponse.escrow_address)
  return _s;
}
inline const std::string& QueryEscrowAddressResponse::_internal_escrow_address() const {
  return _impl_.escrow_address_.Get();
}
inline void QueryEscrowAddressResponse::_internal_set_escrow_address(const std::string& value) {
  ;


  _impl_.escrow_address_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressResponse::_internal_mutable_escrow_address() {
  ;
  return _impl_.escrow_address_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryEscrowAddressResponse::release_escrow_address() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryEscrowAddressResponse.escrow_address)
  return _impl_.escrow_address_.Release();
}
inline void QueryEscrowAddressResponse::set_allocated_escrow_address(std::string* value) {
  _impl_.escrow_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.escrow_address_.IsDefault()) {
          _impl_.escrow_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryEscrowAddressResponse.escrow_address)
}

// -------------------------------------------------------------------

// QueryTotalEscrowForDenomRequest

// string denom = 1 [json_name = "denom"];
inline void QueryTotalEscrowForDenomRequest::clear_denom() {
  _impl_.denom_.ClearToEmpty();
}
inline const std::string& QueryTotalEscrowForDenomRequest::denom() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest.denom)
  return _internal_denom();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryTotalEscrowForDenomRequest::set_denom(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.denom_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest.denom)
}
inline std::string* QueryTotalEscrowForDenomRequest::mutable_denom() {
  std::string* _s = _internal_mutable_denom();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest.denom)
  return _s;
}
inline const std::string& QueryTotalEscrowForDenomRequest::_internal_denom() const {
  return _impl_.denom_.Get();
}
inline void QueryTotalEscrowForDenomRequest::_internal_set_denom(const std::string& value) {
  ;


  _impl_.denom_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryTotalEscrowForDenomRequest::_internal_mutable_denom() {
  ;
  return _impl_.denom_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryTotalEscrowForDenomRequest::release_denom() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest.denom)
  return _impl_.denom_.Release();
}
inline void QueryTotalEscrowForDenomRequest::set_allocated_denom(std::string* value) {
  _impl_.denom_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.denom_.IsDefault()) {
          _impl_.denom_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryTotalEscrowForDenomRequest.denom)
}

// -------------------------------------------------------------------

// QueryTotalEscrowForDenomResponse

// .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false];
inline bool QueryTotalEscrowForDenomResponse::has_amount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.amount_ != nullptr);
  return value;
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalEscrowForDenomResponse::_internal_amount() const {
  const ::cosmos::base::v1beta1::Coin* p = _impl_.amount_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::v1beta1::Coin&>(
      ::cosmos::base::v1beta1::_Coin_default_instance_);
}
inline const ::cosmos::base::v1beta1::Coin& QueryTotalEscrowForDenomResponse::amount() const {
  // @@protoc_insertion_point(field_get:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse.amount)
  return _internal_amount();
}
inline void QueryTotalEscrowForDenomResponse::unsafe_arena_set_allocated_amount(
    ::cosmos::base::v1beta1::Coin* amount) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  _impl_.amount_ = amount;
  if (amount) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse.amount)
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalEscrowForDenomResponse::release_amount() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalEscrowForDenomResponse::unsafe_arena_release_amount() {
  // @@protoc_insertion_point(field_release:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse.amount)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::v1beta1::Coin* temp = _impl_.amount_;
  _impl_.amount_ = nullptr;
  return temp;
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalEscrowForDenomResponse::_internal_mutable_amount() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::v1beta1::Coin>(GetArenaForAllocation());
    _impl_.amount_ = p;
  }
  return _impl_.amount_;
}
inline ::cosmos::base::v1beta1::Coin* QueryTotalEscrowForDenomResponse::mutable_amount() {
  ::cosmos::base::v1beta1::Coin* _msg = _internal_mutable_amount();
  // @@protoc_insertion_point(field_mutable:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse.amount)
  return _msg;
}
inline void QueryTotalEscrowForDenomResponse::set_allocated_amount(::cosmos::base::v1beta1::Coin* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount));
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.transfer.v1.QueryTotalEscrowForDenomResponse.amount)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto_2epb_2eh

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/transfer/v1/query.proto

#include "ibc/applications/transfer/v1/query.pb.h"
#include "ibc/applications/transfer/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

static const char* Query_method_names[] = {
  "/ibc.applications.transfer.v1.Query/DenomTrace",
  "/ibc.applications.transfer.v1.Query/DenomTraces",
  "/ibc.applications.transfer.v1.Query/Params",
  "/ibc.applications.transfer.v1.Query/DenomHash",
  "/ibc.applications.transfer.v1.Query/EscrowAddress",
  "/ibc.applications.transfer.v1.Query/TotalEscrowForDenom",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DenomTrace_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomTraces_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Params_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DenomHash_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EscrowAddress_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TotalEscrowForDenom_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomTrace_, context, request, response);
}

void Query::Stub::async::DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomTrace_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomTrace_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* Query::Stub::PrepareAsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryDenomTraceResponse, ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomTrace_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* Query::Stub::AsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomTraceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomTraces_, context, request, response);
}

void Query::Stub::async::DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomTraces_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomTraces_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* Query::Stub::PrepareAsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryDenomTracesResponse, ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomTraces_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* Query::Stub::AsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomTracesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::ibc::applications::transfer::v1::QueryParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Params_, context, request, response);
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, std::move(f));
}

void Query::Stub::async::Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Params_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>* Query::Stub::PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryParamsResponse, ::ibc::applications::transfer::v1::QueryParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Params_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>* Query::Stub::AsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DenomHash_, context, request, response);
}

void Query::Stub::async::DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomHash_, context, request, response, std::move(f));
}

void Query::Stub::async::DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DenomHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* Query::Stub::PrepareAsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryDenomHashResponse, ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DenomHash_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* Query::Stub::AsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDenomHashRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EscrowAddress_, context, request, response);
}

void Query::Stub::async::EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EscrowAddress_, context, request, response, std::move(f));
}

void Query::Stub::async::EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EscrowAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* Query::Stub::PrepareAsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse, ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EscrowAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* Query::Stub::AsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEscrowAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TotalEscrowForDenom_, context, request, response);
}

void Query::Stub::async::TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalEscrowForDenom_, context, request, response, std::move(f));
}

void Query::Stub::async::TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TotalEscrowForDenom_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* Query::Stub::PrepareAsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TotalEscrowForDenom_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* Query::Stub::AsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTotalEscrowForDenomRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* req,
             ::ibc::applications::transfer::v1::QueryDenomTraceResponse* resp) {
               return service->DenomTrace(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* req,
             ::ibc::applications::transfer::v1::QueryDenomTracesResponse* resp) {
               return service->DenomTraces(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryParamsRequest* req,
             ::ibc::applications::transfer::v1::QueryParamsResponse* resp) {
               return service->Params(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryDenomHashRequest* req,
             ::ibc::applications::transfer::v1::QueryDenomHashResponse* resp) {
               return service->DenomHash(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* req,
             ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* resp) {
               return service->EscrowAddress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* req,
             ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* resp) {
               return service->TotalEscrowForDenom(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::DenomTrace(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomTraces(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Params(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::DenomHash(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::EscrowAddress(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::TotalEscrowForDenom(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace applications
}  // namespace transfer
}  // namespace v1


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/transfer/v1/query.proto
#ifndef GRPC_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto__INCLUDED

#include "ibc/applications/transfer/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {

// Query provides defines the gRPC querier service.
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.applications.transfer.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // DenomTrace queries a denomination trace information.
    virtual ::grpc::Status DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>> AsyncDenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>>(AsyncDenomTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>> PrepareAsyncDenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>>(PrepareAsyncDenomTraceRaw(context, request, cq));
    }
    // DenomTraces queries all denomination traces.
    virtual ::grpc::Status DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>> AsyncDenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>>(AsyncDenomTracesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>> PrepareAsyncDenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>>(PrepareAsyncDenomTracesRaw(context, request, cq));
    }
    // Params queries all parameters of the ibc-transfer module.
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::ibc::applications::transfer::v1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // DenomHash queries a denomination hash information.
    virtual ::grpc::Status DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>> AsyncDenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>>(AsyncDenomHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>> PrepareAsyncDenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>>(PrepareAsyncDenomHashRaw(context, request, cq));
    }
    // EscrowAddress returns the escrow address for a particular port and channel id.
    virtual ::grpc::Status EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>> AsyncEscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>>(AsyncEscrowAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>> PrepareAsyncEscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>>(PrepareAsyncEscrowAddressRaw(context, request, cq));
    }
    // TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
    virtual ::grpc::Status TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>> AsyncTotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>>(AsyncTotalEscrowForDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>> PrepareAsyncTotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>>(PrepareAsyncTotalEscrowForDenomRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // DenomTrace queries a denomination trace information.
      virtual void DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomTraces queries all denomination traces.
      virtual void DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Params queries all parameters of the ibc-transfer module.
      virtual void Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DenomHash queries a denomination hash information.
      virtual void DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // EscrowAddress returns the escrow address for a particular port and channel id.
      virtual void EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
      virtual void TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* AsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* PrepareAsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* AsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* PrepareAsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* AsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* PrepareAsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* AsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* PrepareAsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* AsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* PrepareAsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>> AsyncDenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>>(AsyncDenomTraceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>> PrepareAsyncDenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>>(PrepareAsyncDenomTraceRaw(context, request, cq));
    }
    ::grpc::Status DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>> AsyncDenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>>(AsyncDenomTracesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>> PrepareAsyncDenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>>(PrepareAsyncDenomTracesRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::ibc::applications::transfer::v1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>> AsyncDenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>>(AsyncDenomHashRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>> PrepareAsyncDenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>>(PrepareAsyncDenomHashRaw(context, request, cq));
    }
    ::grpc::Status EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>> AsyncEscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>>(AsyncEscrowAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>> PrepareAsyncEscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>>(PrepareAsyncEscrowAddressRaw(context, request, cq));
    }
    ::grpc::Status TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>> AsyncTotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>>(AsyncTotalEscrowForDenomRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>> PrepareAsyncTotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>>(PrepareAsyncTotalEscrowForDenomRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomTrace(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomTraces(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, std::function<void(::grpc::Status)>) override;
      void DenomHash(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void EscrowAddress(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, std::function<void(::grpc::Status)>) override;
      void TotalEscrowForDenom(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* AsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* PrepareAsyncDenomTraceRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* AsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* PrepareAsyncDenomTracesRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* AsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* PrepareAsyncDenomHashRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* AsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* PrepareAsyncEscrowAddressRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* AsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* PrepareAsyncTotalEscrowForDenomRaw(::grpc::ClientContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DenomTrace_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomTraces_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_DenomHash_;
    const ::grpc::internal::RpcMethod rpcmethod_EscrowAddress_;
    const ::grpc::internal::RpcMethod rpcmethod_TotalEscrowForDenom_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // DenomTrace queries a denomination trace information.
    virtual ::grpc::Status DenomTrace(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response);
    // DenomTraces queries all denomination traces.
    virtual ::grpc::Status DenomTraces(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response);
    // Params queries all parameters of the ibc-transfer module.
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response);
    // DenomHash queries a denomination hash information.
    virtual ::grpc::Status DenomHash(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response);
    // EscrowAddress returns the escrow address for a particular port and channel id.
    virtual ::grpc::Status EscrowAddress(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response);
    // TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.
    virtual ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomTrace() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomTrace(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomTraces() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomTraces(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DenomHash() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomHash(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryDenomHashResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEscrowAddress(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalEscrowForDenom(::grpc::ServerContext* context, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DenomTrace<WithAsyncMethod_DenomTraces<WithAsyncMethod_Params<WithAsyncMethod_DenomHash<WithAsyncMethod_EscrowAddress<WithAsyncMethod_TotalEscrowForDenom<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomTrace() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* request, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* response) { return this->DenomTrace(context, request, response); }));}
    void SetMessageAllocatorFor_DenomTrace(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomTraces() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* request, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* response) { return this->DenomTraces(context, request, response); }));}
    void SetMessageAllocatorFor_DenomTraces(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomTraces(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryParamsRequest* request, ::ibc::applications::transfer::v1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DenomHash() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* request, ::ibc::applications::transfer::v1::QueryDenomHashResponse* response) { return this->DenomHash(context, request, response); }));}
    void SetMessageAllocatorFor_DenomHash(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomHash(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* request, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* response) { return this->EscrowAddress(context, request, response); }));}
    void SetMessageAllocatorFor_EscrowAddress(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EscrowAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* request, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* response) { return this->TotalEscrowForDenom(context, request, response); }));}
    void SetMessageAllocatorFor_TotalEscrowForDenom(
        ::grpc::MessageAllocator< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalEscrowForDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_DenomTrace<WithCallbackMethod_DenomTraces<WithCallbackMethod_Params<WithCallbackMethod_DenomHash<WithCallbackMethod_EscrowAddress<WithCallbackMethod_TotalEscrowForDenom<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomTrace() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomTraces() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DenomHash() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomTrace() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomTrace(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomTraces() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomTraces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DenomHash() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDenomHash(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEscrowAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTotalEscrowForDenom(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomTrace() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomTrace(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomTrace(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomTraces() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomTraces(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomTraces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DenomHash() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DenomHash(context, request, response); }));
    }
    ~WithRawCallbackMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DenomHash(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EscrowAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EscrowAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TotalEscrowForDenom(context, request, response); }));
    }
    ~WithRawCallbackMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TotalEscrowForDenom(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomTrace : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomTrace() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryDenomTraceRequest, ::ibc::applications::transfer::v1::QueryDenomTraceResponse>* streamer) {
                       return this->StreamedDenomTrace(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomTrace() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomTrace(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTraceRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTraceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomTrace(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryDenomTraceRequest,::ibc::applications::transfer::v1::QueryDenomTraceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomTraces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomTraces() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryDenomTracesRequest, ::ibc::applications::transfer::v1::QueryDenomTracesResponse>* streamer) {
                       return this->StreamedDenomTraces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomTraces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomTraces(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomTracesRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomTracesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomTraces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryDenomTracesRequest,::ibc::applications::transfer::v1::QueryDenomTracesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryParamsRequest, ::ibc::applications::transfer::v1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryParamsRequest* /*request*/, ::ibc::applications::transfer::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryParamsRequest,::ibc::applications::transfer::v1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DenomHash : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DenomHash() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryDenomHashRequest, ::ibc::applications::transfer::v1::QueryDenomHashResponse>* streamer) {
                       return this->StreamedDenomHash(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DenomHash() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DenomHash(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryDenomHashRequest* /*request*/, ::ibc::applications::transfer::v1::QueryDenomHashResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDenomHash(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryDenomHashRequest,::ibc::applications::transfer::v1::QueryDenomHashResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EscrowAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EscrowAddress() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryEscrowAddressRequest, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* streamer) {
                       return this->StreamedEscrowAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EscrowAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EscrowAddress(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryEscrowAddressRequest* /*request*/, ::ibc::applications::transfer::v1::QueryEscrowAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEscrowAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryEscrowAddressRequest,::ibc::applications::transfer::v1::QueryEscrowAddressResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TotalEscrowForDenom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TotalEscrowForDenom() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* streamer) {
                       return this->StreamedTotalEscrowForDenom(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TotalEscrowForDenom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TotalEscrowForDenom(::grpc::ServerContext* /*context*/, const ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest* /*request*/, ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTotalEscrowForDenom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::transfer::v1::QueryTotalEscrowForDenomRequest,::ibc::applications::transfer::v1::QueryTotalEscrowForDenomResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DenomTrace<WithStreamedUnaryMethod_DenomTraces<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomHash<WithStreamedUnaryMethod_EscrowAddress<WithStreamedUnaryMethod_TotalEscrowForDenom<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DenomTrace<WithStreamedUnaryMethod_DenomTraces<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_DenomHash<WithStreamedUnaryMethod_EscrowAddress<WithStreamedUnaryMethod_TotalEscrowForDenom<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc


#endif  // GRPC_ibc_2fapplications_2ftransfer_2fv1_2fquery_2eproto__INCLUDED

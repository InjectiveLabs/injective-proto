// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/transfer/v1/transfer.proto

#include "ibc/applications/transfer/v1/transfer.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR DenomTrace::DenomTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_denom_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DenomTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DenomTraceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DenomTraceDefaultTypeInternal() {}
  union {
    DenomTrace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DenomTraceDefaultTypeInternal _DenomTrace_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.send_enabled_)*/ false

  , /*decltype(_impl_.receive_enabled_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::DenomTrace, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::DenomTrace, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::DenomTrace, _impl_.base_denom_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Params, _impl_.send_enabled_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Params, _impl_.receive_enabled_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::transfer::v1::DenomTrace)},
        { 10, -1, -1, sizeof(::ibc::applications::transfer::v1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::transfer::v1::_DenomTrace_default_instance_._instance,
    &::ibc::applications::transfer::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n+ibc/applications/transfer/v1/transfer."
    "proto\022\034ibc.applications.transfer.v1\"\?\n\nD"
    "enomTrace\022\022\n\004path\030\001 \001(\tR\004path\022\035\n\nbase_de"
    "nom\030\002 \001(\tR\tbaseDenom\"T\n\006Params\022!\n\014send_e"
    "nabled\030\001 \001(\010R\013sendEnabled\022\'\n\017receive_ena"
    "bled\030\002 \001(\010R\016receiveEnabledB\375\001\n com.ibc.a"
    "pplications.transfer.v1B\rTransferProtoP\001"
    "Z7github.com/cosmos/ibc-go/v7/modules/ap"
    "ps/transfer/types\242\002\003IAT\252\002\034Ibc.Applicatio"
    "ns.Transfer.V1\312\002\034Ibc\\Applications\\Transf"
    "er\\V1\342\002(Ibc\\Applications\\Transfer\\V1\\GPB"
    "Metadata\352\002\037Ibc::Applications::Transfer::"
    "V1b\006proto3"
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto = {
    false,
    false,
    490,
    descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto,
    "ibc/applications/transfer/v1/transfer.proto",
    &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto(&descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto);
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
// ===================================================================

class DenomTrace::_Internal {
 public:
};

DenomTrace::DenomTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v1.DenomTrace)
}
DenomTrace::DenomTrace(const DenomTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DenomTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.base_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_denom().empty()) {
    _this->_impl_.base_denom_.Set(from._internal_base_denom(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v1.DenomTrace)
}

inline void DenomTrace::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.base_denom_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.base_denom_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.base_denom_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DenomTrace::~DenomTrace() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v1.DenomTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DenomTrace::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.base_denom_.Destroy();
}

void DenomTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DenomTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v1.DenomTrace)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.base_denom_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DenomTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v1.DenomTrace.path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string base_denom = 2 [json_name = "baseDenom"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_base_denom();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v1.DenomTrace.base_denom"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DenomTrace::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v1.DenomTrace)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v1.DenomTrace.path");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string base_denom = 2 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    const std::string& _s = this->_internal_base_denom();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v1.DenomTrace.base_denom");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v1.DenomTrace)
  return target;
}

::size_t DenomTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v1.DenomTrace)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  // string base_denom = 2 [json_name = "baseDenom"];
  if (!this->_internal_base_denom().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_base_denom());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DenomTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DenomTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DenomTrace::GetClassData() const { return &_class_data_; }


void DenomTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DenomTrace*>(&to_msg);
  auto& from = static_cast<const DenomTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v1.DenomTrace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_base_denom().empty()) {
    _this->_internal_set_base_denom(from._internal_base_denom());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DenomTrace::CopyFrom(const DenomTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v1.DenomTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenomTrace::IsInitialized() const {
  return true;
}

void DenomTrace::InternalSwap(DenomTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_denom_, lhs_arena,
                                       &other->_impl_.base_denom_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DenomTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_getter, &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto[0]);
}
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.send_enabled_) { false }

    , decltype(_impl_.receive_enabled_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.send_enabled_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.receive_enabled_) -
      reinterpret_cast<char*>(&_impl_.send_enabled_)) + sizeof(_impl_.receive_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool send_enabled = 1 [json_name = "sendEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.send_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool receive_enabled = 2 [json_name = "receiveEnabled"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.receive_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool send_enabled = 1 [json_name = "sendEnabled"];
  if (this->_internal_send_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_send_enabled(), target);
  }

  // bool receive_enabled = 2 [json_name = "receiveEnabled"];
  if (this->_internal_receive_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_receive_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool send_enabled = 1 [json_name = "sendEnabled"];
  if (this->_internal_send_enabled() != 0) {
    total_size += 2;
  }

  // bool receive_enabled = 2 [json_name = "receiveEnabled"];
  if (this->_internal_receive_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_send_enabled() != 0) {
    _this->_internal_set_send_enabled(from._internal_send_enabled());
  }
  if (from._internal_receive_enabled() != 0) {
    _this->_internal_set_receive_enabled(from._internal_receive_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Params, _impl_.receive_enabled_)
      + sizeof(Params::_impl_.receive_enabled_)
      - PROTOBUF_FIELD_OFFSET(Params, _impl_.send_enabled_)>(
          reinterpret_cast<char*>(&_impl_.send_enabled_),
          reinterpret_cast<char*>(&other->_impl_.send_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_getter, &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2ftransfer_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v1::DenomTrace*
Arena::CreateMaybeMessage< ::ibc::applications::transfer::v1::DenomTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v1::DenomTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v1::Params*
Arena::CreateMaybeMessage< ::ibc::applications::transfer::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

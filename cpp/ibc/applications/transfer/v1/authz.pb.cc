// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/transfer/v1/authz.proto

#include "ibc/applications/transfer/v1/authz.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Allocation::Allocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spend_limit_)*/{}
  , /*decltype(_impl_.allow_list_)*/{}
  , /*decltype(_impl_.source_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationDefaultTypeInternal() {}
  union {
    Allocation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationDefaultTypeInternal _Allocation_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TransferAuthorization::TransferAuthorization(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allocations_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransferAuthorizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransferAuthorizationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransferAuthorizationDefaultTypeInternal() {}
  union {
    TransferAuthorization _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransferAuthorizationDefaultTypeInternal _TransferAuthorization_default_instance_;
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Allocation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Allocation, _impl_.source_port_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Allocation, _impl_.source_channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Allocation, _impl_.spend_limit_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::Allocation, _impl_.allow_list_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::TransferAuthorization, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::transfer::v1::TransferAuthorization, _impl_.allocations_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::transfer::v1::Allocation)},
        { 12, -1, -1, sizeof(::ibc::applications::transfer::v1::TransferAuthorization)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::transfer::v1::_Allocation_default_instance_._instance,
    &::ibc::applications::transfer::v1::_TransferAuthorization_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n(ibc/applications/transfer/v1/authz.pro"
    "to\022\034ibc.applications.transfer.v1\032\031cosmos"
    "_proto/cosmos.proto\032\024gogoproto/gogo.prot"
    "o\032\036cosmos/base/v1beta1/coin.proto\"\341\001\n\nAl"
    "location\022\037\n\013source_port\030\001 \001(\tR\nsourcePor"
    "t\022%\n\016source_channel\030\002 \001(\tR\rsourceChannel"
    "\022l\n\013spend_limit\030\003 \003(\0132\031.cosmos.base.v1be"
    "ta1.CoinB0\310\336\037\000\252\337\037(github.com/cosmos/cosm"
    "os-sdk/types.CoinsR\nspendLimit\022\035\n\nallow_"
    "list\030\004 \003(\tR\tallowList\"\221\001\n\025TransferAuthor"
    "ization\022P\n\013allocations\030\001 \003(\0132(.ibc.appli"
    "cations.transfer.v1.AllocationB\004\310\336\037\000R\013al"
    "locations:&\312\264-\"cosmos.authz.v1beta1.Auth"
    "orizationB\372\001\n com.ibc.applications.trans"
    "fer.v1B\nAuthzProtoP\001Z7github.com/cosmos/"
    "ibc-go/v7/modules/apps/transfer/types\242\002\003"
    "IAT\252\002\034Ibc.Applications.Transfer.V1\312\002\034Ibc"
    "\\Applications\\Transfer\\V1\342\002(Ibc\\Applicat"
    "ions\\Transfer\\V1\\GPBMetadata\352\002\037Ibc::Appl"
    "ications::Transfer::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fbase_2fv1beta1_2fcoin_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto = {
    false,
    false,
    790,
    descriptor_table_protodef_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto,
    "ibc/applications/transfer/v1/authz.proto",
    &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_once,
    descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_deps,
    3,
    2,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto(&descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto);
namespace ibc {
namespace applications {
namespace transfer {
namespace v1 {
// ===================================================================

class Allocation::_Internal {
 public:
};

void Allocation::clear_spend_limit() {
  _internal_mutable_spend_limit()->Clear();
}
Allocation::Allocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v1.Allocation)
}
Allocation::Allocation(const Allocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Allocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spend_limit_){from._impl_.spend_limit_}
    , decltype(_impl_.allow_list_){from._impl_.allow_list_}
    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_port().empty()) {
    _this->_impl_.source_port_.Set(from._internal_source_port(), _this->GetArenaForAllocation());
  }
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_channel().empty()) {
    _this->_impl_.source_channel_.Set(from._internal_source_channel(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v1.Allocation)
}

inline void Allocation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.spend_limit_){arena}
    , decltype(_impl_.allow_list_){arena}
    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Allocation::~Allocation() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v1.Allocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Allocation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_spend_limit()->~RepeatedPtrField();
  _internal_mutable_allow_list()->~RepeatedPtrField();
  _impl_.source_port_.Destroy();
  _impl_.source_channel_.Destroy();
}

void Allocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Allocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v1.Allocation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_spend_limit()->Clear();
  _internal_mutable_allow_list()->Clear();
  _impl_.source_port_.ClearToEmpty();
  _impl_.source_channel_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Allocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string source_port = 1 [json_name = "sourcePort"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_source_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v1.Allocation.source_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_channel = 2 [json_name = "sourceChannel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v1.Allocation.source_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.base.v1beta1.Coin spend_limit = 3 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_spend_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string allow_list = 4 [json_name = "allowList"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allow_list();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.transfer.v1.Allocation.allow_list"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Allocation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v1.Allocation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_port = 1 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    const std::string& _s = this->_internal_source_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v1.Allocation.source_port");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string source_channel = 2 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    const std::string& _s = this->_internal_source_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v1.Allocation.source_channel");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .cosmos.base.v1beta1.Coin spend_limit = 3 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_spend_limit_size()); i < n; i++) {
    const auto& repfield = this->_internal_spend_limit(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string allow_list = 4 [json_name = "allowList"];
  for (int i = 0, n = this->_internal_allow_list_size(); i < n; ++i) {
    const auto& s = this->_internal_allow_list(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.transfer.v1.Allocation.allow_list");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v1.Allocation)
  return target;
}

::size_t Allocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v1.Allocation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.base.v1beta1.Coin spend_limit = 3 [json_name = "spendLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  total_size += 1UL * this->_internal_spend_limit_size();
  for (const auto& msg : this->_internal_spend_limit()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string allow_list = 4 [json_name = "allowList"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_allow_list().size());
  for (int i = 0, n = _internal_allow_list().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_allow_list().Get(i));
  }

  // string source_port = 1 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_port());
  }

  // string source_channel = 2 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Allocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Allocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Allocation::GetClassData() const { return &_class_data_; }


void Allocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Allocation*>(&to_msg);
  auto& from = static_cast<const Allocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v1.Allocation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_spend_limit()->MergeFrom(from._internal_spend_limit());
  _this->_internal_mutable_allow_list()->MergeFrom(from._internal_allow_list());
  if (!from._internal_source_port().empty()) {
    _this->_internal_set_source_port(from._internal_source_port());
  }
  if (!from._internal_source_channel().empty()) {
    _this->_internal_set_source_channel(from._internal_source_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Allocation::CopyFrom(const Allocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v1.Allocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Allocation::IsInitialized() const {
  return true;
}

void Allocation::InternalSwap(Allocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_spend_limit()->InternalSwap(other->_internal_mutable_spend_limit());
  _internal_mutable_allow_list()->InternalSwap(
      other->_internal_mutable_allow_list());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_port_, lhs_arena,
                                       &other->_impl_.source_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_channel_, lhs_arena,
                                       &other->_impl_.source_channel_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Allocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_getter, &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto[0]);
}
// ===================================================================

class TransferAuthorization::_Internal {
 public:
};

TransferAuthorization::TransferAuthorization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.transfer.v1.TransferAuthorization)
}
TransferAuthorization::TransferAuthorization(const TransferAuthorization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransferAuthorization* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allocations_){from._impl_.allocations_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.applications.transfer.v1.TransferAuthorization)
}

inline void TransferAuthorization::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.allocations_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransferAuthorization::~TransferAuthorization() {
  // @@protoc_insertion_point(destructor:ibc.applications.transfer.v1.TransferAuthorization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransferAuthorization::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_allocations()->~RepeatedPtrField();
}

void TransferAuthorization::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransferAuthorization::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.transfer.v1.TransferAuthorization)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_allocations()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransferAuthorization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.transfer.v1.Allocation allocations = 1 [json_name = "allocations", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allocations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TransferAuthorization::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.transfer.v1.TransferAuthorization)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.transfer.v1.Allocation allocations = 1 [json_name = "allocations", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allocations_size()); i < n; i++) {
    const auto& repfield = this->_internal_allocations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.transfer.v1.TransferAuthorization)
  return target;
}

::size_t TransferAuthorization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.transfer.v1.TransferAuthorization)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.transfer.v1.Allocation allocations = 1 [json_name = "allocations", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_allocations_size();
  for (const auto& msg : this->_internal_allocations()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransferAuthorization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransferAuthorization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransferAuthorization::GetClassData() const { return &_class_data_; }


void TransferAuthorization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransferAuthorization*>(&to_msg);
  auto& from = static_cast<const TransferAuthorization&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.transfer.v1.TransferAuthorization)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_allocations()->MergeFrom(from._internal_allocations());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransferAuthorization::CopyFrom(const TransferAuthorization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.transfer.v1.TransferAuthorization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferAuthorization::IsInitialized() const {
  return true;
}

void TransferAuthorization::InternalSwap(TransferAuthorization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_allocations()->InternalSwap(other->_internal_mutable_allocations());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransferAuthorization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_getter, &descriptor_table_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto_once,
      file_level_metadata_ibc_2fapplications_2ftransfer_2fv1_2fauthz_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace transfer
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v1::Allocation*
Arena::CreateMaybeMessage< ::ibc::applications::transfer::v1::Allocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v1::Allocation >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::transfer::v1::TransferAuthorization*
Arena::CreateMaybeMessage< ::ibc::applications::transfer::v1::TransferAuthorization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::transfer::v1::TransferAuthorization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

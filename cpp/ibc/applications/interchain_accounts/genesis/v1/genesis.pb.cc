// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/genesis/v1/genesis.proto

#include "ibc/applications/interchain_accounts/genesis/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace genesis {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.controller_genesis_state_)*/nullptr
  , /*decltype(_impl_.host_genesis_state_)*/nullptr} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ControllerGenesisState::ControllerGenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_channels_)*/{}
  , /*decltype(_impl_.interchain_accounts_)*/{}
  , /*decltype(_impl_.ports_)*/{}
  , /*decltype(_impl_.params_)*/nullptr} {}
struct ControllerGenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControllerGenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControllerGenesisStateDefaultTypeInternal() {}
  union {
    ControllerGenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControllerGenesisStateDefaultTypeInternal _ControllerGenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HostGenesisState::HostGenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.active_channels_)*/{}
  , /*decltype(_impl_.interchain_accounts_)*/{}
  , /*decltype(_impl_.port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr} {}
struct HostGenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostGenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostGenesisStateDefaultTypeInternal() {}
  union {
    HostGenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostGenesisStateDefaultTypeInternal _HostGenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ActiveChannel::ActiveChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.is_middleware_enabled_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ActiveChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActiveChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActiveChannelDefaultTypeInternal() {}
  union {
    ActiveChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActiveChannelDefaultTypeInternal _ActiveChannel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR RegisteredInterchainAccount::RegisteredInterchainAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisteredInterchainAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredInterchainAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredInterchainAccountDefaultTypeInternal() {}
  union {
    RegisteredInterchainAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredInterchainAccountDefaultTypeInternal _RegisteredInterchainAccount_default_instance_;
}  // namespace v1
}  // namespace genesis
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::GenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::GenesisState, _impl_.controller_genesis_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::GenesisState, _impl_.host_genesis_state_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _impl_.active_channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _impl_.interchain_accounts_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _impl_.ports_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState, _impl_.params_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _impl_.active_channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _impl_.interchain_accounts_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState, _impl_.params_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel, _impl_.is_middleware_enabled_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount, _impl_.account_address_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::ibc::applications::interchain_accounts::genesis::v1::GenesisState)},
        { 12, 24, -1, sizeof(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState)},
        { 28, 40, -1, sizeof(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState)},
        { 44, -1, -1, sizeof(::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel)},
        { 56, -1, -1, sizeof(::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::interchain_accounts::genesis::v1::_GenesisState_default_instance_._instance,
    &::ibc::applications::interchain_accounts::genesis::v1::_ControllerGenesisState_default_instance_._instance,
    &::ibc::applications::interchain_accounts::genesis::v1::_HostGenesisState_default_instance_._instance,
    &::ibc::applications::interchain_accounts::genesis::v1::_ActiveChannel_default_instance_._instance,
    &::ibc::applications::interchain_accounts::genesis::v1::_RegisteredInterchainAccount_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n=ibc/applications/interchain_accounts/g"
    "enesis/v1/genesis.proto\022/ibc.application"
    "s.interchain_accounts.genesis.v1\032\024gogopr"
    "oto/gogo.proto\032Cibc/applications/interch"
    "ain_accounts/controller/v1/controller.pr"
    "oto\0327ibc/applications/interchain_account"
    "s/host/v1/host.proto\"\217\002\n\014GenesisState\022\207\001"
    "\n\030controller_genesis_state\030\001 \001(\0132G.ibc.a"
    "pplications.interchain_accounts.genesis."
    "v1.ControllerGenesisStateB\004\310\336\037\000R\026control"
    "lerGenesisState\022u\n\022host_genesis_state\030\002 "
    "\001(\0132A.ibc.applications.interchain_accoun"
    "ts.genesis.v1.HostGenesisStateB\004\310\336\037\000R\020ho"
    "stGenesisState\"\375\002\n\026ControllerGenesisStat"
    "e\022m\n\017active_channels\030\001 \003(\0132>.ibc.applica"
    "tions.interchain_accounts.genesis.v1.Act"
    "iveChannelB\004\310\336\037\000R\016activeChannels\022\203\001\n\023int"
    "erchain_accounts\030\002 \003(\0132L.ibc.application"
    "s.interchain_accounts.genesis.v1.Registe"
    "redInterchainAccountB\004\310\336\037\000R\022interchainAc"
    "counts\022\024\n\005ports\030\003 \003(\tR\005ports\022X\n\006params\030\004"
    " \001(\0132:.ibc.applications.interchain_accou"
    "nts.controller.v1.ParamsB\004\310\336\037\000R\006params\"\357"
    "\002\n\020HostGenesisState\022m\n\017active_channels\030\001"
    " \003(\0132>.ibc.applications.interchain_accou"
    "nts.genesis.v1.ActiveChannelB\004\310\336\037\000R\016acti"
    "veChannels\022\203\001\n\023interchain_accounts\030\002 \003(\013"
    "2L.ibc.applications.interchain_accounts."
    "genesis.v1.RegisteredInterchainAccountB\004"
    "\310\336\037\000R\022interchainAccounts\022\022\n\004port\030\003 \001(\tR\004"
    "port\022R\n\006params\030\004 \001(\01324.ibc.applications."
    "interchain_accounts.host.v1.ParamsB\004\310\336\037\000"
    "R\006params\"\240\001\n\rActiveChannel\022#\n\rconnection"
    "_id\030\001 \001(\tR\014connectionId\022\027\n\007port_id\030\002 \001(\t"
    "R\006portId\022\035\n\nchannel_id\030\003 \001(\tR\tchannelId\022"
    "2\n\025is_middleware_enabled\030\004 \001(\010R\023isMiddle"
    "wareEnabled\"\204\001\n\033RegisteredInterchainAcco"
    "unt\022#\n\rconnection_id\030\001 \001(\tR\014connectionId"
    "\022\027\n\007port_id\030\002 \001(\tR\006portId\022\'\n\017account_add"
    "ress\030\003 \001(\tR\016accountAddressB\357\002\n3com.ibc.a"
    "pplications.interchain_accounts.genesis."
    "v1B\014GenesisProtoP\001ZMgithub.com/cosmos/ib"
    "c-go/v7/modules/apps/27-interchain-accou"
    "nts/genesis/types\242\002\004IAIG\252\002.Ibc.Applicati"
    "ons.InterchainAccounts.Genesis.V1\312\002.Ibc\\"
    "Applications\\InterchainAccounts\\Genesis\\"
    "V1\342\002:Ibc\\Applications\\InterchainAccounts"
    "\\Genesis\\V1\\GPBMetadata\352\0022Ibc::Applicati"
    "ons::InterchainAccounts::Genesis::V1b\006pr"
    "oto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2fcontroller_2eproto,
        &::descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fhost_2fv1_2fhost_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto = {
    false,
    false,
    1964,
    descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto,
    "ibc/applications/interchain_accounts/genesis/v1/genesis.proto",
    &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_deps,
    3,
    5,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto(&descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto);
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace genesis {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<GenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenesisState, _impl_._has_bits_);
  static const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState& controller_genesis_state(const GenesisState* msg);
  static void set_has_controller_genesis_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState& host_genesis_state(const GenesisState* msg);
  static void set_has_host_genesis_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState&
GenesisState::_Internal::controller_genesis_state(const GenesisState* msg) {
  return *msg->_impl_.controller_genesis_state_;
}
const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState&
GenesisState::_Internal::host_genesis_state(const GenesisState* msg) {
  return *msg->_impl_.host_genesis_state_;
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_genesis_state_){nullptr}
    , decltype(_impl_.host_genesis_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.controller_genesis_state_ = new ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState(*from._impl_.controller_genesis_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.host_genesis_state_ = new ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState(*from._impl_.host_genesis_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.controller_genesis_state_){nullptr}
    , decltype(_impl_.host_genesis_state_){nullptr}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.controller_genesis_state_;
  if (this != internal_default_instance()) delete _impl_.host_genesis_state_;
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.controller_genesis_state_ != nullptr);
      _impl_.controller_genesis_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.host_genesis_state_ != nullptr);
      _impl_.host_genesis_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState controller_genesis_state = 1 [json_name = "controllerGenesisState", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_controller_genesis_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.applications.interchain_accounts.genesis.v1.HostGenesisState host_genesis_state = 2 [json_name = "hostGenesisState", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_genesis_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState controller_genesis_state = 1 [json_name = "controllerGenesisState", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::controller_genesis_state(this),
        _Internal::controller_genesis_state(this).GetCachedSize(), target, stream);
  }

  // .ibc.applications.interchain_accounts.genesis.v1.HostGenesisState host_genesis_state = 2 [json_name = "hostGenesisState", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::host_genesis_state(this),
        _Internal::host_genesis_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState controller_genesis_state = 1 [json_name = "controllerGenesisState", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.controller_genesis_state_);
    }

    // .ibc.applications.interchain_accounts.genesis.v1.HostGenesisState host_genesis_state = 2 [json_name = "hostGenesisState", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_genesis_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_controller_genesis_state()->::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState::MergeFrom(
          from._internal_controller_genesis_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_host_genesis_state()->::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState::MergeFrom(
          from._internal_host_genesis_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.host_genesis_state_)
      + sizeof(GenesisState::_impl_.host_genesis_state_)
      - PROTOBUF_FIELD_OFFSET(GenesisState, _impl_.controller_genesis_state_)>(
          reinterpret_cast<char*>(&_impl_.controller_genesis_state_),
          reinterpret_cast<char*>(&other->_impl_.controller_genesis_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[0]);
}
// ===================================================================

class ControllerGenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<ControllerGenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ControllerGenesisState, _impl_._has_bits_);
  static const ::ibc::applications::interchain_accounts::controller::v1::Params& params(const ControllerGenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::applications::interchain_accounts::controller::v1::Params&
ControllerGenesisState::_Internal::params(const ControllerGenesisState* msg) {
  return *msg->_impl_.params_;
}
void ControllerGenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ControllerGenesisState::ControllerGenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
}
ControllerGenesisState::ControllerGenesisState(const ControllerGenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControllerGenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_channels_){from._impl_.active_channels_}
    , decltype(_impl_.interchain_accounts_){from._impl_.interchain_accounts_}
    , decltype(_impl_.ports_){from._impl_.ports_}
    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::ibc::applications::interchain_accounts::controller::v1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
}

inline void ControllerGenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_channels_){arena}
    , decltype(_impl_.interchain_accounts_){arena}
    , decltype(_impl_.ports_){arena}
    , decltype(_impl_.params_){nullptr}
  };
}

ControllerGenesisState::~ControllerGenesisState() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControllerGenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_active_channels()->~RepeatedPtrField();
  _internal_mutable_interchain_accounts()->~RepeatedPtrField();
  _internal_mutable_ports()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void ControllerGenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControllerGenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_active_channels()->Clear();
  _internal_mutable_interchain_accounts()->Clear();
  _internal_mutable_ports()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControllerGenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interchain_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string ports = 3 [json_name = "ports"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ports();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.applications.interchain_accounts.controller.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ControllerGenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interchain_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_interchain_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string ports = 3 [json_name = "ports"];
  for (int i = 0, n = this->_internal_ports_size(); i < n; ++i) {
    const auto& s = this->_internal_ports(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.interchain_accounts.controller.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  return target;
}

::size_t ControllerGenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_active_channels_size();
  for (const auto& msg : this->_internal_active_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_interchain_accounts_size();
  for (const auto& msg : this->_internal_interchain_accounts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string ports = 3 [json_name = "ports"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_ports().size());
  for (int i = 0, n = _internal_ports().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_ports().Get(i));
  }

  // .ibc.applications.interchain_accounts.controller.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControllerGenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControllerGenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControllerGenesisState::GetClassData() const { return &_class_data_; }


void ControllerGenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControllerGenesisState*>(&to_msg);
  auto& from = static_cast<const ControllerGenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_active_channels()->MergeFrom(from._internal_active_channels());
  _this->_internal_mutable_interchain_accounts()->MergeFrom(from._internal_interchain_accounts());
  _this->_internal_mutable_ports()->MergeFrom(from._internal_ports());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::ibc::applications::interchain_accounts::controller::v1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControllerGenesisState::CopyFrom(const ControllerGenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControllerGenesisState::IsInitialized() const {
  return true;
}

void ControllerGenesisState::InternalSwap(ControllerGenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_active_channels()->InternalSwap(other->_internal_mutable_active_channels());
  _internal_mutable_interchain_accounts()->InternalSwap(other->_internal_mutable_interchain_accounts());
  _internal_mutable_ports()->InternalSwap(
      other->_internal_mutable_ports());
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControllerGenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[1]);
}
// ===================================================================

class HostGenesisState::_Internal {
 public:
  using HasBits = decltype(std::declval<HostGenesisState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HostGenesisState, _impl_._has_bits_);
  static const ::ibc::applications::interchain_accounts::host::v1::Params& params(const HostGenesisState* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::applications::interchain_accounts::host::v1::Params&
HostGenesisState::_Internal::params(const HostGenesisState* msg) {
  return *msg->_impl_.params_;
}
void HostGenesisState::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HostGenesisState::HostGenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
}
HostGenesisState::HostGenesisState(const HostGenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HostGenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_channels_){from._impl_.active_channels_}
    , decltype(_impl_.interchain_accounts_){from._impl_.interchain_accounts_}
    , decltype(_impl_.port_) {}

    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    _this->_impl_.port_.Set(from._internal_port(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::ibc::applications::interchain_accounts::host::v1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
}

inline void HostGenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.active_channels_){arena}
    , decltype(_impl_.interchain_accounts_){arena}
    , decltype(_impl_.port_) {}

    , decltype(_impl_.params_){nullptr}
  };
  _impl_.port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostGenesisState::~HostGenesisState() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostGenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_active_channels()->~RepeatedPtrField();
  _internal_mutable_interchain_accounts()->~RepeatedPtrField();
  _impl_.port_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void HostGenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HostGenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_active_channels()->Clear();
  _internal_mutable_interchain_accounts()->Clear();
  _impl_.port_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostGenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interchain_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port = 3 [json_name = "port"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.applications.interchain_accounts.host.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HostGenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_interchain_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_interchain_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string port = 3 [json_name = "port"];
  if (!this->_internal_port().empty()) {
    const std::string& _s = this->_internal_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.applications.interchain_accounts.host.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  return target;
}

::size_t HostGenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_active_channels_size();
  for (const auto& msg : this->_internal_active_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_interchain_accounts_size();
  for (const auto& msg : this->_internal_interchain_accounts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string port = 3 [json_name = "port"];
  if (!this->_internal_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port());
  }

  // .ibc.applications.interchain_accounts.host.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HostGenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HostGenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HostGenesisState::GetClassData() const { return &_class_data_; }


void HostGenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HostGenesisState*>(&to_msg);
  auto& from = static_cast<const HostGenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_active_channels()->MergeFrom(from._internal_active_channels());
  _this->_internal_mutable_interchain_accounts()->MergeFrom(from._internal_interchain_accounts());
  if (!from._internal_port().empty()) {
    _this->_internal_set_port(from._internal_port());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::ibc::applications::interchain_accounts::host::v1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HostGenesisState::CopyFrom(const HostGenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostGenesisState::IsInitialized() const {
  return true;
}

void HostGenesisState::InternalSwap(HostGenesisState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_active_channels()->InternalSwap(other->_internal_mutable_active_channels());
  _internal_mutable_interchain_accounts()->InternalSwap(other->_internal_mutable_interchain_accounts());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_, lhs_arena,
                                       &other->_impl_.port_, rhs_arena);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostGenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[2]);
}
// ===================================================================

class ActiveChannel::_Internal {
 public:
};

ActiveChannel::ActiveChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
}
ActiveChannel::ActiveChannel(const ActiveChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActiveChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.is_middleware_enabled_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.is_middleware_enabled_ = from._impl_.is_middleware_enabled_;
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
}

inline void ActiveChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.is_middleware_enabled_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ActiveChannel::~ActiveChannel() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActiveChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void ActiveChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActiveChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.is_middleware_enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1 [json_name = "connectionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port_id = 2 [json_name = "portId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 3 [json_name = "channelId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_middleware_enabled = 4 [json_name = "isMiddlewareEnabled"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.is_middleware_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActiveChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string channel_id = 3 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool is_middleware_enabled = 4 [json_name = "isMiddlewareEnabled"];
  if (this->_internal_is_middleware_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_middleware_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  return target;
}

::size_t ActiveChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 3 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // bool is_middleware_enabled = 4 [json_name = "isMiddlewareEnabled"];
  if (this->_internal_is_middleware_enabled() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActiveChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActiveChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActiveChannel::GetClassData() const { return &_class_data_; }


void ActiveChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActiveChannel*>(&to_msg);
  auto& from = static_cast<const ActiveChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_is_middleware_enabled() != 0) {
    _this->_internal_set_is_middleware_enabled(from._internal_is_middleware_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActiveChannel::CopyFrom(const ActiveChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveChannel::IsInitialized() const {
  return true;
}

void ActiveChannel::InternalSwap(ActiveChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.is_middleware_enabled_, other->_impl_.is_middleware_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[3]);
}
// ===================================================================

class RegisteredInterchainAccount::_Internal {
 public:
};

RegisteredInterchainAccount::RegisteredInterchainAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
}
RegisteredInterchainAccount::RegisteredInterchainAccount(const RegisteredInterchainAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredInterchainAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_address().empty()) {
    _this->_impl_.account_address_.Set(from._internal_account_address(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
}

inline void RegisteredInterchainAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.connection_id_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.account_address_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredInterchainAccount::~RegisteredInterchainAccount() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredInterchainAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.port_id_.Destroy();
  _impl_.account_address_.Destroy();
}

void RegisteredInterchainAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredInterchainAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.port_id_.ClearToEmpty();
  _impl_.account_address_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredInterchainAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1 [json_name = "connectionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port_id = 2 [json_name = "portId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_address = 3 [json_name = "accountAddress"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RegisteredInterchainAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string account_address = 3 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    const std::string& _s = this->_internal_account_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  return target;
}

::size_t RegisteredInterchainAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // string port_id = 2 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string account_address = 3 [json_name = "accountAddress"];
  if (!this->_internal_account_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredInterchainAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredInterchainAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredInterchainAccount::GetClassData() const { return &_class_data_; }


void RegisteredInterchainAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredInterchainAccount*>(&to_msg);
  auto& from = static_cast<const RegisteredInterchainAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_account_address().empty()) {
    _this->_internal_set_account_address(from._internal_account_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredInterchainAccount::CopyFrom(const RegisteredInterchainAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredInterchainAccount::IsInitialized() const {
  return true;
}

void RegisteredInterchainAccount::InternalSwap(RegisteredInterchainAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_address_, lhs_arena,
                                       &other->_impl_.account_address_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredInterchainAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genesis
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::genesis::v1::GenesisState*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::genesis::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::genesis::v1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

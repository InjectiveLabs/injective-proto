// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/genesis/v1/genesis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/applications/interchain_accounts/controller/v1/controller.pb.h"
#include "ibc/applications/interchain_accounts/host/v1/host.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace genesis {
namespace v1 {
class ActiveChannel;
struct ActiveChannelDefaultTypeInternal;
extern ActiveChannelDefaultTypeInternal _ActiveChannel_default_instance_;
class ControllerGenesisState;
struct ControllerGenesisStateDefaultTypeInternal;
extern ControllerGenesisStateDefaultTypeInternal _ControllerGenesisState_default_instance_;
class GenesisState;
struct GenesisStateDefaultTypeInternal;
extern GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
class HostGenesisState;
struct HostGenesisStateDefaultTypeInternal;
extern HostGenesisStateDefaultTypeInternal _HostGenesisState_default_instance_;
class RegisteredInterchainAccount;
struct RegisteredInterchainAccountDefaultTypeInternal;
extern RegisteredInterchainAccountDefaultTypeInternal _RegisteredInterchainAccount_default_instance_;
}  // namespace v1
}  // namespace genesis
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>(Arena*);
template <>
::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState>(Arena*);
template <>
::ibc::applications::interchain_accounts::genesis::v1::GenesisState* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::GenesisState>(Arena*);
template <>
::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState>(Arena*);
template <>
::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace genesis {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class GenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.genesis.v1.GenesisState) */ {
 public:
  inline GenesisState() : GenesisState(nullptr) {}
  ~GenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenesisState(const GenesisState& from);
  GenesisState(GenesisState&& from) noexcept
    : GenesisState() {
    *this = ::std::move(from);
  }

  inline GenesisState& operator=(const GenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenesisState& operator=(GenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenesisState* internal_default_instance() {
    return reinterpret_cast<const GenesisState*>(
               &_GenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GenesisState& a, GenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(GenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GenesisState& from) {
    GenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.genesis.v1.GenesisState";
  }
  protected:
  explicit GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerGenesisStateFieldNumber = 1,
    kHostGenesisStateFieldNumber = 2,
  };
  // .ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState controller_genesis_state = 1 [json_name = "controllerGenesisState", (.gogoproto.nullable) = false];
  bool has_controller_genesis_state() const;
  void clear_controller_genesis_state() ;
  const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState& controller_genesis_state() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* release_controller_genesis_state();
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* mutable_controller_genesis_state();
  void set_allocated_controller_genesis_state(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* controller_genesis_state);
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState& _internal_controller_genesis_state() const;
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* _internal_mutable_controller_genesis_state();
  public:
  void unsafe_arena_set_allocated_controller_genesis_state(
      ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* controller_genesis_state);
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* unsafe_arena_release_controller_genesis_state();
  // .ibc.applications.interchain_accounts.genesis.v1.HostGenesisState host_genesis_state = 2 [json_name = "hostGenesisState", (.gogoproto.nullable) = false];
  bool has_host_genesis_state() const;
  void clear_host_genesis_state() ;
  const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState& host_genesis_state() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* release_host_genesis_state();
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* mutable_host_genesis_state();
  void set_allocated_host_genesis_state(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* host_genesis_state);
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState& _internal_host_genesis_state() const;
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* _internal_mutable_host_genesis_state();
  public:
  void unsafe_arena_set_allocated_host_genesis_state(
      ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* host_genesis_state);
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* unsafe_arena_release_host_genesis_state();
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.genesis.v1.GenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* controller_genesis_state_;
    ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* host_genesis_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ControllerGenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState) */ {
 public:
  inline ControllerGenesisState() : ControllerGenesisState(nullptr) {}
  ~ControllerGenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ControllerGenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControllerGenesisState(const ControllerGenesisState& from);
  ControllerGenesisState(ControllerGenesisState&& from) noexcept
    : ControllerGenesisState() {
    *this = ::std::move(from);
  }

  inline ControllerGenesisState& operator=(const ControllerGenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControllerGenesisState& operator=(ControllerGenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControllerGenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControllerGenesisState* internal_default_instance() {
    return reinterpret_cast<const ControllerGenesisState*>(
               &_ControllerGenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControllerGenesisState& a, ControllerGenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(ControllerGenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControllerGenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControllerGenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControllerGenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControllerGenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ControllerGenesisState& from) {
    ControllerGenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControllerGenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState";
  }
  protected:
  explicit ControllerGenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveChannelsFieldNumber = 1,
    kInterchainAccountsFieldNumber = 2,
    kPortsFieldNumber = 3,
    kParamsFieldNumber = 4,
  };
  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  int active_channels_size() const;
  private:
  int _internal_active_channels_size() const;

  public:
  void clear_active_channels() ;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* mutable_active_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >*
      mutable_active_channels();
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& _internal_active_channels(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* _internal_add_active_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>& _internal_active_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>* _internal_mutable_active_channels();
  public:
  const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& active_channels(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* add_active_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >&
      active_channels() const;
  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  int interchain_accounts_size() const;
  private:
  int _internal_interchain_accounts_size() const;

  public:
  void clear_interchain_accounts() ;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* mutable_interchain_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >*
      mutable_interchain_accounts();
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& _internal_interchain_accounts(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* _internal_add_interchain_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>& _internal_interchain_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>* _internal_mutable_interchain_accounts();
  public:
  const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& interchain_accounts(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* add_interchain_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >&
      interchain_accounts() const;
  // repeated string ports = 3 [json_name = "ports"];
  int ports_size() const;
  private:
  int _internal_ports_size() const;

  public:
  void clear_ports() ;
  const std::string& ports(int index) const;
  std::string* mutable_ports(int index);
  void set_ports(int index, const std::string& value);
  void set_ports(int index, std::string&& value);
  void set_ports(int index, const char* value);
  void set_ports(int index, const char* value, std::size_t size);
  void set_ports(int index, absl::string_view value);
  std::string* add_ports();
  void add_ports(const std::string& value);
  void add_ports(std::string&& value);
  void add_ports(const char* value);
  void add_ports(const char* value, std::size_t size);
  void add_ports(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ports();

  private:
  const std::string& _internal_ports(int index) const;
  std::string* _internal_add_ports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_ports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_ports();

  public:
  // .ibc.applications.interchain_accounts.controller.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::applications::interchain_accounts::controller::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::controller::v1::Params* release_params();
  ::ibc::applications::interchain_accounts::controller::v1::Params* mutable_params();
  void set_allocated_params(::ibc::applications::interchain_accounts::controller::v1::Params* params);
  private:
  const ::ibc::applications::interchain_accounts::controller::v1::Params& _internal_params() const;
  ::ibc::applications::interchain_accounts::controller::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::applications::interchain_accounts::controller::v1::Params* params);
  ::ibc::applications::interchain_accounts::controller::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel > active_channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount > interchain_accounts_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ports_;
    ::ibc::applications::interchain_accounts::controller::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class HostGenesisState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState) */ {
 public:
  inline HostGenesisState() : HostGenesisState(nullptr) {}
  ~HostGenesisState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HostGenesisState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostGenesisState(const HostGenesisState& from);
  HostGenesisState(HostGenesisState&& from) noexcept
    : HostGenesisState() {
    *this = ::std::move(from);
  }

  inline HostGenesisState& operator=(const HostGenesisState& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostGenesisState& operator=(HostGenesisState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HostGenesisState& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostGenesisState* internal_default_instance() {
    return reinterpret_cast<const HostGenesisState*>(
               &_HostGenesisState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostGenesisState& a, HostGenesisState& b) {
    a.Swap(&b);
  }
  inline void Swap(HostGenesisState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostGenesisState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostGenesisState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostGenesisState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HostGenesisState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HostGenesisState& from) {
    HostGenesisState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostGenesisState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.genesis.v1.HostGenesisState";
  }
  protected:
  explicit HostGenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActiveChannelsFieldNumber = 1,
    kInterchainAccountsFieldNumber = 2,
    kPortFieldNumber = 3,
    kParamsFieldNumber = 4,
  };
  // repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
  int active_channels_size() const;
  private:
  int _internal_active_channels_size() const;

  public:
  void clear_active_channels() ;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* mutable_active_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >*
      mutable_active_channels();
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& _internal_active_channels(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* _internal_add_active_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>& _internal_active_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>* _internal_mutable_active_channels();
  public:
  const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& active_channels(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* add_active_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >&
      active_channels() const;
  // repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
  int interchain_accounts_size() const;
  private:
  int _internal_interchain_accounts_size() const;

  public:
  void clear_interchain_accounts() ;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* mutable_interchain_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >*
      mutable_interchain_accounts();
  private:
  const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& _internal_interchain_accounts(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* _internal_add_interchain_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>& _internal_interchain_accounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>* _internal_mutable_interchain_accounts();
  public:
  const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& interchain_accounts(int index) const;
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* add_interchain_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >&
      interchain_accounts() const;
  // string port = 3 [json_name = "port"];
  void clear_port() ;
  const std::string& port() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port(Arg_&& arg, Args_... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* ptr);

  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(
      const std::string& value);
  std::string* _internal_mutable_port();

  public:
  // .ibc.applications.interchain_accounts.host.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::applications::interchain_accounts::host::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::host::v1::Params* release_params();
  ::ibc::applications::interchain_accounts::host::v1::Params* mutable_params();
  void set_allocated_params(::ibc::applications::interchain_accounts::host::v1::Params* params);
  private:
  const ::ibc::applications::interchain_accounts::host::v1::Params& _internal_params() const;
  ::ibc::applications::interchain_accounts::host::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::applications::interchain_accounts::host::v1::Params* params);
  ::ibc::applications::interchain_accounts::host::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel > active_channels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount > interchain_accounts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
    ::ibc::applications::interchain_accounts::host::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class ActiveChannel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel) */ {
 public:
  inline ActiveChannel() : ActiveChannel(nullptr) {}
  ~ActiveChannel() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ActiveChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActiveChannel(const ActiveChannel& from);
  ActiveChannel(ActiveChannel&& from) noexcept
    : ActiveChannel() {
    *this = ::std::move(from);
  }

  inline ActiveChannel& operator=(const ActiveChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveChannel& operator=(ActiveChannel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActiveChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActiveChannel* internal_default_instance() {
    return reinterpret_cast<const ActiveChannel*>(
               &_ActiveChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActiveChannel& a, ActiveChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveChannel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveChannel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActiveChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActiveChannel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActiveChannel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActiveChannel& from) {
    ActiveChannel::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveChannel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.genesis.v1.ActiveChannel";
  }
  protected:
  explicit ActiveChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kPortIdFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kIsMiddlewareEnabledFieldNumber = 4,
  };
  // string connection_id = 1 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string port_id = 2 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 3 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // bool is_middleware_enabled = 4 [json_name = "isMiddlewareEnabled"];
  void clear_is_middleware_enabled() ;
  bool is_middleware_enabled() const;
  void set_is_middleware_enabled(bool value);

  private:
  bool _internal_is_middleware_enabled() const;
  void _internal_set_is_middleware_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    bool is_middleware_enabled_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
};// -------------------------------------------------------------------

class RegisteredInterchainAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount) */ {
 public:
  inline RegisteredInterchainAccount() : RegisteredInterchainAccount(nullptr) {}
  ~RegisteredInterchainAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RegisteredInterchainAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisteredInterchainAccount(const RegisteredInterchainAccount& from);
  RegisteredInterchainAccount(RegisteredInterchainAccount&& from) noexcept
    : RegisteredInterchainAccount() {
    *this = ::std::move(from);
  }

  inline RegisteredInterchainAccount& operator=(const RegisteredInterchainAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisteredInterchainAccount& operator=(RegisteredInterchainAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisteredInterchainAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisteredInterchainAccount* internal_default_instance() {
    return reinterpret_cast<const RegisteredInterchainAccount*>(
               &_RegisteredInterchainAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RegisteredInterchainAccount& a, RegisteredInterchainAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisteredInterchainAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisteredInterchainAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisteredInterchainAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisteredInterchainAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisteredInterchainAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisteredInterchainAccount& from) {
    RegisteredInterchainAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisteredInterchainAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount";
  }
  protected:
  explicit RegisteredInterchainAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kPortIdFieldNumber = 2,
    kAccountAddressFieldNumber = 3,
  };
  // string connection_id = 1 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string port_id = 2 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string account_address = 3 [json_name = "accountAddress"];
  void clear_account_address() ;
  const std::string& account_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_address(Arg_&& arg, Args_... args);
  std::string* mutable_account_address();
  PROTOBUF_NODISCARD std::string* release_account_address();
  void set_allocated_account_address(std::string* ptr);

  private:
  const std::string& _internal_account_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_address(
      const std::string& value);
  std::string* _internal_mutable_account_address();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GenesisState

// .ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState controller_genesis_state = 1 [json_name = "controllerGenesisState", (.gogoproto.nullable) = false];
inline bool GenesisState::has_controller_genesis_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.controller_genesis_state_ != nullptr);
  return value;
}
inline void GenesisState::clear_controller_genesis_state() {
  if (_impl_.controller_genesis_state_ != nullptr) _impl_.controller_genesis_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState& GenesisState::_internal_controller_genesis_state() const {
  const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* p = _impl_.controller_genesis_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState&>(
      ::ibc::applications::interchain_accounts::genesis::v1::_ControllerGenesisState_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState& GenesisState::controller_genesis_state() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.GenesisState.controller_genesis_state)
  return _internal_controller_genesis_state();
}
inline void GenesisState::unsafe_arena_set_allocated_controller_genesis_state(
    ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* controller_genesis_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.controller_genesis_state_);
  }
  _impl_.controller_genesis_state_ = controller_genesis_state;
  if (controller_genesis_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.genesis.v1.GenesisState.controller_genesis_state)
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* GenesisState::release_controller_genesis_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* temp = _impl_.controller_genesis_state_;
  _impl_.controller_genesis_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* GenesisState::unsafe_arena_release_controller_genesis_state() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.GenesisState.controller_genesis_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* temp = _impl_.controller_genesis_state_;
  _impl_.controller_genesis_state_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* GenesisState::_internal_mutable_controller_genesis_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.controller_genesis_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState>(GetArenaForAllocation());
    _impl_.controller_genesis_state_ = p;
  }
  return _impl_.controller_genesis_state_;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* GenesisState::mutable_controller_genesis_state() {
  ::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* _msg = _internal_mutable_controller_genesis_state();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.GenesisState.controller_genesis_state)
  return _msg;
}
inline void GenesisState::set_allocated_controller_genesis_state(::ibc::applications::interchain_accounts::genesis::v1::ControllerGenesisState* controller_genesis_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.controller_genesis_state_;
  }
  if (controller_genesis_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(controller_genesis_state);
    if (message_arena != submessage_arena) {
      controller_genesis_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, controller_genesis_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.controller_genesis_state_ = controller_genesis_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.GenesisState.controller_genesis_state)
}

// .ibc.applications.interchain_accounts.genesis.v1.HostGenesisState host_genesis_state = 2 [json_name = "hostGenesisState", (.gogoproto.nullable) = false];
inline bool GenesisState::has_host_genesis_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.host_genesis_state_ != nullptr);
  return value;
}
inline void GenesisState::clear_host_genesis_state() {
  if (_impl_.host_genesis_state_ != nullptr) _impl_.host_genesis_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState& GenesisState::_internal_host_genesis_state() const {
  const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* p = _impl_.host_genesis_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState&>(
      ::ibc::applications::interchain_accounts::genesis::v1::_HostGenesisState_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState& GenesisState::host_genesis_state() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.GenesisState.host_genesis_state)
  return _internal_host_genesis_state();
}
inline void GenesisState::unsafe_arena_set_allocated_host_genesis_state(
    ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* host_genesis_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.host_genesis_state_);
  }
  _impl_.host_genesis_state_ = host_genesis_state;
  if (host_genesis_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.genesis.v1.GenesisState.host_genesis_state)
}
inline ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* GenesisState::release_host_genesis_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* temp = _impl_.host_genesis_state_;
  _impl_.host_genesis_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* GenesisState::unsafe_arena_release_host_genesis_state() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.GenesisState.host_genesis_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* temp = _impl_.host_genesis_state_;
  _impl_.host_genesis_state_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* GenesisState::_internal_mutable_host_genesis_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.host_genesis_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState>(GetArenaForAllocation());
    _impl_.host_genesis_state_ = p;
  }
  return _impl_.host_genesis_state_;
}
inline ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* GenesisState::mutable_host_genesis_state() {
  ::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* _msg = _internal_mutable_host_genesis_state();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.GenesisState.host_genesis_state)
  return _msg;
}
inline void GenesisState::set_allocated_host_genesis_state(::ibc::applications::interchain_accounts::genesis::v1::HostGenesisState* host_genesis_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.host_genesis_state_;
  }
  if (host_genesis_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(host_genesis_state);
    if (message_arena != submessage_arena) {
      host_genesis_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_genesis_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host_genesis_state_ = host_genesis_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.GenesisState.host_genesis_state)
}

// -------------------------------------------------------------------

// ControllerGenesisState

// repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
inline int ControllerGenesisState::_internal_active_channels_size() const {
  return _impl_.active_channels_.size();
}
inline int ControllerGenesisState::active_channels_size() const {
  return _internal_active_channels_size();
}
inline void ControllerGenesisState::clear_active_channels() {
  _internal_mutable_active_channels()->Clear();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* ControllerGenesisState::mutable_active_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.active_channels)
  return _internal_mutable_active_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >*
ControllerGenesisState::mutable_active_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.active_channels)
  return _internal_mutable_active_channels();
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& ControllerGenesisState::_internal_active_channels(int index) const {
  return _internal_active_channels().Get(index);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& ControllerGenesisState::active_channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.active_channels)
  return _internal_active_channels(index);
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* ControllerGenesisState::_internal_add_active_channels() {
  return _internal_mutable_active_channels()->Add();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* ControllerGenesisState::add_active_channels() {
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* _add = _internal_add_active_channels();
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.active_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >&
ControllerGenesisState::active_channels() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.active_channels)
  return _internal_active_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>&
ControllerGenesisState::_internal_active_channels() const {
  return _impl_.active_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>*
ControllerGenesisState::_internal_mutable_active_channels() {
  return &_impl_.active_channels_;
}

// repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
inline int ControllerGenesisState::_internal_interchain_accounts_size() const {
  return _impl_.interchain_accounts_.size();
}
inline int ControllerGenesisState::interchain_accounts_size() const {
  return _internal_interchain_accounts_size();
}
inline void ControllerGenesisState::clear_interchain_accounts() {
  _internal_mutable_interchain_accounts()->Clear();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* ControllerGenesisState::mutable_interchain_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.interchain_accounts)
  return _internal_mutable_interchain_accounts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >*
ControllerGenesisState::mutable_interchain_accounts() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.interchain_accounts)
  return _internal_mutable_interchain_accounts();
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& ControllerGenesisState::_internal_interchain_accounts(int index) const {
  return _internal_interchain_accounts().Get(index);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& ControllerGenesisState::interchain_accounts(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.interchain_accounts)
  return _internal_interchain_accounts(index);
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* ControllerGenesisState::_internal_add_interchain_accounts() {
  return _internal_mutable_interchain_accounts()->Add();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* ControllerGenesisState::add_interchain_accounts() {
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* _add = _internal_add_interchain_accounts();
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.interchain_accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >&
ControllerGenesisState::interchain_accounts() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.interchain_accounts)
  return _internal_interchain_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>&
ControllerGenesisState::_internal_interchain_accounts() const {
  return _impl_.interchain_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>*
ControllerGenesisState::_internal_mutable_interchain_accounts() {
  return &_impl_.interchain_accounts_;
}

// repeated string ports = 3 [json_name = "ports"];
inline int ControllerGenesisState::_internal_ports_size() const {
  return _impl_.ports_.size();
}
inline int ControllerGenesisState::ports_size() const {
  return _internal_ports_size();
}
inline void ControllerGenesisState::clear_ports() {
  _internal_mutable_ports()->Clear();
}
inline std::string* ControllerGenesisState::add_ports() {
  std::string* _s = _internal_add_ports();
  // @@protoc_insertion_point(field_add_mutable:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
  return _s;
}
inline const std::string& ControllerGenesisState::ports(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
  return _internal_ports(index);
}
inline std::string* ControllerGenesisState::mutable_ports(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
  return _internal_mutable_ports()->Mutable(index);
}
inline void ControllerGenesisState::set_ports(int index, const std::string& value) {
  _internal_mutable_ports()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::set_ports(int index, std::string&& value) {
  _internal_mutable_ports()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::set_ports(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ports()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::set_ports(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_ports()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::set_ports(int index, absl::string_view value) {
  _internal_mutable_ports()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::add_ports(const std::string& value) {
  _internal_mutable_ports()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::add_ports(std::string&& value) {
  _internal_mutable_ports()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::add_ports(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_ports()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::add_ports(const char* value, std::size_t size) {
  _internal_mutable_ports()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline void ControllerGenesisState::add_ports(absl::string_view value) {
  _internal_mutable_ports()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ControllerGenesisState::ports() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
  return _internal_ports();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ControllerGenesisState::mutable_ports() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.ports)
  return _internal_mutable_ports();
}
inline const std::string& ControllerGenesisState::_internal_ports(int index) const {
  return _internal_ports().Get(index);
}
inline std::string* ControllerGenesisState::_internal_add_ports() {
  return _internal_mutable_ports()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ControllerGenesisState::_internal_ports() const {
  return _impl_.ports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ControllerGenesisState::_internal_mutable_ports() {
  return &_impl_.ports_;
}

// .ibc.applications.interchain_accounts.controller.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
inline bool ControllerGenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::applications::interchain_accounts::controller::v1::Params& ControllerGenesisState::_internal_params() const {
  const ::ibc::applications::interchain_accounts::controller::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::controller::v1::Params&>(
      ::ibc::applications::interchain_accounts::controller::v1::_Params_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::controller::v1::Params& ControllerGenesisState::params() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.params)
  return _internal_params();
}
inline void ControllerGenesisState::unsafe_arena_set_allocated_params(
    ::ibc::applications::interchain_accounts::controller::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.params)
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* ControllerGenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::controller::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* ControllerGenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::controller::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* ControllerGenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* ControllerGenesisState::mutable_params() {
  ::ibc::applications::interchain_accounts::controller::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.params)
  return _msg;
}
inline void ControllerGenesisState::set_allocated_params(::ibc::applications::interchain_accounts::controller::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.ControllerGenesisState.params)
}

// -------------------------------------------------------------------

// HostGenesisState

// repeated .ibc.applications.interchain_accounts.genesis.v1.ActiveChannel active_channels = 1 [json_name = "activeChannels", (.gogoproto.nullable) = false];
inline int HostGenesisState::_internal_active_channels_size() const {
  return _impl_.active_channels_.size();
}
inline int HostGenesisState::active_channels_size() const {
  return _internal_active_channels_size();
}
inline void HostGenesisState::clear_active_channels() {
  _internal_mutable_active_channels()->Clear();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* HostGenesisState::mutable_active_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.active_channels)
  return _internal_mutable_active_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >*
HostGenesisState::mutable_active_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.active_channels)
  return _internal_mutable_active_channels();
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& HostGenesisState::_internal_active_channels(int index) const {
  return _internal_active_channels().Get(index);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel& HostGenesisState::active_channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.active_channels)
  return _internal_active_channels(index);
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* HostGenesisState::_internal_add_active_channels() {
  return _internal_mutable_active_channels()->Add();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* HostGenesisState::add_active_channels() {
  ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel* _add = _internal_add_active_channels();
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.active_channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel >&
HostGenesisState::active_channels() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.active_channels)
  return _internal_active_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>&
HostGenesisState::_internal_active_channels() const {
  return _impl_.active_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::ActiveChannel>*
HostGenesisState::_internal_mutable_active_channels() {
  return &_impl_.active_channels_;
}

// repeated .ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount interchain_accounts = 2 [json_name = "interchainAccounts", (.gogoproto.nullable) = false];
inline int HostGenesisState::_internal_interchain_accounts_size() const {
  return _impl_.interchain_accounts_.size();
}
inline int HostGenesisState::interchain_accounts_size() const {
  return _internal_interchain_accounts_size();
}
inline void HostGenesisState::clear_interchain_accounts() {
  _internal_mutable_interchain_accounts()->Clear();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* HostGenesisState::mutable_interchain_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.interchain_accounts)
  return _internal_mutable_interchain_accounts()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >*
HostGenesisState::mutable_interchain_accounts() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.interchain_accounts)
  return _internal_mutable_interchain_accounts();
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& HostGenesisState::_internal_interchain_accounts(int index) const {
  return _internal_interchain_accounts().Get(index);
}
inline const ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount& HostGenesisState::interchain_accounts(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.interchain_accounts)
  return _internal_interchain_accounts(index);
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* HostGenesisState::_internal_add_interchain_accounts() {
  return _internal_mutable_interchain_accounts()->Add();
}
inline ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* HostGenesisState::add_interchain_accounts() {
  ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount* _add = _internal_add_interchain_accounts();
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.interchain_accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount >&
HostGenesisState::interchain_accounts() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.interchain_accounts)
  return _internal_interchain_accounts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>&
HostGenesisState::_internal_interchain_accounts() const {
  return _impl_.interchain_accounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::applications::interchain_accounts::genesis::v1::RegisteredInterchainAccount>*
HostGenesisState::_internal_mutable_interchain_accounts() {
  return &_impl_.interchain_accounts_;
}

// string port = 3 [json_name = "port"];
inline void HostGenesisState::clear_port() {
  _impl_.port_.ClearToEmpty();
}
inline const std::string& HostGenesisState::port() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port)
  return _internal_port();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HostGenesisState::set_port(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port)
}
inline std::string* HostGenesisState::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port)
  return _s;
}
inline const std::string& HostGenesisState::_internal_port() const {
  return _impl_.port_.Get();
}
inline void HostGenesisState::_internal_set_port(const std::string& value) {
  ;


  _impl_.port_.Set(value, GetArenaForAllocation());
}
inline std::string* HostGenesisState::_internal_mutable_port() {
  ;
  return _impl_.port_.Mutable( GetArenaForAllocation());
}
inline std::string* HostGenesisState::release_port() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port)
  return _impl_.port_.Release();
}
inline void HostGenesisState::set_allocated_port(std::string* value) {
  _impl_.port_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_.IsDefault()) {
          _impl_.port_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.port)
}

// .ibc.applications.interchain_accounts.host.v1.Params params = 4 [json_name = "params", (.gogoproto.nullable) = false];
inline bool HostGenesisState::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::applications::interchain_accounts::host::v1::Params& HostGenesisState::_internal_params() const {
  const ::ibc::applications::interchain_accounts::host::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::host::v1::Params&>(
      ::ibc::applications::interchain_accounts::host::v1::_Params_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::host::v1::Params& HostGenesisState::params() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.params)
  return _internal_params();
}
inline void HostGenesisState::unsafe_arena_set_allocated_params(
    ::ibc::applications::interchain_accounts::host::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.params)
}
inline ::ibc::applications::interchain_accounts::host::v1::Params* HostGenesisState::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::host::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::host::v1::Params* HostGenesisState::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::host::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::host::v1::Params* HostGenesisState::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::host::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::applications::interchain_accounts::host::v1::Params* HostGenesisState::mutable_params() {
  ::ibc::applications::interchain_accounts::host::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.params)
  return _msg;
}
inline void HostGenesisState::set_allocated_params(::ibc::applications::interchain_accounts::host::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.HostGenesisState.params)
}

// -------------------------------------------------------------------

// ActiveChannel

// string connection_id = 1 [json_name = "connectionId"];
inline void ActiveChannel::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& ActiveChannel::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActiveChannel::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id)
}
inline std::string* ActiveChannel::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id)
  return _s;
}
inline const std::string& ActiveChannel::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void ActiveChannel::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ActiveChannel::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ActiveChannel::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id)
  return _impl_.connection_id_.Release();
}
inline void ActiveChannel::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.connection_id)
}

// string port_id = 2 [json_name = "portId"];
inline void ActiveChannel::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& ActiveChannel::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActiveChannel::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id)
}
inline std::string* ActiveChannel::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id)
  return _s;
}
inline const std::string& ActiveChannel::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void ActiveChannel::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ActiveChannel::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ActiveChannel::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id)
  return _impl_.port_id_.Release();
}
inline void ActiveChannel::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.port_id)
}

// string channel_id = 3 [json_name = "channelId"];
inline void ActiveChannel::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& ActiveChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ActiveChannel::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id)
}
inline std::string* ActiveChannel::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id)
  return _s;
}
inline const std::string& ActiveChannel::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void ActiveChannel::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ActiveChannel::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ActiveChannel::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id)
  return _impl_.channel_id_.Release();
}
inline void ActiveChannel::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.channel_id)
}

// bool is_middleware_enabled = 4 [json_name = "isMiddlewareEnabled"];
inline void ActiveChannel::clear_is_middleware_enabled() {
  _impl_.is_middleware_enabled_ = false;
}
inline bool ActiveChannel::is_middleware_enabled() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.is_middleware_enabled)
  return _internal_is_middleware_enabled();
}
inline void ActiveChannel::set_is_middleware_enabled(bool value) {
  _internal_set_is_middleware_enabled(value);
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.ActiveChannel.is_middleware_enabled)
}
inline bool ActiveChannel::_internal_is_middleware_enabled() const {
  return _impl_.is_middleware_enabled_;
}
inline void ActiveChannel::_internal_set_is_middleware_enabled(bool value) {
  ;
  _impl_.is_middleware_enabled_ = value;
}

// -------------------------------------------------------------------

// RegisteredInterchainAccount

// string connection_id = 1 [json_name = "connectionId"];
inline void RegisteredInterchainAccount::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& RegisteredInterchainAccount::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredInterchainAccount::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id)
}
inline std::string* RegisteredInterchainAccount::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id)
  return _s;
}
inline const std::string& RegisteredInterchainAccount::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void RegisteredInterchainAccount::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id)
  return _impl_.connection_id_.Release();
}
inline void RegisteredInterchainAccount::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.connection_id)
}

// string port_id = 2 [json_name = "portId"];
inline void RegisteredInterchainAccount::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& RegisteredInterchainAccount::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredInterchainAccount::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id)
}
inline std::string* RegisteredInterchainAccount::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id)
  return _s;
}
inline const std::string& RegisteredInterchainAccount::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void RegisteredInterchainAccount::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id)
  return _impl_.port_id_.Release();
}
inline void RegisteredInterchainAccount::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.port_id)
}

// string account_address = 3 [json_name = "accountAddress"];
inline void RegisteredInterchainAccount::clear_account_address() {
  _impl_.account_address_.ClearToEmpty();
}
inline const std::string& RegisteredInterchainAccount::account_address() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address)
  return _internal_account_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RegisteredInterchainAccount::set_account_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address)
}
inline std::string* RegisteredInterchainAccount::mutable_account_address() {
  std::string* _s = _internal_mutable_account_address();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address)
  return _s;
}
inline const std::string& RegisteredInterchainAccount::_internal_account_address() const {
  return _impl_.account_address_.Get();
}
inline void RegisteredInterchainAccount::_internal_set_account_address(const std::string& value) {
  ;


  _impl_.account_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::_internal_mutable_account_address() {
  ;
  return _impl_.account_address_.Mutable( GetArenaForAllocation());
}
inline std::string* RegisteredInterchainAccount::release_account_address() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address)
  return _impl_.account_address_.Release();
}
inline void RegisteredInterchainAccount::set_allocated_account_address(std::string* value) {
  _impl_.account_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_address_.IsDefault()) {
          _impl_.account_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.genesis.v1.RegisteredInterchainAccount.account_address)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace genesis
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fgenesis_2fv1_2fgenesis_2eproto_2epb_2eh

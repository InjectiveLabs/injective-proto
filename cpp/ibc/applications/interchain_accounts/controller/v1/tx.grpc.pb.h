// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/applications/interchain_accounts/controller/v1/tx.proto
#ifndef GRPC_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto__INCLUDED
#define GRPC_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto__INCLUDED

#include "ibc/applications/interchain_accounts/controller/v1/tx.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace controller {
namespace v1 {

// Msg defines the 27-interchain-accounts/controller Msg service.
class Msg final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.applications.interchain_accounts.controller.v1.Msg";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // RegisterInterchainAccount defines a rpc handler for MsgRegisterInterchainAccount.
    virtual ::grpc::Status RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>> AsyncRegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>>(AsyncRegisterInterchainAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>> PrepareAsyncRegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>>(PrepareAsyncRegisterInterchainAccountRaw(context, request, cq));
    }
    // SendTx defines a rpc handler for MsgSendTx.
    virtual ::grpc::Status SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>> AsyncSendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>>(AsyncSendTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>> PrepareAsyncSendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>>(PrepareAsyncSendTxRaw(context, request, cq));
    }
    // UpdateParams defines a rpc handler for MsgUpdateParams.
    virtual ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // RegisterInterchainAccount defines a rpc handler for MsgRegisterInterchainAccount.
      virtual void RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SendTx defines a rpc handler for MsgSendTx.
      virtual void SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpdateParams defines a rpc handler for MsgUpdateParams.
      virtual void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* AsyncRegisterInterchainAccountRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* PrepareAsyncRegisterInterchainAccountRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* AsyncSendTxRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* PrepareAsyncSendTxRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>> AsyncRegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>>(AsyncRegisterInterchainAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>> PrepareAsyncRegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>>(PrepareAsyncRegisterInterchainAccountRaw(context, request, cq));
    }
    ::grpc::Status SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>> AsyncSendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>>(AsyncSendTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>> PrepareAsyncSendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>>(PrepareAsyncSendTxRaw(context, request, cq));
    }
    ::grpc::Status UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>> AsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>>(AsyncUpdateParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>> PrepareAsyncUpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>>(PrepareAsyncUpdateParamsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterInterchainAccount(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response, std::function<void(::grpc::Status)>) override;
      void SendTx(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateParams(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* AsyncRegisterInterchainAccountRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* PrepareAsyncRegisterInterchainAccountRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* AsyncSendTxRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* PrepareAsyncSendTxRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* AsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* PrepareAsyncUpdateParamsRaw(::grpc::ClientContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInterchainAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTx_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateParams_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // RegisterInterchainAccount defines a rpc handler for MsgRegisterInterchainAccount.
    virtual ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response);
    // SendTx defines a rpc handler for MsgSendTx.
    virtual ::grpc::Status SendTx(::grpc::ServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response);
    // UpdateParams defines a rpc handler for MsgUpdateParams.
    virtual ::grpc::Status UpdateParams(::grpc::ServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInterchainAccount(::grpc::ServerContext* context, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendTx() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTx(::grpc::ServerContext* context, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateParams() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::grpc::ServerAsyncResponseWriter< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterInterchainAccount<WithAsyncMethod_SendTx<WithAsyncMethod_UpdateParams<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* request, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* response) { return this->RegisterInterchainAccount(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterInterchainAccount(
        ::grpc::MessageAllocator< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInterchainAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendTx() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* request, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* response) { return this->SendTx(context, request, response); }));}
    void SetMessageAllocatorFor_SendTx(
        ::grpc::MessageAllocator< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTx(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* request, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* response) { return this->UpdateParams(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateParams(
        ::grpc::MessageAllocator< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterInterchainAccount<WithCallbackMethod_SendTx<WithCallbackMethod_UpdateParams<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendTx() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateParams() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInterchainAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendTx() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterInterchainAccount(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInterchainAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendTx() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateParams() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInterchainAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInterchainAccount() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* streamer) {
                       return this->StreamedRegisterInterchainAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterInterchainAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInterchainAccount(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInterchainAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount,::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendTx() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* streamer) {
                       return this->StreamedSendTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTx(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::interchain_accounts::controller::v1::MsgSendTx,::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateParams() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* streamer) {
                       return this->StreamedUpdateParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateParams(::grpc::ServerContext* /*context*/, const ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* /*request*/, ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams,::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterInterchainAccount<WithStreamedUnaryMethod_SendTx<WithStreamedUnaryMethod_UpdateParams<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterInterchainAccount<WithStreamedUnaryMethod_SendTx<WithStreamedUnaryMethod_UpdateParams<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace controller
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc


#endif  // GRPC_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto__INCLUDED

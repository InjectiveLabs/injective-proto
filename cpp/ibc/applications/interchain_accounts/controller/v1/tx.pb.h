// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/controller/v1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/applications/interchain_accounts/v1/packet.pb.h"
#include "ibc/applications/interchain_accounts/controller/v1/controller.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace controller {
namespace v1 {
class MsgRegisterInterchainAccount;
struct MsgRegisterInterchainAccountDefaultTypeInternal;
extern MsgRegisterInterchainAccountDefaultTypeInternal _MsgRegisterInterchainAccount_default_instance_;
class MsgRegisterInterchainAccountResponse;
struct MsgRegisterInterchainAccountResponseDefaultTypeInternal;
extern MsgRegisterInterchainAccountResponseDefaultTypeInternal _MsgRegisterInterchainAccountResponse_default_instance_;
class MsgSendTx;
struct MsgSendTxDefaultTypeInternal;
extern MsgSendTxDefaultTypeInternal _MsgSendTx_default_instance_;
class MsgSendTxResponse;
struct MsgSendTxResponseDefaultTypeInternal;
extern MsgSendTxResponseDefaultTypeInternal _MsgSendTxResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1
}  // namespace controller
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccount>(Arena*);
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgRegisterInterchainAccountResponse>(Arena*);
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgSendTx* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgSendTx>(Arena*);
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgSendTxResponse>(Arena*);
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParams>(Arena*);
template <>
::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace controller {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgRegisterInterchainAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount) */ {
 public:
  inline MsgRegisterInterchainAccount() : MsgRegisterInterchainAccount(nullptr) {}
  ~MsgRegisterInterchainAccount() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRegisterInterchainAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRegisterInterchainAccount(const MsgRegisterInterchainAccount& from);
  MsgRegisterInterchainAccount(MsgRegisterInterchainAccount&& from) noexcept
    : MsgRegisterInterchainAccount() {
    *this = ::std::move(from);
  }

  inline MsgRegisterInterchainAccount& operator=(const MsgRegisterInterchainAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRegisterInterchainAccount& operator=(MsgRegisterInterchainAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRegisterInterchainAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRegisterInterchainAccount* internal_default_instance() {
    return reinterpret_cast<const MsgRegisterInterchainAccount*>(
               &_MsgRegisterInterchainAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgRegisterInterchainAccount& a, MsgRegisterInterchainAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRegisterInterchainAccount* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRegisterInterchainAccount* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRegisterInterchainAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRegisterInterchainAccount>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRegisterInterchainAccount& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRegisterInterchainAccount& from) {
    MsgRegisterInterchainAccount::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRegisterInterchainAccount* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount";
  }
  protected:
  explicit MsgRegisterInterchainAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string connection_id = 2 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string version = 3 [json_name = "version"];
  void clear_version() ;
  const std::string& version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_version(Arg_&& arg, Args_... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* ptr);

  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(
      const std::string& value);
  std::string* _internal_mutable_version();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgRegisterInterchainAccountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse) */ {
 public:
  inline MsgRegisterInterchainAccountResponse() : MsgRegisterInterchainAccountResponse(nullptr) {}
  ~MsgRegisterInterchainAccountResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgRegisterInterchainAccountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgRegisterInterchainAccountResponse(const MsgRegisterInterchainAccountResponse& from);
  MsgRegisterInterchainAccountResponse(MsgRegisterInterchainAccountResponse&& from) noexcept
    : MsgRegisterInterchainAccountResponse() {
    *this = ::std::move(from);
  }

  inline MsgRegisterInterchainAccountResponse& operator=(const MsgRegisterInterchainAccountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgRegisterInterchainAccountResponse& operator=(MsgRegisterInterchainAccountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgRegisterInterchainAccountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgRegisterInterchainAccountResponse* internal_default_instance() {
    return reinterpret_cast<const MsgRegisterInterchainAccountResponse*>(
               &_MsgRegisterInterchainAccountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgRegisterInterchainAccountResponse& a, MsgRegisterInterchainAccountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgRegisterInterchainAccountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgRegisterInterchainAccountResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgRegisterInterchainAccountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgRegisterInterchainAccountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgRegisterInterchainAccountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgRegisterInterchainAccountResponse& from) {
    MsgRegisterInterchainAccountResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgRegisterInterchainAccountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse";
  }
  protected:
  explicit MsgRegisterInterchainAccountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPortIdFieldNumber = 2,
  };
  // string channel_id = 1 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // string port_id = 2 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSendTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgSendTx) */ {
 public:
  inline MsgSendTx() : MsgSendTx(nullptr) {}
  ~MsgSendTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSendTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendTx(const MsgSendTx& from);
  MsgSendTx(MsgSendTx&& from) noexcept
    : MsgSendTx() {
    *this = ::std::move(from);
  }

  inline MsgSendTx& operator=(const MsgSendTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendTx& operator=(MsgSendTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSendTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendTx* internal_default_instance() {
    return reinterpret_cast<const MsgSendTx*>(
               &_MsgSendTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgSendTx& a, MsgSendTx& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSendTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSendTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSendTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSendTx& from) {
    MsgSendTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgSendTx";
  }
  protected:
  explicit MsgSendTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kPacketDataFieldNumber = 3,
    kRelativeTimeoutFieldNumber = 4,
  };
  // string owner = 1 [json_name = "owner"];
  void clear_owner() ;
  const std::string& owner() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_owner(Arg_&& arg, Args_... args);
  std::string* mutable_owner();
  PROTOBUF_NODISCARD std::string* release_owner();
  void set_allocated_owner(std::string* ptr);

  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(
      const std::string& value);
  std::string* _internal_mutable_owner();

  public:
  // string connection_id = 2 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // .ibc.applications.interchain_accounts.v1.InterchainAccountPacketData packet_data = 3 [json_name = "packetData", (.gogoproto.nullable) = false];
  bool has_packet_data() const;
  void clear_packet_data() ;
  const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData& packet_data() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* release_packet_data();
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* mutable_packet_data();
  void set_allocated_packet_data(::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* packet_data);
  private:
  const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData& _internal_packet_data() const;
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* _internal_mutable_packet_data();
  public:
  void unsafe_arena_set_allocated_packet_data(
      ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* packet_data);
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* unsafe_arena_release_packet_data();
  // uint64 relative_timeout = 4 [json_name = "relativeTimeout"];
  void clear_relative_timeout() ;
  ::uint64_t relative_timeout() const;
  void set_relative_timeout(::uint64_t value);

  private:
  ::uint64_t _internal_relative_timeout() const;
  void _internal_set_relative_timeout(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgSendTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* packet_data_;
    ::uint64_t relative_timeout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgSendTxResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse) */ {
 public:
  inline MsgSendTxResponse() : MsgSendTxResponse(nullptr) {}
  ~MsgSendTxResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgSendTxResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgSendTxResponse(const MsgSendTxResponse& from);
  MsgSendTxResponse(MsgSendTxResponse&& from) noexcept
    : MsgSendTxResponse() {
    *this = ::std::move(from);
  }

  inline MsgSendTxResponse& operator=(const MsgSendTxResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgSendTxResponse& operator=(MsgSendTxResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgSendTxResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgSendTxResponse* internal_default_instance() {
    return reinterpret_cast<const MsgSendTxResponse*>(
               &_MsgSendTxResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgSendTxResponse& a, MsgSendTxResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgSendTxResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgSendTxResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgSendTxResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgSendTxResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgSendTxResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgSendTxResponse& from) {
    MsgSendTxResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgSendTxResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse";
  }
  protected:
  explicit MsgSendTxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequenceFieldNumber = 1,
  };
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .ibc.applications.interchain_accounts.controller.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::applications::interchain_accounts::controller::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::applications::interchain_accounts::controller::v1::Params* release_params();
  ::ibc::applications::interchain_accounts::controller::v1::Params* mutable_params();
  void set_allocated_params(::ibc::applications::interchain_accounts::controller::v1::Params* params);
  private:
  const ::ibc::applications::interchain_accounts::controller::v1::Params& _internal_params() const;
  ::ibc::applications::interchain_accounts::controller::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::applications::interchain_accounts::controller::v1::Params* params);
  ::ibc::applications::interchain_accounts::controller::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::ibc::applications::interchain_accounts::controller::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgRegisterInterchainAccount

// string owner = 1 [json_name = "owner"];
inline void MsgRegisterInterchainAccount::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& MsgRegisterInterchainAccount::owner() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRegisterInterchainAccount::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.owner)
}
inline std::string* MsgRegisterInterchainAccount::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.owner)
  return _s;
}
inline const std::string& MsgRegisterInterchainAccount::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void MsgRegisterInterchainAccount::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::release_owner() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.owner)
  return _impl_.owner_.Release();
}
inline void MsgRegisterInterchainAccount::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.owner)
}

// string connection_id = 2 [json_name = "connectionId"];
inline void MsgRegisterInterchainAccount::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& MsgRegisterInterchainAccount::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRegisterInterchainAccount::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.connection_id)
}
inline std::string* MsgRegisterInterchainAccount::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.connection_id)
  return _s;
}
inline const std::string& MsgRegisterInterchainAccount::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void MsgRegisterInterchainAccount::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.connection_id)
  return _impl_.connection_id_.Release();
}
inline void MsgRegisterInterchainAccount::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.connection_id)
}

// string version = 3 [json_name = "version"];
inline void MsgRegisterInterchainAccount::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& MsgRegisterInterchainAccount::version() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.version)
  return _internal_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRegisterInterchainAccount::set_version(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.version)
}
inline std::string* MsgRegisterInterchainAccount::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.version)
  return _s;
}
inline const std::string& MsgRegisterInterchainAccount::_internal_version() const {
  return _impl_.version_.Get();
}
inline void MsgRegisterInterchainAccount::_internal_set_version(const std::string& value) {
  ;


  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::_internal_mutable_version() {
  ;
  return _impl_.version_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccount::release_version() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.version)
  return _impl_.version_.Release();
}
inline void MsgRegisterInterchainAccount::set_allocated_version(std::string* value) {
  _impl_.version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.version_.IsDefault()) {
          _impl_.version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccount.version)
}

// -------------------------------------------------------------------

// MsgRegisterInterchainAccountResponse

// string channel_id = 1 [json_name = "channelId"];
inline void MsgRegisterInterchainAccountResponse::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& MsgRegisterInterchainAccountResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRegisterInterchainAccountResponse::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.channel_id)
}
inline std::string* MsgRegisterInterchainAccountResponse::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.channel_id)
  return _s;
}
inline const std::string& MsgRegisterInterchainAccountResponse::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void MsgRegisterInterchainAccountResponse::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccountResponse::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccountResponse::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.channel_id)
  return _impl_.channel_id_.Release();
}
inline void MsgRegisterInterchainAccountResponse::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.channel_id)
}

// string port_id = 2 [json_name = "portId"];
inline void MsgRegisterInterchainAccountResponse::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& MsgRegisterInterchainAccountResponse::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgRegisterInterchainAccountResponse::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.port_id)
}
inline std::string* MsgRegisterInterchainAccountResponse::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.port_id)
  return _s;
}
inline const std::string& MsgRegisterInterchainAccountResponse::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void MsgRegisterInterchainAccountResponse::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccountResponse::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgRegisterInterchainAccountResponse::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.port_id)
  return _impl_.port_id_.Release();
}
inline void MsgRegisterInterchainAccountResponse::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgRegisterInterchainAccountResponse.port_id)
}

// -------------------------------------------------------------------

// MsgSendTx

// string owner = 1 [json_name = "owner"];
inline void MsgSendTx::clear_owner() {
  _impl_.owner_.ClearToEmpty();
}
inline const std::string& MsgSendTx::owner() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.owner)
  return _internal_owner();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendTx::set_owner(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.owner_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.owner)
}
inline std::string* MsgSendTx::mutable_owner() {
  std::string* _s = _internal_mutable_owner();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.owner)
  return _s;
}
inline const std::string& MsgSendTx::_internal_owner() const {
  return _impl_.owner_.Get();
}
inline void MsgSendTx::_internal_set_owner(const std::string& value) {
  ;


  _impl_.owner_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendTx::_internal_mutable_owner() {
  ;
  return _impl_.owner_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendTx::release_owner() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.owner)
  return _impl_.owner_.Release();
}
inline void MsgSendTx::set_allocated_owner(std::string* value) {
  _impl_.owner_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.owner_.IsDefault()) {
          _impl_.owner_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.owner)
}

// string connection_id = 2 [json_name = "connectionId"];
inline void MsgSendTx::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& MsgSendTx::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgSendTx::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.connection_id)
}
inline std::string* MsgSendTx::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.connection_id)
  return _s;
}
inline const std::string& MsgSendTx::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void MsgSendTx::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgSendTx::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgSendTx::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.connection_id)
  return _impl_.connection_id_.Release();
}
inline void MsgSendTx::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.connection_id)
}

// .ibc.applications.interchain_accounts.v1.InterchainAccountPacketData packet_data = 3 [json_name = "packetData", (.gogoproto.nullable) = false];
inline bool MsgSendTx::has_packet_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_data_ != nullptr);
  return value;
}
inline const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData& MsgSendTx::_internal_packet_data() const {
  const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* p = _impl_.packet_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData&>(
      ::ibc::applications::interchain_accounts::v1::_InterchainAccountPacketData_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData& MsgSendTx::packet_data() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.packet_data)
  return _internal_packet_data();
}
inline void MsgSendTx::unsafe_arena_set_allocated_packet_data(
    ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* packet_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_data_);
  }
  _impl_.packet_data_ = packet_data;
  if (packet_data) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.packet_data)
}
inline ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* MsgSendTx::release_packet_data() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* temp = _impl_.packet_data_;
  _impl_.packet_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* MsgSendTx::unsafe_arena_release_packet_data() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.packet_data)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* temp = _impl_.packet_data_;
  _impl_.packet_data_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* MsgSendTx::_internal_mutable_packet_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.packet_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData>(GetArenaForAllocation());
    _impl_.packet_data_ = p;
  }
  return _impl_.packet_data_;
}
inline ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* MsgSendTx::mutable_packet_data() {
  ::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* _msg = _internal_mutable_packet_data();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.packet_data)
  return _msg;
}
inline void MsgSendTx::set_allocated_packet_data(::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* packet_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_data_);
  }
  if (packet_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_data));
    if (message_arena != submessage_arena) {
      packet_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.packet_data_ = packet_data;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.packet_data)
}

// uint64 relative_timeout = 4 [json_name = "relativeTimeout"];
inline void MsgSendTx::clear_relative_timeout() {
  _impl_.relative_timeout_ = ::uint64_t{0u};
}
inline ::uint64_t MsgSendTx::relative_timeout() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.relative_timeout)
  return _internal_relative_timeout();
}
inline void MsgSendTx::set_relative_timeout(::uint64_t value) {
  _internal_set_relative_timeout(value);
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgSendTx.relative_timeout)
}
inline ::uint64_t MsgSendTx::_internal_relative_timeout() const {
  return _impl_.relative_timeout_;
}
inline void MsgSendTx::_internal_set_relative_timeout(::uint64_t value) {
  ;
  _impl_.relative_timeout_ = value;
}

// -------------------------------------------------------------------

// MsgSendTxResponse

// uint64 sequence = 1 [json_name = "sequence"];
inline void MsgSendTxResponse::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t MsgSendTxResponse::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse.sequence)
  return _internal_sequence();
}
inline void MsgSendTxResponse::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgSendTxResponse.sequence)
}
inline ::uint64_t MsgSendTxResponse::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void MsgSendTxResponse::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.authority)
}

// .ibc.applications.interchain_accounts.controller.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::applications::interchain_accounts::controller::v1::Params& MsgUpdateParams::_internal_params() const {
  const ::ibc::applications::interchain_accounts::controller::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::applications::interchain_accounts::controller::v1::Params&>(
      ::ibc::applications::interchain_accounts::controller::v1::_Params_default_instance_);
}
inline const ::ibc::applications::interchain_accounts::controller::v1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::ibc::applications::interchain_accounts::controller::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.params)
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::controller::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::applications::interchain_accounts::controller::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::applications::interchain_accounts::controller::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::applications::interchain_accounts::controller::v1::Params* MsgUpdateParams::mutable_params() {
  ::ibc::applications::interchain_accounts::controller::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::ibc::applications::interchain_accounts::controller::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.controller.v1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace controller
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fcontroller_2fv1_2ftx_2eproto_2epb_2eh

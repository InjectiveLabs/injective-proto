// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/v1/packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/any.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
class CosmosTx;
struct CosmosTxDefaultTypeInternal;
extern CosmosTxDefaultTypeInternal _CosmosTx_default_instance_;
class InterchainAccountPacketData;
struct InterchainAccountPacketDataDefaultTypeInternal;
extern InterchainAccountPacketDataDefaultTypeInternal _InterchainAccountPacketData_default_instance_;
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::applications::interchain_accounts::v1::CosmosTx* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::v1::CosmosTx>(Arena*);
template <>
::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData* Arena::CreateMaybeMessage<::ibc::applications::interchain_accounts::v1::InterchainAccountPacketData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
enum Type : int {
  TYPE_UNSPECIFIED = 0,
  TYPE_EXECUTE_TX = 1,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Type_IsValid(int value);
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(1);
constexpr int Type_ARRAYSIZE = 1 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
Type_descriptor();
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
template <>
inline const std::string& Type_Name(Type value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<Type_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool Type_Parse(absl::string_view name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
      Type_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class InterchainAccountPacketData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData) */ {
 public:
  inline InterchainAccountPacketData() : InterchainAccountPacketData(nullptr) {}
  ~InterchainAccountPacketData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InterchainAccountPacketData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InterchainAccountPacketData(const InterchainAccountPacketData& from);
  InterchainAccountPacketData(InterchainAccountPacketData&& from) noexcept
    : InterchainAccountPacketData() {
    *this = ::std::move(from);
  }

  inline InterchainAccountPacketData& operator=(const InterchainAccountPacketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterchainAccountPacketData& operator=(InterchainAccountPacketData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InterchainAccountPacketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const InterchainAccountPacketData* internal_default_instance() {
    return reinterpret_cast<const InterchainAccountPacketData*>(
               &_InterchainAccountPacketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InterchainAccountPacketData& a, InterchainAccountPacketData& b) {
    a.Swap(&b);
  }
  inline void Swap(InterchainAccountPacketData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterchainAccountPacketData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InterchainAccountPacketData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InterchainAccountPacketData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InterchainAccountPacketData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InterchainAccountPacketData& from) {
    InterchainAccountPacketData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterchainAccountPacketData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.v1.InterchainAccountPacketData";
  }
  protected:
  explicit InterchainAccountPacketData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMemoFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // string memo = 3 [json_name = "memo"];
  void clear_memo() ;
  const std::string& memo() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_memo(Arg_&& arg, Args_... args);
  std::string* mutable_memo();
  PROTOBUF_NODISCARD std::string* release_memo();
  void set_allocated_memo(std::string* ptr);

  private:
  const std::string& _internal_memo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_memo(
      const std::string& value);
  std::string* _internal_mutable_memo();

  public:
  // .ibc.applications.interchain_accounts.v1.Type type = 1 [json_name = "type"];
  void clear_type() ;
  ::ibc::applications::interchain_accounts::v1::Type type() const;
  void set_type(::ibc::applications::interchain_accounts::v1::Type value);

  private:
  ::ibc::applications::interchain_accounts::v1::Type _internal_type() const;
  void _internal_set_type(::ibc::applications::interchain_accounts::v1::Type value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto;
};// -------------------------------------------------------------------

class CosmosTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.applications.interchain_accounts.v1.CosmosTx) */ {
 public:
  inline CosmosTx() : CosmosTx(nullptr) {}
  ~CosmosTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CosmosTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CosmosTx(const CosmosTx& from);
  CosmosTx(CosmosTx&& from) noexcept
    : CosmosTx() {
    *this = ::std::move(from);
  }

  inline CosmosTx& operator=(const CosmosTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline CosmosTx& operator=(CosmosTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CosmosTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const CosmosTx* internal_default_instance() {
    return reinterpret_cast<const CosmosTx*>(
               &_CosmosTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CosmosTx& a, CosmosTx& b) {
    a.Swap(&b);
  }
  inline void Swap(CosmosTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CosmosTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CosmosTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CosmosTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CosmosTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CosmosTx& from) {
    CosmosTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CosmosTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.applications.interchain_accounts.v1.CosmosTx";
  }
  protected:
  explicit CosmosTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 1,
  };
  // repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_messages();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>& _internal_messages() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>* _internal_mutable_messages();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& messages(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      messages() const;
  // @@protoc_insertion_point(class_scope:ibc.applications.interchain_accounts.v1.CosmosTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > messages_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// InterchainAccountPacketData

// .ibc.applications.interchain_accounts.v1.Type type = 1 [json_name = "type"];
inline void InterchainAccountPacketData::clear_type() {
  _impl_.type_ = 0;
}
inline ::ibc::applications::interchain_accounts::v1::Type InterchainAccountPacketData::type() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.type)
  return _internal_type();
}
inline void InterchainAccountPacketData::set_type(::ibc::applications::interchain_accounts::v1::Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.type)
}
inline ::ibc::applications::interchain_accounts::v1::Type InterchainAccountPacketData::_internal_type() const {
  return static_cast<::ibc::applications::interchain_accounts::v1::Type>(_impl_.type_);
}
inline void InterchainAccountPacketData::_internal_set_type(::ibc::applications::interchain_accounts::v1::Type value) {
  ;
  _impl_.type_ = value;
}

// bytes data = 2 [json_name = "data"];
inline void InterchainAccountPacketData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& InterchainAccountPacketData::data() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterchainAccountPacketData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
}
inline std::string* InterchainAccountPacketData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
  return _s;
}
inline const std::string& InterchainAccountPacketData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void InterchainAccountPacketData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* InterchainAccountPacketData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* InterchainAccountPacketData::release_data() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
  return _impl_.data_.Release();
}
inline void InterchainAccountPacketData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.data)
}

// string memo = 3 [json_name = "memo"];
inline void InterchainAccountPacketData::clear_memo() {
  _impl_.memo_.ClearToEmpty();
}
inline const std::string& InterchainAccountPacketData::memo() const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
  return _internal_memo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InterchainAccountPacketData::set_memo(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.memo_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
}
inline std::string* InterchainAccountPacketData::mutable_memo() {
  std::string* _s = _internal_mutable_memo();
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
  return _s;
}
inline const std::string& InterchainAccountPacketData::_internal_memo() const {
  return _impl_.memo_.Get();
}
inline void InterchainAccountPacketData::_internal_set_memo(const std::string& value) {
  ;


  _impl_.memo_.Set(value, GetArenaForAllocation());
}
inline std::string* InterchainAccountPacketData::_internal_mutable_memo() {
  ;
  return _impl_.memo_.Mutable( GetArenaForAllocation());
}
inline std::string* InterchainAccountPacketData::release_memo() {
  // @@protoc_insertion_point(field_release:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
  return _impl_.memo_.Release();
}
inline void InterchainAccountPacketData::set_allocated_memo(std::string* value) {
  _impl_.memo_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.memo_.IsDefault()) {
          _impl_.memo_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.applications.interchain_accounts.v1.InterchainAccountPacketData.memo)
}

// -------------------------------------------------------------------

// CosmosTx

// repeated .google.protobuf.Any messages = 1 [json_name = "messages"];
inline int CosmosTx::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int CosmosTx::messages_size() const {
  return _internal_messages_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CosmosTx::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
  return _internal_mutable_messages()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
CosmosTx::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
  return _internal_mutable_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CosmosTx::_internal_messages(int index) const {
  return _internal_messages().Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CosmosTx::messages(int index) const {
  // @@protoc_insertion_point(field_get:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
  return _internal_messages(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CosmosTx::_internal_add_messages() {
  return _internal_mutable_messages()->Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CosmosTx::add_messages() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
CosmosTx::messages() const {
  // @@protoc_insertion_point(field_list:ibc.applications.interchain_accounts.v1.CosmosTx.messages)
  return _internal_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>&
CosmosTx::_internal_messages() const {
  return _impl_.messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::PROTOBUF_NAMESPACE_ID::Any>*
CosmosTx::_internal_mutable_messages() {
  return &_impl_.messages_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ibc::applications::interchain_accounts::v1::Type> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ibc::applications::interchain_accounts::v1::Type>() {
  return ::ibc::applications::interchain_accounts::v1::Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fpacket_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/v1/account.proto

#include "ibc/applications/interchain_accounts/v1/account.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR InterchainAccount::InterchainAccount(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_owner_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.base_account_)*/nullptr} {}
struct InterchainAccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterchainAccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterchainAccountDefaultTypeInternal() {}
  union {
    InterchainAccount _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterchainAccountDefaultTypeInternal _InterchainAccount_default_instance_;
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_.base_account_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::InterchainAccount, _impl_.account_owner_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::ibc::applications::interchain_accounts::v1::InterchainAccount)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::interchain_accounts::v1::_InterchainAccount_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n5ibc/applications/interchain_accounts/v"
    "1/account.proto\022\'ibc.applications.interc"
    "hain_accounts.v1\032\031cosmos_proto/cosmos.pr"
    "oto\032\024gogoproto/gogo.proto\032\036cosmos/auth/v"
    "1beta1/auth.proto\"\313\001\n\021InterchainAccount\022"
    "I\n\014base_account\030\001 \001(\0132 .cosmos.auth.v1be"
    "ta1.BaseAccountB\004\320\336\037\001R\013baseAccount\022#\n\rac"
    "count_owner\030\002 \001(\tR\014accountOwner:F\210\240\037\000\230\240\037"
    "\000\312\264-:ibc.applications.interchain_account"
    "s.v1.InterchainAccountIB\275\002\n+com.ibc.appl"
    "ications.interchain_accounts.v1B\014Account"
    "ProtoP\001ZEgithub.com/cosmos/ibc-go/v7/mod"
    "ules/apps/27-interchain-accounts/types\242\002"
    "\003IAI\252\002&Ibc.Applications.InterchainAccoun"
    "ts.V1\312\002&Ibc\\Applications\\InterchainAccou"
    "nts\\V1\342\0022Ibc\\Applications\\InterchainAcco"
    "unts\\V1\\GPBMetadata\352\002)Ibc::Applications:"
    ":InterchainAccounts::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_deps[3] =
    {
        &::descriptor_table_cosmos_2fauth_2fv1beta1_2fauth_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto = {
    false,
    false,
    711,
    descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    "ibc/applications/interchain_accounts/v1/account.proto",
    &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_once,
    descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto(&descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto);
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
// ===================================================================

class InterchainAccount::_Internal {
 public:
  using HasBits = decltype(std::declval<InterchainAccount>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InterchainAccount, _impl_._has_bits_);
  static const ::cosmos::auth::v1beta1::BaseAccount& base_account(const InterchainAccount* msg);
  static void set_has_base_account(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::auth::v1beta1::BaseAccount&
InterchainAccount::_Internal::base_account(const InterchainAccount* msg) {
  return *msg->_impl_.base_account_;
}
void InterchainAccount::clear_base_account() {
  if (_impl_.base_account_ != nullptr) _impl_.base_account_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InterchainAccount::InterchainAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
}
InterchainAccount::InterchainAccount(const InterchainAccount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterchainAccount* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_owner_) {}

    , decltype(_impl_.base_account_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_owner().empty()) {
    _this->_impl_.account_owner_.Set(from._internal_account_owner(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.base_account_ = new ::cosmos::auth::v1beta1::BaseAccount(*from._impl_.base_account_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
}

inline void InterchainAccount::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_owner_) {}

    , decltype(_impl_.base_account_){nullptr}
  };
  _impl_.account_owner_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_owner_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InterchainAccount::~InterchainAccount() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.v1.InterchainAccount)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterchainAccount::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_owner_.Destroy();
  if (this != internal_default_instance()) delete _impl_.base_account_;
}

void InterchainAccount::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterchainAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_owner_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.base_account_ != nullptr);
    _impl_.base_account_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterchainAccount::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_account(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_owner = 2 [json_name = "accountOwner"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_owner();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.InterchainAccount.account_owner"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InterchainAccount::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_account(this),
        _Internal::base_account(this).GetCachedSize(), target, stream);
  }

  // string account_owner = 2 [json_name = "accountOwner"];
  if (!this->_internal_account_owner().empty()) {
    const std::string& _s = this->_internal_account_owner();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.InterchainAccount.account_owner");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.v1.InterchainAccount)
  return target;
}

::size_t InterchainAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_owner = 2 [json_name = "accountOwner"];
  if (!this->_internal_account_owner().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_owner());
  }

  // .cosmos.auth.v1beta1.BaseAccount base_account = 1 [json_name = "baseAccount", (.gogoproto.embed) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_account_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterchainAccount::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterchainAccount::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterchainAccount::GetClassData() const { return &_class_data_; }


void InterchainAccount::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterchainAccount*>(&to_msg);
  auto& from = static_cast<const InterchainAccount&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_owner().empty()) {
    _this->_internal_set_account_owner(from._internal_account_owner());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_base_account()->::cosmos::auth::v1beta1::BaseAccount::MergeFrom(
        from._internal_base_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterchainAccount::CopyFrom(const InterchainAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.v1.InterchainAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterchainAccount::IsInitialized() const {
  return true;
}

void InterchainAccount::InternalSwap(InterchainAccount* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_owner_, lhs_arena,
                                       &other->_impl_.account_owner_, rhs_arena);
  swap(_impl_.base_account_, other->_impl_.base_account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterchainAccount::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2faccount_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::v1::InterchainAccount*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::v1::InterchainAccount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::v1::InterchainAccount >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/applications/interchain_accounts/v1/metadata.proto

#include "ibc/applications/interchain_accounts/v1/metadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.controller_connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.host_connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.encoding_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tx_type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.controller_connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.host_connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.address_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.encoding_),
    PROTOBUF_FIELD_OFFSET(::ibc::applications::interchain_accounts::v1::Metadata, _impl_.tx_type_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::applications::interchain_accounts::v1::Metadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::applications::interchain_accounts::v1::_Metadata_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n6ibc/applications/interchain_accounts/v"
    "1/metadata.proto\022\'ibc.applications.inter"
    "chain_accounts.v1\"\333\001\n\010Metadata\022\030\n\007versio"
    "n\030\001 \001(\tR\007version\0228\n\030controller_connectio"
    "n_id\030\002 \001(\tR\026controllerConnectionId\022,\n\022ho"
    "st_connection_id\030\003 \001(\tR\020hostConnectionId"
    "\022\030\n\007address\030\004 \001(\tR\007address\022\032\n\010encoding\030\005"
    " \001(\tR\010encoding\022\027\n\007tx_type\030\006 \001(\tR\006txTypeB"
    "\276\002\n+com.ibc.applications.interchain_acco"
    "unts.v1B\rMetadataProtoP\001ZEgithub.com/cos"
    "mos/ibc-go/v7/modules/apps/27-interchain"
    "-accounts/types\242\002\003IAI\252\002&Ibc.Applications"
    ".InterchainAccounts.V1\312\002&Ibc\\Application"
    "s\\InterchainAccounts\\V1\342\0022Ibc\\Applicatio"
    "ns\\InterchainAccounts\\V1\\GPBMetadata\352\002)I"
    "bc::Applications::InterchainAccounts::V1"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto = {
    false,
    false,
    648,
    descriptor_table_protodef_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto,
    "ibc/applications/interchain_accounts/v1/metadata.proto",
    &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto::offsets,
    file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto,
    file_level_enum_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto,
    file_level_service_descriptors_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto_getter() {
  return &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto(&descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto);
namespace ibc {
namespace applications {
namespace interchain_accounts {
namespace v1 {
// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.applications.interchain_accounts.v1.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , decltype(_impl_.controller_connection_id_) {}

    , decltype(_impl_.host_connection_id_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.encoding_) {}

    , decltype(_impl_.tx_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.controller_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_controller_connection_id().empty()) {
    _this->_impl_.controller_connection_id_.Set(from._internal_controller_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.host_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_connection_id().empty()) {
    _this->_impl_.host_connection_id_.Set(from._internal_host_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    _this->_impl_.address_.Set(from._internal_address(), _this->GetArenaForAllocation());
  }
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoding().empty()) {
    _this->_impl_.encoding_.Set(from._internal_encoding(), _this->GetArenaForAllocation());
  }
  _impl_.tx_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_type().empty()) {
    _this->_impl_.tx_type_.Set(from._internal_tx_type(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.applications.interchain_accounts.v1.Metadata)
}

inline void Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , decltype(_impl_.controller_connection_id_) {}

    , decltype(_impl_.host_connection_id_) {}

    , decltype(_impl_.address_) {}

    , decltype(_impl_.encoding_) {}

    , decltype(_impl_.tx_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.controller_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.controller_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoding_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tx_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tx_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:ibc.applications.interchain_accounts.v1.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.controller_connection_id_.Destroy();
  _impl_.host_connection_id_.Destroy();
  _impl_.address_.Destroy();
  _impl_.encoding_.Destroy();
  _impl_.tx_type_.Destroy();
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.applications.interchain_accounts.v1.Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.controller_connection_id_.ClearToEmpty();
  _impl_.host_connection_id_.ClearToEmpty();
  _impl_.address_.ClearToEmpty();
  _impl_.encoding_.ClearToEmpty();
  _impl_.tx_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string controller_connection_id = 2 [json_name = "controllerConnectionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_controller_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.controller_connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string host_connection_id = 3 [json_name = "hostConnectionId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_host_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.host_connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string address = 4 [json_name = "address"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string encoding = 5 [json_name = "encoding"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_encoding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.encoding"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tx_type = 6 [json_name = "txType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_tx_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.applications.interchain_accounts.v1.Metadata.tx_type"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Metadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.applications.interchain_accounts.v1.Metadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string controller_connection_id = 2 [json_name = "controllerConnectionId"];
  if (!this->_internal_controller_connection_id().empty()) {
    const std::string& _s = this->_internal_controller_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.controller_connection_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string host_connection_id = 3 [json_name = "hostConnectionId"];
  if (!this->_internal_host_connection_id().empty()) {
    const std::string& _s = this->_internal_host_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.host_connection_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string address = 4 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    const std::string& _s = this->_internal_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string encoding = 5 [json_name = "encoding"];
  if (!this->_internal_encoding().empty()) {
    const std::string& _s = this->_internal_encoding();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.encoding");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string tx_type = 6 [json_name = "txType"];
  if (!this->_internal_tx_type().empty()) {
    const std::string& _s = this->_internal_tx_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.applications.interchain_accounts.v1.Metadata.tx_type");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.applications.interchain_accounts.v1.Metadata)
  return target;
}

::size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.applications.interchain_accounts.v1.Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string controller_connection_id = 2 [json_name = "controllerConnectionId"];
  if (!this->_internal_controller_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_controller_connection_id());
  }

  // string host_connection_id = 3 [json_name = "hostConnectionId"];
  if (!this->_internal_host_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_host_connection_id());
  }

  // string address = 4 [json_name = "address"];
  if (!this->_internal_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_address());
  }

  // string encoding = 5 [json_name = "encoding"];
  if (!this->_internal_encoding().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_encoding());
  }

  // string tx_type = 6 [json_name = "txType"];
  if (!this->_internal_tx_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tx_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Metadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Metadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Metadata::GetClassData() const { return &_class_data_; }


void Metadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Metadata*>(&to_msg);
  auto& from = static_cast<const Metadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.applications.interchain_accounts.v1.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_controller_connection_id().empty()) {
    _this->_internal_set_controller_connection_id(from._internal_controller_connection_id());
  }
  if (!from._internal_host_connection_id().empty()) {
    _this->_internal_set_host_connection_id(from._internal_host_connection_id());
  }
  if (!from._internal_address().empty()) {
    _this->_internal_set_address(from._internal_address());
  }
  if (!from._internal_encoding().empty()) {
    _this->_internal_set_encoding(from._internal_encoding());
  }
  if (!from._internal_tx_type().empty()) {
    _this->_internal_set_tx_type(from._internal_tx_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.applications.interchain_accounts.v1.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.controller_connection_id_, lhs_arena,
                                       &other->_impl_.controller_connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_connection_id_, lhs_arena,
                                       &other->_impl_.host_connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_, lhs_arena,
                                       &other->_impl_.address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoding_, lhs_arena,
                                       &other->_impl_.encoding_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tx_type_, lhs_arena,
                                       &other->_impl_.tx_type_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Metadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto_getter, &descriptor_table_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto_once,
      file_level_metadata_ibc_2fapplications_2finterchain_5faccounts_2fv1_2fmetadata_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace interchain_accounts
}  // namespace applications
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::applications::interchain_accounts::v1::Metadata*
Arena::CreateMaybeMessage< ::ibc::applications::interchain_accounts::v1::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::applications::interchain_accounts::v1::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

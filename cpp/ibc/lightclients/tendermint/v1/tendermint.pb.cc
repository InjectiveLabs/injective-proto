// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/tendermint/v1/tendermint.proto

#include "ibc/lightclients/tendermint/v1/tendermint.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace lightclients {
namespace tendermint {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ClientState::ClientState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_specs_)*/{}
  , /*decltype(_impl_.upgrade_path_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trust_level_)*/nullptr
  , /*decltype(_impl_.trusting_period_)*/nullptr
  , /*decltype(_impl_.unbonding_period_)*/nullptr
  , /*decltype(_impl_.max_clock_drift_)*/nullptr
  , /*decltype(_impl_.frozen_height_)*/nullptr
  , /*decltype(_impl_.latest_height_)*/nullptr
  , /*decltype(_impl_.allow_update_after_expiry_)*/ false

  , /*decltype(_impl_.allow_update_after_misbehaviour_)*/ false
} {}
struct ClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDefaultTypeInternal() {}
  union {
    ClientState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDefaultTypeInternal _ClientState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConsensusState::ConsensusState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.next_validators_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.root_)*/nullptr} {}
struct ConsensusStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusStateDefaultTypeInternal() {}
  union {
    ConsensusState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusStateDefaultTypeInternal _ConsensusState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Misbehaviour::Misbehaviour(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_1_)*/nullptr
  , /*decltype(_impl_.header_2_)*/nullptr} {}
struct MisbehaviourDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MisbehaviourDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MisbehaviourDefaultTypeInternal() {}
  union {
    Misbehaviour _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MisbehaviourDefaultTypeInternal _Misbehaviour_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signed_header_)*/nullptr
  , /*decltype(_impl_.validator_set_)*/nullptr
  , /*decltype(_impl_.trusted_height_)*/nullptr
  , /*decltype(_impl_.trusted_validators_)*/nullptr} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Fraction::Fraction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.numerator_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.denominator_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FractionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FractionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FractionDefaultTypeInternal() {}
  union {
    Fraction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FractionDefaultTypeInternal _Fraction_default_instance_;
}  // namespace v1
}  // namespace tendermint
}  // namespace lightclients
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.trust_level_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.trusting_period_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.unbonding_period_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.max_clock_drift_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.frozen_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.latest_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.proof_specs_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.upgrade_path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.allow_update_after_expiry_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ClientState, _impl_.allow_update_after_misbehaviour_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    5,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ConsensusState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ConsensusState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ConsensusState, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ConsensusState, _impl_.root_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::ConsensusState, _impl_.next_validators_hash_),
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Misbehaviour, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Misbehaviour, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Misbehaviour, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Misbehaviour, _impl_.header_1_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Misbehaviour, _impl_.header_2_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _impl_.signed_header_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _impl_.validator_set_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _impl_.trusted_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Header, _impl_.trusted_validators_),
    0,
    1,
    2,
    3,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Fraction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Fraction, _impl_.numerator_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::tendermint::v1::Fraction, _impl_.denominator_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 19, -1, sizeof(::ibc::lightclients::tendermint::v1::ClientState)},
        { 30, 41, -1, sizeof(::ibc::lightclients::tendermint::v1::ConsensusState)},
        { 44, 55, -1, sizeof(::ibc::lightclients::tendermint::v1::Misbehaviour)},
        { 58, 70, -1, sizeof(::ibc::lightclients::tendermint::v1::Header)},
        { 74, -1, -1, sizeof(::ibc::lightclients::tendermint::v1::Fraction)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::lightclients::tendermint::v1::_ClientState_default_instance_._instance,
    &::ibc::lightclients::tendermint::v1::_ConsensusState_default_instance_._instance,
    &::ibc::lightclients::tendermint::v1::_Misbehaviour_default_instance_._instance,
    &::ibc::lightclients::tendermint::v1::_Header_default_instance_._instance,
    &::ibc::lightclients::tendermint::v1::_Fraction_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n/ibc/lightclients/tendermint/v1/tenderm"
    "int.proto\022\036ibc.lightclients.tendermint.v"
    "1\032 tendermint/types/validator.proto\032\034ten"
    "dermint/types/types.proto\032\034cosmos/ics23/"
    "v1/proofs.proto\032\036google/protobuf/duratio"
    "n.proto\032\037google/protobuf/timestamp.proto"
    "\032\037ibc/core/client/v1/client.proto\032\'ibc/c"
    "ore/commitment/v1/commitment.proto\032\024gogo"
    "proto/gogo.proto\"\342\005\n\013ClientState\022\031\n\010chai"
    "n_id\030\001 \001(\tR\007chainId\022O\n\013trust_level\030\002 \001(\013"
    "2(.ibc.lightclients.tendermint.v1.Fracti"
    "onB\004\310\336\037\000R\ntrustLevel\022L\n\017trusting_period\030"
    "\003 \001(\0132\031.google.protobuf.DurationB\010\310\336\037\000\230\337"
    "\037\001R\016trustingPeriod\022N\n\020unbonding_period\030\004"
    " \001(\0132\031.google.protobuf.DurationB\010\310\336\037\000\230\337\037"
    "\001R\017unbondingPeriod\022K\n\017max_clock_drift\030\005 "
    "\001(\0132\031.google.protobuf.DurationB\010\310\336\037\000\230\337\037\001"
    "R\rmaxClockDrift\022E\n\rfrozen_height\030\006 \001(\0132\032"
    ".ibc.core.client.v1.HeightB\004\310\336\037\000R\014frozen"
    "Height\022E\n\rlatest_height\030\007 \001(\0132\032.ibc.core"
    ".client.v1.HeightB\004\310\336\037\000R\014latestHeight\022;\n"
    "\013proof_specs\030\010 \003(\0132\032.cosmos.ics23.v1.Pro"
    "ofSpecR\nproofSpecs\022!\n\014upgrade_path\030\t \003(\t"
    "R\013upgradePath\022=\n\031allow_update_after_expi"
    "ry\030\n \001(\010B\002\030\001R\026allowUpdateAfterExpiry\022I\n\037"
    "allow_update_after_misbehaviour\030\013 \001(\010B\002\030"
    "\001R\034allowUpdateAfterMisbehaviour:\004\210\240\037\000\"\200\002"
    "\n\016ConsensusState\022B\n\ttimestamp\030\001 \001(\0132\032.go"
    "ogle.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttimes"
    "tamp\022<\n\004root\030\002 \001(\0132\".ibc.core.commitment"
    ".v1.MerkleRootB\004\310\336\037\000R\004root\022f\n\024next_valid"
    "ators_hash\030\003 \001(\014B4\372\336\0370github.com/cometbf"
    "t/cometbft/libs/bytes.HexBytesR\022nextVali"
    "datorsHash:\004\210\240\037\000\"\325\001\n\014Misbehaviour\022\037\n\tcli"
    "ent_id\030\001 \001(\tB\002\030\001R\010clientId\022N\n\010header_1\030\002"
    " \001(\0132&.ibc.lightclients.tendermint.v1.He"
    "aderB\013\342\336\037\007Header1R\007header1\022N\n\010header_2\030\003"
    " \001(\0132&.ibc.lightclients.tendermint.v1.He"
    "aderB\013\342\336\037\007Header2R\007header2:\004\210\240\037\000\"\260\002\n\006Hea"
    "der\022I\n\rsigned_header\030\001 \001(\0132\036.tendermint."
    "types.SignedHeaderB\004\320\336\037\001R\014signedHeader\022C"
    "\n\rvalidator_set\030\002 \001(\0132\036.tendermint.types"
    ".ValidatorSetR\014validatorSet\022G\n\016trusted_h"
    "eight\030\003 \001(\0132\032.ibc.core.client.v1.HeightB"
    "\004\310\336\037\000R\rtrustedHeight\022M\n\022trusted_validato"
    "rs\030\004 \001(\0132\036.tendermint.types.ValidatorSet"
    "R\021trustedValidators\"J\n\010Fraction\022\034\n\tnumer"
    "ator\030\001 \001(\004R\tnumerator\022 \n\013denominator\030\002 \001"
    "(\004R\013denominatorB\234\002\n\"com.ibc.lightclients"
    ".tendermint.v1B\017TendermintProtoP\001ZJgithu"
    "b.com/cosmos/ibc-go/v7/modules/light-cli"
    "ents/07-tendermint;tendermint\242\002\003ILT\252\002\036Ib"
    "c.Lightclients.Tendermint.V1\312\002\036Ibc\\Light"
    "clients\\Tendermint\\V1\342\002*Ibc\\Lightclients"
    "\\Tendermint\\V1\\GPBMetadata\352\002!Ibc::Lightc"
    "lients::Tendermint::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_deps[8] =
    {
        &::descriptor_table_cosmos_2fics23_2fv1_2fproofs_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
        &::descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto = {
    false,
    false,
    2230,
    descriptor_table_protodef_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto,
    "ibc/lightclients/tendermint/v1/tendermint.proto",
    &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
    descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_deps,
    8,
    5,
    schemas,
    file_default_instances,
    TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto::offsets,
    file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto,
    file_level_enum_descriptors_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto,
    file_level_service_descriptors_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter() {
  return &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto(&descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto);
namespace ibc {
namespace lightclients {
namespace tendermint {
namespace v1 {
// ===================================================================

class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientState, _impl_._has_bits_);
  static const ::ibc::lightclients::tendermint::v1::Fraction& trust_level(const ClientState* msg);
  static void set_has_trust_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& trusting_period(const ClientState* msg);
  static void set_has_trusting_period(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& unbonding_period(const ClientState* msg);
  static void set_has_unbonding_period(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Duration& max_clock_drift(const ClientState* msg);
  static void set_has_max_clock_drift(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::ibc::core::client::v1::Height& frozen_height(const ClientState* msg);
  static void set_has_frozen_height(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::ibc::core::client::v1::Height& latest_height(const ClientState* msg);
  static void set_has_latest_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::ibc::lightclients::tendermint::v1::Fraction&
ClientState::_Internal::trust_level(const ClientState* msg) {
  return *msg->_impl_.trust_level_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClientState::_Internal::trusting_period(const ClientState* msg) {
  return *msg->_impl_.trusting_period_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClientState::_Internal::unbonding_period(const ClientState* msg) {
  return *msg->_impl_.unbonding_period_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ClientState::_Internal::max_clock_drift(const ClientState* msg) {
  return *msg->_impl_.max_clock_drift_;
}
const ::ibc::core::client::v1::Height&
ClientState::_Internal::frozen_height(const ClientState* msg) {
  return *msg->_impl_.frozen_height_;
}
const ::ibc::core::client::v1::Height&
ClientState::_Internal::latest_height(const ClientState* msg) {
  return *msg->_impl_.latest_height_;
}
void ClientState::clear_trusting_period() {
  if (_impl_.trusting_period_ != nullptr) _impl_.trusting_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ClientState::clear_unbonding_period() {
  if (_impl_.unbonding_period_ != nullptr) _impl_.unbonding_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ClientState::clear_max_clock_drift() {
  if (_impl_.max_clock_drift_ != nullptr) _impl_.max_clock_drift_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ClientState::clear_frozen_height() {
  if (_impl_.frozen_height_ != nullptr) _impl_.frozen_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ClientState::clear_latest_height() {
  if (_impl_.latest_height_ != nullptr) _impl_.latest_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ClientState::clear_proof_specs() {
  _internal_mutable_proof_specs()->Clear();
}
ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.tendermint.v1.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_specs_){from._impl_.proof_specs_}
    , decltype(_impl_.upgrade_path_){from._impl_.upgrade_path_}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.trust_level_){nullptr}
    , decltype(_impl_.trusting_period_){nullptr}
    , decltype(_impl_.unbonding_period_){nullptr}
    , decltype(_impl_.max_clock_drift_){nullptr}
    , decltype(_impl_.frozen_height_){nullptr}
    , decltype(_impl_.latest_height_){nullptr}
    , decltype(_impl_.allow_update_after_expiry_) {}

    , decltype(_impl_.allow_update_after_misbehaviour_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.trust_level_ = new ::ibc::lightclients::tendermint::v1::Fraction(*from._impl_.trust_level_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.trusting_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.trusting_period_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.unbonding_period_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.unbonding_period_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.max_clock_drift_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.max_clock_drift_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.frozen_height_ = new ::ibc::core::client::v1::Height(*from._impl_.frozen_height_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.latest_height_ = new ::ibc::core::client::v1::Height(*from._impl_.latest_height_);
  }
  ::memcpy(&_impl_.allow_update_after_expiry_, &from._impl_.allow_update_after_expiry_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.allow_update_after_misbehaviour_) -
    reinterpret_cast<char*>(&_impl_.allow_update_after_expiry_)) + sizeof(_impl_.allow_update_after_misbehaviour_));
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.tendermint.v1.ClientState)
}

inline void ClientState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_specs_){arena}
    , decltype(_impl_.upgrade_path_){arena}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.trust_level_){nullptr}
    , decltype(_impl_.trusting_period_){nullptr}
    , decltype(_impl_.unbonding_period_){nullptr}
    , decltype(_impl_.max_clock_drift_){nullptr}
    , decltype(_impl_.frozen_height_){nullptr}
    , decltype(_impl_.latest_height_){nullptr}
    , decltype(_impl_.allow_update_after_expiry_) { false }

    , decltype(_impl_.allow_update_after_misbehaviour_) { false }

  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.tendermint.v1.ClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proof_specs()->~RepeatedPtrField();
  _internal_mutable_upgrade_path()->~RepeatedPtrField();
  _impl_.chain_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trust_level_;
  if (this != internal_default_instance()) delete _impl_.trusting_period_;
  if (this != internal_default_instance()) delete _impl_.unbonding_period_;
  if (this != internal_default_instance()) delete _impl_.max_clock_drift_;
  if (this != internal_default_instance()) delete _impl_.frozen_height_;
  if (this != internal_default_instance()) delete _impl_.latest_height_;
}

void ClientState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.tendermint.v1.ClientState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proof_specs()->Clear();
  _internal_mutable_upgrade_path()->Clear();
  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.trust_level_ != nullptr);
      _impl_.trust_level_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trusting_period_ != nullptr);
      _impl_.trusting_period_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.unbonding_period_ != nullptr);
      _impl_.unbonding_period_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.max_clock_drift_ != nullptr);
      _impl_.max_clock_drift_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.frozen_height_ != nullptr);
      _impl_.frozen_height_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.latest_height_ != nullptr);
      _impl_.latest_height_->Clear();
    }
  }
  ::memset(&_impl_.allow_update_after_expiry_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.allow_update_after_misbehaviour_) -
      reinterpret_cast<char*>(&_impl_.allow_update_after_expiry_)) + sizeof(_impl_.allow_update_after_misbehaviour_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.tendermint.v1.ClientState.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [json_name = "trustLevel", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trust_level(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration trusting_period = 3 [json_name = "trustingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusting_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration unbonding_period = 4 [json_name = "unbondingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_unbonding_period(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Duration max_clock_drift = 5 [json_name = "maxClockDrift", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_clock_drift(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height frozen_height = 6 [json_name = "frozenHeight", (.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_frozen_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height latest_height = 7 [json_name = "latestHeight", (.gogoproto.nullable) = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .cosmos.ics23.v1.ProofSpec proof_specs = 8 [json_name = "proofSpecs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proof_specs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string upgrade_path = 9 [json_name = "upgradePath"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_upgrade_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.tendermint.v1.ClientState.upgrade_path"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool allow_update_after_expiry = 10 [json_name = "allowUpdateAfterExpiry", deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.allow_update_after_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool allow_update_after_misbehaviour = 11 [json_name = "allowUpdateAfterMisbehaviour", deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.allow_update_after_misbehaviour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.tendermint.v1.ClientState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.tendermint.v1.ClientState.chain_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [json_name = "trustLevel", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::trust_level(this),
        _Internal::trust_level(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration trusting_period = 3 [json_name = "trustingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trusting_period(this),
        _Internal::trusting_period(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration unbonding_period = 4 [json_name = "unbondingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::unbonding_period(this),
        _Internal::unbonding_period(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration max_clock_drift = 5 [json_name = "maxClockDrift", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::max_clock_drift(this),
        _Internal::max_clock_drift(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height frozen_height = 6 [json_name = "frozenHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::frozen_height(this),
        _Internal::frozen_height(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height latest_height = 7 [json_name = "latestHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::latest_height(this),
        _Internal::latest_height(this).GetCachedSize(), target, stream);
  }

  // repeated .cosmos.ics23.v1.ProofSpec proof_specs = 8 [json_name = "proofSpecs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proof_specs_size()); i < n; i++) {
    const auto& repfield = this->_internal_proof_specs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string upgrade_path = 9 [json_name = "upgradePath"];
  for (int i = 0, n = this->_internal_upgrade_path_size(); i < n; ++i) {
    const auto& s = this->_internal_upgrade_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.tendermint.v1.ClientState.upgrade_path");
    target = stream->WriteString(9, s, target);
  }

  // bool allow_update_after_expiry = 10 [json_name = "allowUpdateAfterExpiry", deprecated = true];
  if (this->_internal_allow_update_after_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_allow_update_after_expiry(), target);
  }

  // bool allow_update_after_misbehaviour = 11 [json_name = "allowUpdateAfterMisbehaviour", deprecated = true];
  if (this->_internal_allow_update_after_misbehaviour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_allow_update_after_misbehaviour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.tendermint.v1.ClientState)
  return target;
}

::size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.tendermint.v1.ClientState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.ics23.v1.ProofSpec proof_specs = 8 [json_name = "proofSpecs"];
  total_size += 1UL * this->_internal_proof_specs_size();
  for (const auto& msg : this->_internal_proof_specs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string upgrade_path = 9 [json_name = "upgradePath"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_upgrade_path().size());
  for (int i = 0, n = _internal_upgrade_path().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_upgrade_path().Get(i));
  }

  // string chain_id = 1 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [json_name = "trustLevel", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trust_level_);
    }

    // .google.protobuf.Duration trusting_period = 3 [json_name = "trustingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trusting_period_);
    }

    // .google.protobuf.Duration unbonding_period = 4 [json_name = "unbondingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.unbonding_period_);
    }

    // .google.protobuf.Duration max_clock_drift = 5 [json_name = "maxClockDrift", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.max_clock_drift_);
    }

    // .ibc.core.client.v1.Height frozen_height = 6 [json_name = "frozenHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.frozen_height_);
    }

    // .ibc.core.client.v1.Height latest_height = 7 [json_name = "latestHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.latest_height_);
    }

  }
  // bool allow_update_after_expiry = 10 [json_name = "allowUpdateAfterExpiry", deprecated = true];
  if (this->_internal_allow_update_after_expiry() != 0) {
    total_size += 2;
  }

  // bool allow_update_after_misbehaviour = 11 [json_name = "allowUpdateAfterMisbehaviour", deprecated = true];
  if (this->_internal_allow_update_after_misbehaviour() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientState::GetClassData() const { return &_class_data_; }


void ClientState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientState*>(&to_msg);
  auto& from = static_cast<const ClientState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.tendermint.v1.ClientState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proof_specs()->MergeFrom(from._internal_proof_specs());
  _this->_internal_mutable_upgrade_path()->MergeFrom(from._internal_upgrade_path());
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_trust_level()->::ibc::lightclients::tendermint::v1::Fraction::MergeFrom(
          from._internal_trust_level());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_trusting_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_trusting_period());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_unbonding_period()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_unbonding_period());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_max_clock_drift()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
          from._internal_max_clock_drift());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_frozen_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_frozen_height());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_latest_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_latest_height());
    }
  }
  if (from._internal_allow_update_after_expiry() != 0) {
    _this->_internal_set_allow_update_after_expiry(from._internal_allow_update_after_expiry());
  }
  if (from._internal_allow_update_after_misbehaviour() != 0) {
    _this->_internal_set_allow_update_after_misbehaviour(from._internal_allow_update_after_misbehaviour());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.tendermint.v1.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_proof_specs()->InternalSwap(other->_internal_mutable_proof_specs());
  _internal_mutable_upgrade_path()->InternalSwap(
      other->_internal_mutable_upgrade_path());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientState, _impl_.allow_update_after_misbehaviour_)
      + sizeof(ClientState::_impl_.allow_update_after_misbehaviour_)
      - PROTOBUF_FIELD_OFFSET(ClientState, _impl_.trust_level_)>(
          reinterpret_cast<char*>(&_impl_.trust_level_),
          reinterpret_cast<char*>(&other->_impl_.trust_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter, &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
      file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[0]);
}
// ===================================================================

class ConsensusState::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsensusState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ConsensusState* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::commitment::v1::MerkleRoot& root(const ConsensusState* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ConsensusState::_Internal::timestamp(const ConsensusState* msg) {
  return *msg->_impl_.timestamp_;
}
const ::ibc::core::commitment::v1::MerkleRoot&
ConsensusState::_Internal::root(const ConsensusState* msg) {
  return *msg->_impl_.root_;
}
void ConsensusState::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ConsensusState::clear_root() {
  if (_impl_.root_ != nullptr) _impl_.root_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ConsensusState::ConsensusState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.tendermint.v1.ConsensusState)
}
ConsensusState::ConsensusState(const ConsensusState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.root_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.root_ = new ::ibc::core::commitment::v1::MerkleRoot(*from._impl_.root_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.tendermint.v1.ConsensusState)
}

inline void ConsensusState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.root_){nullptr}
  };
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsensusState::~ConsensusState() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.tendermint.v1.ConsensusState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.next_validators_hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
  if (this != internal_default_instance()) delete _impl_.root_;
}

void ConsensusState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.tendermint.v1.ConsensusState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.next_validators_hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.root_ != nullptr);
      _impl_.root_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.commitment.v1.MerkleRoot root = 2 [json_name = "root", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes next_validators_hash = 3 [json_name = "nextValidatorsHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConsensusState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.tendermint.v1.ConsensusState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.commitment.v1.MerkleRoot root = 2 [json_name = "root", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  // bytes next_validators_hash = 3 [json_name = "nextValidatorsHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_next_validators_hash().empty()) {
    const std::string& _s = this->_internal_next_validators_hash();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.tendermint.v1.ConsensusState)
  return target;
}

::size_t ConsensusState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.tendermint.v1.ConsensusState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes next_validators_hash = 3 [json_name = "nextValidatorsHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_next_validators_hash());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

    // .ibc.core.commitment.v1.MerkleRoot root = 2 [json_name = "root", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.root_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusState::GetClassData() const { return &_class_data_; }


void ConsensusState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusState*>(&to_msg);
  auto& from = static_cast<const ConsensusState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.tendermint.v1.ConsensusState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_root()->::ibc::core::commitment::v1::MerkleRoot::MergeFrom(
          from._internal_root());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusState::CopyFrom(const ConsensusState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.tendermint.v1.ConsensusState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusState::IsInitialized() const {
  return true;
}

void ConsensusState::InternalSwap(ConsensusState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_validators_hash_, lhs_arena,
                                       &other->_impl_.next_validators_hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_.root_)
      + sizeof(ConsensusState::_impl_.root_)
      - PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter, &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
      file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[1]);
}
// ===================================================================

class Misbehaviour::_Internal {
 public:
  using HasBits = decltype(std::declval<Misbehaviour>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_._has_bits_);
  static const ::ibc::lightclients::tendermint::v1::Header& header_1(const Misbehaviour* msg);
  static void set_has_header_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::lightclients::tendermint::v1::Header& header_2(const Misbehaviour* msg);
  static void set_has_header_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::lightclients::tendermint::v1::Header&
Misbehaviour::_Internal::header_1(const Misbehaviour* msg) {
  return *msg->_impl_.header_1_;
}
const ::ibc::lightclients::tendermint::v1::Header&
Misbehaviour::_Internal::header_2(const Misbehaviour* msg) {
  return *msg->_impl_.header_2_;
}
Misbehaviour::Misbehaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.tendermint.v1.Misbehaviour)
}
Misbehaviour::Misbehaviour(const Misbehaviour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Misbehaviour* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.header_1_){nullptr}
    , decltype(_impl_.header_2_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_1_ = new ::ibc::lightclients::tendermint::v1::Header(*from._impl_.header_1_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.header_2_ = new ::ibc::lightclients::tendermint::v1::Header(*from._impl_.header_2_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.tendermint.v1.Misbehaviour)
}

inline void Misbehaviour::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.header_1_){nullptr}
    , decltype(_impl_.header_2_){nullptr}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Misbehaviour::~Misbehaviour() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.tendermint.v1.Misbehaviour)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Misbehaviour::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_1_;
  if (this != internal_default_instance()) delete _impl_.header_2_;
}

void Misbehaviour::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Misbehaviour::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.tendermint.v1.Misbehaviour)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_1_ != nullptr);
      _impl_.header_1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.header_2_ != nullptr);
      _impl_.header_2_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Misbehaviour::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId", deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.tendermint.v1.Misbehaviour.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.tendermint.v1.Header header_1 = 2 [json_name = "header1", (.gogoproto.customname) = "Header1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_1(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.tendermint.v1.Header header_2 = 3 [json_name = "header2", (.gogoproto.customname) = "Header2"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_2(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Misbehaviour::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.tendermint.v1.Misbehaviour)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId", deprecated = true];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.tendermint.v1.Misbehaviour.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.lightclients.tendermint.v1.Header header_1 = 2 [json_name = "header1", (.gogoproto.customname) = "Header1"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::header_1(this),
        _Internal::header_1(this).GetCachedSize(), target, stream);
  }

  // .ibc.lightclients.tendermint.v1.Header header_2 = 3 [json_name = "header2", (.gogoproto.customname) = "Header2"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::header_2(this),
        _Internal::header_2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.tendermint.v1.Misbehaviour)
  return target;
}

::size_t Misbehaviour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.tendermint.v1.Misbehaviour)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId", deprecated = true];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.lightclients.tendermint.v1.Header header_1 = 2 [json_name = "header1", (.gogoproto.customname) = "Header1"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_1_);
    }

    // .ibc.lightclients.tendermint.v1.Header header_2 = 3 [json_name = "header2", (.gogoproto.customname) = "Header2"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_2_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Misbehaviour::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Misbehaviour::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Misbehaviour::GetClassData() const { return &_class_data_; }


void Misbehaviour::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Misbehaviour*>(&to_msg);
  auto& from = static_cast<const Misbehaviour&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.tendermint.v1.Misbehaviour)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_1()->::ibc::lightclients::tendermint::v1::Header::MergeFrom(
          from._internal_header_1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header_2()->::ibc::lightclients::tendermint::v1::Header::MergeFrom(
          from._internal_header_2());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Misbehaviour::CopyFrom(const Misbehaviour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.tendermint.v1.Misbehaviour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Misbehaviour::IsInitialized() const {
  return true;
}

void Misbehaviour::InternalSwap(Misbehaviour* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_.header_2_)
      + sizeof(Misbehaviour::_impl_.header_2_)
      - PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_.header_1_)>(
          reinterpret_cast<char*>(&_impl_.header_1_),
          reinterpret_cast<char*>(&other->_impl_.header_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Misbehaviour::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter, &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
      file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[2]);
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::tendermint::types::SignedHeader& signed_header(const Header* msg);
  static void set_has_signed_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::ValidatorSet& validator_set(const Header* msg);
  static void set_has_validator_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ibc::core::client::v1::Height& trusted_height(const Header* msg);
  static void set_has_trusted_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::tendermint::types::ValidatorSet& trusted_validators(const Header* msg);
  static void set_has_trusted_validators(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::tendermint::types::SignedHeader&
Header::_Internal::signed_header(const Header* msg) {
  return *msg->_impl_.signed_header_;
}
const ::tendermint::types::ValidatorSet&
Header::_Internal::validator_set(const Header* msg) {
  return *msg->_impl_.validator_set_;
}
const ::ibc::core::client::v1::Height&
Header::_Internal::trusted_height(const Header* msg) {
  return *msg->_impl_.trusted_height_;
}
const ::tendermint::types::ValidatorSet&
Header::_Internal::trusted_validators(const Header* msg) {
  return *msg->_impl_.trusted_validators_;
}
void Header::clear_signed_header() {
  if (_impl_.signed_header_ != nullptr) _impl_.signed_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_validator_set() {
  if (_impl_.validator_set_ != nullptr) _impl_.validator_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Header::clear_trusted_height() {
  if (_impl_.trusted_height_ != nullptr) _impl_.trusted_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Header::clear_trusted_validators() {
  if (_impl_.trusted_validators_ != nullptr) _impl_.trusted_validators_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.tendermint.v1.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signed_header_){nullptr}
    , decltype(_impl_.validator_set_){nullptr}
    , decltype(_impl_.trusted_height_){nullptr}
    , decltype(_impl_.trusted_validators_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.signed_header_ = new ::tendermint::types::SignedHeader(*from._impl_.signed_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.validator_set_ = new ::tendermint::types::ValidatorSet(*from._impl_.validator_set_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.trusted_height_ = new ::ibc::core::client::v1::Height(*from._impl_.trusted_height_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.trusted_validators_ = new ::tendermint::types::ValidatorSet(*from._impl_.trusted_validators_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.tendermint.v1.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signed_header_){nullptr}
    , decltype(_impl_.validator_set_){nullptr}
    , decltype(_impl_.trusted_height_){nullptr}
    , decltype(_impl_.trusted_validators_){nullptr}
  };
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.tendermint.v1.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signed_header_;
  if (this != internal_default_instance()) delete _impl_.validator_set_;
  if (this != internal_default_instance()) delete _impl_.trusted_height_;
  if (this != internal_default_instance()) delete _impl_.trusted_validators_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.tendermint.v1.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.signed_header_ != nullptr);
      _impl_.signed_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.validator_set_ != nullptr);
      _impl_.validator_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.trusted_height_ != nullptr);
      _impl_.trusted_height_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.trusted_validators_ != nullptr);
      _impl_.trusted_validators_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader", (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_set(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height trusted_height = 3 [json_name = "trustedHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusted_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.ValidatorSet trusted_validators = 4 [json_name = "trustedValidators"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trusted_validators(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.tendermint.v1.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader", (.gogoproto.embed) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::signed_header(this),
        _Internal::signed_header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validator_set(this),
        _Internal::validator_set(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height trusted_height = 3 [json_name = "trustedHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trusted_height(this),
        _Internal::trusted_height(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.ValidatorSet trusted_validators = 4 [json_name = "trustedValidators"];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trusted_validators(this),
        _Internal::trusted_validators(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.tendermint.v1.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.tendermint.v1.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader", (.gogoproto.embed) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signed_header_);
    }

    // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validator_set_);
    }

    // .ibc.core.client.v1.Height trusted_height = 3 [json_name = "trustedHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trusted_height_);
    }

    // .tendermint.types.ValidatorSet trusted_validators = 4 [json_name = "trustedValidators"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trusted_validators_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.tendermint.v1.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_signed_header()->::tendermint::types::SignedHeader::MergeFrom(
          from._internal_signed_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_validator_set()->::tendermint::types::ValidatorSet::MergeFrom(
          from._internal_validator_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_trusted_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_trusted_height());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_trusted_validators()->::tendermint::types::ValidatorSet::MergeFrom(
          from._internal_trusted_validators());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.tendermint.v1.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.trusted_validators_)
      + sizeof(Header::_impl_.trusted_validators_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.signed_header_)>(
          reinterpret_cast<char*>(&_impl_.signed_header_),
          reinterpret_cast<char*>(&other->_impl_.signed_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter, &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
      file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[3]);
}
// ===================================================================

class Fraction::_Internal {
 public:
};

Fraction::Fraction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.tendermint.v1.Fraction)
}
Fraction::Fraction(const Fraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.tendermint.v1.Fraction)
}

inline void Fraction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.numerator_) { ::uint64_t{0u} }

    , decltype(_impl_.denominator_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Fraction::~Fraction() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.tendermint.v1.Fraction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Fraction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Fraction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Fraction::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.tendermint.v1.Fraction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.numerator_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.denominator_) -
      reinterpret_cast<char*>(&_impl_.numerator_)) + sizeof(_impl_.denominator_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Fraction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 numerator = 1 [json_name = "numerator"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.numerator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 denominator = 2 [json_name = "denominator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.denominator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Fraction::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.tendermint.v1.Fraction)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 numerator = 1 [json_name = "numerator"];
  if (this->_internal_numerator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_numerator(), target);
  }

  // uint64 denominator = 2 [json_name = "denominator"];
  if (this->_internal_denominator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_denominator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.tendermint.v1.Fraction)
  return target;
}

::size_t Fraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.tendermint.v1.Fraction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 numerator = 1 [json_name = "numerator"];
  if (this->_internal_numerator() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_numerator());
  }

  // uint64 denominator = 2 [json_name = "denominator"];
  if (this->_internal_denominator() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_denominator());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Fraction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Fraction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Fraction::GetClassData() const { return &_class_data_; }


void Fraction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Fraction*>(&to_msg);
  auto& from = static_cast<const Fraction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.tendermint.v1.Fraction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_numerator() != 0) {
    _this->_internal_set_numerator(from._internal_numerator());
  }
  if (from._internal_denominator() != 0) {
    _this->_internal_set_denominator(from._internal_denominator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Fraction::CopyFrom(const Fraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.tendermint.v1.Fraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Fraction::IsInitialized() const {
  return true;
}

void Fraction::InternalSwap(Fraction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Fraction, _impl_.denominator_)
      + sizeof(Fraction::_impl_.denominator_)
      - PROTOBUF_FIELD_OFFSET(Fraction, _impl_.numerator_)>(
          reinterpret_cast<char*>(&_impl_.numerator_),
          reinterpret_cast<char*>(&other->_impl_.numerator_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Fraction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_getter, &descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_once,
      file_level_metadata_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace tendermint
}  // namespace lightclients
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::lightclients::tendermint::v1::ClientState*
Arena::CreateMaybeMessage< ::ibc::lightclients::tendermint::v1::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::tendermint::v1::ClientState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::tendermint::v1::ConsensusState*
Arena::CreateMaybeMessage< ::ibc::lightclients::tendermint::v1::ConsensusState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::tendermint::v1::ConsensusState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::tendermint::v1::Misbehaviour*
Arena::CreateMaybeMessage< ::ibc::lightclients::tendermint::v1::Misbehaviour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::tendermint::v1::Misbehaviour >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::tendermint::v1::Header*
Arena::CreateMaybeMessage< ::ibc::lightclients::tendermint::v1::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::tendermint::v1::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::tendermint::v1::Fraction*
Arena::CreateMaybeMessage< ::ibc::lightclients::tendermint::v1::Fraction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::tendermint::v1::Fraction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

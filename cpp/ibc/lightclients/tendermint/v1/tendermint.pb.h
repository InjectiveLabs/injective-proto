// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/tendermint/v1/tendermint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tendermint/types/validator.pb.h"
#include "tendermint/types/types.pb.h"
#include "cosmos/ics23/v1/proofs.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "ibc/core/client/v1/client.pb.h"
#include "ibc/core/commitment/v1/commitment.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
namespace ibc {
namespace lightclients {
namespace tendermint {
namespace v1 {
class ClientState;
struct ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class ConsensusState;
struct ConsensusStateDefaultTypeInternal;
extern ConsensusStateDefaultTypeInternal _ConsensusState_default_instance_;
class Fraction;
struct FractionDefaultTypeInternal;
extern FractionDefaultTypeInternal _Fraction_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Misbehaviour;
struct MisbehaviourDefaultTypeInternal;
extern MisbehaviourDefaultTypeInternal _Misbehaviour_default_instance_;
}  // namespace v1
}  // namespace tendermint
}  // namespace lightclients
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::lightclients::tendermint::v1::ClientState* Arena::CreateMaybeMessage<::ibc::lightclients::tendermint::v1::ClientState>(Arena*);
template <>
::ibc::lightclients::tendermint::v1::ConsensusState* Arena::CreateMaybeMessage<::ibc::lightclients::tendermint::v1::ConsensusState>(Arena*);
template <>
::ibc::lightclients::tendermint::v1::Fraction* Arena::CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Fraction>(Arena*);
template <>
::ibc::lightclients::tendermint::v1::Header* Arena::CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Header>(Arena*);
template <>
::ibc::lightclients::tendermint::v1::Misbehaviour* Arena::CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Misbehaviour>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace lightclients {
namespace tendermint {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class ClientState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.tendermint.v1.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  ~ClientState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientState(const ClientState& from);
  ClientState(ClientState&& from) noexcept
    : ClientState() {
    *this = ::std::move(from);
  }

  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
               &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientState& a, ClientState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientState& from) {
    ClientState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.tendermint.v1.ClientState";
  }
  protected:
  explicit ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofSpecsFieldNumber = 8,
    kUpgradePathFieldNumber = 9,
    kChainIdFieldNumber = 1,
    kTrustLevelFieldNumber = 2,
    kTrustingPeriodFieldNumber = 3,
    kUnbondingPeriodFieldNumber = 4,
    kMaxClockDriftFieldNumber = 5,
    kFrozenHeightFieldNumber = 6,
    kLatestHeightFieldNumber = 7,
    kAllowUpdateAfterExpiryFieldNumber = 10,
    kAllowUpdateAfterMisbehaviourFieldNumber = 11,
  };
  // repeated .cosmos.ics23.v1.ProofSpec proof_specs = 8 [json_name = "proofSpecs"];
  int proof_specs_size() const;
  private:
  int _internal_proof_specs_size() const;

  public:
  void clear_proof_specs() ;
  ::cosmos::ics23::v1::ProofSpec* mutable_proof_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::ics23::v1::ProofSpec >*
      mutable_proof_specs();
  private:
  const ::cosmos::ics23::v1::ProofSpec& _internal_proof_specs(int index) const;
  ::cosmos::ics23::v1::ProofSpec* _internal_add_proof_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::ics23::v1::ProofSpec>& _internal_proof_specs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::ics23::v1::ProofSpec>* _internal_mutable_proof_specs();
  public:
  const ::cosmos::ics23::v1::ProofSpec& proof_specs(int index) const;
  ::cosmos::ics23::v1::ProofSpec* add_proof_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::ics23::v1::ProofSpec >&
      proof_specs() const;
  // repeated string upgrade_path = 9 [json_name = "upgradePath"];
  int upgrade_path_size() const;
  private:
  int _internal_upgrade_path_size() const;

  public:
  void clear_upgrade_path() ;
  const std::string& upgrade_path(int index) const;
  std::string* mutable_upgrade_path(int index);
  void set_upgrade_path(int index, const std::string& value);
  void set_upgrade_path(int index, std::string&& value);
  void set_upgrade_path(int index, const char* value);
  void set_upgrade_path(int index, const char* value, std::size_t size);
  void set_upgrade_path(int index, absl::string_view value);
  std::string* add_upgrade_path();
  void add_upgrade_path(const std::string& value);
  void add_upgrade_path(std::string&& value);
  void add_upgrade_path(const char* value);
  void add_upgrade_path(const char* value, std::size_t size);
  void add_upgrade_path(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& upgrade_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_upgrade_path();

  private:
  const std::string& _internal_upgrade_path(int index) const;
  std::string* _internal_add_upgrade_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_upgrade_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_upgrade_path();

  public:
  // string chain_id = 1 [json_name = "chainId"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // .ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [json_name = "trustLevel", (.gogoproto.nullable) = false];
  bool has_trust_level() const;
  void clear_trust_level() ;
  const ::ibc::lightclients::tendermint::v1::Fraction& trust_level() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::tendermint::v1::Fraction* release_trust_level();
  ::ibc::lightclients::tendermint::v1::Fraction* mutable_trust_level();
  void set_allocated_trust_level(::ibc::lightclients::tendermint::v1::Fraction* trust_level);
  private:
  const ::ibc::lightclients::tendermint::v1::Fraction& _internal_trust_level() const;
  ::ibc::lightclients::tendermint::v1::Fraction* _internal_mutable_trust_level();
  public:
  void unsafe_arena_set_allocated_trust_level(
      ::ibc::lightclients::tendermint::v1::Fraction* trust_level);
  ::ibc::lightclients::tendermint::v1::Fraction* unsafe_arena_release_trust_level();
  // .google.protobuf.Duration trusting_period = 3 [json_name = "trustingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_trusting_period() const;
  void clear_trusting_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& trusting_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_trusting_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_trusting_period();
  void set_allocated_trusting_period(::PROTOBUF_NAMESPACE_ID::Duration* trusting_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_trusting_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_trusting_period();
  public:
  void unsafe_arena_set_allocated_trusting_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* trusting_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_trusting_period();
  // .google.protobuf.Duration unbonding_period = 4 [json_name = "unbondingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_unbonding_period() const;
  void clear_unbonding_period() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& unbonding_period() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_unbonding_period();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_unbonding_period();
  void set_allocated_unbonding_period(::PROTOBUF_NAMESPACE_ID::Duration* unbonding_period);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_unbonding_period() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_unbonding_period();
  public:
  void unsafe_arena_set_allocated_unbonding_period(
      ::PROTOBUF_NAMESPACE_ID::Duration* unbonding_period);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_unbonding_period();
  // .google.protobuf.Duration max_clock_drift = 5 [json_name = "maxClockDrift", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_max_clock_drift() const;
  void clear_max_clock_drift() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_clock_drift() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_clock_drift();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_clock_drift();
  void set_allocated_max_clock_drift(::PROTOBUF_NAMESPACE_ID::Duration* max_clock_drift);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_clock_drift() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_clock_drift();
  public:
  void unsafe_arena_set_allocated_max_clock_drift(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_clock_drift);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_clock_drift();
  // .ibc.core.client.v1.Height frozen_height = 6 [json_name = "frozenHeight", (.gogoproto.nullable) = false];
  bool has_frozen_height() const;
  void clear_frozen_height() ;
  const ::ibc::core::client::v1::Height& frozen_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_frozen_height();
  ::ibc::core::client::v1::Height* mutable_frozen_height();
  void set_allocated_frozen_height(::ibc::core::client::v1::Height* frozen_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_frozen_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_frozen_height();
  public:
  void unsafe_arena_set_allocated_frozen_height(
      ::ibc::core::client::v1::Height* frozen_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_frozen_height();
  // .ibc.core.client.v1.Height latest_height = 7 [json_name = "latestHeight", (.gogoproto.nullable) = false];
  bool has_latest_height() const;
  void clear_latest_height() ;
  const ::ibc::core::client::v1::Height& latest_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_latest_height();
  ::ibc::core::client::v1::Height* mutable_latest_height();
  void set_allocated_latest_height(::ibc::core::client::v1::Height* latest_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_latest_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_latest_height();
  public:
  void unsafe_arena_set_allocated_latest_height(
      ::ibc::core::client::v1::Height* latest_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_latest_height();
  // bool allow_update_after_expiry = 10 [json_name = "allowUpdateAfterExpiry", deprecated = true];
  [[deprecated]]  void clear_allow_update_after_expiry() ;
  [[deprecated]] bool allow_update_after_expiry() const;
  [[deprecated]] void set_allow_update_after_expiry(bool value);

  private:
  bool _internal_allow_update_after_expiry() const;
  void _internal_set_allow_update_after_expiry(bool value);

  public:
  // bool allow_update_after_misbehaviour = 11 [json_name = "allowUpdateAfterMisbehaviour", deprecated = true];
  [[deprecated]]  void clear_allow_update_after_misbehaviour() ;
  [[deprecated]] bool allow_update_after_misbehaviour() const;
  [[deprecated]] void set_allow_update_after_misbehaviour(bool value);

  private:
  bool _internal_allow_update_after_misbehaviour() const;
  void _internal_set_allow_update_after_misbehaviour(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.tendermint.v1.ClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::ics23::v1::ProofSpec > proof_specs_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> upgrade_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::ibc::lightclients::tendermint::v1::Fraction* trust_level_;
    ::PROTOBUF_NAMESPACE_ID::Duration* trusting_period_;
    ::PROTOBUF_NAMESPACE_ID::Duration* unbonding_period_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_clock_drift_;
    ::ibc::core::client::v1::Height* frozen_height_;
    ::ibc::core::client::v1::Height* latest_height_;
    bool allow_update_after_expiry_;
    bool allow_update_after_misbehaviour_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
};// -------------------------------------------------------------------

class ConsensusState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.tendermint.v1.ConsensusState) */ {
 public:
  inline ConsensusState() : ConsensusState(nullptr) {}
  ~ConsensusState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusState(const ConsensusState& from);
  ConsensusState(ConsensusState&& from) noexcept
    : ConsensusState() {
    *this = ::std::move(from);
  }

  inline ConsensusState& operator=(const ConsensusState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusState& operator=(ConsensusState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusState* internal_default_instance() {
    return reinterpret_cast<const ConsensusState*>(
               &_ConsensusState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConsensusState& a, ConsensusState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusState& from) {
    ConsensusState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.tendermint.v1.ConsensusState";
  }
  protected:
  explicit ConsensusState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNextValidatorsHashFieldNumber = 3,
    kTimestampFieldNumber = 1,
    kRootFieldNumber = 2,
  };
  // bytes next_validators_hash = 3 [json_name = "nextValidatorsHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* ptr);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // .ibc.core.commitment.v1.MerkleRoot root = 2 [json_name = "root", (.gogoproto.nullable) = false];
  bool has_root() const;
  void clear_root() ;
  const ::ibc::core::commitment::v1::MerkleRoot& root() const;
  PROTOBUF_NODISCARD ::ibc::core::commitment::v1::MerkleRoot* release_root();
  ::ibc::core::commitment::v1::MerkleRoot* mutable_root();
  void set_allocated_root(::ibc::core::commitment::v1::MerkleRoot* root);
  private:
  const ::ibc::core::commitment::v1::MerkleRoot& _internal_root() const;
  ::ibc::core::commitment::v1::MerkleRoot* _internal_mutable_root();
  public:
  void unsafe_arena_set_allocated_root(
      ::ibc::core::commitment::v1::MerkleRoot* root);
  ::ibc::core::commitment::v1::MerkleRoot* unsafe_arena_release_root();
  // @@protoc_insertion_point(class_scope:ibc.lightclients.tendermint.v1.ConsensusState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_validators_hash_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::ibc::core::commitment::v1::MerkleRoot* root_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
};// -------------------------------------------------------------------

class Misbehaviour final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.tendermint.v1.Misbehaviour) */ {
 public:
  inline Misbehaviour() : Misbehaviour(nullptr) {}
  ~Misbehaviour() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Misbehaviour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Misbehaviour(const Misbehaviour& from);
  Misbehaviour(Misbehaviour&& from) noexcept
    : Misbehaviour() {
    *this = ::std::move(from);
  }

  inline Misbehaviour& operator=(const Misbehaviour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Misbehaviour& operator=(Misbehaviour&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Misbehaviour& default_instance() {
    return *internal_default_instance();
  }
  static inline const Misbehaviour* internal_default_instance() {
    return reinterpret_cast<const Misbehaviour*>(
               &_Misbehaviour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Misbehaviour& a, Misbehaviour& b) {
    a.Swap(&b);
  }
  inline void Swap(Misbehaviour* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Misbehaviour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Misbehaviour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Misbehaviour>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Misbehaviour& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Misbehaviour& from) {
    Misbehaviour::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Misbehaviour* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.tendermint.v1.Misbehaviour";
  }
  protected:
  explicit Misbehaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kHeader1FieldNumber = 2,
    kHeader2FieldNumber = 3,
  };
  // string client_id = 1 [json_name = "clientId", deprecated = true];
  [[deprecated]]  void clear_client_id() ;
  [[deprecated]] const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_client_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_client_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_client_id();
  [[deprecated]] void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .ibc.lightclients.tendermint.v1.Header header_1 = 2 [json_name = "header1", (.gogoproto.customname) = "Header1"];
  bool has_header_1() const;
  void clear_header_1() ;
  const ::ibc::lightclients::tendermint::v1::Header& header_1() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::tendermint::v1::Header* release_header_1();
  ::ibc::lightclients::tendermint::v1::Header* mutable_header_1();
  void set_allocated_header_1(::ibc::lightclients::tendermint::v1::Header* header_1);
  private:
  const ::ibc::lightclients::tendermint::v1::Header& _internal_header_1() const;
  ::ibc::lightclients::tendermint::v1::Header* _internal_mutable_header_1();
  public:
  void unsafe_arena_set_allocated_header_1(
      ::ibc::lightclients::tendermint::v1::Header* header_1);
  ::ibc::lightclients::tendermint::v1::Header* unsafe_arena_release_header_1();
  // .ibc.lightclients.tendermint.v1.Header header_2 = 3 [json_name = "header2", (.gogoproto.customname) = "Header2"];
  bool has_header_2() const;
  void clear_header_2() ;
  const ::ibc::lightclients::tendermint::v1::Header& header_2() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::tendermint::v1::Header* release_header_2();
  ::ibc::lightclients::tendermint::v1::Header* mutable_header_2();
  void set_allocated_header_2(::ibc::lightclients::tendermint::v1::Header* header_2);
  private:
  const ::ibc::lightclients::tendermint::v1::Header& _internal_header_2() const;
  ::ibc::lightclients::tendermint::v1::Header* _internal_mutable_header_2();
  public:
  void unsafe_arena_set_allocated_header_2(
      ::ibc::lightclients::tendermint::v1::Header* header_2);
  ::ibc::lightclients::tendermint::v1::Header* unsafe_arena_release_header_2();
  // @@protoc_insertion_point(class_scope:ibc.lightclients.tendermint.v1.Misbehaviour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::ibc::lightclients::tendermint::v1::Header* header_1_;
    ::ibc::lightclients::tendermint::v1::Header* header_2_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.tendermint.v1.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.tendermint.v1.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedHeaderFieldNumber = 1,
    kValidatorSetFieldNumber = 2,
    kTrustedHeightFieldNumber = 3,
    kTrustedValidatorsFieldNumber = 4,
  };
  // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader", (.gogoproto.embed) = true];
  bool has_signed_header() const;
  void clear_signed_header() ;
  const ::tendermint::types::SignedHeader& signed_header() const;
  PROTOBUF_NODISCARD ::tendermint::types::SignedHeader* release_signed_header();
  ::tendermint::types::SignedHeader* mutable_signed_header();
  void set_allocated_signed_header(::tendermint::types::SignedHeader* signed_header);
  private:
  const ::tendermint::types::SignedHeader& _internal_signed_header() const;
  ::tendermint::types::SignedHeader* _internal_mutable_signed_header();
  public:
  void unsafe_arena_set_allocated_signed_header(
      ::tendermint::types::SignedHeader* signed_header);
  ::tendermint::types::SignedHeader* unsafe_arena_release_signed_header();
  // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
  bool has_validator_set() const;
  void clear_validator_set() ;
  const ::tendermint::types::ValidatorSet& validator_set() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_validator_set();
  ::tendermint::types::ValidatorSet* mutable_validator_set();
  void set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set);
  private:
  const ::tendermint::types::ValidatorSet& _internal_validator_set() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_validator_set();
  public:
  void unsafe_arena_set_allocated_validator_set(
      ::tendermint::types::ValidatorSet* validator_set);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_validator_set();
  // .ibc.core.client.v1.Height trusted_height = 3 [json_name = "trustedHeight", (.gogoproto.nullable) = false];
  bool has_trusted_height() const;
  void clear_trusted_height() ;
  const ::ibc::core::client::v1::Height& trusted_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_trusted_height();
  ::ibc::core::client::v1::Height* mutable_trusted_height();
  void set_allocated_trusted_height(::ibc::core::client::v1::Height* trusted_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_trusted_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_trusted_height();
  public:
  void unsafe_arena_set_allocated_trusted_height(
      ::ibc::core::client::v1::Height* trusted_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_trusted_height();
  // .tendermint.types.ValidatorSet trusted_validators = 4 [json_name = "trustedValidators"];
  bool has_trusted_validators() const;
  void clear_trusted_validators() ;
  const ::tendermint::types::ValidatorSet& trusted_validators() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_trusted_validators();
  ::tendermint::types::ValidatorSet* mutable_trusted_validators();
  void set_allocated_trusted_validators(::tendermint::types::ValidatorSet* trusted_validators);
  private:
  const ::tendermint::types::ValidatorSet& _internal_trusted_validators() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_trusted_validators();
  public:
  void unsafe_arena_set_allocated_trusted_validators(
      ::tendermint::types::ValidatorSet* trusted_validators);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_trusted_validators();
  // @@protoc_insertion_point(class_scope:ibc.lightclients.tendermint.v1.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::SignedHeader* signed_header_;
    ::tendermint::types::ValidatorSet* validator_set_;
    ::ibc::core::client::v1::Height* trusted_height_;
    ::tendermint::types::ValidatorSet* trusted_validators_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
};// -------------------------------------------------------------------

class Fraction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.tendermint.v1.Fraction) */ {
 public:
  inline Fraction() : Fraction(nullptr) {}
  ~Fraction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Fraction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Fraction(const Fraction& from);
  Fraction(Fraction&& from) noexcept
    : Fraction() {
    *this = ::std::move(from);
  }

  inline Fraction& operator=(const Fraction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Fraction& operator=(Fraction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Fraction& default_instance() {
    return *internal_default_instance();
  }
  static inline const Fraction* internal_default_instance() {
    return reinterpret_cast<const Fraction*>(
               &_Fraction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Fraction& a, Fraction& b) {
    a.Swap(&b);
  }
  inline void Swap(Fraction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Fraction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Fraction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Fraction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Fraction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Fraction& from) {
    Fraction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Fraction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.tendermint.v1.Fraction";
  }
  protected:
  explicit Fraction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorFieldNumber = 1,
    kDenominatorFieldNumber = 2,
  };
  // uint64 numerator = 1 [json_name = "numerator"];
  void clear_numerator() ;
  ::uint64_t numerator() const;
  void set_numerator(::uint64_t value);

  private:
  ::uint64_t _internal_numerator() const;
  void _internal_set_numerator(::uint64_t value);

  public:
  // uint64 denominator = 2 [json_name = "denominator"];
  void clear_denominator() ;
  ::uint64_t denominator() const;
  void set_denominator(::uint64_t value);

  private:
  ::uint64_t _internal_denominator() const;
  void _internal_set_denominator(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.tendermint.v1.Fraction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t numerator_;
    ::uint64_t denominator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientState

// string chain_id = 1 [json_name = "chainId"];
inline void ClientState::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& ClientState::chain_id() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientState::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ClientState.chain_id)
}
inline std::string* ClientState::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.chain_id)
  return _s;
}
inline const std::string& ClientState::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void ClientState::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientState::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientState::release_chain_id() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.chain_id)
  return _impl_.chain_id_.Release();
}
inline void ClientState::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.chain_id)
}

// .ibc.lightclients.tendermint.v1.Fraction trust_level = 2 [json_name = "trustLevel", (.gogoproto.nullable) = false];
inline bool ClientState::has_trust_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trust_level_ != nullptr);
  return value;
}
inline void ClientState::clear_trust_level() {
  if (_impl_.trust_level_ != nullptr) _impl_.trust_level_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::tendermint::v1::Fraction& ClientState::_internal_trust_level() const {
  const ::ibc::lightclients::tendermint::v1::Fraction* p = _impl_.trust_level_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::tendermint::v1::Fraction&>(
      ::ibc::lightclients::tendermint::v1::_Fraction_default_instance_);
}
inline const ::ibc::lightclients::tendermint::v1::Fraction& ClientState::trust_level() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.trust_level)
  return _internal_trust_level();
}
inline void ClientState::unsafe_arena_set_allocated_trust_level(
    ::ibc::lightclients::tendermint::v1::Fraction* trust_level) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trust_level_);
  }
  _impl_.trust_level_ = trust_level;
  if (trust_level) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.trust_level)
}
inline ::ibc::lightclients::tendermint::v1::Fraction* ClientState::release_trust_level() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::tendermint::v1::Fraction* temp = _impl_.trust_level_;
  _impl_.trust_level_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Fraction* ClientState::unsafe_arena_release_trust_level() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.trust_level)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::tendermint::v1::Fraction* temp = _impl_.trust_level_;
  _impl_.trust_level_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Fraction* ClientState::_internal_mutable_trust_level() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trust_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Fraction>(GetArenaForAllocation());
    _impl_.trust_level_ = p;
  }
  return _impl_.trust_level_;
}
inline ::ibc::lightclients::tendermint::v1::Fraction* ClientState::mutable_trust_level() {
  ::ibc::lightclients::tendermint::v1::Fraction* _msg = _internal_mutable_trust_level();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.trust_level)
  return _msg;
}
inline void ClientState::set_allocated_trust_level(::ibc::lightclients::tendermint::v1::Fraction* trust_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trust_level_;
  }
  if (trust_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trust_level);
    if (message_arena != submessage_arena) {
      trust_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trust_level, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.trust_level_ = trust_level;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.trust_level)
}

// .google.protobuf.Duration trusting_period = 3 [json_name = "trustingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool ClientState::has_trusting_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trusting_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::_internal_trusting_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.trusting_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::trusting_period() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.trusting_period)
  return _internal_trusting_period();
}
inline void ClientState::unsafe_arena_set_allocated_trusting_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* trusting_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusting_period_);
  }
  _impl_.trusting_period_ = trusting_period;
  if (trusting_period) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.trusting_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::release_trusting_period() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.trusting_period_;
  _impl_.trusting_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::unsafe_arena_release_trusting_period() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.trusting_period)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.trusting_period_;
  _impl_.trusting_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::_internal_mutable_trusting_period() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.trusting_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.trusting_period_ = p;
  }
  return _impl_.trusting_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::mutable_trusting_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_trusting_period();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.trusting_period)
  return _msg;
}
inline void ClientState::set_allocated_trusting_period(::PROTOBUF_NAMESPACE_ID::Duration* trusting_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusting_period_);
  }
  if (trusting_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusting_period));
    if (message_arena != submessage_arena) {
      trusting_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusting_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.trusting_period_ = trusting_period;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.trusting_period)
}

// .google.protobuf.Duration unbonding_period = 4 [json_name = "unbondingPeriod", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool ClientState::has_unbonding_period() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.unbonding_period_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::_internal_unbonding_period() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.unbonding_period_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::unbonding_period() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.unbonding_period)
  return _internal_unbonding_period();
}
inline void ClientState::unsafe_arena_set_allocated_unbonding_period(
    ::PROTOBUF_NAMESPACE_ID::Duration* unbonding_period) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbonding_period_);
  }
  _impl_.unbonding_period_ = unbonding_period;
  if (unbonding_period) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.unbonding_period)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::release_unbonding_period() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.unbonding_period_;
  _impl_.unbonding_period_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::unsafe_arena_release_unbonding_period() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.unbonding_period)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.unbonding_period_;
  _impl_.unbonding_period_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::_internal_mutable_unbonding_period() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.unbonding_period_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.unbonding_period_ = p;
  }
  return _impl_.unbonding_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::mutable_unbonding_period() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_unbonding_period();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.unbonding_period)
  return _msg;
}
inline void ClientState::set_allocated_unbonding_period(::PROTOBUF_NAMESPACE_ID::Duration* unbonding_period) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.unbonding_period_);
  }
  if (unbonding_period) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(unbonding_period));
    if (message_arena != submessage_arena) {
      unbonding_period = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unbonding_period, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.unbonding_period_ = unbonding_period;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.unbonding_period)
}

// .google.protobuf.Duration max_clock_drift = 5 [json_name = "maxClockDrift", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool ClientState::has_max_clock_drift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_clock_drift_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::_internal_max_clock_drift() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_clock_drift_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ClientState::max_clock_drift() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.max_clock_drift)
  return _internal_max_clock_drift();
}
inline void ClientState::unsafe_arena_set_allocated_max_clock_drift(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_clock_drift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_clock_drift_);
  }
  _impl_.max_clock_drift_ = max_clock_drift;
  if (max_clock_drift) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.max_clock_drift)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::release_max_clock_drift() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_clock_drift_;
  _impl_.max_clock_drift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::unsafe_arena_release_max_clock_drift() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.max_clock_drift)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_clock_drift_;
  _impl_.max_clock_drift_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::_internal_mutable_max_clock_drift() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.max_clock_drift_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_clock_drift_ = p;
  }
  return _impl_.max_clock_drift_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ClientState::mutable_max_clock_drift() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_clock_drift();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.max_clock_drift)
  return _msg;
}
inline void ClientState::set_allocated_max_clock_drift(::PROTOBUF_NAMESPACE_ID::Duration* max_clock_drift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_clock_drift_);
  }
  if (max_clock_drift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_clock_drift));
    if (message_arena != submessage_arena) {
      max_clock_drift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_clock_drift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.max_clock_drift_ = max_clock_drift;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.max_clock_drift)
}

// .ibc.core.client.v1.Height frozen_height = 6 [json_name = "frozenHeight", (.gogoproto.nullable) = false];
inline bool ClientState::has_frozen_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.frozen_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& ClientState::_internal_frozen_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.frozen_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& ClientState::frozen_height() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.frozen_height)
  return _internal_frozen_height();
}
inline void ClientState::unsafe_arena_set_allocated_frozen_height(
    ::ibc::core::client::v1::Height* frozen_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frozen_height_);
  }
  _impl_.frozen_height_ = frozen_height;
  if (frozen_height) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.frozen_height)
}
inline ::ibc::core::client::v1::Height* ClientState::release_frozen_height() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ibc::core::client::v1::Height* temp = _impl_.frozen_height_;
  _impl_.frozen_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* ClientState::unsafe_arena_release_frozen_height() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.frozen_height)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::ibc::core::client::v1::Height* temp = _impl_.frozen_height_;
  _impl_.frozen_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* ClientState::_internal_mutable_frozen_height() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.frozen_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.frozen_height_ = p;
  }
  return _impl_.frozen_height_;
}
inline ::ibc::core::client::v1::Height* ClientState::mutable_frozen_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_frozen_height();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.frozen_height)
  return _msg;
}
inline void ClientState::set_allocated_frozen_height(::ibc::core::client::v1::Height* frozen_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.frozen_height_);
  }
  if (frozen_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frozen_height));
    if (message_arena != submessage_arena) {
      frozen_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frozen_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.frozen_height_ = frozen_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.frozen_height)
}

// .ibc.core.client.v1.Height latest_height = 7 [json_name = "latestHeight", (.gogoproto.nullable) = false];
inline bool ClientState::has_latest_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.latest_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& ClientState::_internal_latest_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.latest_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& ClientState::latest_height() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.latest_height)
  return _internal_latest_height();
}
inline void ClientState::unsafe_arena_set_allocated_latest_height(
    ::ibc::core::client::v1::Height* latest_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latest_height_);
  }
  _impl_.latest_height_ = latest_height;
  if (latest_height) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ClientState.latest_height)
}
inline ::ibc::core::client::v1::Height* ClientState::release_latest_height() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ibc::core::client::v1::Height* temp = _impl_.latest_height_;
  _impl_.latest_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* ClientState::unsafe_arena_release_latest_height() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ClientState.latest_height)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::ibc::core::client::v1::Height* temp = _impl_.latest_height_;
  _impl_.latest_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* ClientState::_internal_mutable_latest_height() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.latest_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.latest_height_ = p;
  }
  return _impl_.latest_height_;
}
inline ::ibc::core::client::v1::Height* ClientState::mutable_latest_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_latest_height();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.latest_height)
  return _msg;
}
inline void ClientState::set_allocated_latest_height(::ibc::core::client::v1::Height* latest_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.latest_height_);
  }
  if (latest_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latest_height));
    if (message_arena != submessage_arena) {
      latest_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latest_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.latest_height_ = latest_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ClientState.latest_height)
}

// repeated .cosmos.ics23.v1.ProofSpec proof_specs = 8 [json_name = "proofSpecs"];
inline int ClientState::_internal_proof_specs_size() const {
  return _impl_.proof_specs_.size();
}
inline int ClientState::proof_specs_size() const {
  return _internal_proof_specs_size();
}
inline ::cosmos::ics23::v1::ProofSpec* ClientState::mutable_proof_specs(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.proof_specs)
  return _internal_mutable_proof_specs()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::ics23::v1::ProofSpec >*
ClientState::mutable_proof_specs() {
  // @@protoc_insertion_point(field_mutable_list:ibc.lightclients.tendermint.v1.ClientState.proof_specs)
  return _internal_mutable_proof_specs();
}
inline const ::cosmos::ics23::v1::ProofSpec& ClientState::_internal_proof_specs(int index) const {
  return _internal_proof_specs().Get(index);
}
inline const ::cosmos::ics23::v1::ProofSpec& ClientState::proof_specs(int index) const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.proof_specs)
  return _internal_proof_specs(index);
}
inline ::cosmos::ics23::v1::ProofSpec* ClientState::_internal_add_proof_specs() {
  return _internal_mutable_proof_specs()->Add();
}
inline ::cosmos::ics23::v1::ProofSpec* ClientState::add_proof_specs() {
  ::cosmos::ics23::v1::ProofSpec* _add = _internal_add_proof_specs();
  // @@protoc_insertion_point(field_add:ibc.lightclients.tendermint.v1.ClientState.proof_specs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cosmos::ics23::v1::ProofSpec >&
ClientState::proof_specs() const {
  // @@protoc_insertion_point(field_list:ibc.lightclients.tendermint.v1.ClientState.proof_specs)
  return _internal_proof_specs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::ics23::v1::ProofSpec>&
ClientState::_internal_proof_specs() const {
  return _impl_.proof_specs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::cosmos::ics23::v1::ProofSpec>*
ClientState::_internal_mutable_proof_specs() {
  return &_impl_.proof_specs_;
}

// repeated string upgrade_path = 9 [json_name = "upgradePath"];
inline int ClientState::_internal_upgrade_path_size() const {
  return _impl_.upgrade_path_.size();
}
inline int ClientState::upgrade_path_size() const {
  return _internal_upgrade_path_size();
}
inline void ClientState::clear_upgrade_path() {
  _internal_mutable_upgrade_path()->Clear();
}
inline std::string* ClientState::add_upgrade_path() {
  std::string* _s = _internal_add_upgrade_path();
  // @@protoc_insertion_point(field_add_mutable:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
  return _s;
}
inline const std::string& ClientState::upgrade_path(int index) const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
  return _internal_upgrade_path(index);
}
inline std::string* ClientState::mutable_upgrade_path(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
  return _internal_mutable_upgrade_path()->Mutable(index);
}
inline void ClientState::set_upgrade_path(int index, const std::string& value) {
  _internal_mutable_upgrade_path()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::set_upgrade_path(int index, std::string&& value) {
  _internal_mutable_upgrade_path()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::set_upgrade_path(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_upgrade_path()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::set_upgrade_path(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_upgrade_path()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::set_upgrade_path(int index, absl::string_view value) {
  _internal_mutable_upgrade_path()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::add_upgrade_path(const std::string& value) {
  _internal_mutable_upgrade_path()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::add_upgrade_path(std::string&& value) {
  _internal_mutable_upgrade_path()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::add_upgrade_path(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_upgrade_path()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::add_upgrade_path(const char* value, std::size_t size) {
  _internal_mutable_upgrade_path()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline void ClientState::add_upgrade_path(absl::string_view value) {
  _internal_mutable_upgrade_path()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientState::upgrade_path() const {
  // @@protoc_insertion_point(field_list:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
  return _internal_upgrade_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ClientState::mutable_upgrade_path() {
  // @@protoc_insertion_point(field_mutable_list:ibc.lightclients.tendermint.v1.ClientState.upgrade_path)
  return _internal_mutable_upgrade_path();
}
inline const std::string& ClientState::_internal_upgrade_path(int index) const {
  return _internal_upgrade_path().Get(index);
}
inline std::string* ClientState::_internal_add_upgrade_path() {
  return _internal_mutable_upgrade_path()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientState::_internal_upgrade_path() const {
  return _impl_.upgrade_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientState::_internal_mutable_upgrade_path() {
  return &_impl_.upgrade_path_;
}

// bool allow_update_after_expiry = 10 [json_name = "allowUpdateAfterExpiry", deprecated = true];
inline void ClientState::clear_allow_update_after_expiry() {
  _impl_.allow_update_after_expiry_ = false;
}
inline bool ClientState::allow_update_after_expiry() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.allow_update_after_expiry)
  return _internal_allow_update_after_expiry();
}
inline void ClientState::set_allow_update_after_expiry(bool value) {
  _internal_set_allow_update_after_expiry(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ClientState.allow_update_after_expiry)
}
inline bool ClientState::_internal_allow_update_after_expiry() const {
  return _impl_.allow_update_after_expiry_;
}
inline void ClientState::_internal_set_allow_update_after_expiry(bool value) {
  ;
  _impl_.allow_update_after_expiry_ = value;
}

// bool allow_update_after_misbehaviour = 11 [json_name = "allowUpdateAfterMisbehaviour", deprecated = true];
inline void ClientState::clear_allow_update_after_misbehaviour() {
  _impl_.allow_update_after_misbehaviour_ = false;
}
inline bool ClientState::allow_update_after_misbehaviour() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ClientState.allow_update_after_misbehaviour)
  return _internal_allow_update_after_misbehaviour();
}
inline void ClientState::set_allow_update_after_misbehaviour(bool value) {
  _internal_set_allow_update_after_misbehaviour(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ClientState.allow_update_after_misbehaviour)
}
inline bool ClientState::_internal_allow_update_after_misbehaviour() const {
  return _impl_.allow_update_after_misbehaviour_;
}
inline void ClientState::_internal_set_allow_update_after_misbehaviour(bool value) {
  ;
  _impl_.allow_update_after_misbehaviour_ = value;
}

// -------------------------------------------------------------------

// ConsensusState

// .google.protobuf.Timestamp timestamp = 1 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool ConsensusState::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConsensusState::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ConsensusState::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ConsensusState.timestamp)
  return _internal_timestamp();
}
inline void ConsensusState::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ConsensusState.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConsensusState::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConsensusState::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ConsensusState.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConsensusState::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ConsensusState::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ConsensusState.timestamp)
  return _msg;
}
inline void ConsensusState::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ConsensusState.timestamp)
}

// .ibc.core.commitment.v1.MerkleRoot root = 2 [json_name = "root", (.gogoproto.nullable) = false];
inline bool ConsensusState::has_root() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.root_ != nullptr);
  return value;
}
inline const ::ibc::core::commitment::v1::MerkleRoot& ConsensusState::_internal_root() const {
  const ::ibc::core::commitment::v1::MerkleRoot* p = _impl_.root_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::commitment::v1::MerkleRoot&>(
      ::ibc::core::commitment::v1::_MerkleRoot_default_instance_);
}
inline const ::ibc::core::commitment::v1::MerkleRoot& ConsensusState::root() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ConsensusState.root)
  return _internal_root();
}
inline void ConsensusState::unsafe_arena_set_allocated_root(
    ::ibc::core::commitment::v1::MerkleRoot* root) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_);
  }
  _impl_.root_ = root;
  if (root) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.ConsensusState.root)
}
inline ::ibc::core::commitment::v1::MerkleRoot* ConsensusState::release_root() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::commitment::v1::MerkleRoot* temp = _impl_.root_;
  _impl_.root_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::commitment::v1::MerkleRoot* ConsensusState::unsafe_arena_release_root() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ConsensusState.root)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::commitment::v1::MerkleRoot* temp = _impl_.root_;
  _impl_.root_ = nullptr;
  return temp;
}
inline ::ibc::core::commitment::v1::MerkleRoot* ConsensusState::_internal_mutable_root() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.root_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::commitment::v1::MerkleRoot>(GetArenaForAllocation());
    _impl_.root_ = p;
  }
  return _impl_.root_;
}
inline ::ibc::core::commitment::v1::MerkleRoot* ConsensusState::mutable_root() {
  ::ibc::core::commitment::v1::MerkleRoot* _msg = _internal_mutable_root();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ConsensusState.root)
  return _msg;
}
inline void ConsensusState::set_allocated_root(::ibc::core::commitment::v1::MerkleRoot* root) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.root_);
  }
  if (root) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(root));
    if (message_arena != submessage_arena) {
      root = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, root, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.root_ = root;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ConsensusState.root)
}

// bytes next_validators_hash = 3 [json_name = "nextValidatorsHash", (.gogoproto.casttype) = "github.com/cometbft/cometbft/libs/bytes.HexBytes"];
inline void ConsensusState::clear_next_validators_hash() {
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& ConsensusState::next_validators_hash() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.ConsensusState.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsensusState::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.ConsensusState.next_validators_hash)
}
inline std::string* ConsensusState::mutable_next_validators_hash() {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.ConsensusState.next_validators_hash)
  return _s;
}
inline const std::string& ConsensusState::_internal_next_validators_hash() const {
  return _impl_.next_validators_hash_.Get();
}
inline void ConsensusState::_internal_set_next_validators_hash(const std::string& value) {
  ;


  _impl_.next_validators_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusState::_internal_mutable_next_validators_hash() {
  ;
  return _impl_.next_validators_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* ConsensusState::release_next_validators_hash() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.ConsensusState.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void ConsensusState::set_allocated_next_validators_hash(std::string* value) {
  _impl_.next_validators_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_validators_hash_.IsDefault()) {
          _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.ConsensusState.next_validators_hash)
}

// -------------------------------------------------------------------

// Misbehaviour

// string client_id = 1 [json_name = "clientId", deprecated = true];
inline void Misbehaviour::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& Misbehaviour::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Misbehaviour.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Misbehaviour::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.Misbehaviour.client_id)
}
inline std::string* Misbehaviour::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Misbehaviour.client_id)
  return _s;
}
inline const std::string& Misbehaviour::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void Misbehaviour::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Misbehaviour::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Misbehaviour::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Misbehaviour.client_id)
  return _impl_.client_id_.Release();
}
inline void Misbehaviour::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Misbehaviour.client_id)
}

// .ibc.lightclients.tendermint.v1.Header header_1 = 2 [json_name = "header1", (.gogoproto.customname) = "Header1"];
inline bool Misbehaviour::has_header_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_1_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_header_1() {
  if (_impl_.header_1_ != nullptr) _impl_.header_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::tendermint::v1::Header& Misbehaviour::_internal_header_1() const {
  const ::ibc::lightclients::tendermint::v1::Header* p = _impl_.header_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::tendermint::v1::Header&>(
      ::ibc::lightclients::tendermint::v1::_Header_default_instance_);
}
inline const ::ibc::lightclients::tendermint::v1::Header& Misbehaviour::header_1() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Misbehaviour.header_1)
  return _internal_header_1();
}
inline void Misbehaviour::unsafe_arena_set_allocated_header_1(
    ::ibc::lightclients::tendermint::v1::Header* header_1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_1_);
  }
  _impl_.header_1_ = header_1;
  if (header_1) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Misbehaviour.header_1)
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::release_header_1() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::tendermint::v1::Header* temp = _impl_.header_1_;
  _impl_.header_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::unsafe_arena_release_header_1() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Misbehaviour.header_1)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::tendermint::v1::Header* temp = _impl_.header_1_;
  _impl_.header_1_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::_internal_mutable_header_1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_1_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Header>(GetArenaForAllocation());
    _impl_.header_1_ = p;
  }
  return _impl_.header_1_;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::mutable_header_1() {
  ::ibc::lightclients::tendermint::v1::Header* _msg = _internal_mutable_header_1();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Misbehaviour.header_1)
  return _msg;
}
inline void Misbehaviour::set_allocated_header_1(::ibc::lightclients::tendermint::v1::Header* header_1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_1_;
  }
  if (header_1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header_1);
    if (message_arena != submessage_arena) {
      header_1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_1_ = header_1;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Misbehaviour.header_1)
}

// .ibc.lightclients.tendermint.v1.Header header_2 = 3 [json_name = "header2", (.gogoproto.customname) = "Header2"];
inline bool Misbehaviour::has_header_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_2_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_header_2() {
  if (_impl_.header_2_ != nullptr) _impl_.header_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ibc::lightclients::tendermint::v1::Header& Misbehaviour::_internal_header_2() const {
  const ::ibc::lightclients::tendermint::v1::Header* p = _impl_.header_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::tendermint::v1::Header&>(
      ::ibc::lightclients::tendermint::v1::_Header_default_instance_);
}
inline const ::ibc::lightclients::tendermint::v1::Header& Misbehaviour::header_2() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Misbehaviour.header_2)
  return _internal_header_2();
}
inline void Misbehaviour::unsafe_arena_set_allocated_header_2(
    ::ibc::lightclients::tendermint::v1::Header* header_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_2_);
  }
  _impl_.header_2_ = header_2;
  if (header_2) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Misbehaviour.header_2)
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::release_header_2() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::tendermint::v1::Header* temp = _impl_.header_2_;
  _impl_.header_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::unsafe_arena_release_header_2() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Misbehaviour.header_2)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::tendermint::v1::Header* temp = _impl_.header_2_;
  _impl_.header_2_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::_internal_mutable_header_2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::tendermint::v1::Header>(GetArenaForAllocation());
    _impl_.header_2_ = p;
  }
  return _impl_.header_2_;
}
inline ::ibc::lightclients::tendermint::v1::Header* Misbehaviour::mutable_header_2() {
  ::ibc::lightclients::tendermint::v1::Header* _msg = _internal_mutable_header_2();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Misbehaviour.header_2)
  return _msg;
}
inline void Misbehaviour::set_allocated_header_2(::ibc::lightclients::tendermint::v1::Header* header_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_2_;
  }
  if (header_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header_2);
    if (message_arena != submessage_arena) {
      header_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_2_ = header_2;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Misbehaviour.header_2)
}

// -------------------------------------------------------------------

// Header

// .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader", (.gogoproto.embed) = true];
inline bool Header::has_signed_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signed_header_ != nullptr);
  return value;
}
inline const ::tendermint::types::SignedHeader& Header::_internal_signed_header() const {
  const ::tendermint::types::SignedHeader* p = _impl_.signed_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::SignedHeader&>(
      ::tendermint::types::_SignedHeader_default_instance_);
}
inline const ::tendermint::types::SignedHeader& Header::signed_header() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Header.signed_header)
  return _internal_signed_header();
}
inline void Header::unsafe_arena_set_allocated_signed_header(
    ::tendermint::types::SignedHeader* signed_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signed_header_);
  }
  _impl_.signed_header_ = signed_header;
  if (signed_header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Header.signed_header)
}
inline ::tendermint::types::SignedHeader* Header::release_signed_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::SignedHeader* temp = _impl_.signed_header_;
  _impl_.signed_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::SignedHeader* Header::unsafe_arena_release_signed_header() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Header.signed_header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::SignedHeader* temp = _impl_.signed_header_;
  _impl_.signed_header_ = nullptr;
  return temp;
}
inline ::tendermint::types::SignedHeader* Header::_internal_mutable_signed_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signed_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::SignedHeader>(GetArenaForAllocation());
    _impl_.signed_header_ = p;
  }
  return _impl_.signed_header_;
}
inline ::tendermint::types::SignedHeader* Header::mutable_signed_header() {
  ::tendermint::types::SignedHeader* _msg = _internal_mutable_signed_header();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Header.signed_header)
  return _msg;
}
inline void Header::set_allocated_signed_header(::tendermint::types::SignedHeader* signed_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signed_header_);
  }
  if (signed_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signed_header));
    if (message_arena != submessage_arena) {
      signed_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signed_header_ = signed_header;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Header.signed_header)
}

// .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
inline bool Header::has_validator_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_set_ != nullptr);
  return value;
}
inline const ::tendermint::types::ValidatorSet& Header::_internal_validator_set() const {
  const ::tendermint::types::ValidatorSet* p = _impl_.validator_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& Header::validator_set() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Header.validator_set)
  return _internal_validator_set();
}
inline void Header::unsafe_arena_set_allocated_validator_set(
    ::tendermint::types::ValidatorSet* validator_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_set_);
  }
  _impl_.validator_set_ = validator_set;
  if (validator_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Header.validator_set)
}
inline ::tendermint::types::ValidatorSet* Header::release_validator_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ValidatorSet* temp = _impl_.validator_set_;
  _impl_.validator_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* Header::unsafe_arena_release_validator_set() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Header.validator_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ValidatorSet* temp = _impl_.validator_set_;
  _impl_.validator_set_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* Header::_internal_mutable_validator_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.validator_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    _impl_.validator_set_ = p;
  }
  return _impl_.validator_set_;
}
inline ::tendermint::types::ValidatorSet* Header::mutable_validator_set() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_validator_set();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Header.validator_set)
  return _msg;
}
inline void Header::set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_set_);
  }
  if (validator_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_set));
    if (message_arena != submessage_arena) {
      validator_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.validator_set_ = validator_set;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Header.validator_set)
}

// .ibc.core.client.v1.Height trusted_height = 3 [json_name = "trustedHeight", (.gogoproto.nullable) = false];
inline bool Header::has_trusted_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trusted_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& Header::_internal_trusted_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.trusted_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& Header::trusted_height() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Header.trusted_height)
  return _internal_trusted_height();
}
inline void Header::unsafe_arena_set_allocated_trusted_height(
    ::ibc::core::client::v1::Height* trusted_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusted_height_);
  }
  _impl_.trusted_height_ = trusted_height;
  if (trusted_height) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Header.trusted_height)
}
inline ::ibc::core::client::v1::Height* Header::release_trusted_height() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.trusted_height_;
  _impl_.trusted_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* Header::unsafe_arena_release_trusted_height() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Header.trusted_height)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.trusted_height_;
  _impl_.trusted_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* Header::_internal_mutable_trusted_height() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.trusted_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.trusted_height_ = p;
  }
  return _impl_.trusted_height_;
}
inline ::ibc::core::client::v1::Height* Header::mutable_trusted_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_trusted_height();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Header.trusted_height)
  return _msg;
}
inline void Header::set_allocated_trusted_height(::ibc::core::client::v1::Height* trusted_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusted_height_);
  }
  if (trusted_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_height));
    if (message_arena != submessage_arena) {
      trusted_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.trusted_height_ = trusted_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Header.trusted_height)
}

// .tendermint.types.ValidatorSet trusted_validators = 4 [json_name = "trustedValidators"];
inline bool Header::has_trusted_validators() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trusted_validators_ != nullptr);
  return value;
}
inline const ::tendermint::types::ValidatorSet& Header::_internal_trusted_validators() const {
  const ::tendermint::types::ValidatorSet* p = _impl_.trusted_validators_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& Header::trusted_validators() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Header.trusted_validators)
  return _internal_trusted_validators();
}
inline void Header::unsafe_arena_set_allocated_trusted_validators(
    ::tendermint::types::ValidatorSet* trusted_validators) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusted_validators_);
  }
  _impl_.trusted_validators_ = trusted_validators;
  if (trusted_validators) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.tendermint.v1.Header.trusted_validators)
}
inline ::tendermint::types::ValidatorSet* Header::release_trusted_validators() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::ValidatorSet* temp = _impl_.trusted_validators_;
  _impl_.trusted_validators_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* Header::unsafe_arena_release_trusted_validators() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.tendermint.v1.Header.trusted_validators)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::ValidatorSet* temp = _impl_.trusted_validators_;
  _impl_.trusted_validators_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* Header::_internal_mutable_trusted_validators() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.trusted_validators_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    _impl_.trusted_validators_ = p;
  }
  return _impl_.trusted_validators_;
}
inline ::tendermint::types::ValidatorSet* Header::mutable_trusted_validators() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_trusted_validators();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.tendermint.v1.Header.trusted_validators)
  return _msg;
}
inline void Header::set_allocated_trusted_validators(::tendermint::types::ValidatorSet* trusted_validators) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trusted_validators_);
  }
  if (trusted_validators) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trusted_validators));
    if (message_arena != submessage_arena) {
      trusted_validators = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trusted_validators, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trusted_validators_ = trusted_validators;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.tendermint.v1.Header.trusted_validators)
}

// -------------------------------------------------------------------

// Fraction

// uint64 numerator = 1 [json_name = "numerator"];
inline void Fraction::clear_numerator() {
  _impl_.numerator_ = ::uint64_t{0u};
}
inline ::uint64_t Fraction::numerator() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Fraction.numerator)
  return _internal_numerator();
}
inline void Fraction::set_numerator(::uint64_t value) {
  _internal_set_numerator(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.Fraction.numerator)
}
inline ::uint64_t Fraction::_internal_numerator() const {
  return _impl_.numerator_;
}
inline void Fraction::_internal_set_numerator(::uint64_t value) {
  ;
  _impl_.numerator_ = value;
}

// uint64 denominator = 2 [json_name = "denominator"];
inline void Fraction::clear_denominator() {
  _impl_.denominator_ = ::uint64_t{0u};
}
inline ::uint64_t Fraction::denominator() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.tendermint.v1.Fraction.denominator)
  return _internal_denominator();
}
inline void Fraction::set_denominator(::uint64_t value) {
  _internal_set_denominator(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.tendermint.v1.Fraction.denominator)
}
inline ::uint64_t Fraction::_internal_denominator() const {
  return _impl_.denominator_;
}
inline void Fraction::_internal_set_denominator(::uint64_t value) {
  ;
  _impl_.denominator_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace tendermint
}  // namespace lightclients
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2ftendermint_2fv1_2ftendermint_2eproto_2epb_2eh

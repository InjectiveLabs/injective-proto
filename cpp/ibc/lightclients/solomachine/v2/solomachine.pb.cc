// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/solomachine/v2/solomachine.proto

#include "ibc/lightclients/solomachine/v2/solomachine.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR ClientState::ClientState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.consensus_state_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.is_frozen_)*/ false

  , /*decltype(_impl_.allow_update_after_proposal_)*/ false
} {}
struct ClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDefaultTypeInternal() {}
  union {
    ClientState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDefaultTypeInternal _ClientState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConsensusState::ConsensusState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.diversifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.public_key_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}
} {}
struct ConsensusStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusStateDefaultTypeInternal() {}
  union {
    ConsensusState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusStateDefaultTypeInternal _ConsensusState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_diversifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_public_key_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}
} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Misbehaviour::Misbehaviour(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_one_)*/nullptr
  , /*decltype(_impl_.signature_two_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}
} {}
struct MisbehaviourDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MisbehaviourDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MisbehaviourDefaultTypeInternal() {}
  union {
    Misbehaviour _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MisbehaviourDefaultTypeInternal _Misbehaviour_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignatureAndData::SignatureAndData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.data_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignatureAndDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignatureAndDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignatureAndDataDefaultTypeInternal() {}
  union {
    SignatureAndData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignatureAndDataDefaultTypeInternal _SignatureAndData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TimestampedSignatureData::TimestampedSignatureData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.signature_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimestampedSignatureDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimestampedSignatureDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimestampedSignatureDataDefaultTypeInternal() {}
  union {
    TimestampedSignatureData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimestampedSignatureDataDefaultTypeInternal _TimestampedSignatureData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignBytes::SignBytes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.diversifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.data_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SignBytesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignBytesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignBytesDefaultTypeInternal() {}
  union {
    SignBytes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignBytesDefaultTypeInternal _SignBytes_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HeaderData::HeaderData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_diversifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.new_pub_key_)*/nullptr} {}
struct HeaderDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDataDefaultTypeInternal() {}
  union {
    HeaderData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDataDefaultTypeInternal _HeaderData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientStateData::ClientStateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_state_)*/nullptr} {}
struct ClientStateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDataDefaultTypeInternal() {}
  union {
    ClientStateData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDataDefaultTypeInternal _ClientStateData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConsensusStateData::ConsensusStateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_state_)*/nullptr} {}
struct ConsensusStateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusStateDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusStateDataDefaultTypeInternal() {}
  union {
    ConsensusStateData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusStateDataDefaultTypeInternal _ConsensusStateData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConnectionStateData::ConnectionStateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.connection_)*/nullptr} {}
struct ConnectionStateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionStateDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionStateDataDefaultTypeInternal() {}
  union {
    ConnectionStateData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionStateDataDefaultTypeInternal _ConnectionStateData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChannelStateData::ChannelStateData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_)*/nullptr} {}
struct ChannelStateDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelStateDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelStateDataDefaultTypeInternal() {}
  union {
    ChannelStateData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelStateDataDefaultTypeInternal _ChannelStateData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketCommitmentData::PacketCommitmentData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.commitment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketCommitmentDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketCommitmentDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketCommitmentDataDefaultTypeInternal() {}
  union {
    PacketCommitmentData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketCommitmentDataDefaultTypeInternal _PacketCommitmentData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketAcknowledgementData::PacketAcknowledgementData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.acknowledgement_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketAcknowledgementDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketAcknowledgementDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketAcknowledgementDataDefaultTypeInternal() {}
  union {
    PacketAcknowledgementData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketAcknowledgementDataDefaultTypeInternal _PacketAcknowledgementData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketReceiptAbsenceData::PacketReceiptAbsenceData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketReceiptAbsenceDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketReceiptAbsenceDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketReceiptAbsenceDataDefaultTypeInternal() {}
  union {
    PacketReceiptAbsenceData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketReceiptAbsenceDataDefaultTypeInternal _PacketReceiptAbsenceData_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NextSequenceRecvData::NextSequenceRecvData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_seq_recv_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NextSequenceRecvDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NextSequenceRecvDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NextSequenceRecvDataDefaultTypeInternal() {}
  union {
    NextSequenceRecvData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NextSequenceRecvDataDefaultTypeInternal _NextSequenceRecvData_default_instance_;
}  // namespace v2
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _impl_.is_frozen_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _impl_.consensus_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientState, _impl_.allow_update_after_proposal_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusState, _impl_.public_key_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusState, _impl_.diversifier_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusState, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_.new_public_key_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Header, _impl_.new_diversifier_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _impl_.signature_one_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::Misbehaviour, _impl_.signature_two_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignatureAndData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignatureAndData, _impl_.signature_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignatureAndData, _impl_.data_type_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignatureAndData, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignatureAndData, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::TimestampedSignatureData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::TimestampedSignatureData, _impl_.signature_data_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::TimestampedSignatureData, _impl_.timestamp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _impl_.diversifier_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _impl_.data_type_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::SignBytes, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::HeaderData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::HeaderData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::HeaderData, _impl_.new_pub_key_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::HeaderData, _impl_.new_diversifier_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientStateData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientStateData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientStateData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ClientStateData, _impl_.client_state_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusStateData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusStateData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusStateData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConsensusStateData, _impl_.consensus_state_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConnectionStateData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConnectionStateData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConnectionStateData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ConnectionStateData, _impl_.connection_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ChannelStateData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ChannelStateData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ChannelStateData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::ChannelStateData, _impl_.channel_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketCommitmentData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketCommitmentData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketCommitmentData, _impl_.commitment_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketAcknowledgementData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketAcknowledgementData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketAcknowledgementData, _impl_.acknowledgement_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData, _impl_.path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::NextSequenceRecvData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::NextSequenceRecvData, _impl_.path_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::solomachine::v2::NextSequenceRecvData, _impl_.next_seq_recv_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 12, -1, sizeof(::ibc::lightclients::solomachine::v2::ClientState)},
        { 16, 27, -1, sizeof(::ibc::lightclients::solomachine::v2::ConsensusState)},
        { 30, 43, -1, sizeof(::ibc::lightclients::solomachine::v2::Header)},
        { 48, 60, -1, sizeof(::ibc::lightclients::solomachine::v2::Misbehaviour)},
        { 64, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::SignatureAndData)},
        { 76, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::TimestampedSignatureData)},
        { 86, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::SignBytes)},
        { 99, 109, -1, sizeof(::ibc::lightclients::solomachine::v2::HeaderData)},
        { 111, 121, -1, sizeof(::ibc::lightclients::solomachine::v2::ClientStateData)},
        { 123, 133, -1, sizeof(::ibc::lightclients::solomachine::v2::ConsensusStateData)},
        { 135, 145, -1, sizeof(::ibc::lightclients::solomachine::v2::ConnectionStateData)},
        { 147, 157, -1, sizeof(::ibc::lightclients::solomachine::v2::ChannelStateData)},
        { 159, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::PacketCommitmentData)},
        { 169, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::PacketAcknowledgementData)},
        { 179, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData)},
        { 188, -1, -1, sizeof(::ibc::lightclients::solomachine::v2::NextSequenceRecvData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::lightclients::solomachine::v2::_ClientState_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_ConsensusState_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_Header_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_Misbehaviour_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_SignatureAndData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_TimestampedSignatureData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_SignBytes_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_HeaderData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_ClientStateData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_ConsensusStateData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_ConnectionStateData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_ChannelStateData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_PacketCommitmentData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_PacketAcknowledgementData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_PacketReceiptAbsenceData_default_instance_._instance,
    &::ibc::lightclients::solomachine::v2::_NextSequenceRecvData_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n1ibc/lightclients/solomachine/v2/soloma"
    "chine.proto\022\037ibc.lightclients.solomachin"
    "e.v2\032\'ibc/core/connection/v1/connection."
    "proto\032!ibc/core/channel/v1/channel.proto"
    "\032\024gogoproto/gogo.proto\032\031google/protobuf/"
    "any.proto\"\345\001\n\013ClientState\022\032\n\010sequence\030\001 "
    "\001(\004R\010sequence\022\033\n\tis_frozen\030\002 \001(\010R\010isFroz"
    "en\022X\n\017consensus_state\030\003 \001(\0132/.ibc.lightc"
    "lients.solomachine.v2.ConsensusStateR\016co"
    "nsensusState\022=\n\033allow_update_after_propo"
    "sal\030\004 \001(\010R\030allowUpdateAfterProposal:\004\210\240\037"
    "\000\"\213\001\n\016ConsensusState\0223\n\npublic_key\030\001 \001(\013"
    "2\024.google.protobuf.AnyR\tpublicKey\022 \n\013div"
    "ersifier\030\002 \001(\tR\013diversifier\022\034\n\ttimestamp"
    "\030\003 \001(\004R\ttimestamp:\004\210\240\037\000\"\313\001\n\006Header\022\032\n\010se"
    "quence\030\001 \001(\004R\010sequence\022\034\n\ttimestamp\030\002 \001("
    "\004R\ttimestamp\022\034\n\tsignature\030\003 \001(\014R\tsignatu"
    "re\022:\n\016new_public_key\030\004 \001(\0132\024.google.prot"
    "obuf.AnyR\014newPublicKey\022\'\n\017new_diversifie"
    "r\030\005 \001(\tR\016newDiversifier:\004\210\240\037\000\"\375\001\n\014Misbeh"
    "aviour\022\033\n\tclient_id\030\001 \001(\tR\010clientId\022\032\n\010s"
    "equence\030\002 \001(\004R\010sequence\022V\n\rsignature_one"
    "\030\003 \001(\01321.ibc.lightclients.solomachine.v2"
    ".SignatureAndDataR\014signatureOne\022V\n\rsigna"
    "ture_two\030\004 \001(\01321.ibc.lightclients.soloma"
    "chine.v2.SignatureAndDataR\014signatureTwo:"
    "\004\210\240\037\000\"\260\001\n\020SignatureAndData\022\034\n\tsignature\030"
    "\001 \001(\014R\tsignature\022F\n\tdata_type\030\002 \001(\0162).ib"
    "c.lightclients.solomachine.v2.DataTypeR\010"
    "dataType\022\022\n\004data\030\003 \001(\014R\004data\022\034\n\ttimestam"
    "p\030\004 \001(\004R\ttimestamp:\004\210\240\037\000\"e\n\030TimestampedS"
    "ignatureData\022%\n\016signature_data\030\001 \001(\014R\rsi"
    "gnatureData\022\034\n\ttimestamp\030\002 \001(\004R\ttimestam"
    "p:\004\210\240\037\000\"\311\001\n\tSignBytes\022\032\n\010sequence\030\001 \001(\004R"
    "\010sequence\022\034\n\ttimestamp\030\002 \001(\004R\ttimestamp\022"
    " \n\013diversifier\030\003 \001(\tR\013diversifier\022F\n\tdat"
    "a_type\030\004 \001(\0162).ibc.lightclients.solomach"
    "ine.v2.DataTypeR\010dataType\022\022\n\004data\030\005 \001(\014R"
    "\004data:\004\210\240\037\000\"q\n\nHeaderData\0224\n\013new_pub_key"
    "\030\001 \001(\0132\024.google.protobuf.AnyR\tnewPubKey\022"
    "\'\n\017new_diversifier\030\002 \001(\tR\016newDiversifier"
    ":\004\210\240\037\000\"d\n\017ClientStateData\022\022\n\004path\030\001 \001(\014R"
    "\004path\0227\n\014client_state\030\002 \001(\0132\024.google.pro"
    "tobuf.AnyR\013clientState:\004\210\240\037\000\"m\n\022Consensu"
    "sStateData\022\022\n\004path\030\001 \001(\014R\004path\022=\n\017consen"
    "sus_state\030\002 \001(\0132\024.google.protobuf.AnyR\016c"
    "onsensusState:\004\210\240\037\000\"v\n\023ConnectionStateDa"
    "ta\022\022\n\004path\030\001 \001(\014R\004path\022E\n\nconnection\030\002 \001"
    "(\0132%.ibc.core.connection.v1.ConnectionEn"
    "dR\nconnection:\004\210\240\037\000\"d\n\020ChannelStateData\022"
    "\022\n\004path\030\001 \001(\014R\004path\0226\n\007channel\030\002 \001(\0132\034.i"
    "bc.core.channel.v1.ChannelR\007channel:\004\210\240\037"
    "\000\"J\n\024PacketCommitmentData\022\022\n\004path\030\001 \001(\014R"
    "\004path\022\036\n\ncommitment\030\002 \001(\014R\ncommitment\"Y\n"
    "\031PacketAcknowledgementData\022\022\n\004path\030\001 \001(\014"
    "R\004path\022(\n\017acknowledgement\030\002 \001(\014R\017acknowl"
    "edgement\".\n\030PacketReceiptAbsenceData\022\022\n\004"
    "path\030\001 \001(\014R\004path\"N\n\024NextSequenceRecvData"
    "\022\022\n\004path\030\001 \001(\014R\004path\022\"\n\rnext_seq_recv\030\002 "
    "\001(\004R\013nextSeqRecv*\214\004\n\010DataType\0228\n#DATA_TY"
    "PE_UNINITIALIZED_UNSPECIFIED\020\000\032\017\212\235 \013UNSP"
    "ECIFIED\022&\n\026DATA_TYPE_CLIENT_STATE\020\001\032\n\212\235 "
    "\006CLIENT\022,\n\031DATA_TYPE_CONSENSUS_STATE\020\002\032\r"
    "\212\235 \tCONSENSUS\022.\n\032DATA_TYPE_CONNECTION_ST"
    "ATE\020\003\032\016\212\235 \nCONNECTION\022(\n\027DATA_TYPE_CHANN"
    "EL_STATE\020\004\032\013\212\235 \007CHANNEL\0225\n\033DATA_TYPE_PAC"
    "KET_COMMITMENT\020\005\032\024\212\235 \020PACKETCOMMITMENT\022\?"
    "\n DATA_TYPE_PACKET_ACKNOWLEDGEMENT\020\006\032\031\212\235"
    " \025PACKETACKNOWLEDGEMENT\022>\n DATA_TYPE_PAC"
    "KET_RECEIPT_ABSENCE\020\007\032\030\212\235 \024PACKETRECEIPT"
    "ABSENCE\0226\n\034DATA_TYPE_NEXT_SEQUENCE_RECV\020"
    "\010\032\024\212\235 \020NEXTSEQUENCERECV\022 \n\020DATA_TYPE_HEA"
    "DER\020\t\032\n\212\235 \006HEADER\032\004\210\243\036\000B\230\002\n#com.ibc.ligh"
    "tclients.solomachine.v2B\020SolomachineProt"
    "oP\001Z@github.com/cosmos/ibc-go/v7/modules"
    "/core/02-client/migrations/v7\242\002\003ILS\252\002\037Ib"
    "c.Lightclients.Solomachine.V2\312\002\037Ibc\\Ligh"
    "tclients\\Solomachine\\V2\342\002+Ibc\\Lightclien"
    "ts\\Solomachine\\V2\\GPBMetadata\352\002\"Ibc::Lig"
    "htclients::Solomachine::V2b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_deps[4] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
        &::descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto = {
    false,
    false,
    3194,
    descriptor_table_protodef_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto,
    "ibc/lightclients/solomachine/v2/solomachine.proto",
    &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
    descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_deps,
    4,
    16,
    schemas,
    file_default_instances,
    TableStruct_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto::offsets,
    file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto,
    file_level_enum_descriptors_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto,
    file_level_service_descriptors_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter() {
  return &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto(&descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto);
namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto);
  return file_level_enum_descriptors_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientState, _impl_._has_bits_);
  static const ::ibc::lightclients::solomachine::v2::ConsensusState& consensus_state(const ClientState* msg);
  static void set_has_consensus_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::lightclients::solomachine::v2::ConsensusState&
ClientState::_Internal::consensus_state(const ClientState* msg) {
  return *msg->_impl_.consensus_state_;
}
ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consensus_state_){nullptr}
    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.is_frozen_) {}

    , decltype(_impl_.allow_update_after_proposal_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.consensus_state_ = new ::ibc::lightclients::solomachine::v2::ConsensusState(*from._impl_.consensus_state_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.allow_update_after_proposal_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.allow_update_after_proposal_));
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ClientState)
}

inline void ClientState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.consensus_state_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.is_frozen_) { false }

    , decltype(_impl_.allow_update_after_proposal_) { false }

  };
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.consensus_state_;
}

void ClientState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ClientState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.consensus_state_ != nullptr);
    _impl_.consensus_state_->Clear();
  }
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.allow_update_after_proposal_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.allow_update_after_proposal_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_frozen = 2 [json_name = "isFrozen"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_frozen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.allow_update_after_proposal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ClientState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence(), target);
  }

  // bool is_frozen = 2 [json_name = "isFrozen"];
  if (this->_internal_is_frozen() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_frozen(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::consensus_state(this),
        _Internal::consensus_state(this).GetCachedSize(), target, stream);
  }

  // bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal"];
  if (this->_internal_allow_update_after_proposal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_allow_update_after_proposal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ClientState)
  return target;
}

::size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ClientState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.lightclients.solomachine.v2.ConsensusState consensus_state = 3 [json_name = "consensusState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_state_);
  }

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // bool is_frozen = 2 [json_name = "isFrozen"];
  if (this->_internal_is_frozen() != 0) {
    total_size += 2;
  }

  // bool allow_update_after_proposal = 4 [json_name = "allowUpdateAfterProposal"];
  if (this->_internal_allow_update_after_proposal() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientState::GetClassData() const { return &_class_data_; }


void ClientState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientState*>(&to_msg);
  auto& from = static_cast<const ClientState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ClientState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_consensus_state()->::ibc::lightclients::solomachine::v2::ConsensusState::MergeFrom(
        from._internal_consensus_state());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_is_frozen() != 0) {
    _this->_internal_set_is_frozen(from._internal_is_frozen());
  }
  if (from._internal_allow_update_after_proposal() != 0) {
    _this->_internal_set_allow_update_after_proposal(from._internal_allow_update_after_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientState, _impl_.allow_update_after_proposal_)
      + sizeof(ClientState::_impl_.allow_update_after_proposal_)
      - PROTOBUF_FIELD_OFFSET(ClientState, _impl_.consensus_state_)>(
          reinterpret_cast<char*>(&_impl_.consensus_state_),
          reinterpret_cast<char*>(&other->_impl_.consensus_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[0]);
}
// ===================================================================

class ConsensusState::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsensusState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& public_key(const ConsensusState* msg);
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ConsensusState::_Internal::public_key(const ConsensusState* msg) {
  return *msg->_impl_.public_key_;
}
void ConsensusState::clear_public_key() {
  if (_impl_.public_key_ != nullptr) _impl_.public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConsensusState::ConsensusState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ConsensusState)
}
ConsensusState::ConsensusState(const ConsensusState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diversifier_) {}

    , decltype(_impl_.public_key_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_diversifier().empty()) {
    _this->_impl_.diversifier_.Set(from._internal_diversifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.public_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.public_key_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ConsensusState)
}

inline void ConsensusState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.diversifier_) {}

    , decltype(_impl_.public_key_){nullptr}
    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

  };
  _impl_.diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsensusState::~ConsensusState() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ConsensusState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diversifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.public_key_;
}

void ConsensusState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ConsensusState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diversifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.public_key_ != nullptr);
    _impl_.public_key_->Clear();
  }
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string diversifier = 2 [json_name = "diversifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_diversifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.solomachine.v2.ConsensusState.diversifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConsensusState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ConsensusState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_key(this),
        _Internal::public_key(this).GetCachedSize(), target, stream);
  }

  // string diversifier = 2 [json_name = "diversifier"];
  if (!this->_internal_diversifier().empty()) {
    const std::string& _s = this->_internal_diversifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.solomachine.v2.ConsensusState.diversifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ConsensusState)
  return target;
}

::size_t ConsensusState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ConsensusState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diversifier = 2 [json_name = "diversifier"];
  if (!this->_internal_diversifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_diversifier());
  }

  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.public_key_);
  }

  // uint64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusState::GetClassData() const { return &_class_data_; }


void ConsensusState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusState*>(&to_msg);
  auto& from = static_cast<const ConsensusState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ConsensusState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_diversifier().empty()) {
    _this->_internal_set_diversifier(from._internal_diversifier());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_public_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_public_key());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusState::CopyFrom(const ConsensusState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ConsensusState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusState::IsInitialized() const {
  return true;
}

void ConsensusState::InternalSwap(ConsensusState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.diversifier_, lhs_arena,
                                       &other->_impl_.diversifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_.timestamp_)
      + sizeof(ConsensusState::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(ConsensusState, _impl_.public_key_)>(
          reinterpret_cast<char*>(&_impl_.public_key_),
          reinterpret_cast<char*>(&other->_impl_.public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[1]);
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& new_public_key(const Header* msg);
  static void set_has_new_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
Header::_Internal::new_public_key(const Header* msg) {
  return *msg->_impl_.new_public_key_;
}
void Header::clear_new_public_key() {
  if (_impl_.new_public_key_ != nullptr) _impl_.new_public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_) {}

    , decltype(_impl_.new_diversifier_) {}

    , decltype(_impl_.new_public_key_){nullptr}
    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.new_diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_diversifier().empty()) {
    _this->_impl_.new_diversifier_.Set(from._internal_new_diversifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.new_public_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.new_public_key_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_) {}

    , decltype(_impl_.new_diversifier_) {}

    , decltype(_impl_.new_public_key_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.new_diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  _impl_.new_diversifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.new_public_key_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.new_diversifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.new_public_key_ != nullptr);
    _impl_.new_public_key_->Clear();
  }
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.timestamp_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 3 [json_name = "signature"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any new_public_key = 4 [json_name = "newPublicKey"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_diversifier = 5 [json_name = "newDiversifier"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_new_diversifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.solomachine.v2.Header.new_diversifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence(), target);
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any new_public_key = 4 [json_name = "newPublicKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_public_key(this),
        _Internal::new_public_key(this).GetCachedSize(), target, stream);
  }

  // string new_diversifier = 5 [json_name = "newDiversifier"];
  if (!this->_internal_new_diversifier().empty()) {
    const std::string& _s = this->_internal_new_diversifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.solomachine.v2.Header.new_diversifier");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 3 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  // string new_diversifier = 5 [json_name = "newDiversifier"];
  if (!this->_internal_new_diversifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_diversifier());
  }

  // .google.protobuf.Any new_public_key = 4 [json_name = "newPublicKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_public_key_);
  }

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_new_diversifier().empty()) {
    _this->_internal_set_new_diversifier(from._internal_new_diversifier());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_new_public_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_new_public_key());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_diversifier_, lhs_arena,
                                       &other->_impl_.new_diversifier_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.timestamp_)
      + sizeof(Header::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.new_public_key_)>(
          reinterpret_cast<char*>(&_impl_.new_public_key_),
          reinterpret_cast<char*>(&other->_impl_.new_public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[2]);
}
// ===================================================================

class Misbehaviour::_Internal {
 public:
  using HasBits = decltype(std::declval<Misbehaviour>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_._has_bits_);
  static const ::ibc::lightclients::solomachine::v2::SignatureAndData& signature_one(const Misbehaviour* msg);
  static void set_has_signature_one(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::lightclients::solomachine::v2::SignatureAndData& signature_two(const Misbehaviour* msg);
  static void set_has_signature_two(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::lightclients::solomachine::v2::SignatureAndData&
Misbehaviour::_Internal::signature_one(const Misbehaviour* msg) {
  return *msg->_impl_.signature_one_;
}
const ::ibc::lightclients::solomachine::v2::SignatureAndData&
Misbehaviour::_Internal::signature_two(const Misbehaviour* msg) {
  return *msg->_impl_.signature_two_;
}
Misbehaviour::Misbehaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.Misbehaviour)
}
Misbehaviour::Misbehaviour(const Misbehaviour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Misbehaviour* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.signature_one_){nullptr}
    , decltype(_impl_.signature_two_){nullptr}
    , decltype(_impl_.sequence_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.signature_one_ = new ::ibc::lightclients::solomachine::v2::SignatureAndData(*from._impl_.signature_one_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_two_ = new ::ibc::lightclients::solomachine::v2::SignatureAndData(*from._impl_.signature_two_);
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.Misbehaviour)
}

inline void Misbehaviour::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.signature_one_){nullptr}
    , decltype(_impl_.signature_two_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Misbehaviour::~Misbehaviour() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.Misbehaviour)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Misbehaviour::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.signature_one_;
  if (this != internal_default_instance()) delete _impl_.signature_two_;
}

void Misbehaviour::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Misbehaviour::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.Misbehaviour)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.signature_one_ != nullptr);
      _impl_.signature_one_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.signature_two_ != nullptr);
      _impl_.signature_two_->Clear();
    }
  }
  _impl_.sequence_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Misbehaviour::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.solomachine.v2.Misbehaviour.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 2 [json_name = "sequence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.solomachine.v2.SignatureAndData signature_one = 3 [json_name = "signatureOne"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature_one(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.solomachine.v2.SignatureAndData signature_two = 4 [json_name = "signatureTwo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature_two(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Misbehaviour::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.Misbehaviour)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.solomachine.v2.Misbehaviour.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_sequence(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.lightclients.solomachine.v2.SignatureAndData signature_one = 3 [json_name = "signatureOne"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::signature_one(this),
        _Internal::signature_one(this).GetCachedSize(), target, stream);
  }

  // .ibc.lightclients.solomachine.v2.SignatureAndData signature_two = 4 [json_name = "signatureTwo"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::signature_two(this),
        _Internal::signature_two(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.Misbehaviour)
  return target;
}

::size_t Misbehaviour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.Misbehaviour)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.lightclients.solomachine.v2.SignatureAndData signature_one = 3 [json_name = "signatureOne"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signature_one_);
    }

    // .ibc.lightclients.solomachine.v2.SignatureAndData signature_two = 4 [json_name = "signatureTwo"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signature_two_);
    }

  }
  // uint64 sequence = 2 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Misbehaviour::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Misbehaviour::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Misbehaviour::GetClassData() const { return &_class_data_; }


void Misbehaviour::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Misbehaviour*>(&to_msg);
  auto& from = static_cast<const Misbehaviour&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.Misbehaviour)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_signature_one()->::ibc::lightclients::solomachine::v2::SignatureAndData::MergeFrom(
          from._internal_signature_one());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_signature_two()->::ibc::lightclients::solomachine::v2::SignatureAndData::MergeFrom(
          from._internal_signature_two());
    }
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Misbehaviour::CopyFrom(const Misbehaviour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.Misbehaviour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Misbehaviour::IsInitialized() const {
  return true;
}

void Misbehaviour::InternalSwap(Misbehaviour* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_.sequence_)
      + sizeof(Misbehaviour::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(Misbehaviour, _impl_.signature_one_)>(
          reinterpret_cast<char*>(&_impl_.signature_one_),
          reinterpret_cast<char*>(&other->_impl_.signature_one_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Misbehaviour::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[3]);
}
// ===================================================================

class SignatureAndData::_Internal {
 public:
};

SignatureAndData::SignatureAndData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.SignatureAndData)
}
SignatureAndData::SignatureAndData(const SignatureAndData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignatureAndData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.data_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.data_type_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.data_type_));
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.SignatureAndData)
}

inline void SignatureAndData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.data_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignatureAndData::~SignatureAndData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.SignatureAndData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignatureAndData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  _impl_.data_.Destroy();
}

void SignatureAndData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignatureAndData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.SignatureAndData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_type_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignatureAndData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature = 1 [json_name = "signature"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.solomachine.v2.DataType data_type = 2 [json_name = "dataType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::ibc::lightclients::solomachine::v2::DataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 4 [json_name = "timestamp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignatureAndData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.SignatureAndData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // .ibc.lightclients.solomachine.v2.DataType data_type = 2 [json_name = "dataType"];
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_data_type(), target);
  }

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // uint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.SignatureAndData)
  return target;
}

::size_t SignatureAndData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.SignatureAndData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint64 timestamp = 4 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // .ibc.lightclients.solomachine.v2.DataType data_type = 2 [json_name = "dataType"];
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignatureAndData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignatureAndData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignatureAndData::GetClassData() const { return &_class_data_; }


void SignatureAndData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignatureAndData*>(&to_msg);
  auto& from = static_cast<const SignatureAndData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.SignatureAndData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignatureAndData::CopyFrom(const SignatureAndData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.SignatureAndData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignatureAndData::IsInitialized() const {
  return true;
}

void SignatureAndData::InternalSwap(SignatureAndData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignatureAndData, _impl_.data_type_)
      + sizeof(SignatureAndData::_impl_.data_type_)
      - PROTOBUF_FIELD_OFFSET(SignatureAndData, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignatureAndData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[4]);
}
// ===================================================================

class TimestampedSignatureData::_Internal {
 public:
};

TimestampedSignatureData::TimestampedSignatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
}
TimestampedSignatureData::TimestampedSignatureData(const TimestampedSignatureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimestampedSignatureData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_data_) {}

    , decltype(_impl_.timestamp_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature_data().empty()) {
    _this->_impl_.signature_data_.Set(from._internal_signature_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
}

inline void TimestampedSignatureData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.signature_data_) {}

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.signature_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TimestampedSignatureData::~TimestampedSignatureData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimestampedSignatureData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_data_.Destroy();
}

void TimestampedSignatureData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimestampedSignatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_data_.ClearToEmpty();
  _impl_.timestamp_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimestampedSignatureData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes signature_data = 1 [json_name = "signatureData"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_signature_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimestampedSignatureData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature_data = 1 [json_name = "signatureData"];
  if (!this->_internal_signature_data().empty()) {
    const std::string& _s = this->_internal_signature_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  return target;
}

::size_t TimestampedSignatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature_data = 1 [json_name = "signatureData"];
  if (!this->_internal_signature_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature_data());
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimestampedSignatureData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimestampedSignatureData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimestampedSignatureData::GetClassData() const { return &_class_data_; }


void TimestampedSignatureData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimestampedSignatureData*>(&to_msg);
  auto& from = static_cast<const TimestampedSignatureData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature_data().empty()) {
    _this->_internal_set_signature_data(from._internal_signature_data());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimestampedSignatureData::CopyFrom(const TimestampedSignatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.TimestampedSignatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampedSignatureData::IsInitialized() const {
  return true;
}

void TimestampedSignatureData::InternalSwap(TimestampedSignatureData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_data_, lhs_arena,
                                       &other->_impl_.signature_data_, rhs_arena);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampedSignatureData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[5]);
}
// ===================================================================

class SignBytes::_Internal {
 public:
};

SignBytes::SignBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.SignBytes)
}
SignBytes::SignBytes(const SignBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignBytes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.diversifier_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.data_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_diversifier().empty()) {
    _this->_impl_.diversifier_.Set(from._internal_diversifier(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.data_type_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.data_type_));
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.SignBytes)
}

inline void SignBytes::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.diversifier_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

    , decltype(_impl_.data_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignBytes::~SignBytes() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.SignBytes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignBytes::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.diversifier_.Destroy();
  _impl_.data_.Destroy();
}

void SignBytes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.SignBytes)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.diversifier_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_type_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.data_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignBytes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string diversifier = 3 [json_name = "diversifier"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_diversifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.solomachine.v2.SignBytes.diversifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.lightclients.solomachine.v2.DataType data_type = 4 [json_name = "dataType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::ibc::lightclients::solomachine::v2::DataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 5 [json_name = "data"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignBytes::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.SignBytes)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence(), target);
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  // string diversifier = 3 [json_name = "diversifier"];
  if (!this->_internal_diversifier().empty()) {
    const std::string& _s = this->_internal_diversifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.solomachine.v2.SignBytes.diversifier");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .ibc.lightclients.solomachine.v2.DataType data_type = 4 [json_name = "dataType"];
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_data_type(), target);
  }

  // bytes data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.SignBytes)
  return target;
}

::size_t SignBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.SignBytes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string diversifier = 3 [json_name = "diversifier"];
  if (!this->_internal_diversifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_diversifier());
  }

  // bytes data = 5 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  // .ibc.lightclients.solomachine.v2.DataType data_type = 4 [json_name = "dataType"];
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignBytes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignBytes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignBytes::GetClassData() const { return &_class_data_; }


void SignBytes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignBytes*>(&to_msg);
  auto& from = static_cast<const SignBytes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.SignBytes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_diversifier().empty()) {
    _this->_internal_set_diversifier(from._internal_diversifier());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignBytes::CopyFrom(const SignBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.SignBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignBytes::IsInitialized() const {
  return true;
}

void SignBytes::InternalSwap(SignBytes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.diversifier_, lhs_arena,
                                       &other->_impl_.diversifier_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignBytes, _impl_.data_type_)
      + sizeof(SignBytes::_impl_.data_type_)
      - PROTOBUF_FIELD_OFFSET(SignBytes, _impl_.sequence_)>(
          reinterpret_cast<char*>(&_impl_.sequence_),
          reinterpret_cast<char*>(&other->_impl_.sequence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignBytes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[6]);
}
// ===================================================================

class HeaderData::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeaderData, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& new_pub_key(const HeaderData* msg);
  static void set_has_new_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
HeaderData::_Internal::new_pub_key(const HeaderData* msg) {
  return *msg->_impl_.new_pub_key_;
}
void HeaderData::clear_new_pub_key() {
  if (_impl_.new_pub_key_ != nullptr) _impl_.new_pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HeaderData::HeaderData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.HeaderData)
}
HeaderData::HeaderData(const HeaderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeaderData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_diversifier_) {}

    , decltype(_impl_.new_pub_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.new_diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_new_diversifier().empty()) {
    _this->_impl_.new_diversifier_.Set(from._internal_new_diversifier(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.new_pub_key_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.new_pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.HeaderData)
}

inline void HeaderData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_diversifier_) {}

    , decltype(_impl_.new_pub_key_){nullptr}
  };
  _impl_.new_diversifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.new_diversifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderData::~HeaderData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.HeaderData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_diversifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.new_pub_key_;
}

void HeaderData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.HeaderData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_diversifier_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.new_pub_key_ != nullptr);
    _impl_.new_pub_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeaderData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string new_diversifier = 2 [json_name = "newDiversifier"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_new_diversifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.lightclients.solomachine.v2.HeaderData.new_diversifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeaderData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.HeaderData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::new_pub_key(this),
        _Internal::new_pub_key(this).GetCachedSize(), target, stream);
  }

  // string new_diversifier = 2 [json_name = "newDiversifier"];
  if (!this->_internal_new_diversifier().empty()) {
    const std::string& _s = this->_internal_new_diversifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.lightclients.solomachine.v2.HeaderData.new_diversifier");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.HeaderData)
  return target;
}

::size_t HeaderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.HeaderData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_diversifier = 2 [json_name = "newDiversifier"];
  if (!this->_internal_new_diversifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_new_diversifier());
  }

  // .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeaderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeaderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeaderData::GetClassData() const { return &_class_data_; }


void HeaderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeaderData*>(&to_msg);
  auto& from = static_cast<const HeaderData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.HeaderData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_diversifier().empty()) {
    _this->_internal_set_new_diversifier(from._internal_new_diversifier());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_new_pub_key()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_new_pub_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeaderData::CopyFrom(const HeaderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.HeaderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderData::IsInitialized() const {
  return true;
}

void HeaderData::InternalSwap(HeaderData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_diversifier_, lhs_arena,
                                       &other->_impl_.new_diversifier_, rhs_arena);
  swap(_impl_.new_pub_key_, other->_impl_.new_pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeaderData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[7]);
}
// ===================================================================

class ClientStateData::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientStateData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientStateData, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& client_state(const ClientStateData* msg);
  static void set_has_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ClientStateData::_Internal::client_state(const ClientStateData* msg) {
  return *msg->_impl_.client_state_;
}
void ClientStateData::clear_client_state() {
  if (_impl_.client_state_ != nullptr) _impl_.client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClientStateData::ClientStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ClientStateData)
}
ClientStateData::ClientStateData(const ClientStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientStateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.client_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.client_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ClientStateData)
}

inline void ClientStateData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.client_state_){nullptr}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientStateData::~ClientStateData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ClientStateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientStateData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.client_state_;
}

void ClientStateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ClientStateData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.client_state_ != nullptr);
    _impl_.client_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientStateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientStateData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ClientStateData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_state(this),
        _Internal::client_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ClientStateData)
  return target;
}

::size_t ClientStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ClientStateData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientStateData::GetClassData() const { return &_class_data_; }


void ClientStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientStateData*>(&to_msg);
  auto& from = static_cast<const ClientStateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ClientStateData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_client_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientStateData::CopyFrom(const ClientStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ClientStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientStateData::IsInitialized() const {
  return true;
}

void ClientStateData::InternalSwap(ClientStateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  swap(_impl_.client_state_, other->_impl_.client_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientStateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[8]);
}
// ===================================================================

class ConsensusStateData::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsensusStateData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConsensusStateData, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state(const ConsensusStateData* msg);
  static void set_has_consensus_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
ConsensusStateData::_Internal::consensus_state(const ConsensusStateData* msg) {
  return *msg->_impl_.consensus_state_;
}
void ConsensusStateData::clear_consensus_state() {
  if (_impl_.consensus_state_ != nullptr) _impl_.consensus_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConsensusStateData::ConsensusStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ConsensusStateData)
}
ConsensusStateData::ConsensusStateData(const ConsensusStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusStateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.consensus_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.consensus_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.consensus_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ConsensusStateData)
}

inline void ConsensusStateData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.consensus_state_){nullptr}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConsensusStateData::~ConsensusStateData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ConsensusStateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusStateData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consensus_state_;
}

void ConsensusStateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ConsensusStateData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.consensus_state_ != nullptr);
    _impl_.consensus_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusStateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConsensusStateData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ConsensusStateData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consensus_state(this),
        _Internal::consensus_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ConsensusStateData)
  return target;
}

::size_t ConsensusStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ConsensusStateData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.consensus_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusStateData::GetClassData() const { return &_class_data_; }


void ConsensusStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusStateData*>(&to_msg);
  auto& from = static_cast<const ConsensusStateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ConsensusStateData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_consensus_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_consensus_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusStateData::CopyFrom(const ConsensusStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ConsensusStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStateData::IsInitialized() const {
  return true;
}

void ConsensusStateData::InternalSwap(ConsensusStateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  swap(_impl_.consensus_state_, other->_impl_.consensus_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusStateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[9]);
}
// ===================================================================

class ConnectionStateData::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionStateData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConnectionStateData, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::ConnectionEnd& connection(const ConnectionStateData* msg);
  static void set_has_connection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::connection::v1::ConnectionEnd&
ConnectionStateData::_Internal::connection(const ConnectionStateData* msg) {
  return *msg->_impl_.connection_;
}
void ConnectionStateData::clear_connection() {
  if (_impl_.connection_ != nullptr) _impl_.connection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ConnectionStateData::ConnectionStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ConnectionStateData)
}
ConnectionStateData::ConnectionStateData(const ConnectionStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionStateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.connection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.connection_ = new ::ibc::core::connection::v1::ConnectionEnd(*from._impl_.connection_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ConnectionStateData)
}

inline void ConnectionStateData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.connection_){nullptr}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionStateData::~ConnectionStateData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ConnectionStateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionStateData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.connection_;
}

void ConnectionStateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ConnectionStateData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.connection_ != nullptr);
    _impl_.connection_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionStateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.ConnectionEnd connection = 2 [json_name = "connection"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectionStateData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ConnectionStateData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.ConnectionEnd connection = 2 [json_name = "connection"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::connection(this),
        _Internal::connection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ConnectionStateData)
  return target;
}

::size_t ConnectionStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ConnectionStateData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // .ibc.core.connection.v1.ConnectionEnd connection = 2 [json_name = "connection"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.connection_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionStateData::GetClassData() const { return &_class_data_; }


void ConnectionStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionStateData*>(&to_msg);
  auto& from = static_cast<const ConnectionStateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ConnectionStateData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_connection()->::ibc::core::connection::v1::ConnectionEnd::MergeFrom(
        from._internal_connection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionStateData::CopyFrom(const ConnectionStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ConnectionStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionStateData::IsInitialized() const {
  return true;
}

void ConnectionStateData::InternalSwap(ConnectionStateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  swap(_impl_.connection_, other->_impl_.connection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionStateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[10]);
}
// ===================================================================

class ChannelStateData::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelStateData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChannelStateData, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Channel& channel(const ChannelStateData* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::Channel&
ChannelStateData::_Internal::channel(const ChannelStateData* msg) {
  return *msg->_impl_.channel_;
}
void ChannelStateData::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChannelStateData::ChannelStateData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.ChannelStateData)
}
ChannelStateData::ChannelStateData(const ChannelStateData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChannelStateData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.channel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_ = new ::ibc::core::channel::v1::Channel(*from._impl_.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.ChannelStateData)
}

inline void ChannelStateData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

    , decltype(_impl_.channel_){nullptr}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChannelStateData::~ChannelStateData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.ChannelStateData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChannelStateData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.channel_;
}

void ChannelStateData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChannelStateData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.ChannelStateData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.channel_ != nullptr);
    _impl_.channel_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStateData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChannelStateData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.ChannelStateData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.ChannelStateData)
  return target;
}

::size_t ChannelStateData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.ChannelStateData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStateData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChannelStateData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStateData::GetClassData() const { return &_class_data_; }


void ChannelStateData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChannelStateData*>(&to_msg);
  auto& from = static_cast<const ChannelStateData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.ChannelStateData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_channel()->::ibc::core::channel::v1::Channel::MergeFrom(
        from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStateData::CopyFrom(const ChannelStateData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.ChannelStateData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStateData::IsInitialized() const {
  return true;
}

void ChannelStateData::InternalSwap(ChannelStateData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStateData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[11]);
}
// ===================================================================

class PacketCommitmentData::_Internal {
 public:
};

PacketCommitmentData::PacketCommitmentData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.PacketCommitmentData)
}
PacketCommitmentData::PacketCommitmentData(const PacketCommitmentData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketCommitmentData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.commitment_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commitment().empty()) {
    _this->_impl_.commitment_.Set(from._internal_commitment(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.PacketCommitmentData)
}

inline void PacketCommitmentData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.commitment_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketCommitmentData::~PacketCommitmentData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketCommitmentData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.commitment_.Destroy();
}

void PacketCommitmentData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketCommitmentData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.commitment_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketCommitmentData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes commitment = 2 [json_name = "commitment"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketCommitmentData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes commitment = 2 [json_name = "commitment"];
  if (!this->_internal_commitment().empty()) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  return target;
}

::size_t PacketCommitmentData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // bytes commitment = 2 [json_name = "commitment"];
  if (!this->_internal_commitment().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_commitment());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketCommitmentData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketCommitmentData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketCommitmentData::GetClassData() const { return &_class_data_; }


void PacketCommitmentData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketCommitmentData*>(&to_msg);
  auto& from = static_cast<const PacketCommitmentData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_commitment().empty()) {
    _this->_internal_set_commitment(from._internal_commitment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketCommitmentData::CopyFrom(const PacketCommitmentData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.PacketCommitmentData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketCommitmentData::IsInitialized() const {
  return true;
}

void PacketCommitmentData::InternalSwap(PacketCommitmentData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, lhs_arena,
                                       &other->_impl_.commitment_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketCommitmentData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[12]);
}
// ===================================================================

class PacketAcknowledgementData::_Internal {
 public:
};

PacketAcknowledgementData::PacketAcknowledgementData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
}
PacketAcknowledgementData::PacketAcknowledgementData(const PacketAcknowledgementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketAcknowledgementData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.acknowledgement_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acknowledgement().empty()) {
    _this->_impl_.acknowledgement_.Set(from._internal_acknowledgement(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
}

inline void PacketAcknowledgementData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.acknowledgement_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketAcknowledgementData::~PacketAcknowledgementData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketAcknowledgementData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
  _impl_.acknowledgement_.Destroy();
}

void PacketAcknowledgementData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketAcknowledgementData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.acknowledgement_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketAcknowledgementData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes acknowledgement = 2 [json_name = "acknowledgement"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_acknowledgement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketAcknowledgementData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes acknowledgement = 2 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    const std::string& _s = this->_internal_acknowledgement();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  return target;
}

::size_t PacketAcknowledgementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // bytes acknowledgement = 2 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_acknowledgement());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketAcknowledgementData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketAcknowledgementData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketAcknowledgementData::GetClassData() const { return &_class_data_; }


void PacketAcknowledgementData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketAcknowledgementData*>(&to_msg);
  auto& from = static_cast<const PacketAcknowledgementData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (!from._internal_acknowledgement().empty()) {
    _this->_internal_set_acknowledgement(from._internal_acknowledgement());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketAcknowledgementData::CopyFrom(const PacketAcknowledgementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.PacketAcknowledgementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketAcknowledgementData::IsInitialized() const {
  return true;
}

void PacketAcknowledgementData::InternalSwap(PacketAcknowledgementData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acknowledgement_, lhs_arena,
                                       &other->_impl_.acknowledgement_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketAcknowledgementData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[13]);
}
// ===================================================================

class PacketReceiptAbsenceData::_Internal {
 public:
};

PacketReceiptAbsenceData::PacketReceiptAbsenceData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
}
PacketReceiptAbsenceData::PacketReceiptAbsenceData(const PacketReceiptAbsenceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketReceiptAbsenceData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
}

inline void PacketReceiptAbsenceData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketReceiptAbsenceData::~PacketReceiptAbsenceData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketReceiptAbsenceData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void PacketReceiptAbsenceData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketReceiptAbsenceData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketReceiptAbsenceData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketReceiptAbsenceData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  return target;
}

::size_t PacketReceiptAbsenceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketReceiptAbsenceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketReceiptAbsenceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketReceiptAbsenceData::GetClassData() const { return &_class_data_; }


void PacketReceiptAbsenceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketReceiptAbsenceData*>(&to_msg);
  auto& from = static_cast<const PacketReceiptAbsenceData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketReceiptAbsenceData::CopyFrom(const PacketReceiptAbsenceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.PacketReceiptAbsenceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketReceiptAbsenceData::IsInitialized() const {
  return true;
}

void PacketReceiptAbsenceData::InternalSwap(PacketReceiptAbsenceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketReceiptAbsenceData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[14]);
}
// ===================================================================

class NextSequenceRecvData::_Internal {
 public:
};

NextSequenceRecvData::NextSequenceRecvData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
}
NextSequenceRecvData::NextSequenceRecvData(const NextSequenceRecvData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NextSequenceRecvData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.next_seq_recv_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  _this->_impl_.next_seq_recv_ = from._impl_.next_seq_recv_;
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
}

inline void NextSequenceRecvData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.path_) {}

    , decltype(_impl_.next_seq_recv_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NextSequenceRecvData::~NextSequenceRecvData() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NextSequenceRecvData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void NextSequenceRecvData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NextSequenceRecvData::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.next_seq_recv_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NextSequenceRecvData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes path = 1 [json_name = "path"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 next_seq_recv = 2 [json_name = "nextSeqRecv"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.next_seq_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NextSequenceRecvData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint64 next_seq_recv = 2 [json_name = "nextSeqRecv"];
  if (this->_internal_next_seq_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_next_seq_recv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  return target;
}

::size_t NextSequenceRecvData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes path = 1 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_path());
  }

  // uint64 next_seq_recv = 2 [json_name = "nextSeqRecv"];
  if (this->_internal_next_seq_recv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_seq_recv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NextSequenceRecvData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NextSequenceRecvData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NextSequenceRecvData::GetClassData() const { return &_class_data_; }


void NextSequenceRecvData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NextSequenceRecvData*>(&to_msg);
  auto& from = static_cast<const NextSequenceRecvData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_next_seq_recv() != 0) {
    _this->_internal_set_next_seq_recv(from._internal_next_seq_recv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NextSequenceRecvData::CopyFrom(const NextSequenceRecvData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.solomachine.v2.NextSequenceRecvData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextSequenceRecvData::IsInitialized() const {
  return true;
}

void NextSequenceRecvData::InternalSwap(NextSequenceRecvData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);

  swap(_impl_.next_seq_recv_, other->_impl_.next_seq_recv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NextSequenceRecvData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_getter, &descriptor_table_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto_once,
      file_level_metadata_ibc_2flightclients_2fsolomachine_2fv2_2fsolomachine_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ClientState*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ClientState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ConsensusState*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ConsensusState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ConsensusState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::Header*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::Misbehaviour*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::Misbehaviour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::Misbehaviour >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::SignatureAndData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::SignatureAndData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::SignatureAndData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::TimestampedSignatureData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::TimestampedSignatureData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::TimestampedSignatureData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::SignBytes*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::SignBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::SignBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::HeaderData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::HeaderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::HeaderData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ClientStateData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ClientStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ClientStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ConsensusStateData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ConsensusStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ConsensusStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ConnectionStateData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ConnectionStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ConnectionStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::ChannelStateData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::ChannelStateData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::ChannelStateData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::PacketCommitmentData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::PacketCommitmentData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::PacketCommitmentData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::PacketAcknowledgementData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::PacketAcknowledgementData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::PacketAcknowledgementData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::PacketReceiptAbsenceData >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::lightclients::solomachine::v2::NextSequenceRecvData*
Arena::CreateMaybeMessage< ::ibc::lightclients::solomachine::v2::NextSequenceRecvData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::solomachine::v2::NextSequenceRecvData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/solomachine/v3/solomachine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v3 {
class ClientState;
struct ClientStateDefaultTypeInternal;
extern ClientStateDefaultTypeInternal _ClientState_default_instance_;
class ConsensusState;
struct ConsensusStateDefaultTypeInternal;
extern ConsensusStateDefaultTypeInternal _ConsensusState_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeaderData;
struct HeaderDataDefaultTypeInternal;
extern HeaderDataDefaultTypeInternal _HeaderData_default_instance_;
class Misbehaviour;
struct MisbehaviourDefaultTypeInternal;
extern MisbehaviourDefaultTypeInternal _Misbehaviour_default_instance_;
class SignBytes;
struct SignBytesDefaultTypeInternal;
extern SignBytesDefaultTypeInternal _SignBytes_default_instance_;
class SignatureAndData;
struct SignatureAndDataDefaultTypeInternal;
extern SignatureAndDataDefaultTypeInternal _SignatureAndData_default_instance_;
class TimestampedSignatureData;
struct TimestampedSignatureDataDefaultTypeInternal;
extern TimestampedSignatureDataDefaultTypeInternal _TimestampedSignatureData_default_instance_;
}  // namespace v3
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::lightclients::solomachine::v3::ClientState* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::ClientState>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::ConsensusState* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::ConsensusState>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::Header* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::Header>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::HeaderData* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::HeaderData>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::Misbehaviour* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::Misbehaviour>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::SignBytes* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::SignBytes>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::SignatureAndData* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::SignatureAndData>(Arena*);
template <>
::ibc::lightclients::solomachine::v3::TimestampedSignatureData* Arena::CreateMaybeMessage<::ibc::lightclients::solomachine::v3::TimestampedSignatureData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace lightclients {
namespace solomachine {
namespace v3 {

// ===================================================================


// -------------------------------------------------------------------

class ClientState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.ClientState) */ {
 public:
  inline ClientState() : ClientState(nullptr) {}
  ~ClientState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientState(const ClientState& from);
  ClientState(ClientState&& from) noexcept
    : ClientState() {
    *this = ::std::move(from);
  }

  inline ClientState& operator=(const ClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientState& operator=(ClientState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientState* internal_default_instance() {
    return reinterpret_cast<const ClientState*>(
               &_ClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientState& a, ClientState& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientState& from) {
    ClientState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.ClientState";
  }
  protected:
  explicit ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusStateFieldNumber = 3,
    kSequenceFieldNumber = 1,
    kIsFrozenFieldNumber = 2,
  };
  // .ibc.lightclients.solomachine.v3.ConsensusState consensus_state = 3 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::ibc::lightclients::solomachine::v3::ConsensusState& consensus_state() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v3::ConsensusState* release_consensus_state();
  ::ibc::lightclients::solomachine::v3::ConsensusState* mutable_consensus_state();
  void set_allocated_consensus_state(::ibc::lightclients::solomachine::v3::ConsensusState* consensus_state);
  private:
  const ::ibc::lightclients::solomachine::v3::ConsensusState& _internal_consensus_state() const;
  ::ibc::lightclients::solomachine::v3::ConsensusState* _internal_mutable_consensus_state();
  public:
  void unsafe_arena_set_allocated_consensus_state(
      ::ibc::lightclients::solomachine::v3::ConsensusState* consensus_state);
  ::ibc::lightclients::solomachine::v3::ConsensusState* unsafe_arena_release_consensus_state();
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // bool is_frozen = 2 [json_name = "isFrozen"];
  void clear_is_frozen() ;
  bool is_frozen() const;
  void set_is_frozen(bool value);

  private:
  bool _internal_is_frozen() const;
  void _internal_set_is_frozen(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.ClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::lightclients::solomachine::v3::ConsensusState* consensus_state_;
    ::uint64_t sequence_;
    bool is_frozen_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class ConsensusState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.ConsensusState) */ {
 public:
  inline ConsensusState() : ConsensusState(nullptr) {}
  ~ConsensusState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusState(const ConsensusState& from);
  ConsensusState(ConsensusState&& from) noexcept
    : ConsensusState() {
    *this = ::std::move(from);
  }

  inline ConsensusState& operator=(const ConsensusState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusState& operator=(ConsensusState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusState* internal_default_instance() {
    return reinterpret_cast<const ConsensusState*>(
               &_ConsensusState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConsensusState& a, ConsensusState& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusState& from) {
    ConsensusState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.ConsensusState";
  }
  protected:
  explicit ConsensusState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiversifierFieldNumber = 2,
    kPublicKeyFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // string diversifier = 2 [json_name = "diversifier"];
  void clear_diversifier() ;
  const std::string& diversifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_diversifier();
  PROTOBUF_NODISCARD std::string* release_diversifier();
  void set_allocated_diversifier(std::string* ptr);

  private:
  const std::string& _internal_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diversifier(
      const std::string& value);
  std::string* _internal_mutable_diversifier();

  public:
  // .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& public_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_public_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_public_key();
  void set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_public_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::PROTOBUF_NAMESPACE_ID::Any* public_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_public_key();
  // uint64 timestamp = 3 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.ConsensusState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diversifier_;
    ::PROTOBUF_NAMESPACE_ID::Any* public_key_;
    ::uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kNewDiversifierFieldNumber = 4,
    kNewPublicKeyFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // bytes signature = 2 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // string new_diversifier = 4 [json_name = "newDiversifier"];
  void clear_new_diversifier() ;
  const std::string& new_diversifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_new_diversifier();
  PROTOBUF_NODISCARD std::string* release_new_diversifier();
  void set_allocated_new_diversifier(std::string* ptr);

  private:
  const std::string& _internal_new_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_diversifier(
      const std::string& value);
  std::string* _internal_mutable_new_diversifier();

  public:
  // .google.protobuf.Any new_public_key = 3 [json_name = "newPublicKey"];
  bool has_new_public_key() const;
  void clear_new_public_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& new_public_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_new_public_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_new_public_key();
  void set_allocated_new_public_key(::PROTOBUF_NAMESPACE_ID::Any* new_public_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_new_public_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_new_public_key();
  public:
  void unsafe_arena_set_allocated_new_public_key(
      ::PROTOBUF_NAMESPACE_ID::Any* new_public_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_new_public_key();
  // uint64 timestamp = 1 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_diversifier_;
    ::PROTOBUF_NAMESPACE_ID::Any* new_public_key_;
    ::uint64_t timestamp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class Misbehaviour final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.Misbehaviour) */ {
 public:
  inline Misbehaviour() : Misbehaviour(nullptr) {}
  ~Misbehaviour() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Misbehaviour(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Misbehaviour(const Misbehaviour& from);
  Misbehaviour(Misbehaviour&& from) noexcept
    : Misbehaviour() {
    *this = ::std::move(from);
  }

  inline Misbehaviour& operator=(const Misbehaviour& from) {
    CopyFrom(from);
    return *this;
  }
  inline Misbehaviour& operator=(Misbehaviour&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Misbehaviour& default_instance() {
    return *internal_default_instance();
  }
  static inline const Misbehaviour* internal_default_instance() {
    return reinterpret_cast<const Misbehaviour*>(
               &_Misbehaviour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Misbehaviour& a, Misbehaviour& b) {
    a.Swap(&b);
  }
  inline void Swap(Misbehaviour* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Misbehaviour* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Misbehaviour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Misbehaviour>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Misbehaviour& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Misbehaviour& from) {
    Misbehaviour::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Misbehaviour* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.Misbehaviour";
  }
  protected:
  explicit Misbehaviour(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureOneFieldNumber = 2,
    kSignatureTwoFieldNumber = 3,
    kSequenceFieldNumber = 1,
  };
  // .ibc.lightclients.solomachine.v3.SignatureAndData signature_one = 2 [json_name = "signatureOne"];
  bool has_signature_one() const;
  void clear_signature_one() ;
  const ::ibc::lightclients::solomachine::v3::SignatureAndData& signature_one() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v3::SignatureAndData* release_signature_one();
  ::ibc::lightclients::solomachine::v3::SignatureAndData* mutable_signature_one();
  void set_allocated_signature_one(::ibc::lightclients::solomachine::v3::SignatureAndData* signature_one);
  private:
  const ::ibc::lightclients::solomachine::v3::SignatureAndData& _internal_signature_one() const;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* _internal_mutable_signature_one();
  public:
  void unsafe_arena_set_allocated_signature_one(
      ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_one);
  ::ibc::lightclients::solomachine::v3::SignatureAndData* unsafe_arena_release_signature_one();
  // .ibc.lightclients.solomachine.v3.SignatureAndData signature_two = 3 [json_name = "signatureTwo"];
  bool has_signature_two() const;
  void clear_signature_two() ;
  const ::ibc::lightclients::solomachine::v3::SignatureAndData& signature_two() const;
  PROTOBUF_NODISCARD ::ibc::lightclients::solomachine::v3::SignatureAndData* release_signature_two();
  ::ibc::lightclients::solomachine::v3::SignatureAndData* mutable_signature_two();
  void set_allocated_signature_two(::ibc::lightclients::solomachine::v3::SignatureAndData* signature_two);
  private:
  const ::ibc::lightclients::solomachine::v3::SignatureAndData& _internal_signature_two() const;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* _internal_mutable_signature_two();
  public:
  void unsafe_arena_set_allocated_signature_two(
      ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_two);
  ::ibc::lightclients::solomachine::v3::SignatureAndData* unsafe_arena_release_signature_two();
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.Misbehaviour)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_one_;
    ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_two_;
    ::uint64_t sequence_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class SignatureAndData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.SignatureAndData) */ {
 public:
  inline SignatureAndData() : SignatureAndData(nullptr) {}
  ~SignatureAndData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignatureAndData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignatureAndData(const SignatureAndData& from);
  SignatureAndData(SignatureAndData&& from) noexcept
    : SignatureAndData() {
    *this = ::std::move(from);
  }

  inline SignatureAndData& operator=(const SignatureAndData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignatureAndData& operator=(SignatureAndData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignatureAndData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignatureAndData* internal_default_instance() {
    return reinterpret_cast<const SignatureAndData*>(
               &_SignatureAndData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SignatureAndData& a, SignatureAndData& b) {
    a.Swap(&b);
  }
  inline void Swap(SignatureAndData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignatureAndData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignatureAndData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignatureAndData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignatureAndData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignatureAndData& from) {
    SignatureAndData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignatureAndData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.SignatureAndData";
  }
  protected:
  explicit SignatureAndData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kPathFieldNumber = 2,
    kDataFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // bytes signature = 1 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // bytes path = 2 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // bytes data = 3 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 timestamp = 4 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.SignatureAndData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class TimestampedSignatureData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.TimestampedSignatureData) */ {
 public:
  inline TimestampedSignatureData() : TimestampedSignatureData(nullptr) {}
  ~TimestampedSignatureData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimestampedSignatureData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimestampedSignatureData(const TimestampedSignatureData& from);
  TimestampedSignatureData(TimestampedSignatureData&& from) noexcept
    : TimestampedSignatureData() {
    *this = ::std::move(from);
  }

  inline TimestampedSignatureData& operator=(const TimestampedSignatureData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampedSignatureData& operator=(TimestampedSignatureData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimestampedSignatureData& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimestampedSignatureData* internal_default_instance() {
    return reinterpret_cast<const TimestampedSignatureData*>(
               &_TimestampedSignatureData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimestampedSignatureData& a, TimestampedSignatureData& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampedSignatureData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimestampedSignatureData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimestampedSignatureData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimestampedSignatureData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimestampedSignatureData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimestampedSignatureData& from) {
    TimestampedSignatureData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampedSignatureData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.TimestampedSignatureData";
  }
  protected:
  explicit TimestampedSignatureData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureDataFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // bytes signature_data = 1 [json_name = "signatureData"];
  void clear_signature_data() ;
  const std::string& signature_data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature_data(Arg_&& arg, Args_... args);
  std::string* mutable_signature_data();
  PROTOBUF_NODISCARD std::string* release_signature_data();
  void set_allocated_signature_data(std::string* ptr);

  private:
  const std::string& _internal_signature_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature_data(
      const std::string& value);
  std::string* _internal_mutable_signature_data();

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.TimestampedSignatureData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_data_;
    ::uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class SignBytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.SignBytes) */ {
 public:
  inline SignBytes() : SignBytes(nullptr) {}
  ~SignBytes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignBytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignBytes(const SignBytes& from);
  SignBytes(SignBytes&& from) noexcept
    : SignBytes() {
    *this = ::std::move(from);
  }

  inline SignBytes& operator=(const SignBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignBytes& operator=(SignBytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignBytes* internal_default_instance() {
    return reinterpret_cast<const SignBytes*>(
               &_SignBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SignBytes& a, SignBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(SignBytes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignBytes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignBytes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignBytes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignBytes& from) {
    SignBytes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignBytes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.SignBytes";
  }
  protected:
  explicit SignBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDiversifierFieldNumber = 3,
    kPathFieldNumber = 4,
    kDataFieldNumber = 5,
    kSequenceFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // string diversifier = 3 [json_name = "diversifier"];
  void clear_diversifier() ;
  const std::string& diversifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_diversifier();
  PROTOBUF_NODISCARD std::string* release_diversifier();
  void set_allocated_diversifier(std::string* ptr);

  private:
  const std::string& _internal_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_diversifier(
      const std::string& value);
  std::string* _internal_mutable_diversifier();

  public:
  // bytes path = 4 [json_name = "path"];
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // bytes data = 5 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // uint64 sequence = 1 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // uint64 timestamp = 2 [json_name = "timestamp"];
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.SignBytes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr diversifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::uint64_t sequence_;
    ::uint64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};// -------------------------------------------------------------------

class HeaderData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.lightclients.solomachine.v3.HeaderData) */ {
 public:
  inline HeaderData() : HeaderData(nullptr) {}
  ~HeaderData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HeaderData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderData(const HeaderData& from);
  HeaderData(HeaderData&& from) noexcept
    : HeaderData() {
    *this = ::std::move(from);
  }

  inline HeaderData& operator=(const HeaderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderData& operator=(HeaderData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeaderData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderData* internal_default_instance() {
    return reinterpret_cast<const HeaderData*>(
               &_HeaderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HeaderData& a, HeaderData& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeaderData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeaderData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HeaderData& from) {
    HeaderData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeaderData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.lightclients.solomachine.v3.HeaderData";
  }
  protected:
  explicit HeaderData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewDiversifierFieldNumber = 2,
    kNewPubKeyFieldNumber = 1,
  };
  // string new_diversifier = 2 [json_name = "newDiversifier"];
  void clear_new_diversifier() ;
  const std::string& new_diversifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_new_diversifier(Arg_&& arg, Args_... args);
  std::string* mutable_new_diversifier();
  PROTOBUF_NODISCARD std::string* release_new_diversifier();
  void set_allocated_new_diversifier(std::string* ptr);

  private:
  const std::string& _internal_new_diversifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_diversifier(
      const std::string& value);
  std::string* _internal_mutable_new_diversifier();

  public:
  // .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
  bool has_new_pub_key() const;
  void clear_new_pub_key() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& new_pub_key() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_new_pub_key();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_new_pub_key();
  void set_allocated_new_pub_key(::PROTOBUF_NAMESPACE_ID::Any* new_pub_key);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_new_pub_key() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_new_pub_key();
  public:
  void unsafe_arena_set_allocated_new_pub_key(
      ::PROTOBUF_NAMESPACE_ID::Any* new_pub_key);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_new_pub_key();
  // @@protoc_insertion_point(class_scope:ibc.lightclients.solomachine.v3.HeaderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_diversifier_;
    ::PROTOBUF_NAMESPACE_ID::Any* new_pub_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientState

// uint64 sequence = 1 [json_name = "sequence"];
inline void ClientState::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t ClientState::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ClientState.sequence)
  return _internal_sequence();
}
inline void ClientState::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.ClientState.sequence)
}
inline ::uint64_t ClientState::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void ClientState::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// bool is_frozen = 2 [json_name = "isFrozen"];
inline void ClientState::clear_is_frozen() {
  _impl_.is_frozen_ = false;
}
inline bool ClientState::is_frozen() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ClientState.is_frozen)
  return _internal_is_frozen();
}
inline void ClientState::set_is_frozen(bool value) {
  _internal_set_is_frozen(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.ClientState.is_frozen)
}
inline bool ClientState::_internal_is_frozen() const {
  return _impl_.is_frozen_;
}
inline void ClientState::_internal_set_is_frozen(bool value) {
  ;
  _impl_.is_frozen_ = value;
}

// .ibc.lightclients.solomachine.v3.ConsensusState consensus_state = 3 [json_name = "consensusState"];
inline bool ClientState::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline void ClientState::clear_consensus_state() {
  if (_impl_.consensus_state_ != nullptr) _impl_.consensus_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::solomachine::v3::ConsensusState& ClientState::_internal_consensus_state() const {
  const ::ibc::lightclients::solomachine::v3::ConsensusState* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v3::ConsensusState&>(
      ::ibc::lightclients::solomachine::v3::_ConsensusState_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v3::ConsensusState& ClientState::consensus_state() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ClientState.consensus_state)
  return _internal_consensus_state();
}
inline void ClientState::unsafe_arena_set_allocated_consensus_state(
    ::ibc::lightclients::solomachine::v3::ConsensusState* consensus_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = consensus_state;
  if (consensus_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.ClientState.consensus_state)
}
inline ::ibc::lightclients::solomachine::v3::ConsensusState* ClientState::release_consensus_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v3::ConsensusState* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::ConsensusState* ClientState::unsafe_arena_release_consensus_state() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.ClientState.consensus_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v3::ConsensusState* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::ConsensusState* ClientState::_internal_mutable_consensus_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::solomachine::v3::ConsensusState>(GetArenaForAllocation());
    _impl_.consensus_state_ = p;
  }
  return _impl_.consensus_state_;
}
inline ::ibc::lightclients::solomachine::v3::ConsensusState* ClientState::mutable_consensus_state() {
  ::ibc::lightclients::solomachine::v3::ConsensusState* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.ClientState.consensus_state)
  return _msg;
}
inline void ClientState::set_allocated_consensus_state(::ibc::lightclients::solomachine::v3::ConsensusState* consensus_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.consensus_state_;
  }
  if (consensus_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(consensus_state);
    if (message_arena != submessage_arena) {
      consensus_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.consensus_state_ = consensus_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.ClientState.consensus_state)
}

// -------------------------------------------------------------------

// ConsensusState

// .google.protobuf.Any public_key = 1 [json_name = "publicKey"];
inline bool ConsensusState::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ConsensusState::_internal_public_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ConsensusState::public_key() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ConsensusState.public_key)
  return _internal_public_key();
}
inline void ConsensusState::unsafe_arena_set_allocated_public_key(
    ::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = public_key;
  if (public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.ConsensusState.public_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusState::release_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusState::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.ConsensusState.public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusState::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.public_key_ = p;
  }
  return _impl_.public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusState::mutable_public_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.ConsensusState.public_key)
  return _msg;
}
inline void ConsensusState::set_allocated_public_key(::PROTOBUF_NAMESPACE_ID::Any* public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_key_);
  }
  if (public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_key));
    if (message_arena != submessage_arena) {
      public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_key_ = public_key;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.ConsensusState.public_key)
}

// string diversifier = 2 [json_name = "diversifier"];
inline void ConsensusState::clear_diversifier() {
  _impl_.diversifier_.ClearToEmpty();
}
inline const std::string& ConsensusState::diversifier() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ConsensusState.diversifier)
  return _internal_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConsensusState::set_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.ConsensusState.diversifier)
}
inline std::string* ConsensusState::mutable_diversifier() {
  std::string* _s = _internal_mutable_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.ConsensusState.diversifier)
  return _s;
}
inline const std::string& ConsensusState::_internal_diversifier() const {
  return _impl_.diversifier_.Get();
}
inline void ConsensusState::_internal_set_diversifier(const std::string& value) {
  ;


  _impl_.diversifier_.Set(value, GetArenaForAllocation());
}
inline std::string* ConsensusState::_internal_mutable_diversifier() {
  ;
  return _impl_.diversifier_.Mutable( GetArenaForAllocation());
}
inline std::string* ConsensusState::release_diversifier() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.ConsensusState.diversifier)
  return _impl_.diversifier_.Release();
}
inline void ConsensusState::set_allocated_diversifier(std::string* value) {
  _impl_.diversifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.diversifier_.IsDefault()) {
          _impl_.diversifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.ConsensusState.diversifier)
}

// uint64 timestamp = 3 [json_name = "timestamp"];
inline void ConsensusState::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t ConsensusState::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.ConsensusState.timestamp)
  return _internal_timestamp();
}
inline void ConsensusState::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.ConsensusState.timestamp)
}
inline ::uint64_t ConsensusState::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void ConsensusState::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// Header

// uint64 timestamp = 1 [json_name = "timestamp"];
inline void Header::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t Header::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Header.timestamp)
  return _internal_timestamp();
}
inline void Header::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.Header.timestamp)
}
inline ::uint64_t Header::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void Header::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// bytes signature = 2 [json_name = "signature"];
inline void Header::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Header::signature() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Header.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.Header.signature)
}
inline std::string* Header::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.Header.signature)
  return _s;
}
inline const std::string& Header::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Header::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_signature() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.Header.signature)
  return _impl_.signature_.Release();
}
inline void Header::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.Header.signature)
}

// .google.protobuf.Any new_public_key = 3 [json_name = "newPublicKey"];
inline bool Header::has_new_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_public_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Header::_internal_new_public_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.new_public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& Header::new_public_key() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Header.new_public_key)
  return _internal_new_public_key();
}
inline void Header::unsafe_arena_set_allocated_new_public_key(
    ::PROTOBUF_NAMESPACE_ID::Any* new_public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_public_key_);
  }
  _impl_.new_public_key_ = new_public_key;
  if (new_public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.Header.new_public_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Header::release_new_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.new_public_key_;
  _impl_.new_public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Header::unsafe_arena_release_new_public_key() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.Header.new_public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.new_public_key_;
  _impl_.new_public_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Header::_internal_mutable_new_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.new_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.new_public_key_ = p;
  }
  return _impl_.new_public_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* Header::mutable_new_public_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_new_public_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.Header.new_public_key)
  return _msg;
}
inline void Header::set_allocated_new_public_key(::PROTOBUF_NAMESPACE_ID::Any* new_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_public_key_);
  }
  if (new_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_public_key));
    if (message_arena != submessage_arena) {
      new_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.new_public_key_ = new_public_key;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.Header.new_public_key)
}

// string new_diversifier = 4 [json_name = "newDiversifier"];
inline void Header::clear_new_diversifier() {
  _impl_.new_diversifier_.ClearToEmpty();
}
inline const std::string& Header::new_diversifier() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Header.new_diversifier)
  return _internal_new_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_new_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.Header.new_diversifier)
}
inline std::string* Header::mutable_new_diversifier() {
  std::string* _s = _internal_mutable_new_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.Header.new_diversifier)
  return _s;
}
inline const std::string& Header::_internal_new_diversifier() const {
  return _impl_.new_diversifier_.Get();
}
inline void Header::_internal_set_new_diversifier(const std::string& value) {
  ;


  _impl_.new_diversifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_new_diversifier() {
  ;
  return _impl_.new_diversifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_new_diversifier() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.Header.new_diversifier)
  return _impl_.new_diversifier_.Release();
}
inline void Header::set_allocated_new_diversifier(std::string* value) {
  _impl_.new_diversifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_diversifier_.IsDefault()) {
          _impl_.new_diversifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.Header.new_diversifier)
}

// -------------------------------------------------------------------

// Misbehaviour

// uint64 sequence = 1 [json_name = "sequence"];
inline void Misbehaviour::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t Misbehaviour::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Misbehaviour.sequence)
  return _internal_sequence();
}
inline void Misbehaviour::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.Misbehaviour.sequence)
}
inline ::uint64_t Misbehaviour::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void Misbehaviour::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// .ibc.lightclients.solomachine.v3.SignatureAndData signature_one = 2 [json_name = "signatureOne"];
inline bool Misbehaviour::has_signature_one() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_one_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_signature_one() {
  if (_impl_.signature_one_ != nullptr) _impl_.signature_one_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::lightclients::solomachine::v3::SignatureAndData& Misbehaviour::_internal_signature_one() const {
  const ::ibc::lightclients::solomachine::v3::SignatureAndData* p = _impl_.signature_one_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v3::SignatureAndData&>(
      ::ibc::lightclients::solomachine::v3::_SignatureAndData_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v3::SignatureAndData& Misbehaviour::signature_one() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Misbehaviour.signature_one)
  return _internal_signature_one();
}
inline void Misbehaviour::unsafe_arena_set_allocated_signature_one(
    ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_one) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_one_);
  }
  _impl_.signature_one_ = signature_one;
  if (signature_one) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.Misbehaviour.signature_one)
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::release_signature_one() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* temp = _impl_.signature_one_;
  _impl_.signature_one_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::unsafe_arena_release_signature_one() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.Misbehaviour.signature_one)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* temp = _impl_.signature_one_;
  _impl_.signature_one_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::_internal_mutable_signature_one() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signature_one_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::solomachine::v3::SignatureAndData>(GetArenaForAllocation());
    _impl_.signature_one_ = p;
  }
  return _impl_.signature_one_;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::mutable_signature_one() {
  ::ibc::lightclients::solomachine::v3::SignatureAndData* _msg = _internal_mutable_signature_one();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.Misbehaviour.signature_one)
  return _msg;
}
inline void Misbehaviour::set_allocated_signature_one(::ibc::lightclients::solomachine::v3::SignatureAndData* signature_one) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signature_one_;
  }
  if (signature_one) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature_one);
    if (message_arena != submessage_arena) {
      signature_one = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature_one, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signature_one_ = signature_one;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.Misbehaviour.signature_one)
}

// .ibc.lightclients.solomachine.v3.SignatureAndData signature_two = 3 [json_name = "signatureTwo"];
inline bool Misbehaviour::has_signature_two() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_two_ != nullptr);
  return value;
}
inline void Misbehaviour::clear_signature_two() {
  if (_impl_.signature_two_ != nullptr) _impl_.signature_two_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::ibc::lightclients::solomachine::v3::SignatureAndData& Misbehaviour::_internal_signature_two() const {
  const ::ibc::lightclients::solomachine::v3::SignatureAndData* p = _impl_.signature_two_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::lightclients::solomachine::v3::SignatureAndData&>(
      ::ibc::lightclients::solomachine::v3::_SignatureAndData_default_instance_);
}
inline const ::ibc::lightclients::solomachine::v3::SignatureAndData& Misbehaviour::signature_two() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.Misbehaviour.signature_two)
  return _internal_signature_two();
}
inline void Misbehaviour::unsafe_arena_set_allocated_signature_two(
    ::ibc::lightclients::solomachine::v3::SignatureAndData* signature_two) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signature_two_);
  }
  _impl_.signature_two_ = signature_two;
  if (signature_two) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.Misbehaviour.signature_two)
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::release_signature_two() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* temp = _impl_.signature_two_;
  _impl_.signature_two_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::unsafe_arena_release_signature_two() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.Misbehaviour.signature_two)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::lightclients::solomachine::v3::SignatureAndData* temp = _impl_.signature_two_;
  _impl_.signature_two_ = nullptr;
  return temp;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::_internal_mutable_signature_two() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.signature_two_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::lightclients::solomachine::v3::SignatureAndData>(GetArenaForAllocation());
    _impl_.signature_two_ = p;
  }
  return _impl_.signature_two_;
}
inline ::ibc::lightclients::solomachine::v3::SignatureAndData* Misbehaviour::mutable_signature_two() {
  ::ibc::lightclients::solomachine::v3::SignatureAndData* _msg = _internal_mutable_signature_two();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.Misbehaviour.signature_two)
  return _msg;
}
inline void Misbehaviour::set_allocated_signature_two(::ibc::lightclients::solomachine::v3::SignatureAndData* signature_two) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signature_two_;
  }
  if (signature_two) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signature_two);
    if (message_arena != submessage_arena) {
      signature_two = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature_two, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_two_ = signature_two;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.Misbehaviour.signature_two)
}

// -------------------------------------------------------------------

// SignatureAndData

// bytes signature = 1 [json_name = "signature"];
inline void SignatureAndData::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SignatureAndData::signature() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignatureAndData.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureAndData::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignatureAndData.signature)
}
inline std::string* SignatureAndData::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignatureAndData.signature)
  return _s;
}
inline const std::string& SignatureAndData::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SignatureAndData::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SignatureAndData::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* SignatureAndData::release_signature() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignatureAndData.signature)
  return _impl_.signature_.Release();
}
inline void SignatureAndData::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignatureAndData.signature)
}

// bytes path = 2 [json_name = "path"];
inline void SignatureAndData::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SignatureAndData::path() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignatureAndData.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureAndData::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignatureAndData.path)
}
inline std::string* SignatureAndData::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignatureAndData.path)
  return _s;
}
inline const std::string& SignatureAndData::_internal_path() const {
  return _impl_.path_.Get();
}
inline void SignatureAndData::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SignatureAndData::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* SignatureAndData::release_path() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignatureAndData.path)
  return _impl_.path_.Release();
}
inline void SignatureAndData::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignatureAndData.path)
}

// bytes data = 3 [json_name = "data"];
inline void SignatureAndData::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SignatureAndData::data() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignatureAndData.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignatureAndData::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignatureAndData.data)
}
inline std::string* SignatureAndData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignatureAndData.data)
  return _s;
}
inline const std::string& SignatureAndData::_internal_data() const {
  return _impl_.data_.Get();
}
inline void SignatureAndData::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* SignatureAndData::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* SignatureAndData::release_data() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignatureAndData.data)
  return _impl_.data_.Release();
}
inline void SignatureAndData::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignatureAndData.data)
}

// uint64 timestamp = 4 [json_name = "timestamp"];
inline void SignatureAndData::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SignatureAndData::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignatureAndData.timestamp)
  return _internal_timestamp();
}
inline void SignatureAndData::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignatureAndData.timestamp)
}
inline ::uint64_t SignatureAndData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void SignatureAndData::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// TimestampedSignatureData

// bytes signature_data = 1 [json_name = "signatureData"];
inline void TimestampedSignatureData::clear_signature_data() {
  _impl_.signature_data_.ClearToEmpty();
}
inline const std::string& TimestampedSignatureData::signature_data() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.TimestampedSignatureData.signature_data)
  return _internal_signature_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TimestampedSignatureData::set_signature_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.TimestampedSignatureData.signature_data)
}
inline std::string* TimestampedSignatureData::mutable_signature_data() {
  std::string* _s = _internal_mutable_signature_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.TimestampedSignatureData.signature_data)
  return _s;
}
inline const std::string& TimestampedSignatureData::_internal_signature_data() const {
  return _impl_.signature_data_.Get();
}
inline void TimestampedSignatureData::_internal_set_signature_data(const std::string& value) {
  ;


  _impl_.signature_data_.Set(value, GetArenaForAllocation());
}
inline std::string* TimestampedSignatureData::_internal_mutable_signature_data() {
  ;
  return _impl_.signature_data_.Mutable( GetArenaForAllocation());
}
inline std::string* TimestampedSignatureData::release_signature_data() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.TimestampedSignatureData.signature_data)
  return _impl_.signature_data_.Release();
}
inline void TimestampedSignatureData::set_allocated_signature_data(std::string* value) {
  _impl_.signature_data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_data_.IsDefault()) {
          _impl_.signature_data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.TimestampedSignatureData.signature_data)
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void TimestampedSignatureData::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t TimestampedSignatureData::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.TimestampedSignatureData.timestamp)
  return _internal_timestamp();
}
inline void TimestampedSignatureData::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.TimestampedSignatureData.timestamp)
}
inline ::uint64_t TimestampedSignatureData::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void TimestampedSignatureData::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// SignBytes

// uint64 sequence = 1 [json_name = "sequence"];
inline void SignBytes::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t SignBytes::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignBytes.sequence)
  return _internal_sequence();
}
inline void SignBytes::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignBytes.sequence)
}
inline ::uint64_t SignBytes::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void SignBytes::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// uint64 timestamp = 2 [json_name = "timestamp"];
inline void SignBytes::clear_timestamp() {
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t SignBytes::timestamp() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignBytes.timestamp)
  return _internal_timestamp();
}
inline void SignBytes::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignBytes.timestamp)
}
inline ::uint64_t SignBytes::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void SignBytes::_internal_set_timestamp(::uint64_t value) {
  ;
  _impl_.timestamp_ = value;
}

// string diversifier = 3 [json_name = "diversifier"];
inline void SignBytes::clear_diversifier() {
  _impl_.diversifier_.ClearToEmpty();
}
inline const std::string& SignBytes::diversifier() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignBytes.diversifier)
  return _internal_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignBytes::set_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignBytes.diversifier)
}
inline std::string* SignBytes::mutable_diversifier() {
  std::string* _s = _internal_mutable_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignBytes.diversifier)
  return _s;
}
inline const std::string& SignBytes::_internal_diversifier() const {
  return _impl_.diversifier_.Get();
}
inline void SignBytes::_internal_set_diversifier(const std::string& value) {
  ;


  _impl_.diversifier_.Set(value, GetArenaForAllocation());
}
inline std::string* SignBytes::_internal_mutable_diversifier() {
  ;
  return _impl_.diversifier_.Mutable( GetArenaForAllocation());
}
inline std::string* SignBytes::release_diversifier() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignBytes.diversifier)
  return _impl_.diversifier_.Release();
}
inline void SignBytes::set_allocated_diversifier(std::string* value) {
  _impl_.diversifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.diversifier_.IsDefault()) {
          _impl_.diversifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignBytes.diversifier)
}

// bytes path = 4 [json_name = "path"];
inline void SignBytes::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& SignBytes::path() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignBytes.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignBytes::set_path(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.path_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignBytes.path)
}
inline std::string* SignBytes::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignBytes.path)
  return _s;
}
inline const std::string& SignBytes::_internal_path() const {
  return _impl_.path_.Get();
}
inline void SignBytes::_internal_set_path(const std::string& value) {
  ;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* SignBytes::_internal_mutable_path() {
  ;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* SignBytes::release_path() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignBytes.path)
  return _impl_.path_.Release();
}
inline void SignBytes::set_allocated_path(std::string* value) {
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignBytes.path)
}

// bytes data = 5 [json_name = "data"];
inline void SignBytes::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& SignBytes::data() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.SignBytes.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SignBytes::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.SignBytes.data)
}
inline std::string* SignBytes::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.SignBytes.data)
  return _s;
}
inline const std::string& SignBytes::_internal_data() const {
  return _impl_.data_.Get();
}
inline void SignBytes::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* SignBytes::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* SignBytes::release_data() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.SignBytes.data)
  return _impl_.data_.Release();
}
inline void SignBytes::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.SignBytes.data)
}

// -------------------------------------------------------------------

// HeaderData

// .google.protobuf.Any new_pub_key = 1 [json_name = "newPubKey"];
inline bool HeaderData::has_new_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_pub_key_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& HeaderData::_internal_new_pub_key() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.new_pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& HeaderData::new_pub_key() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.HeaderData.new_pub_key)
  return _internal_new_pub_key();
}
inline void HeaderData::unsafe_arena_set_allocated_new_pub_key(
    ::PROTOBUF_NAMESPACE_ID::Any* new_pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pub_key_);
  }
  _impl_.new_pub_key_ = new_pub_key;
  if (new_pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.lightclients.solomachine.v3.HeaderData.new_pub_key)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HeaderData::release_new_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.new_pub_key_;
  _impl_.new_pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HeaderData::unsafe_arena_release_new_pub_key() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.HeaderData.new_pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.new_pub_key_;
  _impl_.new_pub_key_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HeaderData::_internal_mutable_new_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.new_pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.new_pub_key_ = p;
  }
  return _impl_.new_pub_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* HeaderData::mutable_new_pub_key() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_new_pub_key();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.HeaderData.new_pub_key)
  return _msg;
}
inline void HeaderData::set_allocated_new_pub_key(::PROTOBUF_NAMESPACE_ID::Any* new_pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_pub_key_);
  }
  if (new_pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_pub_key));
    if (message_arena != submessage_arena) {
      new_pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.new_pub_key_ = new_pub_key;
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.HeaderData.new_pub_key)
}

// string new_diversifier = 2 [json_name = "newDiversifier"];
inline void HeaderData::clear_new_diversifier() {
  _impl_.new_diversifier_.ClearToEmpty();
}
inline const std::string& HeaderData::new_diversifier() const {
  // @@protoc_insertion_point(field_get:ibc.lightclients.solomachine.v3.HeaderData.new_diversifier)
  return _internal_new_diversifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderData::set_new_diversifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.new_diversifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.lightclients.solomachine.v3.HeaderData.new_diversifier)
}
inline std::string* HeaderData::mutable_new_diversifier() {
  std::string* _s = _internal_mutable_new_diversifier();
  // @@protoc_insertion_point(field_mutable:ibc.lightclients.solomachine.v3.HeaderData.new_diversifier)
  return _s;
}
inline const std::string& HeaderData::_internal_new_diversifier() const {
  return _impl_.new_diversifier_.Get();
}
inline void HeaderData::_internal_set_new_diversifier(const std::string& value) {
  ;


  _impl_.new_diversifier_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderData::_internal_mutable_new_diversifier() {
  ;
  return _impl_.new_diversifier_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderData::release_new_diversifier() {
  // @@protoc_insertion_point(field_release:ibc.lightclients.solomachine.v3.HeaderData.new_diversifier)
  return _impl_.new_diversifier_.Release();
}
inline void HeaderData::set_allocated_new_diversifier(std::string* value) {
  _impl_.new_diversifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.new_diversifier_.IsDefault()) {
          _impl_.new_diversifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.lightclients.solomachine.v3.HeaderData.new_diversifier)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v3
}  // namespace solomachine
}  // namespace lightclients
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2flightclients_2fsolomachine_2fv3_2fsolomachine_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/lightclients/localhost/v2/localhost.proto

#include "ibc/lightclients/localhost/v2/localhost.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace lightclients {
namespace localhost {
namespace v2 {
template <typename>
PROTOBUF_CONSTEXPR ClientState::ClientState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.latest_height_)*/nullptr} {}
struct ClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDefaultTypeInternal() {}
  union {
    ClientState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDefaultTypeInternal _ClientState_default_instance_;
}  // namespace v2
}  // namespace localhost
}  // namespace lightclients
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::localhost::v2::ClientState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::localhost::v2::ClientState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::lightclients::localhost::v2::ClientState, _impl_.latest_height_),
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 9, -1, sizeof(::ibc::lightclients::localhost::v2::ClientState)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::lightclients::localhost::v2::_ClientState_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n-ibc/lightclients/localhost/v2/localhos"
    "t.proto\022\035ibc.lightclients.localhost.v2\032\037"
    "ibc/core/client/v1/client.proto\032\024gogopro"
    "to/gogo.proto\"Z\n\013ClientState\022E\n\rlatest_h"
    "eight\030\001 \001(\0132\032.ibc.core.client.v1.HeightB"
    "\004\310\336\037\000R\014latestHeight:\004\210\240\037\000B\224\002\n!com.ibc.li"
    "ghtclients.localhost.v2B\016LocalhostProtoP"
    "\001ZHgithub.com/cosmos/ibc-go/v7/modules/l"
    "ight-clients/09-localhost;localhost\242\002\003IL"
    "L\252\002\035Ibc.Lightclients.Localhost.V2\312\002\035Ibc\\"
    "Lightclients\\Localhost\\V2\342\002)Ibc\\Lightcli"
    "ents\\Localhost\\V2\\GPBMetadata\352\002 Ibc::Lig"
    "htclients::Localhost::V2b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto = {
    false,
    false,
    512,
    descriptor_table_protodef_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto,
    "ibc/lightclients/localhost/v2/localhost.proto",
    &descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_once,
    descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_deps,
    2,
    1,
    schemas,
    file_default_instances,
    TableStruct_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto::offsets,
    file_level_metadata_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto,
    file_level_enum_descriptors_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto,
    file_level_service_descriptors_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_getter() {
  return &descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto(&descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto);
namespace ibc {
namespace lightclients {
namespace localhost {
namespace v2 {
// ===================================================================

class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ClientState, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& latest_height(const ClientState* msg);
  static void set_has_latest_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
ClientState::_Internal::latest_height(const ClientState* msg) {
  return *msg->_impl_.latest_height_;
}
void ClientState::clear_latest_height() {
  if (_impl_.latest_height_ != nullptr) _impl_.latest_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.lightclients.localhost.v2.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latest_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.latest_height_ = new ::ibc::core::client::v1::Height(*from._impl_.latest_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.lightclients.localhost.v2.ClientState)
}

inline void ClientState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.latest_height_){nullptr}
  };
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:ibc.lightclients.localhost.v2.ClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.latest_height_;
}

void ClientState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.lightclients.localhost.v2.ClientState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.latest_height_ != nullptr);
    _impl_.latest_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.client.v1.Height latest_height = 1 [json_name = "latestHeight", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_latest_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.lightclients.localhost.v2.ClientState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height latest_height = 1 [json_name = "latestHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::latest_height(this),
        _Internal::latest_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.lightclients.localhost.v2.ClientState)
  return target;
}

::size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.lightclients.localhost.v2.ClientState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.client.v1.Height latest_height = 1 [json_name = "latestHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latest_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientState::GetClassData() const { return &_class_data_; }


void ClientState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientState*>(&to_msg);
  auto& from = static_cast<const ClientState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.lightclients.localhost.v2.ClientState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_latest_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_latest_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.lightclients.localhost.v2.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.latest_height_, other->_impl_.latest_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_getter, &descriptor_table_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto_once,
      file_level_metadata_ibc_2flightclients_2flocalhost_2fv2_2flocalhost_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace localhost
}  // namespace lightclients
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::lightclients::localhost::v2::ClientState*
Arena::CreateMaybeMessage< ::ibc::lightclients::localhost::v2::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::lightclients::localhost::v2::ClientState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/client/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "ibc/core/client/v1/client.pb.h"
#include "google/protobuf/any.pb.h"
#include "google/api/annotations.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fclient_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
namespace ibc {
namespace core {
namespace client {
namespace v1 {
class QueryClientParamsRequest;
struct QueryClientParamsRequestDefaultTypeInternal;
extern QueryClientParamsRequestDefaultTypeInternal _QueryClientParamsRequest_default_instance_;
class QueryClientParamsResponse;
struct QueryClientParamsResponseDefaultTypeInternal;
extern QueryClientParamsResponseDefaultTypeInternal _QueryClientParamsResponse_default_instance_;
class QueryClientStateRequest;
struct QueryClientStateRequestDefaultTypeInternal;
extern QueryClientStateRequestDefaultTypeInternal _QueryClientStateRequest_default_instance_;
class QueryClientStateResponse;
struct QueryClientStateResponseDefaultTypeInternal;
extern QueryClientStateResponseDefaultTypeInternal _QueryClientStateResponse_default_instance_;
class QueryClientStatesRequest;
struct QueryClientStatesRequestDefaultTypeInternal;
extern QueryClientStatesRequestDefaultTypeInternal _QueryClientStatesRequest_default_instance_;
class QueryClientStatesResponse;
struct QueryClientStatesResponseDefaultTypeInternal;
extern QueryClientStatesResponseDefaultTypeInternal _QueryClientStatesResponse_default_instance_;
class QueryClientStatusRequest;
struct QueryClientStatusRequestDefaultTypeInternal;
extern QueryClientStatusRequestDefaultTypeInternal _QueryClientStatusRequest_default_instance_;
class QueryClientStatusResponse;
struct QueryClientStatusResponseDefaultTypeInternal;
extern QueryClientStatusResponseDefaultTypeInternal _QueryClientStatusResponse_default_instance_;
class QueryConsensusStateHeightsRequest;
struct QueryConsensusStateHeightsRequestDefaultTypeInternal;
extern QueryConsensusStateHeightsRequestDefaultTypeInternal _QueryConsensusStateHeightsRequest_default_instance_;
class QueryConsensusStateHeightsResponse;
struct QueryConsensusStateHeightsResponseDefaultTypeInternal;
extern QueryConsensusStateHeightsResponseDefaultTypeInternal _QueryConsensusStateHeightsResponse_default_instance_;
class QueryConsensusStateRequest;
struct QueryConsensusStateRequestDefaultTypeInternal;
extern QueryConsensusStateRequestDefaultTypeInternal _QueryConsensusStateRequest_default_instance_;
class QueryConsensusStateResponse;
struct QueryConsensusStateResponseDefaultTypeInternal;
extern QueryConsensusStateResponseDefaultTypeInternal _QueryConsensusStateResponse_default_instance_;
class QueryConsensusStatesRequest;
struct QueryConsensusStatesRequestDefaultTypeInternal;
extern QueryConsensusStatesRequestDefaultTypeInternal _QueryConsensusStatesRequest_default_instance_;
class QueryConsensusStatesResponse;
struct QueryConsensusStatesResponseDefaultTypeInternal;
extern QueryConsensusStatesResponseDefaultTypeInternal _QueryConsensusStatesResponse_default_instance_;
class QueryUpgradedClientStateRequest;
struct QueryUpgradedClientStateRequestDefaultTypeInternal;
extern QueryUpgradedClientStateRequestDefaultTypeInternal _QueryUpgradedClientStateRequest_default_instance_;
class QueryUpgradedClientStateResponse;
struct QueryUpgradedClientStateResponseDefaultTypeInternal;
extern QueryUpgradedClientStateResponseDefaultTypeInternal _QueryUpgradedClientStateResponse_default_instance_;
class QueryUpgradedConsensusStateRequest;
struct QueryUpgradedConsensusStateRequestDefaultTypeInternal;
extern QueryUpgradedConsensusStateRequestDefaultTypeInternal _QueryUpgradedConsensusStateRequest_default_instance_;
class QueryUpgradedConsensusStateResponse;
struct QueryUpgradedConsensusStateResponseDefaultTypeInternal;
extern QueryUpgradedConsensusStateResponseDefaultTypeInternal _QueryUpgradedConsensusStateResponse_default_instance_;
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::core::client::v1::QueryClientParamsRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientParamsRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryClientParamsResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientParamsResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStateRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStateRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStateResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStateResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStatesRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStatesRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStatesResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStatesResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStatusRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStatusRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryClientStatusResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryClientStatusResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStateHeightsRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStateHeightsRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStateHeightsResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStateHeightsResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStateRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStateRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStateResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStateResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStatesRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStatesRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryConsensusStatesResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryConsensusStatesResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryUpgradedClientStateRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryUpgradedClientStateRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryUpgradedClientStateResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryUpgradedClientStateResponse>(Arena*);
template <>
::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryUpgradedConsensusStateRequest>(Arena*);
template <>
::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* Arena::CreateMaybeMessage<::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace core {
namespace client {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryClientStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStateRequest) */ {
 public:
  inline QueryClientStateRequest() : QueryClientStateRequest(nullptr) {}
  ~QueryClientStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStateRequest(const QueryClientStateRequest& from);
  QueryClientStateRequest(QueryClientStateRequest&& from) noexcept
    : QueryClientStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryClientStateRequest& operator=(const QueryClientStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStateRequest& operator=(QueryClientStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClientStateRequest*>(
               &_QueryClientStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryClientStateRequest& a, QueryClientStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStateRequest& from) {
    QueryClientStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStateRequest";
  }
  protected:
  explicit QueryClientStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStateResponse) */ {
 public:
  inline QueryClientStateResponse() : QueryClientStateResponse(nullptr) {}
  ~QueryClientStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStateResponse(const QueryClientStateResponse& from);
  QueryClientStateResponse(QueryClientStateResponse&& from) noexcept
    : QueryClientStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryClientStateResponse& operator=(const QueryClientStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStateResponse& operator=(QueryClientStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClientStateResponse*>(
               &_QueryClientStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryClientStateResponse& a, QueryClientStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStateResponse& from) {
    QueryClientStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStateResponse";
  }
  protected:
  explicit QueryClientStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kClientStateFieldNumber = 1,
    kProofHeightFieldNumber = 3,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .google.protobuf.Any client_state = 1 [json_name = "clientState"];
  bool has_client_state() const;
  void clear_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_client_state();
  void set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_client_state();
  public:
  void unsafe_arena_set_allocated_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_client_state();
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::PROTOBUF_NAMESPACE_ID::Any* client_state_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStatesRequest) */ {
 public:
  inline QueryClientStatesRequest() : QueryClientStatesRequest(nullptr) {}
  ~QueryClientStatesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStatesRequest(const QueryClientStatesRequest& from);
  QueryClientStatesRequest(QueryClientStatesRequest&& from) noexcept
    : QueryClientStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryClientStatesRequest& operator=(const QueryClientStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStatesRequest& operator=(QueryClientStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClientStatesRequest*>(
               &_QueryClientStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryClientStatesRequest& a, QueryClientStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStatesRequest& from) {
    QueryClientStatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStatesRequest";
  }
  protected:
  explicit QueryClientStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStatesResponse) */ {
 public:
  inline QueryClientStatesResponse() : QueryClientStatesResponse(nullptr) {}
  ~QueryClientStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStatesResponse(const QueryClientStatesResponse& from);
  QueryClientStatesResponse(QueryClientStatesResponse&& from) noexcept
    : QueryClientStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryClientStatesResponse& operator=(const QueryClientStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStatesResponse& operator=(QueryClientStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClientStatesResponse*>(
               &_QueryClientStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryClientStatesResponse& a, QueryClientStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStatesResponse& from) {
    QueryClientStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStatesResponse";
  }
  protected:
  explicit QueryClientStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientStatesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.core.client.v1.IdentifiedClientState client_states = 1 [json_name = "clientStates", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "IdentifiedClientStates"];
  int client_states_size() const;
  private:
  int _internal_client_states_size() const;

  public:
  void clear_client_states() ;
  ::ibc::core::client::v1::IdentifiedClientState* mutable_client_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::IdentifiedClientState >*
      mutable_client_states();
  private:
  const ::ibc::core::client::v1::IdentifiedClientState& _internal_client_states(int index) const;
  ::ibc::core::client::v1::IdentifiedClientState* _internal_add_client_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::IdentifiedClientState>& _internal_client_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::IdentifiedClientState>* _internal_mutable_client_states();
  public:
  const ::ibc::core::client::v1::IdentifiedClientState& client_states(int index) const;
  ::ibc::core::client::v1::IdentifiedClientState* add_client_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::IdentifiedClientState >&
      client_states() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::IdentifiedClientState > client_states_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStateRequest) */ {
 public:
  inline QueryConsensusStateRequest() : QueryConsensusStateRequest(nullptr) {}
  ~QueryConsensusStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStateRequest(const QueryConsensusStateRequest& from);
  QueryConsensusStateRequest(QueryConsensusStateRequest&& from) noexcept
    : QueryConsensusStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStateRequest& operator=(const QueryConsensusStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStateRequest& operator=(QueryConsensusStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStateRequest*>(
               &_QueryConsensusStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryConsensusStateRequest& a, QueryConsensusStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStateRequest& from) {
    QueryConsensusStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStateRequest";
  }
  protected:
  explicit QueryConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kRevisionNumberFieldNumber = 2,
    kRevisionHeightFieldNumber = 3,
    kLatestHeightFieldNumber = 4,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // uint64 revision_number = 2 [json_name = "revisionNumber"];
  void clear_revision_number() ;
  ::uint64_t revision_number() const;
  void set_revision_number(::uint64_t value);

  private:
  ::uint64_t _internal_revision_number() const;
  void _internal_set_revision_number(::uint64_t value);

  public:
  // uint64 revision_height = 3 [json_name = "revisionHeight"];
  void clear_revision_height() ;
  ::uint64_t revision_height() const;
  void set_revision_height(::uint64_t value);

  private:
  ::uint64_t _internal_revision_height() const;
  void _internal_set_revision_height(::uint64_t value);

  public:
  // bool latest_height = 4 [json_name = "latestHeight"];
  void clear_latest_height() ;
  bool latest_height() const;
  void set_latest_height(bool value);

  private:
  bool _internal_latest_height() const;
  void _internal_set_latest_height(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::uint64_t revision_number_;
    ::uint64_t revision_height_;
    bool latest_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStateResponse) */ {
 public:
  inline QueryConsensusStateResponse() : QueryConsensusStateResponse(nullptr) {}
  ~QueryConsensusStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStateResponse(const QueryConsensusStateResponse& from);
  QueryConsensusStateResponse(QueryConsensusStateResponse&& from) noexcept
    : QueryConsensusStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStateResponse& operator=(const QueryConsensusStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStateResponse& operator=(QueryConsensusStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStateResponse*>(
               &_QueryConsensusStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryConsensusStateResponse& a, QueryConsensusStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStateResponse& from) {
    QueryConsensusStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStateResponse";
  }
  protected:
  explicit QueryConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kConsensusStateFieldNumber = 1,
    kProofHeightFieldNumber = 3,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_consensus_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_consensus_state();
  void set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_consensus_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_consensus_state();
  public:
  void unsafe_arena_set_allocated_consensus_state(
      ::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_consensus_state();
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStatesRequest) */ {
 public:
  inline QueryConsensusStatesRequest() : QueryConsensusStatesRequest(nullptr) {}
  ~QueryConsensusStatesRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStatesRequest(const QueryConsensusStatesRequest& from);
  QueryConsensusStatesRequest(QueryConsensusStatesRequest&& from) noexcept
    : QueryConsensusStatesRequest() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStatesRequest& operator=(const QueryConsensusStatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStatesRequest& operator=(QueryConsensusStatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStatesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStatesRequest*>(
               &_QueryConsensusStatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryConsensusStatesRequest& a, QueryConsensusStatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStatesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStatesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStatesRequest& from) {
    QueryConsensusStatesRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStatesRequest";
  }
  protected:
  explicit QueryConsensusStatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStatesResponse) */ {
 public:
  inline QueryConsensusStatesResponse() : QueryConsensusStatesResponse(nullptr) {}
  ~QueryConsensusStatesResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStatesResponse(const QueryConsensusStatesResponse& from);
  QueryConsensusStatesResponse(QueryConsensusStatesResponse&& from) noexcept
    : QueryConsensusStatesResponse() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStatesResponse& operator=(const QueryConsensusStatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStatesResponse& operator=(QueryConsensusStatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStatesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStatesResponse*>(
               &_QueryConsensusStatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryConsensusStatesResponse& a, QueryConsensusStatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStatesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStatesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStatesResponse& from) {
    QueryConsensusStatesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStatesResponse";
  }
  protected:
  explicit QueryConsensusStatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusStatesFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 1 [json_name = "consensusStates", (.gogoproto.nullable) = false];
  int consensus_states_size() const;
  private:
  int _internal_consensus_states_size() const;

  public:
  void clear_consensus_states() ;
  ::ibc::core::client::v1::ConsensusStateWithHeight* mutable_consensus_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >*
      mutable_consensus_states();
  private:
  const ::ibc::core::client::v1::ConsensusStateWithHeight& _internal_consensus_states(int index) const;
  ::ibc::core::client::v1::ConsensusStateWithHeight* _internal_add_consensus_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>& _internal_consensus_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>* _internal_mutable_consensus_states();
  public:
  const ::ibc::core::client::v1::ConsensusStateWithHeight& consensus_states(int index) const;
  ::ibc::core::client::v1::ConsensusStateWithHeight* add_consensus_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >&
      consensus_states() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight > consensus_states_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStateHeightsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStateHeightsRequest) */ {
 public:
  inline QueryConsensusStateHeightsRequest() : QueryConsensusStateHeightsRequest(nullptr) {}
  ~QueryConsensusStateHeightsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStateHeightsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStateHeightsRequest(const QueryConsensusStateHeightsRequest& from);
  QueryConsensusStateHeightsRequest(QueryConsensusStateHeightsRequest&& from) noexcept
    : QueryConsensusStateHeightsRequest() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStateHeightsRequest& operator=(const QueryConsensusStateHeightsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStateHeightsRequest& operator=(QueryConsensusStateHeightsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStateHeightsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStateHeightsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStateHeightsRequest*>(
               &_QueryConsensusStateHeightsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryConsensusStateHeightsRequest& a, QueryConsensusStateHeightsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStateHeightsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStateHeightsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStateHeightsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStateHeightsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStateHeightsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStateHeightsRequest& from) {
    QueryConsensusStateHeightsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStateHeightsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStateHeightsRequest";
  }
  protected:
  explicit QueryConsensusStateHeightsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStateHeightsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConsensusStateHeightsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryConsensusStateHeightsResponse) */ {
 public:
  inline QueryConsensusStateHeightsResponse() : QueryConsensusStateHeightsResponse(nullptr) {}
  ~QueryConsensusStateHeightsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConsensusStateHeightsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConsensusStateHeightsResponse(const QueryConsensusStateHeightsResponse& from);
  QueryConsensusStateHeightsResponse(QueryConsensusStateHeightsResponse&& from) noexcept
    : QueryConsensusStateHeightsResponse() {
    *this = ::std::move(from);
  }

  inline QueryConsensusStateHeightsResponse& operator=(const QueryConsensusStateHeightsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConsensusStateHeightsResponse& operator=(QueryConsensusStateHeightsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConsensusStateHeightsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConsensusStateHeightsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryConsensusStateHeightsResponse*>(
               &_QueryConsensusStateHeightsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryConsensusStateHeightsResponse& a, QueryConsensusStateHeightsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConsensusStateHeightsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConsensusStateHeightsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConsensusStateHeightsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConsensusStateHeightsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConsensusStateHeightsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConsensusStateHeightsResponse& from) {
    QueryConsensusStateHeightsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConsensusStateHeightsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryConsensusStateHeightsResponse";
  }
  protected:
  explicit QueryConsensusStateHeightsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusStateHeightsFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // repeated .ibc.core.client.v1.Height consensus_state_heights = 1 [json_name = "consensusStateHeights", (.gogoproto.nullable) = false];
  int consensus_state_heights_size() const;
  private:
  int _internal_consensus_state_heights_size() const;

  public:
  void clear_consensus_state_heights() ;
  ::ibc::core::client::v1::Height* mutable_consensus_state_heights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::Height >*
      mutable_consensus_state_heights();
  private:
  const ::ibc::core::client::v1::Height& _internal_consensus_state_heights(int index) const;
  ::ibc::core::client::v1::Height* _internal_add_consensus_state_heights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::Height>& _internal_consensus_state_heights() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::Height>* _internal_mutable_consensus_state_heights();
  public:
  const ::ibc::core::client::v1::Height& consensus_state_heights(int index) const;
  ::ibc::core::client::v1::Height* add_consensus_state_heights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::Height >&
      consensus_state_heights() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryConsensusStateHeightsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::Height > consensus_state_heights_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStatusRequest) */ {
 public:
  inline QueryClientStatusRequest() : QueryClientStatusRequest(nullptr) {}
  ~QueryClientStatusRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStatusRequest(const QueryClientStatusRequest& from);
  QueryClientStatusRequest(QueryClientStatusRequest&& from) noexcept
    : QueryClientStatusRequest() {
    *this = ::std::move(from);
  }

  inline QueryClientStatusRequest& operator=(const QueryClientStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStatusRequest& operator=(QueryClientStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStatusRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClientStatusRequest*>(
               &_QueryClientStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryClientStatusRequest& a, QueryClientStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStatusRequest& from) {
    QueryClientStatusRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStatusRequest";
  }
  protected:
  explicit QueryClientStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientStatusResponse) */ {
 public:
  inline QueryClientStatusResponse() : QueryClientStatusResponse(nullptr) {}
  ~QueryClientStatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientStatusResponse(const QueryClientStatusResponse& from);
  QueryClientStatusResponse(QueryClientStatusResponse&& from) noexcept
    : QueryClientStatusResponse() {
    *this = ::std::move(from);
  }

  inline QueryClientStatusResponse& operator=(const QueryClientStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientStatusResponse& operator=(QueryClientStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientStatusResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClientStatusResponse*>(
               &_QueryClientStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryClientStatusResponse& a, QueryClientStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientStatusResponse& from) {
    QueryClientStatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientStatusResponse";
  }
  protected:
  explicit QueryClientStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1 [json_name = "status"];
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientParamsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientParamsRequest) */ {
 public:
  inline QueryClientParamsRequest() : QueryClientParamsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientParamsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientParamsRequest(const QueryClientParamsRequest& from);
  QueryClientParamsRequest(QueryClientParamsRequest&& from) noexcept
    : QueryClientParamsRequest() {
    *this = ::std::move(from);
  }

  inline QueryClientParamsRequest& operator=(const QueryClientParamsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientParamsRequest& operator=(QueryClientParamsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientParamsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientParamsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryClientParamsRequest*>(
               &_QueryClientParamsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryClientParamsRequest& a, QueryClientParamsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientParamsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientParamsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientParamsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientParamsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryClientParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryClientParamsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientParamsRequest";
  }
  protected:
  explicit QueryClientParamsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientParamsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryClientParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryClientParamsResponse) */ {
 public:
  inline QueryClientParamsResponse() : QueryClientParamsResponse(nullptr) {}
  ~QueryClientParamsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryClientParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryClientParamsResponse(const QueryClientParamsResponse& from);
  QueryClientParamsResponse(QueryClientParamsResponse&& from) noexcept
    : QueryClientParamsResponse() {
    *this = ::std::move(from);
  }

  inline QueryClientParamsResponse& operator=(const QueryClientParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryClientParamsResponse& operator=(QueryClientParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryClientParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryClientParamsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryClientParamsResponse*>(
               &_QueryClientParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryClientParamsResponse& a, QueryClientParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryClientParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryClientParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryClientParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryClientParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryClientParamsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryClientParamsResponse& from) {
    QueryClientParamsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryClientParamsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryClientParamsResponse";
  }
  protected:
  explicit QueryClientParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // .ibc.core.client.v1.Params params = 1 [json_name = "params"];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::core::client::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Params* release_params();
  ::ibc::core::client::v1::Params* mutable_params();
  void set_allocated_params(::ibc::core::client::v1::Params* params);
  private:
  const ::ibc::core::client::v1::Params& _internal_params() const;
  ::ibc::core::client::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::core::client::v1::Params* params);
  ::ibc::core::client::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryClientParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::client::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedClientStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryUpgradedClientStateRequest) */ {
 public:
  inline QueryUpgradedClientStateRequest() : QueryUpgradedClientStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedClientStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedClientStateRequest(const QueryUpgradedClientStateRequest& from);
  QueryUpgradedClientStateRequest(QueryUpgradedClientStateRequest&& from) noexcept
    : QueryUpgradedClientStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedClientStateRequest& operator=(const QueryUpgradedClientStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedClientStateRequest& operator=(QueryUpgradedClientStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedClientStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedClientStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedClientStateRequest*>(
               &_QueryUpgradedClientStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryUpgradedClientStateRequest& a, QueryUpgradedClientStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedClientStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedClientStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedClientStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedClientStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryUpgradedClientStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryUpgradedClientStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryUpgradedClientStateRequest";
  }
  protected:
  explicit QueryUpgradedClientStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryUpgradedClientStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedClientStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryUpgradedClientStateResponse) */ {
 public:
  inline QueryUpgradedClientStateResponse() : QueryUpgradedClientStateResponse(nullptr) {}
  ~QueryUpgradedClientStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedClientStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedClientStateResponse(const QueryUpgradedClientStateResponse& from);
  QueryUpgradedClientStateResponse(QueryUpgradedClientStateResponse&& from) noexcept
    : QueryUpgradedClientStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedClientStateResponse& operator=(const QueryUpgradedClientStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedClientStateResponse& operator=(QueryUpgradedClientStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedClientStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedClientStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedClientStateResponse*>(
               &_QueryUpgradedClientStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryUpgradedClientStateResponse& a, QueryUpgradedClientStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedClientStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedClientStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedClientStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedClientStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUpgradedClientStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUpgradedClientStateResponse& from) {
    QueryUpgradedClientStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUpgradedClientStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryUpgradedClientStateResponse";
  }
  protected:
  explicit QueryUpgradedClientStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradedClientStateFieldNumber = 1,
  };
  // .google.protobuf.Any upgraded_client_state = 1 [json_name = "upgradedClientState"];
  bool has_upgraded_client_state() const;
  void clear_upgraded_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_upgraded_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_upgraded_client_state();
  void set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_upgraded_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_upgraded_client_state();
  public:
  void unsafe_arena_set_allocated_upgraded_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_upgraded_client_state();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryUpgradedClientStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedConsensusStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryUpgradedConsensusStateRequest) */ {
 public:
  inline QueryUpgradedConsensusStateRequest() : QueryUpgradedConsensusStateRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedConsensusStateRequest(const QueryUpgradedConsensusStateRequest& from);
  QueryUpgradedConsensusStateRequest(QueryUpgradedConsensusStateRequest&& from) noexcept
    : QueryUpgradedConsensusStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedConsensusStateRequest& operator=(const QueryUpgradedConsensusStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedConsensusStateRequest& operator=(QueryUpgradedConsensusStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedConsensusStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedConsensusStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedConsensusStateRequest*>(
               &_QueryUpgradedConsensusStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryUpgradedConsensusStateRequest& a, QueryUpgradedConsensusStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedConsensusStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedConsensusStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedConsensusStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedConsensusStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QueryUpgradedConsensusStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QueryUpgradedConsensusStateRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryUpgradedConsensusStateRequest";
  }
  protected:
  explicit QueryUpgradedConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryUpgradedConsensusStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUpgradedConsensusStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.QueryUpgradedConsensusStateResponse) */ {
 public:
  inline QueryUpgradedConsensusStateResponse() : QueryUpgradedConsensusStateResponse(nullptr) {}
  ~QueryUpgradedConsensusStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUpgradedConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUpgradedConsensusStateResponse(const QueryUpgradedConsensusStateResponse& from);
  QueryUpgradedConsensusStateResponse(QueryUpgradedConsensusStateResponse&& from) noexcept
    : QueryUpgradedConsensusStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryUpgradedConsensusStateResponse& operator=(const QueryUpgradedConsensusStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUpgradedConsensusStateResponse& operator=(QueryUpgradedConsensusStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUpgradedConsensusStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUpgradedConsensusStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUpgradedConsensusStateResponse*>(
               &_QueryUpgradedConsensusStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryUpgradedConsensusStateResponse& a, QueryUpgradedConsensusStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUpgradedConsensusStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUpgradedConsensusStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUpgradedConsensusStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUpgradedConsensusStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUpgradedConsensusStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUpgradedConsensusStateResponse& from) {
    QueryUpgradedConsensusStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUpgradedConsensusStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.QueryUpgradedConsensusStateResponse";
  }
  protected:
  explicit QueryUpgradedConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpgradedConsensusStateFieldNumber = 1,
  };
  // .google.protobuf.Any upgraded_consensus_state = 1 [json_name = "upgradedConsensusState"];
  bool has_upgraded_consensus_state() const;
  void clear_upgraded_consensus_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_consensus_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_upgraded_consensus_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_upgraded_consensus_state();
  void set_allocated_upgraded_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_consensus_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_upgraded_consensus_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_upgraded_consensus_state();
  public:
  void unsafe_arena_set_allocated_upgraded_consensus_state(
      ::PROTOBUF_NAMESPACE_ID::Any* upgraded_consensus_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_upgraded_consensus_state();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.QueryUpgradedConsensusStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_consensus_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryClientStateRequest

// string client_id = 1 [json_name = "clientId"];
inline void QueryClientStateRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryClientStateRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStateRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClientStateRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryClientStateRequest.client_id)
}
inline std::string* QueryClientStateRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStateRequest.client_id)
  return _s;
}
inline const std::string& QueryClientStateRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryClientStateRequest::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryClientStateRequest::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryClientStateRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStateRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryClientStateRequest::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStateRequest.client_id)
}

// -------------------------------------------------------------------

// QueryClientStateResponse

// .google.protobuf.Any client_state = 1 [json_name = "clientState"];
inline bool QueryClientStateResponse::has_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryClientStateResponse::_internal_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryClientStateResponse::client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStateResponse.client_state)
  return _internal_client_state();
}
inline void QueryClientStateResponse::unsafe_arena_set_allocated_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  _impl_.client_state_ = client_state;
  if (client_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryClientStateResponse.client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryClientStateResponse::release_client_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryClientStateResponse::unsafe_arena_release_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStateResponse.client_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryClientStateResponse::_internal_mutable_client_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.client_state_ = p;
  }
  return _impl_.client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryClientStateResponse::mutable_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStateResponse.client_state)
  return _msg;
}
inline void QueryClientStateResponse::set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  if (client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_state));
    if (message_arena != submessage_arena) {
      client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_state_ = client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStateResponse.client_state)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryClientStateResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryClientStateResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStateResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClientStateResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryClientStateResponse.proof)
}
inline std::string* QueryClientStateResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStateResponse.proof)
  return _s;
}
inline const std::string& QueryClientStateResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryClientStateResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryClientStateResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryClientStateResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStateResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryClientStateResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStateResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryClientStateResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryClientStateResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryClientStateResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStateResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryClientStateResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryClientStateResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryClientStateResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryClientStateResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStateResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryClientStateResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryClientStateResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStateResponse.proof_height)
  return _msg;
}
inline void QueryClientStateResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStateResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryClientStatesRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryClientStatesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClientStatesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryClientStatesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStatesRequest.pagination)
  return _internal_pagination();
}
inline void QueryClientStatesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryClientStatesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClientStatesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClientStatesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStatesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClientStatesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryClientStatesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStatesRequest.pagination)
  return _msg;
}
inline void QueryClientStatesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStatesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryClientStatesResponse

// repeated .ibc.core.client.v1.IdentifiedClientState client_states = 1 [json_name = "clientStates", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "IdentifiedClientStates"];
inline int QueryClientStatesResponse::_internal_client_states_size() const {
  return _impl_.client_states_.size();
}
inline int QueryClientStatesResponse::client_states_size() const {
  return _internal_client_states_size();
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryClientStatesResponse::mutable_client_states(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStatesResponse.client_states)
  return _internal_mutable_client_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::IdentifiedClientState >*
QueryClientStatesResponse::mutable_client_states() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.client.v1.QueryClientStatesResponse.client_states)
  return _internal_mutable_client_states();
}
inline const ::ibc::core::client::v1::IdentifiedClientState& QueryClientStatesResponse::_internal_client_states(int index) const {
  return _internal_client_states().Get(index);
}
inline const ::ibc::core::client::v1::IdentifiedClientState& QueryClientStatesResponse::client_states(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStatesResponse.client_states)
  return _internal_client_states(index);
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryClientStatesResponse::_internal_add_client_states() {
  return _internal_mutable_client_states()->Add();
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryClientStatesResponse::add_client_states() {
  ::ibc::core::client::v1::IdentifiedClientState* _add = _internal_add_client_states();
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.QueryClientStatesResponse.client_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::IdentifiedClientState >&
QueryClientStatesResponse::client_states() const {
  // @@protoc_insertion_point(field_list:ibc.core.client.v1.QueryClientStatesResponse.client_states)
  return _internal_client_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::IdentifiedClientState>&
QueryClientStatesResponse::_internal_client_states() const {
  return _impl_.client_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::IdentifiedClientState>*
QueryClientStatesResponse::_internal_mutable_client_states() {
  return &_impl_.client_states_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryClientStatesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClientStatesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryClientStatesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStatesResponse.pagination)
  return _internal_pagination();
}
inline void QueryClientStatesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryClientStatesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClientStatesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClientStatesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStatesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClientStatesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryClientStatesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStatesResponse.pagination)
  return _msg;
}
inline void QueryClientStatesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStatesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryConsensusStateRequest

// string client_id = 1 [json_name = "clientId"];
inline void QueryConsensusStateRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryConsensusStateRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryConsensusStateRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateRequest.client_id)
}
inline std::string* QueryConsensusStateRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateRequest.client_id)
  return _s;
}
inline const std::string& QueryConsensusStateRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryConsensusStateRequest::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryConsensusStateRequest::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryConsensusStateRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryConsensusStateRequest::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateRequest.client_id)
}

// uint64 revision_number = 2 [json_name = "revisionNumber"];
inline void QueryConsensusStateRequest::clear_revision_number() {
  _impl_.revision_number_ = ::uint64_t{0u};
}
inline ::uint64_t QueryConsensusStateRequest::revision_number() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateRequest.revision_number)
  return _internal_revision_number();
}
inline void QueryConsensusStateRequest::set_revision_number(::uint64_t value) {
  _internal_set_revision_number(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateRequest.revision_number)
}
inline ::uint64_t QueryConsensusStateRequest::_internal_revision_number() const {
  return _impl_.revision_number_;
}
inline void QueryConsensusStateRequest::_internal_set_revision_number(::uint64_t value) {
  ;
  _impl_.revision_number_ = value;
}

// uint64 revision_height = 3 [json_name = "revisionHeight"];
inline void QueryConsensusStateRequest::clear_revision_height() {
  _impl_.revision_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryConsensusStateRequest::revision_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateRequest.revision_height)
  return _internal_revision_height();
}
inline void QueryConsensusStateRequest::set_revision_height(::uint64_t value) {
  _internal_set_revision_height(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateRequest.revision_height)
}
inline ::uint64_t QueryConsensusStateRequest::_internal_revision_height() const {
  return _impl_.revision_height_;
}
inline void QueryConsensusStateRequest::_internal_set_revision_height(::uint64_t value) {
  ;
  _impl_.revision_height_ = value;
}

// bool latest_height = 4 [json_name = "latestHeight"];
inline void QueryConsensusStateRequest::clear_latest_height() {
  _impl_.latest_height_ = false;
}
inline bool QueryConsensusStateRequest::latest_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateRequest.latest_height)
  return _internal_latest_height();
}
inline void QueryConsensusStateRequest::set_latest_height(bool value) {
  _internal_set_latest_height(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateRequest.latest_height)
}
inline bool QueryConsensusStateRequest::_internal_latest_height() const {
  return _impl_.latest_height_;
}
inline void QueryConsensusStateRequest::_internal_set_latest_height(bool value) {
  ;
  _impl_.latest_height_ = value;
}

// -------------------------------------------------------------------

// QueryConsensusStateResponse

// .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
inline bool QueryConsensusStateResponse::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryConsensusStateResponse::_internal_consensus_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryConsensusStateResponse::consensus_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateResponse.consensus_state)
  return _internal_consensus_state();
}
inline void QueryConsensusStateResponse::unsafe_arena_set_allocated_consensus_state(
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = consensus_state;
  if (consensus_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStateResponse.consensus_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryConsensusStateResponse::release_consensus_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryConsensusStateResponse::unsafe_arena_release_consensus_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateResponse.consensus_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryConsensusStateResponse::_internal_mutable_consensus_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.consensus_state_ = p;
  }
  return _impl_.consensus_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryConsensusStateResponse::mutable_consensus_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateResponse.consensus_state)
  return _msg;
}
inline void QueryConsensusStateResponse::set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  if (consensus_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_state));
    if (message_arena != submessage_arena) {
      consensus_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.consensus_state_ = consensus_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateResponse.consensus_state)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryConsensusStateResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryConsensusStateResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryConsensusStateResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateResponse.proof)
}
inline std::string* QueryConsensusStateResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateResponse.proof)
  return _s;
}
inline const std::string& QueryConsensusStateResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryConsensusStateResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryConsensusStateResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryConsensusStateResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryConsensusStateResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryConsensusStateResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryConsensusStateResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryConsensusStateResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryConsensusStateResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStateResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateResponse.proof_height)
  return _msg;
}
inline void QueryConsensusStateResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryConsensusStatesRequest

// string client_id = 1 [json_name = "clientId"];
inline void QueryConsensusStatesRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryConsensusStatesRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStatesRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryConsensusStatesRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStatesRequest.client_id)
}
inline std::string* QueryConsensusStatesRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStatesRequest.client_id)
  return _s;
}
inline const std::string& QueryConsensusStatesRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryConsensusStatesRequest::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryConsensusStatesRequest::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryConsensusStatesRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStatesRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryConsensusStatesRequest::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStatesRequest.client_id)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryConsensusStatesRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConsensusStatesRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConsensusStatesRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStatesRequest.pagination)
  return _internal_pagination();
}
inline void QueryConsensusStatesRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStatesRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStatesRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStatesRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStatesRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStatesRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStatesRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStatesRequest.pagination)
  return _msg;
}
inline void QueryConsensusStatesRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStatesRequest.pagination)
}

// -------------------------------------------------------------------

// QueryConsensusStatesResponse

// repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 1 [json_name = "consensusStates", (.gogoproto.nullable) = false];
inline int QueryConsensusStatesResponse::_internal_consensus_states_size() const {
  return _impl_.consensus_states_.size();
}
inline int QueryConsensusStatesResponse::consensus_states_size() const {
  return _internal_consensus_states_size();
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* QueryConsensusStatesResponse::mutable_consensus_states(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states)
  return _internal_mutable_consensus_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >*
QueryConsensusStatesResponse::mutable_consensus_states() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states)
  return _internal_mutable_consensus_states();
}
inline const ::ibc::core::client::v1::ConsensusStateWithHeight& QueryConsensusStatesResponse::_internal_consensus_states(int index) const {
  return _internal_consensus_states().Get(index);
}
inline const ::ibc::core::client::v1::ConsensusStateWithHeight& QueryConsensusStatesResponse::consensus_states(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states)
  return _internal_consensus_states(index);
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* QueryConsensusStatesResponse::_internal_add_consensus_states() {
  return _internal_mutable_consensus_states()->Add();
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* QueryConsensusStatesResponse::add_consensus_states() {
  ::ibc::core::client::v1::ConsensusStateWithHeight* _add = _internal_add_consensus_states();
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >&
QueryConsensusStatesResponse::consensus_states() const {
  // @@protoc_insertion_point(field_list:ibc.core.client.v1.QueryConsensusStatesResponse.consensus_states)
  return _internal_consensus_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>&
QueryConsensusStatesResponse::_internal_consensus_states() const {
  return _impl_.consensus_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>*
QueryConsensusStatesResponse::_internal_mutable_consensus_states() {
  return &_impl_.consensus_states_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryConsensusStatesResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConsensusStatesResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConsensusStatesResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStatesResponse.pagination)
  return _internal_pagination();
}
inline void QueryConsensusStatesResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStatesResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStatesResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStatesResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStatesResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStatesResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStatesResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStatesResponse.pagination)
  return _msg;
}
inline void QueryConsensusStatesResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStatesResponse.pagination)
}

// -------------------------------------------------------------------

// QueryConsensusStateHeightsRequest

// string client_id = 1 [json_name = "clientId"];
inline void QueryConsensusStateHeightsRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryConsensusStateHeightsRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateHeightsRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryConsensusStateHeightsRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryConsensusStateHeightsRequest.client_id)
}
inline std::string* QueryConsensusStateHeightsRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateHeightsRequest.client_id)
  return _s;
}
inline const std::string& QueryConsensusStateHeightsRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryConsensusStateHeightsRequest::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryConsensusStateHeightsRequest::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryConsensusStateHeightsRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateHeightsRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryConsensusStateHeightsRequest::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateHeightsRequest.client_id)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryConsensusStateHeightsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConsensusStateHeightsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConsensusStateHeightsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateHeightsRequest.pagination)
  return _internal_pagination();
}
inline void QueryConsensusStateHeightsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStateHeightsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStateHeightsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStateHeightsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateHeightsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStateHeightsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConsensusStateHeightsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateHeightsRequest.pagination)
  return _msg;
}
inline void QueryConsensusStateHeightsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateHeightsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryConsensusStateHeightsResponse

// repeated .ibc.core.client.v1.Height consensus_state_heights = 1 [json_name = "consensusStateHeights", (.gogoproto.nullable) = false];
inline int QueryConsensusStateHeightsResponse::_internal_consensus_state_heights_size() const {
  return _impl_.consensus_state_heights_.size();
}
inline int QueryConsensusStateHeightsResponse::consensus_state_heights_size() const {
  return _internal_consensus_state_heights_size();
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateHeightsResponse::mutable_consensus_state_heights(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateHeightsResponse.consensus_state_heights)
  return _internal_mutable_consensus_state_heights()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::Height >*
QueryConsensusStateHeightsResponse::mutable_consensus_state_heights() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.client.v1.QueryConsensusStateHeightsResponse.consensus_state_heights)
  return _internal_mutable_consensus_state_heights();
}
inline const ::ibc::core::client::v1::Height& QueryConsensusStateHeightsResponse::_internal_consensus_state_heights(int index) const {
  return _internal_consensus_state_heights().Get(index);
}
inline const ::ibc::core::client::v1::Height& QueryConsensusStateHeightsResponse::consensus_state_heights(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateHeightsResponse.consensus_state_heights)
  return _internal_consensus_state_heights(index);
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateHeightsResponse::_internal_add_consensus_state_heights() {
  return _internal_mutable_consensus_state_heights()->Add();
}
inline ::ibc::core::client::v1::Height* QueryConsensusStateHeightsResponse::add_consensus_state_heights() {
  ::ibc::core::client::v1::Height* _add = _internal_add_consensus_state_heights();
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.QueryConsensusStateHeightsResponse.consensus_state_heights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::Height >&
QueryConsensusStateHeightsResponse::consensus_state_heights() const {
  // @@protoc_insertion_point(field_list:ibc.core.client.v1.QueryConsensusStateHeightsResponse.consensus_state_heights)
  return _internal_consensus_state_heights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::Height>&
QueryConsensusStateHeightsResponse::_internal_consensus_state_heights() const {
  return _impl_.consensus_state_heights_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::Height>*
QueryConsensusStateHeightsResponse::_internal_mutable_consensus_state_heights() {
  return &_impl_.consensus_state_heights_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryConsensusStateHeightsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConsensusStateHeightsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConsensusStateHeightsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryConsensusStateHeightsResponse.pagination)
  return _internal_pagination();
}
inline void QueryConsensusStateHeightsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryConsensusStateHeightsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStateHeightsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStateHeightsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryConsensusStateHeightsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStateHeightsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConsensusStateHeightsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryConsensusStateHeightsResponse.pagination)
  return _msg;
}
inline void QueryConsensusStateHeightsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryConsensusStateHeightsResponse.pagination)
}

// -------------------------------------------------------------------

// QueryClientStatusRequest

// string client_id = 1 [json_name = "clientId"];
inline void QueryClientStatusRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryClientStatusRequest::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStatusRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClientStatusRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryClientStatusRequest.client_id)
}
inline std::string* QueryClientStatusRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStatusRequest.client_id)
  return _s;
}
inline const std::string& QueryClientStatusRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryClientStatusRequest::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryClientStatusRequest::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryClientStatusRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStatusRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryClientStatusRequest::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStatusRequest.client_id)
}

// -------------------------------------------------------------------

// QueryClientStatusResponse

// string status = 1 [json_name = "status"];
inline void QueryClientStatusResponse::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& QueryClientStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientStatusResponse.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryClientStatusResponse::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.QueryClientStatusResponse.status)
}
inline std::string* QueryClientStatusResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientStatusResponse.status)
  return _s;
}
inline const std::string& QueryClientStatusResponse::_internal_status() const {
  return _impl_.status_.Get();
}
inline void QueryClientStatusResponse::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryClientStatusResponse::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryClientStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientStatusResponse.status)
  return _impl_.status_.Release();
}
inline void QueryClientStatusResponse::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientStatusResponse.status)
}

// -------------------------------------------------------------------

// QueryClientParamsRequest

// -------------------------------------------------------------------

// QueryClientParamsResponse

// .ibc.core.client.v1.Params params = 1 [json_name = "params"];
inline bool QueryClientParamsResponse::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Params& QueryClientParamsResponse::_internal_params() const {
  const ::ibc::core::client::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Params&>(
      ::ibc::core::client::v1::_Params_default_instance_);
}
inline const ::ibc::core::client::v1::Params& QueryClientParamsResponse::params() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryClientParamsResponse.params)
  return _internal_params();
}
inline void QueryClientParamsResponse::unsafe_arena_set_allocated_params(
    ::ibc::core::client::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryClientParamsResponse.params)
}
inline ::ibc::core::client::v1::Params* QueryClientParamsResponse::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Params* QueryClientParamsResponse::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryClientParamsResponse.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Params* QueryClientParamsResponse::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::core::client::v1::Params* QueryClientParamsResponse::mutable_params() {
  ::ibc::core::client::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryClientParamsResponse.params)
  return _msg;
}
inline void QueryClientParamsResponse::set_allocated_params(::ibc::core::client::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryClientParamsResponse.params)
}

// -------------------------------------------------------------------

// QueryUpgradedClientStateRequest

// -------------------------------------------------------------------

// QueryUpgradedClientStateResponse

// .google.protobuf.Any upgraded_client_state = 1 [json_name = "upgradedClientState"];
inline bool QueryUpgradedClientStateResponse::has_upgraded_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upgraded_client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryUpgradedClientStateResponse::_internal_upgraded_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.upgraded_client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryUpgradedClientStateResponse::upgraded_client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state)
  return _internal_upgraded_client_state();
}
inline void QueryUpgradedClientStateResponse::unsafe_arena_set_allocated_upgraded_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  if (upgraded_client_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedClientStateResponse::release_upgraded_client_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedClientStateResponse::unsafe_arena_release_upgraded_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedClientStateResponse::_internal_mutable_upgraded_client_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.upgraded_client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.upgraded_client_state_ = p;
  }
  return _impl_.upgraded_client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedClientStateResponse::mutable_upgraded_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_upgraded_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state)
  return _msg;
}
inline void QueryUpgradedClientStateResponse::set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  if (upgraded_client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgraded_client_state));
    if (message_arena != submessage_arena) {
      upgraded_client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgraded_client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryUpgradedClientStateResponse.upgraded_client_state)
}

// -------------------------------------------------------------------

// QueryUpgradedConsensusStateRequest

// -------------------------------------------------------------------

// QueryUpgradedConsensusStateResponse

// .google.protobuf.Any upgraded_consensus_state = 1 [json_name = "upgradedConsensusState"];
inline bool QueryUpgradedConsensusStateResponse::has_upgraded_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upgraded_consensus_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryUpgradedConsensusStateResponse::_internal_upgraded_consensus_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.upgraded_consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryUpgradedConsensusStateResponse::upgraded_consensus_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  return _internal_upgraded_consensus_state();
}
inline void QueryUpgradedConsensusStateResponse::unsafe_arena_set_allocated_upgraded_consensus_state(
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_consensus_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_consensus_state_);
  }
  _impl_.upgraded_consensus_state_ = upgraded_consensus_state;
  if (upgraded_consensus_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedConsensusStateResponse::release_upgraded_consensus_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_consensus_state_;
  _impl_.upgraded_consensus_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedConsensusStateResponse::unsafe_arena_release_upgraded_consensus_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_consensus_state_;
  _impl_.upgraded_consensus_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedConsensusStateResponse::_internal_mutable_upgraded_consensus_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.upgraded_consensus_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.upgraded_consensus_state_ = p;
  }
  return _impl_.upgraded_consensus_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryUpgradedConsensusStateResponse::mutable_upgraded_consensus_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_upgraded_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
  return _msg;
}
inline void QueryUpgradedConsensusStateResponse::set_allocated_upgraded_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_consensus_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_consensus_state_);
  }
  if (upgraded_consensus_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgraded_consensus_state));
    if (message_arena != submessage_arena) {
      upgraded_consensus_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgraded_consensus_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.upgraded_consensus_state_ = upgraded_consensus_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.QueryUpgradedConsensusStateResponse.upgraded_consensus_state)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fquery_2eproto_2epb_2eh

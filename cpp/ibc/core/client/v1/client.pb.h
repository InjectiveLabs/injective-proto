// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/client/v1/client.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/any.pb.h"
#include "cosmos/upgrade/v1beta1/upgrade.pb.h"
#include "cosmos_proto/cosmos.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fclient_2fv1_2fclient_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
namespace ibc {
namespace core {
namespace client {
namespace v1 {
class ClientConsensusStates;
struct ClientConsensusStatesDefaultTypeInternal;
extern ClientConsensusStatesDefaultTypeInternal _ClientConsensusStates_default_instance_;
class ClientUpdateProposal;
struct ClientUpdateProposalDefaultTypeInternal;
extern ClientUpdateProposalDefaultTypeInternal _ClientUpdateProposal_default_instance_;
class ConsensusStateWithHeight;
struct ConsensusStateWithHeightDefaultTypeInternal;
extern ConsensusStateWithHeightDefaultTypeInternal _ConsensusStateWithHeight_default_instance_;
class Height;
struct HeightDefaultTypeInternal;
extern HeightDefaultTypeInternal _Height_default_instance_;
class IdentifiedClientState;
struct IdentifiedClientStateDefaultTypeInternal;
extern IdentifiedClientStateDefaultTypeInternal _IdentifiedClientState_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class UpgradeProposal;
struct UpgradeProposalDefaultTypeInternal;
extern UpgradeProposalDefaultTypeInternal _UpgradeProposal_default_instance_;
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::core::client::v1::ClientConsensusStates* Arena::CreateMaybeMessage<::ibc::core::client::v1::ClientConsensusStates>(Arena*);
template <>
::ibc::core::client::v1::ClientUpdateProposal* Arena::CreateMaybeMessage<::ibc::core::client::v1::ClientUpdateProposal>(Arena*);
template <>
::ibc::core::client::v1::ConsensusStateWithHeight* Arena::CreateMaybeMessage<::ibc::core::client::v1::ConsensusStateWithHeight>(Arena*);
template <>
::ibc::core::client::v1::Height* Arena::CreateMaybeMessage<::ibc::core::client::v1::Height>(Arena*);
template <>
::ibc::core::client::v1::IdentifiedClientState* Arena::CreateMaybeMessage<::ibc::core::client::v1::IdentifiedClientState>(Arena*);
template <>
::ibc::core::client::v1::Params* Arena::CreateMaybeMessage<::ibc::core::client::v1::Params>(Arena*);
template <>
::ibc::core::client::v1::UpgradeProposal* Arena::CreateMaybeMessage<::ibc::core::client::v1::UpgradeProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace core {
namespace client {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class IdentifiedClientState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.IdentifiedClientState) */ {
 public:
  inline IdentifiedClientState() : IdentifiedClientState(nullptr) {}
  ~IdentifiedClientState() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifiedClientState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifiedClientState(const IdentifiedClientState& from);
  IdentifiedClientState(IdentifiedClientState&& from) noexcept
    : IdentifiedClientState() {
    *this = ::std::move(from);
  }

  inline IdentifiedClientState& operator=(const IdentifiedClientState& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifiedClientState& operator=(IdentifiedClientState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifiedClientState& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifiedClientState* internal_default_instance() {
    return reinterpret_cast<const IdentifiedClientState*>(
               &_IdentifiedClientState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IdentifiedClientState& a, IdentifiedClientState& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifiedClientState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifiedClientState* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifiedClientState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdentifiedClientState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdentifiedClientState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdentifiedClientState& from) {
    IdentifiedClientState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifiedClientState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.IdentifiedClientState";
  }
  protected:
  explicit IdentifiedClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kClientStateFieldNumber = 2,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  bool has_client_state() const;
  void clear_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_client_state();
  void set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_client_state();
  public:
  void unsafe_arena_set_allocated_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_client_state();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.IdentifiedClientState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::Any* client_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class ConsensusStateWithHeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.ConsensusStateWithHeight) */ {
 public:
  inline ConsensusStateWithHeight() : ConsensusStateWithHeight(nullptr) {}
  ~ConsensusStateWithHeight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusStateWithHeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusStateWithHeight(const ConsensusStateWithHeight& from);
  ConsensusStateWithHeight(ConsensusStateWithHeight&& from) noexcept
    : ConsensusStateWithHeight() {
    *this = ::std::move(from);
  }

  inline ConsensusStateWithHeight& operator=(const ConsensusStateWithHeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusStateWithHeight& operator=(ConsensusStateWithHeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusStateWithHeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusStateWithHeight* internal_default_instance() {
    return reinterpret_cast<const ConsensusStateWithHeight*>(
               &_ConsensusStateWithHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConsensusStateWithHeight& a, ConsensusStateWithHeight& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusStateWithHeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusStateWithHeight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusStateWithHeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusStateWithHeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusStateWithHeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusStateWithHeight& from) {
    ConsensusStateWithHeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusStateWithHeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.ConsensusStateWithHeight";
  }
  protected:
  explicit ConsensusStateWithHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kConsensusStateFieldNumber = 2,
  };
  // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_consensus_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_consensus_state();
  void set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_consensus_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_consensus_state();
  public:
  void unsafe_arena_set_allocated_consensus_state(
      ::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_consensus_state();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.ConsensusStateWithHeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::ibc::core::client::v1::Height* height_;
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class ClientConsensusStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.ClientConsensusStates) */ {
 public:
  inline ClientConsensusStates() : ClientConsensusStates(nullptr) {}
  ~ClientConsensusStates() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientConsensusStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientConsensusStates(const ClientConsensusStates& from);
  ClientConsensusStates(ClientConsensusStates&& from) noexcept
    : ClientConsensusStates() {
    *this = ::std::move(from);
  }

  inline ClientConsensusStates& operator=(const ClientConsensusStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientConsensusStates& operator=(ClientConsensusStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientConsensusStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientConsensusStates* internal_default_instance() {
    return reinterpret_cast<const ClientConsensusStates*>(
               &_ClientConsensusStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientConsensusStates& a, ClientConsensusStates& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientConsensusStates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientConsensusStates* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientConsensusStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientConsensusStates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientConsensusStates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientConsensusStates& from) {
    ClientConsensusStates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientConsensusStates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.ClientConsensusStates";
  }
  protected:
  explicit ClientConsensusStates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsensusStatesFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2 [json_name = "consensusStates", (.gogoproto.nullable) = false];
  int consensus_states_size() const;
  private:
  int _internal_consensus_states_size() const;

  public:
  void clear_consensus_states() ;
  ::ibc::core::client::v1::ConsensusStateWithHeight* mutable_consensus_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >*
      mutable_consensus_states();
  private:
  const ::ibc::core::client::v1::ConsensusStateWithHeight& _internal_consensus_states(int index) const;
  ::ibc::core::client::v1::ConsensusStateWithHeight* _internal_add_consensus_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>& _internal_consensus_states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>* _internal_mutable_consensus_states();
  public:
  const ::ibc::core::client::v1::ConsensusStateWithHeight& consensus_states(int index) const;
  ::ibc::core::client::v1::ConsensusStateWithHeight* add_consensus_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >&
      consensus_states() const;
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.ClientConsensusStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight > consensus_states_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class ClientUpdateProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.ClientUpdateProposal) */ {
 public:
  inline ClientUpdateProposal() : ClientUpdateProposal(nullptr) {}
  ~ClientUpdateProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientUpdateProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientUpdateProposal(const ClientUpdateProposal& from);
  ClientUpdateProposal(ClientUpdateProposal&& from) noexcept
    : ClientUpdateProposal() {
    *this = ::std::move(from);
  }

  inline ClientUpdateProposal& operator=(const ClientUpdateProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUpdateProposal& operator=(ClientUpdateProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientUpdateProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUpdateProposal* internal_default_instance() {
    return reinterpret_cast<const ClientUpdateProposal*>(
               &_ClientUpdateProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientUpdateProposal& a, ClientUpdateProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientUpdateProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUpdateProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUpdateProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientUpdateProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientUpdateProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientUpdateProposal& from) {
    ClientUpdateProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientUpdateProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.ClientUpdateProposal";
  }
  protected:
  explicit ClientUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kSubjectClientIdFieldNumber = 3,
    kSubstituteClientIdFieldNumber = 4,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string subject_client_id = 3 [json_name = "subjectClientId"];
  void clear_subject_client_id() ;
  const std::string& subject_client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subject_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_subject_client_id();
  PROTOBUF_NODISCARD std::string* release_subject_client_id();
  void set_allocated_subject_client_id(std::string* ptr);

  private:
  const std::string& _internal_subject_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subject_client_id(
      const std::string& value);
  std::string* _internal_mutable_subject_client_id();

  public:
  // string substitute_client_id = 4 [json_name = "substituteClientId"];
  void clear_substitute_client_id() ;
  const std::string& substitute_client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_substitute_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_substitute_client_id();
  PROTOBUF_NODISCARD std::string* release_substitute_client_id();
  void set_allocated_substitute_client_id(std::string* ptr);

  private:
  const std::string& _internal_substitute_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_substitute_client_id(
      const std::string& value);
  std::string* _internal_mutable_substitute_client_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.ClientUpdateProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subject_client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr substitute_client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class UpgradeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.UpgradeProposal) */ {
 public:
  inline UpgradeProposal() : UpgradeProposal(nullptr) {}
  ~UpgradeProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UpgradeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpgradeProposal(const UpgradeProposal& from);
  UpgradeProposal(UpgradeProposal&& from) noexcept
    : UpgradeProposal() {
    *this = ::std::move(from);
  }

  inline UpgradeProposal& operator=(const UpgradeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpgradeProposal& operator=(UpgradeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpgradeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpgradeProposal* internal_default_instance() {
    return reinterpret_cast<const UpgradeProposal*>(
               &_UpgradeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpgradeProposal& a, UpgradeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(UpgradeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpgradeProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpgradeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpgradeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpgradeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpgradeProposal& from) {
    UpgradeProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpgradeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.UpgradeProposal";
  }
  protected:
  explicit UpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kPlanFieldNumber = 3,
    kUpgradedClientStateFieldNumber = 4,
  };
  // string title = 1 [json_name = "title"];
  void clear_title() ;
  const std::string& title() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_title(Arg_&& arg, Args_... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* ptr);

  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(
      const std::string& value);
  std::string* _internal_mutable_title();

  public:
  // string description = 2 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* ptr);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false];
  bool has_plan() const;
  void clear_plan() ;
  const ::cosmos::upgrade::v1beta1::Plan& plan() const;
  PROTOBUF_NODISCARD ::cosmos::upgrade::v1beta1::Plan* release_plan();
  ::cosmos::upgrade::v1beta1::Plan* mutable_plan();
  void set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan);
  private:
  const ::cosmos::upgrade::v1beta1::Plan& _internal_plan() const;
  ::cosmos::upgrade::v1beta1::Plan* _internal_mutable_plan();
  public:
  void unsafe_arena_set_allocated_plan(
      ::cosmos::upgrade::v1beta1::Plan* plan);
  ::cosmos::upgrade::v1beta1::Plan* unsafe_arena_release_plan();
  // .google.protobuf.Any upgraded_client_state = 4 [json_name = "upgradedClientState"];
  bool has_upgraded_client_state() const;
  void clear_upgraded_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_upgraded_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_upgraded_client_state();
  void set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_upgraded_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_upgraded_client_state();
  public:
  void unsafe_arena_set_allocated_upgraded_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_upgraded_client_state();
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.UpgradeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::cosmos::upgrade::v1beta1::Plan* plan_;
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class Height final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.Height) */ {
 public:
  inline Height() : Height(nullptr) {}
  ~Height() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Height(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Height(const Height& from);
  Height(Height&& from) noexcept
    : Height() {
    *this = ::std::move(from);
  }

  inline Height& operator=(const Height& from) {
    CopyFrom(from);
    return *this;
  }
  inline Height& operator=(Height&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Height& default_instance() {
    return *internal_default_instance();
  }
  static inline const Height* internal_default_instance() {
    return reinterpret_cast<const Height*>(
               &_Height_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Height& a, Height& b) {
    a.Swap(&b);
  }
  inline void Swap(Height* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Height* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Height* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Height>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Height& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Height& from) {
    Height::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Height* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.Height";
  }
  protected:
  explicit Height(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionNumberFieldNumber = 1,
    kRevisionHeightFieldNumber = 2,
  };
  // uint64 revision_number = 1 [json_name = "revisionNumber"];
  void clear_revision_number() ;
  ::uint64_t revision_number() const;
  void set_revision_number(::uint64_t value);

  private:
  ::uint64_t _internal_revision_number() const;
  void _internal_set_revision_number(::uint64_t value);

  public:
  // uint64 revision_height = 2 [json_name = "revisionHeight"];
  void clear_revision_height() ;
  ::uint64_t revision_height() const;
  void set_revision_height(::uint64_t value);

  private:
  ::uint64_t _internal_revision_height() const;
  void _internal_set_revision_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.Height)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t revision_number_;
    ::uint64_t revision_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.client.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.client.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedClientsFieldNumber = 1,
  };
  // repeated string allowed_clients = 1 [json_name = "allowedClients"];
  int allowed_clients_size() const;
  private:
  int _internal_allowed_clients_size() const;

  public:
  void clear_allowed_clients() ;
  const std::string& allowed_clients(int index) const;
  std::string* mutable_allowed_clients(int index);
  void set_allowed_clients(int index, const std::string& value);
  void set_allowed_clients(int index, std::string&& value);
  void set_allowed_clients(int index, const char* value);
  void set_allowed_clients(int index, const char* value, std::size_t size);
  void set_allowed_clients(int index, absl::string_view value);
  std::string* add_allowed_clients();
  void add_allowed_clients(const std::string& value);
  void add_allowed_clients(std::string&& value);
  void add_allowed_clients(const char* value);
  void add_allowed_clients(const char* value, std::size_t size);
  void add_allowed_clients(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allowed_clients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allowed_clients();

  private:
  const std::string& _internal_allowed_clients(int index) const;
  std::string* _internal_add_allowed_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_allowed_clients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_allowed_clients();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.client.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allowed_clients_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IdentifiedClientState

// string client_id = 1 [json_name = "clientId"];
inline void IdentifiedClientState::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& IdentifiedClientState::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.IdentifiedClientState.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedClientState::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.IdentifiedClientState.client_id)
}
inline std::string* IdentifiedClientState::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.IdentifiedClientState.client_id)
  return _s;
}
inline const std::string& IdentifiedClientState::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void IdentifiedClientState::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IdentifiedClientState::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* IdentifiedClientState::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.IdentifiedClientState.client_id)
  return _impl_.client_id_.Release();
}
inline void IdentifiedClientState::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.IdentifiedClientState.client_id)
}

// .google.protobuf.Any client_state = 2 [json_name = "clientState"];
inline bool IdentifiedClientState::has_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& IdentifiedClientState::_internal_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& IdentifiedClientState::client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.IdentifiedClientState.client_state)
  return _internal_client_state();
}
inline void IdentifiedClientState::unsafe_arena_set_allocated_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  _impl_.client_state_ = client_state;
  if (client_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.IdentifiedClientState.client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* IdentifiedClientState::release_client_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* IdentifiedClientState::unsafe_arena_release_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.IdentifiedClientState.client_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* IdentifiedClientState::_internal_mutable_client_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.client_state_ = p;
  }
  return _impl_.client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* IdentifiedClientState::mutable_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.IdentifiedClientState.client_state)
  return _msg;
}
inline void IdentifiedClientState::set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  if (client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_state));
    if (message_arena != submessage_arena) {
      client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_state_ = client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.IdentifiedClientState.client_state)
}

// -------------------------------------------------------------------

// ConsensusStateWithHeight

// .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
inline bool ConsensusStateWithHeight::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline void ConsensusStateWithHeight::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::core::client::v1::Height& ConsensusStateWithHeight::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& ConsensusStateWithHeight::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ConsensusStateWithHeight.height)
  return _internal_height();
}
inline void ConsensusStateWithHeight::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.ConsensusStateWithHeight.height)
}
inline ::ibc::core::client::v1::Height* ConsensusStateWithHeight::release_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* ConsensusStateWithHeight::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ConsensusStateWithHeight.height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* ConsensusStateWithHeight::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* ConsensusStateWithHeight::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ConsensusStateWithHeight.height)
  return _msg;
}
inline void ConsensusStateWithHeight::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.height_;
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(height);
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ConsensusStateWithHeight.height)
}

// .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
inline bool ConsensusStateWithHeight::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ConsensusStateWithHeight::_internal_consensus_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ConsensusStateWithHeight::consensus_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ConsensusStateWithHeight.consensus_state)
  return _internal_consensus_state();
}
inline void ConsensusStateWithHeight::unsafe_arena_set_allocated_consensus_state(
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = consensus_state;
  if (consensus_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.ConsensusStateWithHeight.consensus_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusStateWithHeight::release_consensus_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusStateWithHeight::unsafe_arena_release_consensus_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ConsensusStateWithHeight.consensus_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusStateWithHeight::_internal_mutable_consensus_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.consensus_state_ = p;
  }
  return _impl_.consensus_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ConsensusStateWithHeight::mutable_consensus_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ConsensusStateWithHeight.consensus_state)
  return _msg;
}
inline void ConsensusStateWithHeight::set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  if (consensus_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_state));
    if (message_arena != submessage_arena) {
      consensus_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.consensus_state_ = consensus_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ConsensusStateWithHeight.consensus_state)
}

// -------------------------------------------------------------------

// ClientConsensusStates

// string client_id = 1 [json_name = "clientId"];
inline void ClientConsensusStates::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ClientConsensusStates::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientConsensusStates.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientConsensusStates::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.ClientConsensusStates.client_id)
}
inline std::string* ClientConsensusStates::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientConsensusStates.client_id)
  return _s;
}
inline const std::string& ClientConsensusStates::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void ClientConsensusStates::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientConsensusStates::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientConsensusStates::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ClientConsensusStates.client_id)
  return _impl_.client_id_.Release();
}
inline void ClientConsensusStates::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ClientConsensusStates.client_id)
}

// repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2 [json_name = "consensusStates", (.gogoproto.nullable) = false];
inline int ClientConsensusStates::_internal_consensus_states_size() const {
  return _impl_.consensus_states_.size();
}
inline int ClientConsensusStates::consensus_states_size() const {
  return _internal_consensus_states_size();
}
inline void ClientConsensusStates::clear_consensus_states() {
  _internal_mutable_consensus_states()->Clear();
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* ClientConsensusStates::mutable_consensus_states(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientConsensusStates.consensus_states)
  return _internal_mutable_consensus_states()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >*
ClientConsensusStates::mutable_consensus_states() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.client.v1.ClientConsensusStates.consensus_states)
  return _internal_mutable_consensus_states();
}
inline const ::ibc::core::client::v1::ConsensusStateWithHeight& ClientConsensusStates::_internal_consensus_states(int index) const {
  return _internal_consensus_states().Get(index);
}
inline const ::ibc::core::client::v1::ConsensusStateWithHeight& ClientConsensusStates::consensus_states(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientConsensusStates.consensus_states)
  return _internal_consensus_states(index);
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* ClientConsensusStates::_internal_add_consensus_states() {
  return _internal_mutable_consensus_states()->Add();
}
inline ::ibc::core::client::v1::ConsensusStateWithHeight* ClientConsensusStates::add_consensus_states() {
  ::ibc::core::client::v1::ConsensusStateWithHeight* _add = _internal_add_consensus_states();
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.ClientConsensusStates.consensus_states)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::client::v1::ConsensusStateWithHeight >&
ClientConsensusStates::consensus_states() const {
  // @@protoc_insertion_point(field_list:ibc.core.client.v1.ClientConsensusStates.consensus_states)
  return _internal_consensus_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>&
ClientConsensusStates::_internal_consensus_states() const {
  return _impl_.consensus_states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::client::v1::ConsensusStateWithHeight>*
ClientConsensusStates::_internal_mutable_consensus_states() {
  return &_impl_.consensus_states_;
}

// -------------------------------------------------------------------

// ClientUpdateProposal

// string title = 1 [json_name = "title"];
inline void ClientUpdateProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& ClientUpdateProposal::title() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientUpdateProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientUpdateProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.ClientUpdateProposal.title)
}
inline std::string* ClientUpdateProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientUpdateProposal.title)
  return _s;
}
inline const std::string& ClientUpdateProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void ClientUpdateProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::release_title() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ClientUpdateProposal.title)
  return _impl_.title_.Release();
}
inline void ClientUpdateProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ClientUpdateProposal.title)
}

// string description = 2 [json_name = "description"];
inline void ClientUpdateProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& ClientUpdateProposal::description() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientUpdateProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientUpdateProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.ClientUpdateProposal.description)
}
inline std::string* ClientUpdateProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientUpdateProposal.description)
  return _s;
}
inline const std::string& ClientUpdateProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void ClientUpdateProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::release_description() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ClientUpdateProposal.description)
  return _impl_.description_.Release();
}
inline void ClientUpdateProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ClientUpdateProposal.description)
}

// string subject_client_id = 3 [json_name = "subjectClientId"];
inline void ClientUpdateProposal::clear_subject_client_id() {
  _impl_.subject_client_id_.ClearToEmpty();
}
inline const std::string& ClientUpdateProposal::subject_client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientUpdateProposal.subject_client_id)
  return _internal_subject_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientUpdateProposal::set_subject_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.subject_client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.ClientUpdateProposal.subject_client_id)
}
inline std::string* ClientUpdateProposal::mutable_subject_client_id() {
  std::string* _s = _internal_mutable_subject_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientUpdateProposal.subject_client_id)
  return _s;
}
inline const std::string& ClientUpdateProposal::_internal_subject_client_id() const {
  return _impl_.subject_client_id_.Get();
}
inline void ClientUpdateProposal::_internal_set_subject_client_id(const std::string& value) {
  ;


  _impl_.subject_client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::_internal_mutable_subject_client_id() {
  ;
  return _impl_.subject_client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::release_subject_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ClientUpdateProposal.subject_client_id)
  return _impl_.subject_client_id_.Release();
}
inline void ClientUpdateProposal::set_allocated_subject_client_id(std::string* value) {
  _impl_.subject_client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.subject_client_id_.IsDefault()) {
          _impl_.subject_client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ClientUpdateProposal.subject_client_id)
}

// string substitute_client_id = 4 [json_name = "substituteClientId"];
inline void ClientUpdateProposal::clear_substitute_client_id() {
  _impl_.substitute_client_id_.ClearToEmpty();
}
inline const std::string& ClientUpdateProposal::substitute_client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.ClientUpdateProposal.substitute_client_id)
  return _internal_substitute_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientUpdateProposal::set_substitute_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.substitute_client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.ClientUpdateProposal.substitute_client_id)
}
inline std::string* ClientUpdateProposal::mutable_substitute_client_id() {
  std::string* _s = _internal_mutable_substitute_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.ClientUpdateProposal.substitute_client_id)
  return _s;
}
inline const std::string& ClientUpdateProposal::_internal_substitute_client_id() const {
  return _impl_.substitute_client_id_.Get();
}
inline void ClientUpdateProposal::_internal_set_substitute_client_id(const std::string& value) {
  ;


  _impl_.substitute_client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::_internal_mutable_substitute_client_id() {
  ;
  return _impl_.substitute_client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ClientUpdateProposal::release_substitute_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.ClientUpdateProposal.substitute_client_id)
  return _impl_.substitute_client_id_.Release();
}
inline void ClientUpdateProposal::set_allocated_substitute_client_id(std::string* value) {
  _impl_.substitute_client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.substitute_client_id_.IsDefault()) {
          _impl_.substitute_client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.ClientUpdateProposal.substitute_client_id)
}

// -------------------------------------------------------------------

// UpgradeProposal

// string title = 1 [json_name = "title"];
inline void UpgradeProposal::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& UpgradeProposal::title() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.UpgradeProposal.title)
  return _internal_title();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpgradeProposal::set_title(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.title_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.UpgradeProposal.title)
}
inline std::string* UpgradeProposal::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.UpgradeProposal.title)
  return _s;
}
inline const std::string& UpgradeProposal::_internal_title() const {
  return _impl_.title_.Get();
}
inline void UpgradeProposal::_internal_set_title(const std::string& value) {
  ;


  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* UpgradeProposal::_internal_mutable_title() {
  ;
  return _impl_.title_.Mutable( GetArenaForAllocation());
}
inline std::string* UpgradeProposal::release_title() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.UpgradeProposal.title)
  return _impl_.title_.Release();
}
inline void UpgradeProposal::set_allocated_title(std::string* value) {
  _impl_.title_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.title_.IsDefault()) {
          _impl_.title_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.UpgradeProposal.title)
}

// string description = 2 [json_name = "description"];
inline void UpgradeProposal::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& UpgradeProposal::description() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.UpgradeProposal.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpgradeProposal::set_description(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.UpgradeProposal.description)
}
inline std::string* UpgradeProposal::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.UpgradeProposal.description)
  return _s;
}
inline const std::string& UpgradeProposal::_internal_description() const {
  return _impl_.description_.Get();
}
inline void UpgradeProposal::_internal_set_description(const std::string& value) {
  ;


  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* UpgradeProposal::_internal_mutable_description() {
  ;
  return _impl_.description_.Mutable( GetArenaForAllocation());
}
inline std::string* UpgradeProposal::release_description() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.UpgradeProposal.description)
  return _impl_.description_.Release();
}
inline void UpgradeProposal::set_allocated_description(std::string* value) {
  _impl_.description_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.description_.IsDefault()) {
          _impl_.description_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.UpgradeProposal.description)
}

// .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false];
inline bool UpgradeProposal::has_plan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.plan_ != nullptr);
  return value;
}
inline const ::cosmos::upgrade::v1beta1::Plan& UpgradeProposal::_internal_plan() const {
  const ::cosmos::upgrade::v1beta1::Plan* p = _impl_.plan_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::upgrade::v1beta1::Plan&>(
      ::cosmos::upgrade::v1beta1::_Plan_default_instance_);
}
inline const ::cosmos::upgrade::v1beta1::Plan& UpgradeProposal::plan() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.UpgradeProposal.plan)
  return _internal_plan();
}
inline void UpgradeProposal::unsafe_arena_set_allocated_plan(
    ::cosmos::upgrade::v1beta1::Plan* plan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  _impl_.plan_ = plan;
  if (plan) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.UpgradeProposal.plan)
}
inline ::cosmos::upgrade::v1beta1::Plan* UpgradeProposal::release_plan() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* UpgradeProposal::unsafe_arena_release_plan() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.UpgradeProposal.plan)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::upgrade::v1beta1::Plan* temp = _impl_.plan_;
  _impl_.plan_ = nullptr;
  return temp;
}
inline ::cosmos::upgrade::v1beta1::Plan* UpgradeProposal::_internal_mutable_plan() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.plan_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::upgrade::v1beta1::Plan>(GetArenaForAllocation());
    _impl_.plan_ = p;
  }
  return _impl_.plan_;
}
inline ::cosmos::upgrade::v1beta1::Plan* UpgradeProposal::mutable_plan() {
  ::cosmos::upgrade::v1beta1::Plan* _msg = _internal_mutable_plan();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.UpgradeProposal.plan)
  return _msg;
}
inline void UpgradeProposal::set_allocated_plan(::cosmos::upgrade::v1beta1::Plan* plan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.plan_);
  }
  if (plan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plan));
    if (message_arena != submessage_arena) {
      plan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.plan_ = plan;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.UpgradeProposal.plan)
}

// .google.protobuf.Any upgraded_client_state = 4 [json_name = "upgradedClientState"];
inline bool UpgradeProposal::has_upgraded_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upgraded_client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& UpgradeProposal::_internal_upgraded_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.upgraded_client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& UpgradeProposal::upgraded_client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.UpgradeProposal.upgraded_client_state)
  return _internal_upgraded_client_state();
}
inline void UpgradeProposal::unsafe_arena_set_allocated_upgraded_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  if (upgraded_client_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.client.v1.UpgradeProposal.upgraded_client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* UpgradeProposal::release_upgraded_client_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* UpgradeProposal::unsafe_arena_release_upgraded_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.client.v1.UpgradeProposal.upgraded_client_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.upgraded_client_state_;
  _impl_.upgraded_client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* UpgradeProposal::_internal_mutable_upgraded_client_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.upgraded_client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.upgraded_client_state_ = p;
  }
  return _impl_.upgraded_client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* UpgradeProposal::mutable_upgraded_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_upgraded_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.UpgradeProposal.upgraded_client_state)
  return _msg;
}
inline void UpgradeProposal::set_allocated_upgraded_client_state(::PROTOBUF_NAMESPACE_ID::Any* upgraded_client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.upgraded_client_state_);
  }
  if (upgraded_client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upgraded_client_state));
    if (message_arena != submessage_arena) {
      upgraded_client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upgraded_client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.upgraded_client_state_ = upgraded_client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.client.v1.UpgradeProposal.upgraded_client_state)
}

// -------------------------------------------------------------------

// Height

// uint64 revision_number = 1 [json_name = "revisionNumber"];
inline void Height::clear_revision_number() {
  _impl_.revision_number_ = ::uint64_t{0u};
}
inline ::uint64_t Height::revision_number() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.Height.revision_number)
  return _internal_revision_number();
}
inline void Height::set_revision_number(::uint64_t value) {
  _internal_set_revision_number(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.Height.revision_number)
}
inline ::uint64_t Height::_internal_revision_number() const {
  return _impl_.revision_number_;
}
inline void Height::_internal_set_revision_number(::uint64_t value) {
  ;
  _impl_.revision_number_ = value;
}

// uint64 revision_height = 2 [json_name = "revisionHeight"];
inline void Height::clear_revision_height() {
  _impl_.revision_height_ = ::uint64_t{0u};
}
inline ::uint64_t Height::revision_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.Height.revision_height)
  return _internal_revision_height();
}
inline void Height::set_revision_height(::uint64_t value) {
  _internal_set_revision_height(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.Height.revision_height)
}
inline ::uint64_t Height::_internal_revision_height() const {
  return _impl_.revision_height_;
}
inline void Height::_internal_set_revision_height(::uint64_t value) {
  ;
  _impl_.revision_height_ = value;
}

// -------------------------------------------------------------------

// Params

// repeated string allowed_clients = 1 [json_name = "allowedClients"];
inline int Params::_internal_allowed_clients_size() const {
  return _impl_.allowed_clients_.size();
}
inline int Params::allowed_clients_size() const {
  return _internal_allowed_clients_size();
}
inline void Params::clear_allowed_clients() {
  _internal_mutable_allowed_clients()->Clear();
}
inline std::string* Params::add_allowed_clients() {
  std::string* _s = _internal_add_allowed_clients();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.client.v1.Params.allowed_clients)
  return _s;
}
inline const std::string& Params::allowed_clients(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.client.v1.Params.allowed_clients)
  return _internal_allowed_clients(index);
}
inline std::string* Params::mutable_allowed_clients(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.client.v1.Params.allowed_clients)
  return _internal_mutable_allowed_clients()->Mutable(index);
}
inline void Params::set_allowed_clients(int index, const std::string& value) {
  _internal_mutable_allowed_clients()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::set_allowed_clients(int index, std::string&& value) {
  _internal_mutable_allowed_clients()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::set_allowed_clients(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_allowed_clients()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::set_allowed_clients(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_allowed_clients()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::set_allowed_clients(int index, absl::string_view value) {
  _internal_mutable_allowed_clients()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::add_allowed_clients(const std::string& value) {
  _internal_mutable_allowed_clients()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::add_allowed_clients(std::string&& value) {
  _internal_mutable_allowed_clients()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::add_allowed_clients(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_allowed_clients()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::add_allowed_clients(const char* value, std::size_t size) {
  _internal_mutable_allowed_clients()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.core.client.v1.Params.allowed_clients)
}
inline void Params::add_allowed_clients(absl::string_view value) {
  _internal_mutable_allowed_clients()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.core.client.v1.Params.allowed_clients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Params::allowed_clients() const {
  // @@protoc_insertion_point(field_list:ibc.core.client.v1.Params.allowed_clients)
  return _internal_allowed_clients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Params::mutable_allowed_clients() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.client.v1.Params.allowed_clients)
  return _internal_mutable_allowed_clients();
}
inline const std::string& Params::_internal_allowed_clients(int index) const {
  return _internal_allowed_clients().Get(index);
}
inline std::string* Params::_internal_add_allowed_clients() {
  return _internal_mutable_allowed_clients()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Params::_internal_allowed_clients() const {
  return _impl_.allowed_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Params::_internal_mutable_allowed_clients() {
  return &_impl_.allowed_clients_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_2epb_2eh

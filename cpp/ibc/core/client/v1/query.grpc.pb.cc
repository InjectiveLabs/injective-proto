// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/client/v1/query.proto

#include "ibc/core/client/v1/query.pb.h"
#include "ibc/core/client/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace core {
namespace client {
namespace v1 {

static const char* Query_method_names[] = {
  "/ibc.core.client.v1.Query/ClientState",
  "/ibc.core.client.v1.Query/ClientStates",
  "/ibc.core.client.v1.Query/ConsensusState",
  "/ibc.core.client.v1.Query/ConsensusStates",
  "/ibc.core.client.v1.Query/ConsensusStateHeights",
  "/ibc.core.client.v1.Query/ClientStatus",
  "/ibc.core.client.v1.Query/ClientParams",
  "/ibc.core.client.v1.Query/UpgradedClientState",
  "/ibc.core.client.v1.Query/UpgradedConsensusState",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ClientState_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientStates_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsensusState_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsensusStates_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsensusStateHeights_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientStatus_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientParams_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpgradedClientState_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpgradedConsensusState_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::ibc::core::client::v1::QueryClientStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientState_, context, request, response);
}

void Query::Stub::async::ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientState_, context, request, response, std::move(f));
}

void Query::Stub::async::ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>* Query::Stub::PrepareAsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryClientStateResponse, ::ibc::core::client::v1::QueryClientStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>* Query::Stub::AsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::ibc::core::client::v1::QueryClientStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientStates_, context, request, response);
}

void Query::Stub::async::ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientStates_, context, request, response, std::move(f));
}

void Query::Stub::async::ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>* Query::Stub::PrepareAsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryClientStatesResponse, ::ibc::core::client::v1::QueryClientStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>* Query::Stub::AsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::ibc::core::client::v1::QueryConsensusStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsensusState_, context, request, response);
}

void Query::Stub::async::ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusState_, context, request, response, std::move(f));
}

void Query::Stub::async::ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>* Query::Stub::PrepareAsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryConsensusStateResponse, ::ibc::core::client::v1::QueryConsensusStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsensusState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>* Query::Stub::AsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsensusStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsensusStates_, context, request, response);
}

void Query::Stub::async::ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusStates_, context, request, response, std::move(f));
}

void Query::Stub::async::ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusStates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>* Query::Stub::PrepareAsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryConsensusStatesResponse, ::ibc::core::client::v1::QueryConsensusStatesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsensusStates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>* Query::Stub::AsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsensusStatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConsensusStateHeights_, context, request, response);
}

void Query::Stub::async::ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusStateHeights_, context, request, response, std::move(f));
}

void Query::Stub::async::ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConsensusStateHeights_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* Query::Stub::PrepareAsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse, ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConsensusStateHeights_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* Query::Stub::AsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsensusStateHeightsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::ibc::core::client::v1::QueryClientStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientStatus_, context, request, response);
}

void Query::Stub::async::ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientStatus_, context, request, response, std::move(f));
}

void Query::Stub::async::ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>* Query::Stub::PrepareAsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryClientStatusResponse, ::ibc::core::client::v1::QueryClientStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>* Query::Stub::AsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::ibc::core::client::v1::QueryClientParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientParams_, context, request, response);
}

void Query::Stub::async::ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientParams_, context, request, response, std::move(f));
}

void Query::Stub::async::ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>* Query::Stub::PrepareAsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryClientParamsResponse, ::ibc::core::client::v1::QueryClientParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>* Query::Stub::AsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpgradedClientState_, context, request, response);
}

void Query::Stub::async::UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradedClientState_, context, request, response, std::move(f));
}

void Query::Stub::async::UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradedClientState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* Query::Stub::PrepareAsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryUpgradedClientStateResponse, ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpgradedClientState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* Query::Stub::AsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpgradedClientStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpgradedConsensusState_, context, request, response);
}

void Query::Stub::async::UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradedConsensusState_, context, request, response, std::move(f));
}

void Query::Stub::async::UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradedConsensusState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* Query::Stub::PrepareAsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse, ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpgradedConsensusState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* Query::Stub::AsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpgradedConsensusStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryClientStateRequest* req,
             ::ibc::core::client::v1::QueryClientStateResponse* resp) {
               return service->ClientState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryClientStatesRequest* req,
             ::ibc::core::client::v1::QueryClientStatesResponse* resp) {
               return service->ClientStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryConsensusStateRequest* req,
             ::ibc::core::client::v1::QueryConsensusStateResponse* resp) {
               return service->ConsensusState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryConsensusStatesRequest* req,
             ::ibc::core::client::v1::QueryConsensusStatesResponse* resp) {
               return service->ConsensusStates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* req,
             ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* resp) {
               return service->ConsensusStateHeights(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryClientStatusRequest* req,
             ::ibc::core::client::v1::QueryClientStatusResponse* resp) {
               return service->ClientStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryClientParamsRequest* req,
             ::ibc::core::client::v1::QueryClientParamsResponse* resp) {
               return service->ClientParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* req,
             ::ibc::core::client::v1::QueryUpgradedClientStateResponse* resp) {
               return service->UpgradedClientState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* req,
             ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* resp) {
               return service->UpgradedConsensusState(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::ClientState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ClientStates(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConsensusState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConsensusStates(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConsensusStateHeights(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ClientStatus(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ClientParams(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::UpgradedClientState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::UpgradedConsensusState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace core
}  // namespace client
}  // namespace v1


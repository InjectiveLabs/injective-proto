// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/client/v1/client.proto

#include "ibc/core/client/v1/client.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace client {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR IdentifiedClientState::IdentifiedClientState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_state_)*/nullptr} {}
struct IdentifiedClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentifiedClientStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentifiedClientStateDefaultTypeInternal() {}
  union {
    IdentifiedClientState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentifiedClientStateDefaultTypeInternal _IdentifiedClientState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConsensusStateWithHeight::ConsensusStateWithHeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.height_)*/nullptr
  , /*decltype(_impl_.consensus_state_)*/nullptr} {}
struct ConsensusStateWithHeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConsensusStateWithHeightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConsensusStateWithHeightDefaultTypeInternal() {}
  union {
    ConsensusStateWithHeight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConsensusStateWithHeightDefaultTypeInternal _ConsensusStateWithHeight_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientConsensusStates::ClientConsensusStates(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.consensus_states_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientConsensusStatesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientConsensusStatesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientConsensusStatesDefaultTypeInternal() {}
  union {
    ClientConsensusStates _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientConsensusStatesDefaultTypeInternal _ClientConsensusStates_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientUpdateProposal::ClientUpdateProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subject_client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.substitute_client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientUpdateProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientUpdateProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientUpdateProposalDefaultTypeInternal() {}
  union {
    ClientUpdateProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientUpdateProposalDefaultTypeInternal _ClientUpdateProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR UpgradeProposal::UpgradeProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.title_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.plan_)*/nullptr
  , /*decltype(_impl_.upgraded_client_state_)*/nullptr} {}
struct UpgradeProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpgradeProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpgradeProposalDefaultTypeInternal() {}
  union {
    UpgradeProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpgradeProposalDefaultTypeInternal _UpgradeProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Height::Height(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.revision_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.revision_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeightDefaultTypeInternal() {}
  union {
    Height _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeightDefaultTypeInternal _Height_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allowed_clients_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fclient_2fv1_2fclient_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fclient_2fv1_2fclient_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::IdentifiedClientState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::IdentifiedClientState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::IdentifiedClientState, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::IdentifiedClientState, _impl_.client_state_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ConsensusStateWithHeight, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ConsensusStateWithHeight, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ConsensusStateWithHeight, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ConsensusStateWithHeight, _impl_.consensus_state_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientConsensusStates, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientConsensusStates, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientConsensusStates, _impl_.consensus_states_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientUpdateProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientUpdateProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientUpdateProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientUpdateProposal, _impl_.subject_client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::ClientUpdateProposal, _impl_.substitute_client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _impl_.title_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _impl_.plan_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::UpgradeProposal, _impl_.upgraded_client_state_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::Height, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::Height, _impl_.revision_number_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::Height, _impl_.revision_height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::client::v1::Params, _impl_.allowed_clients_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::ibc::core::client::v1::IdentifiedClientState)},
        { 12, 22, -1, sizeof(::ibc::core::client::v1::ConsensusStateWithHeight)},
        { 24, -1, -1, sizeof(::ibc::core::client::v1::ClientConsensusStates)},
        { 34, -1, -1, sizeof(::ibc::core::client::v1::ClientUpdateProposal)},
        { 46, 58, -1, sizeof(::ibc::core::client::v1::UpgradeProposal)},
        { 62, -1, -1, sizeof(::ibc::core::client::v1::Height)},
        { 72, -1, -1, sizeof(::ibc::core::client::v1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::client::v1::_IdentifiedClientState_default_instance_._instance,
    &::ibc::core::client::v1::_ConsensusStateWithHeight_default_instance_._instance,
    &::ibc::core::client::v1::_ClientConsensusStates_default_instance_._instance,
    &::ibc::core::client::v1::_ClientUpdateProposal_default_instance_._instance,
    &::ibc::core::client::v1::_UpgradeProposal_default_instance_._instance,
    &::ibc::core::client::v1::_Height_default_instance_._instance,
    &::ibc::core::client::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037ibc/core/client/v1/client.proto\022\022ibc.c"
    "ore.client.v1\032\024gogoproto/gogo.proto\032\031goo"
    "gle/protobuf/any.proto\032$cosmos/upgrade/v"
    "1beta1/upgrade.proto\032\031cosmos_proto/cosmo"
    "s.proto\"m\n\025IdentifiedClientState\022\033\n\tclie"
    "nt_id\030\001 \001(\tR\010clientId\0227\n\014client_state\030\002 "
    "\001(\0132\024.google.protobuf.AnyR\013clientState\"\223"
    "\001\n\030ConsensusStateWithHeight\0228\n\006height\030\001 "
    "\001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037\000R\006h"
    "eight\022=\n\017consensus_state\030\002 \001(\0132\024.google."
    "protobuf.AnyR\016consensusState\"\223\001\n\025ClientC"
    "onsensusStates\022\033\n\tclient_id\030\001 \001(\tR\010clien"
    "tId\022]\n\020consensus_states\030\002 \003(\0132,.ibc.core"
    ".client.v1.ConsensusStateWithHeightB\004\310\336\037"
    "\000R\017consensusStates\"\320\001\n\024ClientUpdatePropo"
    "sal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013description"
    "\030\002 \001(\tR\013description\022*\n\021subject_client_id"
    "\030\003 \001(\tR\017subjectClientId\0220\n\024substitute_cl"
    "ient_id\030\004 \001(\tR\022substituteClientId:\"\210\240\037\000\312"
    "\264-\032cosmos.gov.v1beta1.Content\"\367\001\n\017Upgrad"
    "eProposal\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013descr"
    "iption\030\002 \001(\tR\013description\0226\n\004plan\030\003 \001(\0132"
    "\034.cosmos.upgrade.v1beta1.PlanB\004\310\336\037\000R\004pla"
    "n\022H\n\025upgraded_client_state\030\004 \001(\0132\024.googl"
    "e.protobuf.AnyR\023upgradedClientState:*\210\240\037"
    "\000\230\240\037\000\350\240\037\001\312\264-\032cosmos.gov.v1beta1.Content\""
    "d\n\006Height\022\'\n\017revision_number\030\001 \001(\004R\016revi"
    "sionNumber\022\'\n\017revision_height\030\002 \001(\004R\016rev"
    "isionHeight:\010\210\240\037\000\230\240\037\000\"1\n\006Params\022\'\n\017allow"
    "ed_clients\030\001 \003(\tR\016allowedClientsB\312\001\n\026com"
    ".ibc.core.client.v1B\013ClientProtoP\001Z8gith"
    "ub.com/cosmos/ibc-go/v7/modules/core/02-"
    "client/types\242\002\003ICC\252\002\022Ibc.Core.Client.V1\312"
    "\002\022Ibc\\Core\\Client\\V1\342\002\036Ibc\\Core\\Client\\V"
    "1\\GPBMetadata\352\002\025Ibc::Core::Client::V1b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fupgrade_2fv1beta1_2fupgrade_2eproto,
        &::descriptor_table_cosmos_5fproto_2fcosmos_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto = {
    false,
    false,
    1405,
    descriptor_table_protodef_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
    "ibc/core/client/v1/client.proto",
    &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
    descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_deps,
    4,
    7,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fclient_2fv1_2fclient_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fclient_2fv1_2fclient_2eproto(&descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto);
namespace ibc {
namespace core {
namespace client {
namespace v1 {
// ===================================================================

class IdentifiedClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifiedClientState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IdentifiedClientState, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& client_state(const IdentifiedClientState* msg);
  static void set_has_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
IdentifiedClientState::_Internal::client_state(const IdentifiedClientState* msg) {
  return *msg->_impl_.client_state_;
}
void IdentifiedClientState::clear_client_state() {
  if (_impl_.client_state_ != nullptr) _impl_.client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IdentifiedClientState::IdentifiedClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.IdentifiedClientState)
}
IdentifiedClientState::IdentifiedClientState(const IdentifiedClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentifiedClientState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.client_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.client_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.IdentifiedClientState)
}

inline void IdentifiedClientState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.client_state_){nullptr}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdentifiedClientState::~IdentifiedClientState() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.IdentifiedClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentifiedClientState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.client_state_;
}

void IdentifiedClientState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentifiedClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.IdentifiedClientState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.client_state_ != nullptr);
    _impl_.client_state_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifiedClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.IdentifiedClientState.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IdentifiedClientState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.IdentifiedClientState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.IdentifiedClientState.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_state(this),
        _Internal::client_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.IdentifiedClientState)
  return target;
}

::size_t IdentifiedClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.IdentifiedClientState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // .google.protobuf.Any client_state = 2 [json_name = "clientState"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifiedClientState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentifiedClientState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifiedClientState::GetClassData() const { return &_class_data_; }


void IdentifiedClientState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentifiedClientState*>(&to_msg);
  auto& from = static_cast<const IdentifiedClientState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.IdentifiedClientState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_client_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifiedClientState::CopyFrom(const IdentifiedClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.IdentifiedClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifiedClientState::IsInitialized() const {
  return true;
}

void IdentifiedClientState::InternalSwap(IdentifiedClientState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  swap(_impl_.client_state_, other->_impl_.client_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifiedClientState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[0]);
}
// ===================================================================

class ConsensusStateWithHeight::_Internal {
 public:
  using HasBits = decltype(std::declval<ConsensusStateWithHeight>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConsensusStateWithHeight, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& height(const ConsensusStateWithHeight* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state(const ConsensusStateWithHeight* msg);
  static void set_has_consensus_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::client::v1::Height&
ConsensusStateWithHeight::_Internal::height(const ConsensusStateWithHeight* msg) {
  return *msg->_impl_.height_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
ConsensusStateWithHeight::_Internal::consensus_state(const ConsensusStateWithHeight* msg) {
  return *msg->_impl_.consensus_state_;
}
void ConsensusStateWithHeight::clear_consensus_state() {
  if (_impl_.consensus_state_ != nullptr) _impl_.consensus_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ConsensusStateWithHeight::ConsensusStateWithHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.ConsensusStateWithHeight)
}
ConsensusStateWithHeight::ConsensusStateWithHeight(const ConsensusStateWithHeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConsensusStateWithHeight* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_){nullptr}
    , decltype(_impl_.consensus_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.consensus_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.consensus_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.ConsensusStateWithHeight)
}

inline void ConsensusStateWithHeight::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_){nullptr}
    , decltype(_impl_.consensus_state_){nullptr}
  };
}

ConsensusStateWithHeight::~ConsensusStateWithHeight() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.ConsensusStateWithHeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConsensusStateWithHeight::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.height_;
  if (this != internal_default_instance()) delete _impl_.consensus_state_;
}

void ConsensusStateWithHeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConsensusStateWithHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.ConsensusStateWithHeight)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.height_ != nullptr);
      _impl_.height_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.consensus_state_ != nullptr);
      _impl_.consensus_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConsensusStateWithHeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConsensusStateWithHeight::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.ConsensusStateWithHeight)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consensus_state(this),
        _Internal::consensus_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.ConsensusStateWithHeight)
  return target;
}

::size_t ConsensusStateWithHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.ConsensusStateWithHeight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_);
    }

    // .google.protobuf.Any consensus_state = 2 [json_name = "consensusState"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consensus_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConsensusStateWithHeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConsensusStateWithHeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConsensusStateWithHeight::GetClassData() const { return &_class_data_; }


void ConsensusStateWithHeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConsensusStateWithHeight*>(&to_msg);
  auto& from = static_cast<const ConsensusStateWithHeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.ConsensusStateWithHeight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_height());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_consensus_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_consensus_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConsensusStateWithHeight::CopyFrom(const ConsensusStateWithHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.ConsensusStateWithHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConsensusStateWithHeight::IsInitialized() const {
  return true;
}

void ConsensusStateWithHeight::InternalSwap(ConsensusStateWithHeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConsensusStateWithHeight, _impl_.consensus_state_)
      + sizeof(ConsensusStateWithHeight::_impl_.consensus_state_)
      - PROTOBUF_FIELD_OFFSET(ConsensusStateWithHeight, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConsensusStateWithHeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[1]);
}
// ===================================================================

class ClientConsensusStates::_Internal {
 public:
};

ClientConsensusStates::ClientConsensusStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.ClientConsensusStates)
}
ClientConsensusStates::ClientConsensusStates(const ClientConsensusStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientConsensusStates* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.consensus_states_){from._impl_.consensus_states_}
    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.ClientConsensusStates)
}

inline void ClientConsensusStates::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.consensus_states_){arena}
    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientConsensusStates::~ClientConsensusStates() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.ClientConsensusStates)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientConsensusStates::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_consensus_states()->~RepeatedPtrField();
  _impl_.client_id_.Destroy();
}

void ClientConsensusStates::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientConsensusStates::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.ClientConsensusStates)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_consensus_states()->Clear();
  _impl_.client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientConsensusStates::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.ClientConsensusStates.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2 [json_name = "consensusStates", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consensus_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientConsensusStates::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.ClientConsensusStates)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.ClientConsensusStates.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2 [json_name = "consensusStates", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consensus_states_size()); i < n; i++) {
    const auto& repfield = this->_internal_consensus_states(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.ClientConsensusStates)
  return target;
}

::size_t ClientConsensusStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.ClientConsensusStates)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.client.v1.ConsensusStateWithHeight consensus_states = 2 [json_name = "consensusStates", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_consensus_states_size();
  for (const auto& msg : this->_internal_consensus_states()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientConsensusStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientConsensusStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientConsensusStates::GetClassData() const { return &_class_data_; }


void ClientConsensusStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientConsensusStates*>(&to_msg);
  auto& from = static_cast<const ClientConsensusStates&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.ClientConsensusStates)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_consensus_states()->MergeFrom(from._internal_consensus_states());
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientConsensusStates::CopyFrom(const ClientConsensusStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.ClientConsensusStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientConsensusStates::IsInitialized() const {
  return true;
}

void ClientConsensusStates::InternalSwap(ClientConsensusStates* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_consensus_states()->InternalSwap(other->_internal_mutable_consensus_states());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientConsensusStates::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[2]);
}
// ===================================================================

class ClientUpdateProposal::_Internal {
 public:
};

ClientUpdateProposal::ClientUpdateProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.ClientUpdateProposal)
}
ClientUpdateProposal::ClientUpdateProposal(const ClientUpdateProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientUpdateProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.subject_client_id_) {}

    , decltype(_impl_.substitute_client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _impl_.subject_client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subject_client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subject_client_id().empty()) {
    _this->_impl_.subject_client_id_.Set(from._internal_subject_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.substitute_client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.substitute_client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_substitute_client_id().empty()) {
    _this->_impl_.substitute_client_id_.Set(from._internal_substitute_client_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.ClientUpdateProposal)
}

inline void ClientUpdateProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.subject_client_id_) {}

    , decltype(_impl_.substitute_client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.subject_client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.subject_client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.substitute_client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.substitute_client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientUpdateProposal::~ClientUpdateProposal() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.ClientUpdateProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientUpdateProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  _impl_.subject_client_id_.Destroy();
  _impl_.substitute_client_id_.Destroy();
}

void ClientUpdateProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientUpdateProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.ClientUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.subject_client_id_.ClearToEmpty();
  _impl_.substitute_client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientUpdateProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.ClientUpdateProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.ClientUpdateProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string subject_client_id = 3 [json_name = "subjectClientId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subject_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.ClientUpdateProposal.subject_client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string substitute_client_id = 4 [json_name = "substituteClientId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_substitute_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.ClientUpdateProposal.substitute_client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientUpdateProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.ClientUpdateProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.ClientUpdateProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.ClientUpdateProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string subject_client_id = 3 [json_name = "subjectClientId"];
  if (!this->_internal_subject_client_id().empty()) {
    const std::string& _s = this->_internal_subject_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.ClientUpdateProposal.subject_client_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string substitute_client_id = 4 [json_name = "substituteClientId"];
  if (!this->_internal_substitute_client_id().empty()) {
    const std::string& _s = this->_internal_substitute_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.ClientUpdateProposal.substitute_client_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.ClientUpdateProposal)
  return target;
}

::size_t ClientUpdateProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.ClientUpdateProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // string subject_client_id = 3 [json_name = "subjectClientId"];
  if (!this->_internal_subject_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_subject_client_id());
  }

  // string substitute_client_id = 4 [json_name = "substituteClientId"];
  if (!this->_internal_substitute_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_substitute_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientUpdateProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientUpdateProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientUpdateProposal::GetClassData() const { return &_class_data_; }


void ClientUpdateProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientUpdateProposal*>(&to_msg);
  auto& from = static_cast<const ClientUpdateProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.ClientUpdateProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_subject_client_id().empty()) {
    _this->_internal_set_subject_client_id(from._internal_subject_client_id());
  }
  if (!from._internal_substitute_client_id().empty()) {
    _this->_internal_set_substitute_client_id(from._internal_substitute_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientUpdateProposal::CopyFrom(const ClientUpdateProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.ClientUpdateProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientUpdateProposal::IsInitialized() const {
  return true;
}

void ClientUpdateProposal::InternalSwap(ClientUpdateProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.subject_client_id_, lhs_arena,
                                       &other->_impl_.subject_client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.substitute_client_id_, lhs_arena,
                                       &other->_impl_.substitute_client_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientUpdateProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[3]);
}
// ===================================================================

class UpgradeProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<UpgradeProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpgradeProposal, _impl_._has_bits_);
  static const ::cosmos::upgrade::v1beta1::Plan& plan(const UpgradeProposal* msg);
  static void set_has_plan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& upgraded_client_state(const UpgradeProposal* msg);
  static void set_has_upgraded_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::upgrade::v1beta1::Plan&
UpgradeProposal::_Internal::plan(const UpgradeProposal* msg) {
  return *msg->_impl_.plan_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
UpgradeProposal::_Internal::upgraded_client_state(const UpgradeProposal* msg) {
  return *msg->_impl_.upgraded_client_state_;
}
void UpgradeProposal::clear_plan() {
  if (_impl_.plan_ != nullptr) _impl_.plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UpgradeProposal::clear_upgraded_client_state() {
  if (_impl_.upgraded_client_state_ != nullptr) _impl_.upgraded_client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UpgradeProposal::UpgradeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.UpgradeProposal)
}
UpgradeProposal::UpgradeProposal(const UpgradeProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpgradeProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.plan_){nullptr}
    , decltype(_impl_.upgraded_client_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.plan_ = new ::cosmos::upgrade::v1beta1::Plan(*from._impl_.plan_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.upgraded_client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.upgraded_client_state_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.UpgradeProposal)
}

inline void UpgradeProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.title_) {}

    , decltype(_impl_.description_) {}

    , decltype(_impl_.plan_){nullptr}
    , decltype(_impl_.upgraded_client_state_){nullptr}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.title_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpgradeProposal::~UpgradeProposal() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.UpgradeProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpgradeProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plan_;
  if (this != internal_default_instance()) delete _impl_.upgraded_client_state_;
}

void UpgradeProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpgradeProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.UpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.plan_ != nullptr);
      _impl_.plan_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.upgraded_client_state_ != nullptr);
      _impl_.upgraded_client_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpgradeProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.UpgradeProposal.title"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.UpgradeProposal.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_plan(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any upgraded_client_state = 4 [json_name = "upgradedClientState"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_upgraded_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpgradeProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.UpgradeProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    const std::string& _s = this->_internal_title();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.UpgradeProposal.title");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.UpgradeProposal.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::plan(this),
        _Internal::plan(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any upgraded_client_state = 4 [json_name = "upgradedClientState"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::upgraded_client_state(this),
        _Internal::upgraded_client_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.UpgradeProposal)
  return target;
}

::size_t UpgradeProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.UpgradeProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_title());
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.upgrade.v1beta1.Plan plan = 3 [json_name = "plan", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.plan_);
    }

    // .google.protobuf.Any upgraded_client_state = 4 [json_name = "upgradedClientState"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.upgraded_client_state_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpgradeProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpgradeProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpgradeProposal::GetClassData() const { return &_class_data_; }


void UpgradeProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpgradeProposal*>(&to_msg);
  auto& from = static_cast<const UpgradeProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.UpgradeProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_plan()->::cosmos::upgrade::v1beta1::Plan::MergeFrom(
          from._internal_plan());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_upgraded_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_upgraded_client_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpgradeProposal::CopyFrom(const UpgradeProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.UpgradeProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeProposal::IsInitialized() const {
  return true;
}

void UpgradeProposal::InternalSwap(UpgradeProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.title_, lhs_arena,
                                       &other->_impl_.title_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpgradeProposal, _impl_.upgraded_client_state_)
      + sizeof(UpgradeProposal::_impl_.upgraded_client_state_)
      - PROTOBUF_FIELD_OFFSET(UpgradeProposal, _impl_.plan_)>(
          reinterpret_cast<char*>(&_impl_.plan_),
          reinterpret_cast<char*>(&other->_impl_.plan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpgradeProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[4]);
}
// ===================================================================

class Height::_Internal {
 public:
};

Height::Height(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.Height)
}
Height::Height(const Height& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.Height)
}

inline void Height::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.revision_number_) { ::uint64_t{0u} }

    , decltype(_impl_.revision_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Height::~Height() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.Height)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Height::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Height::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Height::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.Height)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.revision_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.revision_height_) -
      reinterpret_cast<char*>(&_impl_.revision_number_)) + sizeof(_impl_.revision_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Height::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 revision_number = 1 [json_name = "revisionNumber"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.revision_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 revision_height = 2 [json_name = "revisionHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.revision_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Height::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.Height)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 revision_number = 1 [json_name = "revisionNumber"];
  if (this->_internal_revision_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_revision_number(), target);
  }

  // uint64 revision_height = 2 [json_name = "revisionHeight"];
  if (this->_internal_revision_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_revision_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.Height)
  return target;
}

::size_t Height::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.Height)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 revision_number = 1 [json_name = "revisionNumber"];
  if (this->_internal_revision_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_revision_number());
  }

  // uint64 revision_height = 2 [json_name = "revisionHeight"];
  if (this->_internal_revision_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_revision_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Height::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Height::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Height::GetClassData() const { return &_class_data_; }


void Height::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Height*>(&to_msg);
  auto& from = static_cast<const Height&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.Height)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_revision_number() != 0) {
    _this->_internal_set_revision_number(from._internal_revision_number());
  }
  if (from._internal_revision_height() != 0) {
    _this->_internal_set_revision_height(from._internal_revision_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Height::CopyFrom(const Height& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.Height)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Height::IsInitialized() const {
  return true;
}

void Height::InternalSwap(Height* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Height, _impl_.revision_height_)
      + sizeof(Height::_impl_.revision_height_)
      - PROTOBUF_FIELD_OFFSET(Height, _impl_.revision_number_)>(
          reinterpret_cast<char*>(&_impl_.revision_number_),
          reinterpret_cast<char*>(&other->_impl_.revision_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Height::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[5]);
}
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.client.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Params* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allowed_clients_){from._impl_.allowed_clients_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.client.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.allowed_clients_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:ibc.core.client.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_allowed_clients()->~RepeatedPtrField();
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.client.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_allowed_clients()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string allowed_clients = 1 [json_name = "allowedClients"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_clients();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.client.v1.Params.allowed_clients"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.client.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_clients = 1 [json_name = "allowedClients"];
  for (int i = 0, n = this->_internal_allowed_clients_size(); i < n; ++i) {
    const auto& s = this->_internal_allowed_clients(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.client.v1.Params.allowed_clients");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.client.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.client.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_clients = 1 [json_name = "allowedClients"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_allowed_clients().size());
  for (int i = 0, n = _internal_allowed_clients().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_allowed_clients().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.client.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_allowed_clients()->MergeFrom(from._internal_allowed_clients());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.client.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_allowed_clients()->InternalSwap(
      other->_internal_mutable_allowed_clients());
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_getter, &descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto_once,
      file_level_metadata_ibc_2fcore_2fclient_2fv1_2fclient_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::IdentifiedClientState*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::IdentifiedClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::IdentifiedClientState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::ConsensusStateWithHeight*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::ConsensusStateWithHeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::ConsensusStateWithHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::ClientConsensusStates*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::ClientConsensusStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::ClientConsensusStates >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::ClientUpdateProposal*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::ClientUpdateProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::ClientUpdateProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::UpgradeProposal*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::UpgradeProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::UpgradeProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::Height*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::Height >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::Height >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::client::v1::Params*
Arena::CreateMaybeMessage< ::ibc::core::client::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::client::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

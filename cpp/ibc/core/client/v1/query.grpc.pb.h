// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/client/v1/query.proto
#ifndef GRPC_ibc_2fcore_2fclient_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_ibc_2fcore_2fclient_2fv1_2fquery_2eproto__INCLUDED

#include "ibc/core/client/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace core {
namespace client {
namespace v1 {

// Query provides defines the gRPC querier service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.core.client.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ClientState queries an IBC light client.
    virtual ::grpc::Status ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::ibc::core::client::v1::QueryClientStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>> AsyncClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>>(AsyncClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>> PrepareAsyncClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>>(PrepareAsyncClientStateRaw(context, request, cq));
    }
    // ClientStates queries all the IBC light clients of a chain.
    virtual ::grpc::Status ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::ibc::core::client::v1::QueryClientStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>> AsyncClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>>(AsyncClientStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>> PrepareAsyncClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>>(PrepareAsyncClientStatesRaw(context, request, cq));
    }
    // ConsensusState queries a consensus state associated with a client state at
    // a given height.
    virtual ::grpc::Status ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::ibc::core::client::v1::QueryConsensusStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>> AsyncConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>>(AsyncConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>> PrepareAsyncConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>>(PrepareAsyncConsensusStateRaw(context, request, cq));
    }
    // ConsensusStates queries all the consensus state associated with a given
    // client.
    virtual ::grpc::Status ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>> AsyncConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>>(AsyncConsensusStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>> PrepareAsyncConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>>(PrepareAsyncConsensusStatesRaw(context, request, cq));
    }
    // ConsensusStateHeights queries the height of every consensus states associated with a given client.
    virtual ::grpc::Status ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>> AsyncConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>>(AsyncConsensusStateHeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>> PrepareAsyncConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>>(PrepareAsyncConsensusStateHeightsRaw(context, request, cq));
    }
    // Status queries the status of an IBC client.
    virtual ::grpc::Status ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::ibc::core::client::v1::QueryClientStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>> AsyncClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>>(AsyncClientStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>> PrepareAsyncClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>>(PrepareAsyncClientStatusRaw(context, request, cq));
    }
    // ClientParams queries all parameters of the ibc client submodule.
    virtual ::grpc::Status ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::ibc::core::client::v1::QueryClientParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>> AsyncClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>>(AsyncClientParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>> PrepareAsyncClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>>(PrepareAsyncClientParamsRaw(context, request, cq));
    }
    // UpgradedClientState queries an Upgraded IBC light client.
    virtual ::grpc::Status UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>> AsyncUpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>>(AsyncUpgradedClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>> PrepareAsyncUpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>>(PrepareAsyncUpgradedClientStateRaw(context, request, cq));
    }
    // UpgradedConsensusState queries an Upgraded IBC consensus state.
    virtual ::grpc::Status UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>> AsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>>(AsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>> PrepareAsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>>(PrepareAsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ClientState queries an IBC light client.
      virtual void ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ClientStates queries all the IBC light clients of a chain.
      virtual void ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ConsensusState queries a consensus state associated with a client state at
      // a given height.
      virtual void ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ConsensusStates queries all the consensus state associated with a given
      // client.
      virtual void ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ConsensusStateHeights queries the height of every consensus states associated with a given client.
      virtual void ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Status queries the status of an IBC client.
      virtual void ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ClientParams queries all parameters of the ibc client submodule.
      virtual void ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpgradedClientState queries an Upgraded IBC light client.
      virtual void UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UpgradedConsensusState queries an Upgraded IBC consensus state.
      virtual void UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>* AsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStateResponse>* PrepareAsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>* AsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatesResponse>* PrepareAsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>* AsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateResponse>* PrepareAsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>* AsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStatesResponse>* PrepareAsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* AsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* PrepareAsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>* AsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientStatusResponse>* PrepareAsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>* AsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryClientParamsResponse>* PrepareAsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* AsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* PrepareAsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* AsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* PrepareAsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::ibc::core::client::v1::QueryClientStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>> AsyncClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>>(AsyncClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>> PrepareAsyncClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>>(PrepareAsyncClientStateRaw(context, request, cq));
    }
    ::grpc::Status ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::ibc::core::client::v1::QueryClientStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>> AsyncClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>>(AsyncClientStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>> PrepareAsyncClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>>(PrepareAsyncClientStatesRaw(context, request, cq));
    }
    ::grpc::Status ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::ibc::core::client::v1::QueryConsensusStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>> AsyncConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>>(AsyncConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>> PrepareAsyncConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>>(PrepareAsyncConsensusStateRaw(context, request, cq));
    }
    ::grpc::Status ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>> AsyncConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>>(AsyncConsensusStatesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>> PrepareAsyncConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>>(PrepareAsyncConsensusStatesRaw(context, request, cq));
    }
    ::grpc::Status ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>> AsyncConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>>(AsyncConsensusStateHeightsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>> PrepareAsyncConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>>(PrepareAsyncConsensusStateHeightsRaw(context, request, cq));
    }
    ::grpc::Status ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::ibc::core::client::v1::QueryClientStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>> AsyncClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>>(AsyncClientStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>> PrepareAsyncClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>>(PrepareAsyncClientStatusRaw(context, request, cq));
    }
    ::grpc::Status ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::ibc::core::client::v1::QueryClientParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>> AsyncClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>>(AsyncClientParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>> PrepareAsyncClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>>(PrepareAsyncClientParamsRaw(context, request, cq));
    }
    ::grpc::Status UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>> AsyncUpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>>(AsyncUpgradedClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>> PrepareAsyncUpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>>(PrepareAsyncUpgradedClientStateRaw(context, request, cq));
    }
    ::grpc::Status UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>> AsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>>(AsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>> PrepareAsyncUpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>>(PrepareAsyncUpgradedConsensusStateRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ClientStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsensusStates(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, std::function<void(::grpc::Status)>) override;
      void ConsensusStateHeights(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ClientStatus(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void ClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpgradedClientState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, std::function<void(::grpc::Status)>) override;
      void UpgradedConsensusState(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>* AsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStateResponse>* PrepareAsyncClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>* AsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatesResponse>* PrepareAsyncClientStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>* AsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateResponse>* PrepareAsyncConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>* AsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStatesResponse>* PrepareAsyncConsensusStatesRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* AsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* PrepareAsyncConsensusStateHeightsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>* AsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientStatusResponse>* PrepareAsyncClientStatusRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>* AsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryClientParamsResponse>* PrepareAsyncClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* AsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* PrepareAsyncUpgradedClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* AsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* PrepareAsyncUpgradedConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ClientState_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStates_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsensusState_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsensusStates_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsensusStateHeights_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientParams_;
    const ::grpc::internal::RpcMethod rpcmethod_UpgradedClientState_;
    const ::grpc::internal::RpcMethod rpcmethod_UpgradedConsensusState_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ClientState queries an IBC light client.
    virtual ::grpc::Status ClientState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response);
    // ClientStates queries all the IBC light clients of a chain.
    virtual ::grpc::Status ClientStates(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response);
    // ConsensusState queries a consensus state associated with a client state at
    // a given height.
    virtual ::grpc::Status ConsensusState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response);
    // ConsensusStates queries all the consensus state associated with a given
    // client.
    virtual ::grpc::Status ConsensusStates(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response);
    // ConsensusStateHeights queries the height of every consensus states associated with a given client.
    virtual ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response);
    // Status queries the status of an IBC client.
    virtual ::grpc::Status ClientStatus(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response);
    // ClientParams queries all parameters of the ibc client submodule.
    virtual ::grpc::Status ClientParams(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response);
    // UpgradedClientState queries an Upgraded IBC light client.
    virtual ::grpc::Status UpgradedClientState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response);
    // UpgradedConsensusState queries an Upgraded IBC consensus state.
    virtual ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientState(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryClientStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryClientStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientStates() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStates(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryClientStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryClientStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsensusState() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusState(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryConsensusStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusStates(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryConsensusStatesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusStateHeights(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientStatus() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStatus(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryClientStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryClientStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClientParams() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientParams(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryClientParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryClientParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedClientState(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedConsensusState(::grpc::ServerContext* context, ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ClientState<WithAsyncMethod_ClientStates<WithAsyncMethod_ConsensusState<WithAsyncMethod_ConsensusStates<WithAsyncMethod_ConsensusStateHeights<WithAsyncMethod_ClientStatus<WithAsyncMethod_ClientParams<WithAsyncMethod_UpgradedClientState<WithAsyncMethod_UpgradedConsensusState<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientState() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryClientStateRequest* request, ::ibc::core::client::v1::QueryClientStateResponse* response) { return this->ClientState(context, request, response); }));}
    void SetMessageAllocatorFor_ClientState(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientStates() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryClientStatesRequest* request, ::ibc::core::client::v1::QueryClientStatesResponse* response) { return this->ClientStates(context, request, response); }));}
    void SetMessageAllocatorFor_ClientStates(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientStates(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsensusState() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateRequest* request, ::ibc::core::client::v1::QueryConsensusStateResponse* response) { return this->ConsensusState(context, request, response); }));}
    void SetMessageAllocatorFor_ConsensusState(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryConsensusStatesRequest* request, ::ibc::core::client::v1::QueryConsensusStatesResponse* response) { return this->ConsensusStates(context, request, response); }));}
    void SetMessageAllocatorFor_ConsensusStates(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusStates(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* request, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* response) { return this->ConsensusStateHeights(context, request, response); }));}
    void SetMessageAllocatorFor_ConsensusStateHeights(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusStateHeights(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientStatus() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryClientStatusRequest* request, ::ibc::core::client::v1::QueryClientStatusResponse* response) { return this->ClientStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ClientStatus(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClientParams() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryClientParamsRequest* request, ::ibc::core::client::v1::QueryClientParamsResponse* response) { return this->ClientParams(context, request, response); }));}
    void SetMessageAllocatorFor_ClientParams(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientParams(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* request, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* response) { return this->UpgradedClientState(context, request, response); }));}
    void SetMessageAllocatorFor_UpgradedClientState(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* request, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* response) { return this->UpgradedConsensusState(context, request, response); }));}
    void SetMessageAllocatorFor_UpgradedConsensusState(
        ::grpc::MessageAllocator< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ClientState<WithCallbackMethod_ClientStates<WithCallbackMethod_ConsensusState<WithCallbackMethod_ConsensusStates<WithCallbackMethod_ConsensusStateHeights<WithCallbackMethod_ClientStatus<WithCallbackMethod_ClientParams<WithCallbackMethod_UpgradedClientState<WithCallbackMethod_UpgradedConsensusState<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientStates() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsensusState() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientStatus() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClientParams() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientStates() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsensusState() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusStates(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsensusStateHeights(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientStatus() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClientParams() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedClientState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpgradedConsensusState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientState() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientStates() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsensusState() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsensusState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsensusStates(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusStates(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConsensusStateHeights(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConsensusStateHeights(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientStatus() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClientParams() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClientParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClientParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpgradedClientState(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpgradedConsensusState(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpgradedConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryClientStateRequest, ::ibc::core::client::v1::QueryClientStateResponse>* streamer) {
                       return this->StreamedClientState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryClientStateRequest,::ibc::core::client::v1::QueryClientStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientStates() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryClientStatesRequest, ::ibc::core::client::v1::QueryClientStatesResponse>* streamer) {
                       return this->StreamedClientStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatesRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryClientStatesRequest,::ibc::core::client::v1::QueryClientStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsensusState() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryConsensusStateRequest, ::ibc::core::client::v1::QueryConsensusStateResponse>* streamer) {
                       return this->StreamedConsensusState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsensusState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryConsensusStateRequest,::ibc::core::client::v1::QueryConsensusStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsensusStates : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsensusStates() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryConsensusStatesRequest, ::ibc::core::client::v1::QueryConsensusStatesResponse>* streamer) {
                       return this->StreamedConsensusStates(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsensusStates() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsensusStates(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStatesRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStatesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsensusStates(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryConsensusStatesRequest,::ibc::core::client::v1::QueryConsensusStatesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConsensusStateHeights : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConsensusStateHeights() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryConsensusStateHeightsRequest, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* streamer) {
                       return this->StreamedConsensusStateHeights(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConsensusStateHeights() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsensusStateHeights(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryConsensusStateHeightsRequest* /*request*/, ::ibc::core::client::v1::QueryConsensusStateHeightsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsensusStateHeights(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryConsensusStateHeightsRequest,::ibc::core::client::v1::QueryConsensusStateHeightsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientStatus() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryClientStatusRequest, ::ibc::core::client::v1::QueryClientStatusResponse>* streamer) {
                       return this->StreamedClientStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientStatus(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientStatusRequest* /*request*/, ::ibc::core::client::v1::QueryClientStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryClientStatusRequest,::ibc::core::client::v1::QueryClientStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClientParams() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryClientParamsRequest, ::ibc::core::client::v1::QueryClientParamsResponse>* streamer) {
                       return this->StreamedClientParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClientParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientParams(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryClientParamsRequest* /*request*/, ::ibc::core::client::v1::QueryClientParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryClientParamsRequest,::ibc::core::client::v1::QueryClientParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpgradedClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpgradedClientState() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryUpgradedClientStateRequest, ::ibc::core::client::v1::QueryUpgradedClientStateResponse>* streamer) {
                       return this->StreamedUpgradedClientState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpgradedClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpgradedClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedClientStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpgradedClientState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryUpgradedClientStateRequest,::ibc::core::client::v1::QueryUpgradedClientStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpgradedConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpgradedConsensusState() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* streamer) {
                       return this->StreamedUpgradedConsensusState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpgradedConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpgradedConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest* /*request*/, ::ibc::core::client::v1::QueryUpgradedConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpgradedConsensusState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::client::v1::QueryUpgradedConsensusStateRequest,::ibc::core::client::v1::QueryUpgradedConsensusStateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ClientState<WithStreamedUnaryMethod_ClientStates<WithStreamedUnaryMethod_ConsensusState<WithStreamedUnaryMethod_ConsensusStates<WithStreamedUnaryMethod_ConsensusStateHeights<WithStreamedUnaryMethod_ClientStatus<WithStreamedUnaryMethod_ClientParams<WithStreamedUnaryMethod_UpgradedClientState<WithStreamedUnaryMethod_UpgradedConsensusState<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ClientState<WithStreamedUnaryMethod_ClientStates<WithStreamedUnaryMethod_ConsensusState<WithStreamedUnaryMethod_ConsensusStates<WithStreamedUnaryMethod_ConsensusStateHeights<WithStreamedUnaryMethod_ClientStatus<WithStreamedUnaryMethod_ClientParams<WithStreamedUnaryMethod_UpgradedClientState<WithStreamedUnaryMethod_UpgradedConsensusState<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace client
}  // namespace core
}  // namespace ibc


#endif  // GRPC_ibc_2fcore_2fclient_2fv1_2fquery_2eproto__INCLUDED

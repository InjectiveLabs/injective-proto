// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/client/v1/tx.proto

#include "ibc/core/client/v1/tx.pb.h"
#include "ibc/core/client/v1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace core {
namespace client {
namespace v1 {

static const char* Msg_method_names[] = {
  "/ibc.core.client.v1.Msg/CreateClient",
  "/ibc.core.client.v1.Msg/UpdateClient",
  "/ibc.core.client.v1.Msg/UpgradeClient",
  "/ibc.core.client.v1.Msg/SubmitMisbehaviour",
  "/ibc.core.client.v1.Msg/UpdateClientParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateClient_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateClient_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpgradeClient_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubmitMisbehaviour_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateClientParams_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::CreateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgCreateClient& request, ::ibc::core::client::v1::MsgCreateClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::MsgCreateClient, ::ibc::core::client::v1::MsgCreateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateClient_, context, request, response);
}

void Msg::Stub::async::CreateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgCreateClient* request, ::ibc::core::client::v1::MsgCreateClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::MsgCreateClient, ::ibc::core::client::v1::MsgCreateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, std::move(f));
}

void Msg::Stub::async::CreateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgCreateClient* request, ::ibc::core::client::v1::MsgCreateClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgCreateClientResponse>* Msg::Stub::PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgCreateClient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::MsgCreateClientResponse, ::ibc::core::client::v1::MsgCreateClient, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgCreateClientResponse>* Msg::Stub::AsyncCreateClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgCreateClient& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateClient& request, ::ibc::core::client::v1::MsgUpdateClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::MsgUpdateClient, ::ibc::core::client::v1::MsgUpdateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateClient_, context, request, response);
}

void Msg::Stub::async::UpdateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateClient* request, ::ibc::core::client::v1::MsgUpdateClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::MsgUpdateClient, ::ibc::core::client::v1::MsgUpdateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClient_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateClient* request, ::ibc::core::client::v1::MsgUpdateClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpdateClientResponse>* Msg::Stub::PrepareAsyncUpdateClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateClient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::MsgUpdateClientResponse, ::ibc::core::client::v1::MsgUpdateClient, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpdateClientResponse>* Msg::Stub::AsyncUpdateClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateClient& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpgradeClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpgradeClient& request, ::ibc::core::client::v1::MsgUpgradeClientResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::MsgUpgradeClient, ::ibc::core::client::v1::MsgUpgradeClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpgradeClient_, context, request, response);
}

void Msg::Stub::async::UpgradeClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpgradeClient* request, ::ibc::core::client::v1::MsgUpgradeClientResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::MsgUpgradeClient, ::ibc::core::client::v1::MsgUpgradeClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradeClient_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpgradeClient(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpgradeClient* request, ::ibc::core::client::v1::MsgUpgradeClientResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpgradeClient_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpgradeClientResponse>* Msg::Stub::PrepareAsyncUpgradeClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpgradeClient& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::MsgUpgradeClientResponse, ::ibc::core::client::v1::MsgUpgradeClient, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpgradeClient_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpgradeClientResponse>* Msg::Stub::AsyncUpgradeClientRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpgradeClient& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpgradeClientRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::SubmitMisbehaviour(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour& request, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::MsgSubmitMisbehaviour, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SubmitMisbehaviour_, context, request, response);
}

void Msg::Stub::async::SubmitMisbehaviour(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour* request, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::MsgSubmitMisbehaviour, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitMisbehaviour_, context, request, response, std::move(f));
}

void Msg::Stub::async::SubmitMisbehaviour(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour* request, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SubmitMisbehaviour_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse>* Msg::Stub::PrepareAsyncSubmitMisbehaviourRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse, ::ibc::core::client::v1::MsgSubmitMisbehaviour, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SubmitMisbehaviour_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse>* Msg::Stub::AsyncSubmitMisbehaviourRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSubmitMisbehaviourRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateParams& request, ::ibc::core::client::v1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::client::v1::MsgUpdateParams, ::ibc::core::client::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateClientParams_, context, request, response);
}

void Msg::Stub::async::UpdateClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateParams* request, ::ibc::core::client::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::client::v1::MsgUpdateParams, ::ibc::core::client::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClientParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateClientParams(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateParams* request, ::ibc::core::client::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateClientParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::client::v1::MsgUpdateParamsResponse, ::ibc::core::client::v1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateClientParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::client::v1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateClientParamsRaw(::grpc::ClientContext* context, const ::ibc::core::client::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateClientParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::client::v1::MsgCreateClient, ::ibc::core::client::v1::MsgCreateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::MsgCreateClient* req,
             ::ibc::core::client::v1::MsgCreateClientResponse* resp) {
               return service->CreateClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::client::v1::MsgUpdateClient, ::ibc::core::client::v1::MsgUpdateClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::MsgUpdateClient* req,
             ::ibc::core::client::v1::MsgUpdateClientResponse* resp) {
               return service->UpdateClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::client::v1::MsgUpgradeClient, ::ibc::core::client::v1::MsgUpgradeClientResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::MsgUpgradeClient* req,
             ::ibc::core::client::v1::MsgUpgradeClientResponse* resp) {
               return service->UpgradeClient(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::client::v1::MsgSubmitMisbehaviour, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::MsgSubmitMisbehaviour* req,
             ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse* resp) {
               return service->SubmitMisbehaviour(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::client::v1::MsgUpdateParams, ::ibc::core::client::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::client::v1::MsgUpdateParams* req,
             ::ibc::core::client::v1::MsgUpdateParamsResponse* resp) {
               return service->UpdateClientParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::CreateClient(::grpc::ServerContext* context, const ::ibc::core::client::v1::MsgCreateClient* request, ::ibc::core::client::v1::MsgCreateClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateClient(::grpc::ServerContext* context, const ::ibc::core::client::v1::MsgUpdateClient* request, ::ibc::core::client::v1::MsgUpdateClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpgradeClient(::grpc::ServerContext* context, const ::ibc::core::client::v1::MsgUpgradeClient* request, ::ibc::core::client::v1::MsgUpgradeClientResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::SubmitMisbehaviour(::grpc::ServerContext* context, const ::ibc::core::client::v1::MsgSubmitMisbehaviour* request, ::ibc::core::client::v1::MsgSubmitMisbehaviourResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateClientParams(::grpc::ServerContext* context, const ::ibc::core::client::v1::MsgUpdateParams* request, ::ibc::core::client::v1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace core
}  // namespace client
}  // namespace v1


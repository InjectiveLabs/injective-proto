// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/channel/v1/tx.proto

#include "ibc/core/channel/v1/tx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenInit::MsgChannelOpenInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_)*/nullptr} {}
struct MsgChannelOpenInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenInitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenInitDefaultTypeInternal() {}
  union {
    MsgChannelOpenInit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenInitDefaultTypeInternal _MsgChannelOpenInit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenInitResponse::MsgChannelOpenInitResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgChannelOpenInitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenInitResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenInitResponseDefaultTypeInternal() {}
  union {
    MsgChannelOpenInitResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenInitResponseDefaultTypeInternal _MsgChannelOpenInitResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenTry::MsgChannelOpenTry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.previous_channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_init_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgChannelOpenTryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenTryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenTryDefaultTypeInternal() {}
  union {
    MsgChannelOpenTry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenTryDefaultTypeInternal _MsgChannelOpenTry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenTryResponse::MsgChannelOpenTryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgChannelOpenTryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenTryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenTryResponseDefaultTypeInternal() {}
  union {
    MsgChannelOpenTryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenTryResponseDefaultTypeInternal _MsgChannelOpenTryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenAck::MsgChannelOpenAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_try_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgChannelOpenAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenAckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenAckDefaultTypeInternal() {}
  union {
    MsgChannelOpenAck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenAckDefaultTypeInternal _MsgChannelOpenAck_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenAckResponse::MsgChannelOpenAckResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgChannelOpenAckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenAckResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenAckResponseDefaultTypeInternal() {}
  union {
    MsgChannelOpenAckResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenAckResponseDefaultTypeInternal _MsgChannelOpenAckResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenConfirm::MsgChannelOpenConfirm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_ack_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgChannelOpenConfirmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenConfirmDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenConfirmDefaultTypeInternal() {}
  union {
    MsgChannelOpenConfirm _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenConfirmDefaultTypeInternal _MsgChannelOpenConfirm_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelOpenConfirmResponse::MsgChannelOpenConfirmResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgChannelOpenConfirmResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelOpenConfirmResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelOpenConfirmResponseDefaultTypeInternal() {}
  union {
    MsgChannelOpenConfirmResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelOpenConfirmResponseDefaultTypeInternal _MsgChannelOpenConfirmResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelCloseInit::MsgChannelCloseInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgChannelCloseInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelCloseInitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelCloseInitDefaultTypeInternal() {}
  union {
    MsgChannelCloseInit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelCloseInitDefaultTypeInternal _MsgChannelCloseInit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelCloseInitResponse::MsgChannelCloseInitResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgChannelCloseInitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelCloseInitResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelCloseInitResponseDefaultTypeInternal() {}
  union {
    MsgChannelCloseInitResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelCloseInitResponseDefaultTypeInternal _MsgChannelCloseInitResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelCloseConfirm::MsgChannelCloseConfirm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_init_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgChannelCloseConfirmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelCloseConfirmDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelCloseConfirmDefaultTypeInternal() {}
  union {
    MsgChannelCloseConfirm _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelCloseConfirmDefaultTypeInternal _MsgChannelCloseConfirm_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgChannelCloseConfirmResponse::MsgChannelCloseConfirmResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgChannelCloseConfirmResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgChannelCloseConfirmResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgChannelCloseConfirmResponseDefaultTypeInternal() {}
  union {
    MsgChannelCloseConfirmResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgChannelCloseConfirmResponseDefaultTypeInternal _MsgChannelCloseConfirmResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRecvPacket::MsgRecvPacket(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_commitment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgRecvPacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRecvPacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRecvPacketDefaultTypeInternal() {}
  union {
    MsgRecvPacket _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRecvPacketDefaultTypeInternal _MsgRecvPacket_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgRecvPacketResponse::MsgRecvPacketResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgRecvPacketResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRecvPacketResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRecvPacketResponseDefaultTypeInternal() {}
  union {
    MsgRecvPacketResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRecvPacketResponseDefaultTypeInternal _MsgRecvPacketResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgTimeout::MsgTimeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_unreceived_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.next_sequence_recv_)*/ ::uint64_t{0u}
} {}
struct MsgTimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTimeoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTimeoutDefaultTypeInternal() {}
  union {
    MsgTimeout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTimeoutDefaultTypeInternal _MsgTimeout_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgTimeoutResponse::MsgTimeoutResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgTimeoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTimeoutResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTimeoutResponseDefaultTypeInternal() {}
  union {
    MsgTimeoutResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTimeoutResponseDefaultTypeInternal _MsgTimeoutResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgTimeoutOnClose::MsgTimeoutOnClose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_unreceived_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_close_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.next_sequence_recv_)*/ ::uint64_t{0u}
} {}
struct MsgTimeoutOnCloseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTimeoutOnCloseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTimeoutOnCloseDefaultTypeInternal() {}
  union {
    MsgTimeoutOnClose _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTimeoutOnCloseDefaultTypeInternal _MsgTimeoutOnClose_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgTimeoutOnCloseResponse::MsgTimeoutOnCloseResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgTimeoutOnCloseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTimeoutOnCloseResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTimeoutOnCloseResponseDefaultTypeInternal() {}
  union {
    MsgTimeoutOnCloseResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTimeoutOnCloseResponseDefaultTypeInternal _MsgTimeoutOnCloseResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgAcknowledgement::MsgAcknowledgement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledgement_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_acked_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.packet_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgAcknowledgementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgAcknowledgementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgAcknowledgementDefaultTypeInternal() {}
  union {
    MsgAcknowledgement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgAcknowledgementDefaultTypeInternal _MsgAcknowledgement_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgAcknowledgementResponse::MsgAcknowledgementResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgAcknowledgementResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgAcknowledgementResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgAcknowledgementResponseDefaultTypeInternal() {}
  union {
    MsgAcknowledgementResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgAcknowledgementResponseDefaultTypeInternal _MsgAcknowledgementResponse_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[20];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInit, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInit, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInit, _impl_.signer_),
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInitResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInitResponse, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenInitResponse, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.previous_channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.counterparty_version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.proof_init_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTry, _impl_.signer_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTryResponse, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenTryResponse, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.counterparty_channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.counterparty_version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.proof_try_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAck, _impl_.signer_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenAckResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_.proof_ack_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirm, _impl_.signer_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelOpenConfirmResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseInit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseInit, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseInit, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseInit, _impl_.signer_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseInitResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_.proof_init_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirm, _impl_.signer_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgChannelCloseConfirmResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _impl_.packet_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _impl_.proof_commitment_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacket, _impl_.signer_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacketResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgRecvPacketResponse, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_.packet_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_.proof_unreceived_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_.next_sequence_recv_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeout, _impl_.signer_),
    0,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutResponse, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.packet_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.proof_unreceived_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.proof_close_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.next_sequence_recv_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnClose, _impl_.signer_),
    0,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnCloseResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgTimeoutOnCloseResponse, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_.packet_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_.acknowledgement_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_.proof_acked_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgement, _impl_.signer_),
    0,
    ~0u,
    ~0u,
    1,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgementResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::MsgAcknowledgementResponse, _impl_.result_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 11, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenInit)},
        { 14, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenInitResponse)},
        { 24, 39, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenTry)},
        { 46, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenTryResponse)},
        { 56, 71, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenAck)},
        { 78, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenAckResponse)},
        { 86, 99, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenConfirm)},
        { 104, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelOpenConfirmResponse)},
        { 112, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelCloseInit)},
        { 123, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelCloseInitResponse)},
        { 131, 144, -1, sizeof(::ibc::core::channel::v1::MsgChannelCloseConfirm)},
        { 149, -1, -1, sizeof(::ibc::core::channel::v1::MsgChannelCloseConfirmResponse)},
        { 157, 169, -1, sizeof(::ibc::core::channel::v1::MsgRecvPacket)},
        { 173, -1, -1, sizeof(::ibc::core::channel::v1::MsgRecvPacketResponse)},
        { 182, 195, -1, sizeof(::ibc::core::channel::v1::MsgTimeout)},
        { 200, -1, -1, sizeof(::ibc::core::channel::v1::MsgTimeoutResponse)},
        { 209, 223, -1, sizeof(::ibc::core::channel::v1::MsgTimeoutOnClose)},
        { 229, -1, -1, sizeof(::ibc::core::channel::v1::MsgTimeoutOnCloseResponse)},
        { 238, 251, -1, sizeof(::ibc::core::channel::v1::MsgAcknowledgement)},
        { 256, -1, -1, sizeof(::ibc::core::channel::v1::MsgAcknowledgementResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::channel::v1::_MsgChannelOpenInit_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenInitResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenTry_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenTryResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenAck_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenAckResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenConfirm_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelOpenConfirmResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelCloseInit_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelCloseInitResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelCloseConfirm_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgChannelCloseConfirmResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgRecvPacket_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgRecvPacketResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgTimeout_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgTimeoutResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgTimeoutOnClose_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgTimeoutOnCloseResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgAcknowledgement_default_instance_._instance,
    &::ibc::core::channel::v1::_MsgAcknowledgementResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034ibc/core/channel/v1/tx.proto\022\023ibc.core"
    ".channel.v1\032\024gogoproto/gogo.proto\032\037ibc/c"
    "ore/client/v1/client.proto\032!ibc/core/cha"
    "nnel/v1/channel.proto\032\027cosmos/msg/v1/msg"
    ".proto\"\224\001\n\022MsgChannelOpenInit\022\027\n\007port_id"
    "\030\001 \001(\tR\006portId\022<\n\007channel\030\002 \001(\0132\034.ibc.co"
    "re.channel.v1.ChannelB\004\310\336\037\000R\007channel\022\026\n\006"
    "signer\030\003 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\"[\n"
    "\032MsgChannelOpenInitResponse\022\035\n\nchannel_i"
    "d\030\001 \001(\tR\tchannelId\022\030\n\007version\030\002 \001(\tR\007ver"
    "sion:\004\210\240\037\000\"\336\002\n\021MsgChannelOpenTry\022\027\n\007port"
    "_id\030\001 \001(\tR\006portId\0222\n\023previous_channel_id"
    "\030\002 \001(\tB\002\030\001R\021previousChannelId\022<\n\007channel"
    "\030\003 \001(\0132\034.ibc.core.channel.v1.ChannelB\004\310\336"
    "\037\000R\007channel\0221\n\024counterparty_version\030\004 \001("
    "\tR\023counterpartyVersion\022\035\n\nproof_init\030\005 \001"
    "(\014R\tproofInit\022C\n\014proof_height\030\006 \001(\0132\032.ib"
    "c.core.client.v1.HeightB\004\310\336\037\000R\013proofHeig"
    "ht\022\026\n\006signer\030\007 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006sig"
    "ner\"Z\n\031MsgChannelOpenTryResponse\022\030\n\007vers"
    "ion\030\001 \001(\tR\007version\022\035\n\nchannel_id\030\002 \001(\tR\t"
    "channelId:\004\210\240\037\000\"\301\002\n\021MsgChannelOpenAck\022\027\n"
    "\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001"
    "(\tR\tchannelId\0226\n\027counterparty_channel_id"
    "\030\003 \001(\tR\025counterpartyChannelId\0221\n\024counter"
    "party_version\030\004 \001(\tR\023counterpartyVersion"
    "\022\033\n\tproof_try\030\005 \001(\014R\010proofTry\022C\n\014proof_h"
    "eight\030\006 \001(\0132\032.ibc.core.client.v1.HeightB"
    "\004\310\336\037\000R\013proofHeight\022\026\n\006signer\030\007 \001(\tR\006sign"
    "er:\017\210\240\037\000\202\347\260*\006signer\"\033\n\031MsgChannelOpenAck"
    "Response\"\332\001\n\025MsgChannelOpenConfirm\022\027\n\007po"
    "rt_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR"
    "\tchannelId\022\033\n\tproof_ack\030\003 \001(\014R\010proofAck\022"
    "C\n\014proof_height\030\004 \001(\0132\032.ibc.core.client."
    "v1.HeightB\004\310\336\037\000R\013proofHeight\022\026\n\006signer\030\005"
    " \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\"\037\n\035MsgChan"
    "nelOpenConfirmResponse\"v\n\023MsgChannelClos"
    "eInit\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchanne"
    "l_id\030\002 \001(\tR\tchannelId\022\026\n\006signer\030\003 \001(\tR\006s"
    "igner:\017\210\240\037\000\202\347\260*\006signer\"\035\n\033MsgChannelClos"
    "eInitResponse\"\335\001\n\026MsgChannelCloseConfirm"
    "\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030"
    "\002 \001(\tR\tchannelId\022\035\n\nproof_init\030\003 \001(\014R\tpr"
    "oofInit\022C\n\014proof_height\030\004 \001(\0132\032.ibc.core"
    ".client.v1.HeightB\004\310\336\037\000R\013proofHeight\022\026\n\006"
    "signer\030\005 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\" \n"
    "\036MsgChannelCloseConfirmResponse\"\343\001\n\rMsgR"
    "ecvPacket\0229\n\006packet\030\001 \001(\0132\033.ibc.core.cha"
    "nnel.v1.PacketB\004\310\336\037\000R\006packet\022)\n\020proof_co"
    "mmitment\030\002 \001(\014R\017proofCommitment\022C\n\014proof"
    "_height\030\003 \001(\0132\032.ibc.core.client.v1.Heigh"
    "tB\004\310\336\037\000R\013proofHeight\022\026\n\006signer\030\004 \001(\tR\006si"
    "gner:\017\210\240\037\000\202\347\260*\006signer\"^\n\025MsgRecvPacketRe"
    "sponse\022\?\n\006result\030\001 \001(\0162\'.ibc.core.channe"
    "l.v1.ResponseResultTypeR\006result:\004\210\240\037\000\"\216\002"
    "\n\nMsgTimeout\0229\n\006packet\030\001 \001(\0132\033.ibc.core."
    "channel.v1.PacketB\004\310\336\037\000R\006packet\022)\n\020proof"
    "_unreceived\030\002 \001(\014R\017proofUnreceived\022C\n\014pr"
    "oof_height\030\003 \001(\0132\032.ibc.core.client.v1.He"
    "ightB\004\310\336\037\000R\013proofHeight\022,\n\022next_sequence"
    "_recv\030\004 \001(\004R\020nextSequenceRecv\022\026\n\006signer\030"
    "\005 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\"[\n\022MsgTim"
    "eoutResponse\022\?\n\006result\030\001 \001(\0162\'.ibc.core."
    "channel.v1.ResponseResultTypeR\006result:\004\210"
    "\240\037\000\"\266\002\n\021MsgTimeoutOnClose\0229\n\006packet\030\001 \001("
    "\0132\033.ibc.core.channel.v1.PacketB\004\310\336\037\000R\006pa"
    "cket\022)\n\020proof_unreceived\030\002 \001(\014R\017proofUnr"
    "eceived\022\037\n\013proof_close\030\003 \001(\014R\nproofClose"
    "\022C\n\014proof_height\030\004 \001(\0132\032.ibc.core.client"
    ".v1.HeightB\004\310\336\037\000R\013proofHeight\022,\n\022next_se"
    "quence_recv\030\005 \001(\004R\020nextSequenceRecv\022\026\n\006s"
    "igner\030\006 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\"b\n\031"
    "MsgTimeoutOnCloseResponse\022\?\n\006result\030\001 \001("
    "\0162\'.ibc.core.channel.v1.ResponseResultTy"
    "peR\006result:\004\210\240\037\000\"\210\002\n\022MsgAcknowledgement\022"
    "9\n\006packet\030\001 \001(\0132\033.ibc.core.channel.v1.Pa"
    "cketB\004\310\336\037\000R\006packet\022(\n\017acknowledgement\030\002 "
    "\001(\014R\017acknowledgement\022\037\n\013proof_acked\030\003 \001("
    "\014R\nproofAcked\022C\n\014proof_height\030\004 \001(\0132\032.ib"
    "c.core.client.v1.HeightB\004\310\336\037\000R\013proofHeig"
    "ht\022\026\n\006signer\030\005 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006sig"
    "ner\"c\n\032MsgAcknowledgementResponse\022\?\n\006res"
    "ult\030\001 \001(\0162\'.ibc.core.channel.v1.Response"
    "ResultTypeR\006result:\004\210\240\037\000*\251\001\n\022ResponseRes"
    "ultType\0225\n RESPONSE_RESULT_TYPE_UNSPECIF"
    "IED\020\000\032\017\212\235 \013UNSPECIFIED\022\'\n\031RESPONSE_RESUL"
    "T_TYPE_NOOP\020\001\032\010\212\235 \004NOOP\022-\n\034RESPONSE_RESU"
    "LT_TYPE_SUCCESS\020\002\032\013\212\235 \007SUCCESS\032\004\210\243\036\0002\266\010\n"
    "\003Msg\022k\n\017ChannelOpenInit\022\'.ibc.core.chann"
    "el.v1.MsgChannelOpenInit\032/.ibc.core.chan"
    "nel.v1.MsgChannelOpenInitResponse\022h\n\016Cha"
    "nnelOpenTry\022&.ibc.core.channel.v1.MsgCha"
    "nnelOpenTry\032..ibc.core.channel.v1.MsgCha"
    "nnelOpenTryResponse\022h\n\016ChannelOpenAck\022&."
    "ibc.core.channel.v1.MsgChannelOpenAck\032.."
    "ibc.core.channel.v1.MsgChannelOpenAckRes"
    "ponse\022t\n\022ChannelOpenConfirm\022*.ibc.core.c"
    "hannel.v1.MsgChannelOpenConfirm\0322.ibc.co"
    "re.channel.v1.MsgChannelOpenConfirmRespo"
    "nse\022n\n\020ChannelCloseInit\022(.ibc.core.chann"
    "el.v1.MsgChannelCloseInit\0320.ibc.core.cha"
    "nnel.v1.MsgChannelCloseInitResponse\022w\n\023C"
    "hannelCloseConfirm\022+.ibc.core.channel.v1"
    ".MsgChannelCloseConfirm\0323.ibc.core.chann"
    "el.v1.MsgChannelCloseConfirmResponse\022\\\n\n"
    "RecvPacket\022\".ibc.core.channel.v1.MsgRecv"
    "Packet\032*.ibc.core.channel.v1.MsgRecvPack"
    "etResponse\022S\n\007Timeout\022\037.ibc.core.channel"
    ".v1.MsgTimeout\032\'.ibc.core.channel.v1.Msg"
    "TimeoutResponse\022h\n\016TimeoutOnClose\022&.ibc."
    "core.channel.v1.MsgTimeoutOnClose\032..ibc."
    "core.channel.v1.MsgTimeoutOnCloseRespons"
    "e\022k\n\017Acknowledgement\022\'.ibc.core.channel."
    "v1.MsgAcknowledgement\032/.ibc.core.channel"
    ".v1.MsgAcknowledgementResponse\032\005\200\347\260*\001B\314\001"
    "\n\027com.ibc.core.channel.v1B\007TxProtoP\001Z9gi"
    "thub.com/cosmos/ibc-go/v7/modules/core/0"
    "4-channel/types\242\002\003ICC\252\002\023Ibc.Core.Channel"
    ".V1\312\002\023Ibc\\Core\\Channel\\V1\342\002\037Ibc\\Core\\Cha"
    "nnel\\V1\\GPBMetadata\352\002\026Ibc::Core::Channel"
    "::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_deps[4] =
    {
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto = {
    false,
    false,
    4812,
    descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto,
    "ibc/core/channel/v1/tx.proto",
    &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_deps,
    4,
    20,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto);
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto);
  return file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[0];
}
bool ResponseResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class MsgChannelOpenInit::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgChannelOpenInit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgChannelOpenInit, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Channel& channel(const MsgChannelOpenInit* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::Channel&
MsgChannelOpenInit::_Internal::channel(const MsgChannelOpenInit* msg) {
  return *msg->_impl_.channel_;
}
void MsgChannelOpenInit::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgChannelOpenInit::MsgChannelOpenInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenInit)
}
MsgChannelOpenInit::MsgChannelOpenInit(const MsgChannelOpenInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.channel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_ = new ::ibc::core::channel::v1::Channel(*from._impl_.channel_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenInit)
}

inline void MsgChannelOpenInit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.channel_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenInit::~MsgChannelOpenInit() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenInit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.channel_;
}

void MsgChannelOpenInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenInit::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenInit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.channel_ != nullptr);
    _impl_.channel_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenInit.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 3 [json_name = "signer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenInit.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenInit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenInit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenInit.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  // string signer = 3 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenInit.signer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenInit)
  return target;
}

::size_t MsgChannelOpenInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenInit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string signer = 3 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.core.channel.v1.Channel channel = 2 [json_name = "channel", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenInit::GetClassData() const { return &_class_data_; }


void MsgChannelOpenInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenInit*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenInit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_channel()->::ibc::core::channel::v1::Channel::MergeFrom(
        from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenInit::CopyFrom(const MsgChannelOpenInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenInit::IsInitialized() const {
  return true;
}

void MsgChannelOpenInit::InternalSwap(MsgChannelOpenInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[0]);
}
// ===================================================================

class MsgChannelOpenInitResponse::_Internal {
 public:
};

MsgChannelOpenInitResponse::MsgChannelOpenInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenInitResponse)
}
MsgChannelOpenInitResponse::MsgChannelOpenInitResponse(const MsgChannelOpenInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenInitResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenInitResponse)
}

inline void MsgChannelOpenInitResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channel_id_) {}

    , decltype(_impl_.version_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenInitResponse::~MsgChannelOpenInitResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenInitResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.version_.Destroy();
}

void MsgChannelOpenInitResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenInitResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [json_name = "channelId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenInitResponse.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 2 [json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenInitResponse.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenInitResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenInitResponse.channel_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenInitResponse.version");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  return target;
}

::size_t MsgChannelOpenInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string version = 2 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenInitResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenInitResponse::GetClassData() const { return &_class_data_; }


void MsgChannelOpenInitResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenInitResponse*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenInitResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenInitResponse::CopyFrom(const MsgChannelOpenInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenInitResponse::IsInitialized() const {
  return true;
}

void MsgChannelOpenInitResponse::InternalSwap(MsgChannelOpenInitResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenInitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[1]);
}
// ===================================================================

class MsgChannelOpenTry::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgChannelOpenTry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgChannelOpenTry, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Channel& channel(const MsgChannelOpenTry* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgChannelOpenTry* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Channel&
MsgChannelOpenTry::_Internal::channel(const MsgChannelOpenTry* msg) {
  return *msg->_impl_.channel_;
}
const ::ibc::core::client::v1::Height&
MsgChannelOpenTry::_Internal::proof_height(const MsgChannelOpenTry* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgChannelOpenTry::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgChannelOpenTry::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgChannelOpenTry::MsgChannelOpenTry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenTry)
}
MsgChannelOpenTry::MsgChannelOpenTry(const MsgChannelOpenTry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenTry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.previous_channel_id_) {}

    , decltype(_impl_.counterparty_version_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.channel_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.previous_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous_channel_id().empty()) {
    _this->_impl_.previous_channel_id_.Set(from._internal_previous_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_version().empty()) {
    _this->_impl_.counterparty_version_.Set(from._internal_counterparty_version(), _this->GetArenaForAllocation());
  }
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_init().empty()) {
    _this->_impl_.proof_init_.Set(from._internal_proof_init(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_ = new ::ibc::core::channel::v1::Channel(*from._impl_.channel_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenTry)
}

inline void MsgChannelOpenTry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.previous_channel_id_) {}

    , decltype(_impl_.counterparty_version_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.channel_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenTry::~MsgChannelOpenTry() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenTry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenTry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.previous_channel_id_.Destroy();
  _impl_.counterparty_version_.Destroy();
  _impl_.proof_init_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.channel_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgChannelOpenTry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenTry::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenTry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.previous_channel_id_.ClearToEmpty();
  _impl_.counterparty_version_.ClearToEmpty();
  _impl_.proof_init_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.channel_ != nullptr);
      _impl_.channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenTry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTry.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string previous_channel_id = 2 [json_name = "previousChannelId", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previous_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTry.previous_channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Channel channel = 3 [json_name = "channel", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_version = 4 [json_name = "counterpartyVersion"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_counterparty_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTry.counterparty_version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_init = 5 [json_name = "proofInit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_proof_init();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 7 [json_name = "signer"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTry.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenTry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenTry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTry.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string previous_channel_id = 2 [json_name = "previousChannelId", deprecated = true];
  if (!this->_internal_previous_channel_id().empty()) {
    const std::string& _s = this->_internal_previous_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTry.previous_channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Channel channel = 3 [json_name = "channel", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  // string counterparty_version = 4 [json_name = "counterpartyVersion"];
  if (!this->_internal_counterparty_version().empty()) {
    const std::string& _s = this->_internal_counterparty_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTry.counterparty_version");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bytes proof_init = 5 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    const std::string& _s = this->_internal_proof_init();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 7 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTry.signer");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenTry)
  return target;
}

::size_t MsgChannelOpenTry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenTry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string previous_channel_id = 2 [json_name = "previousChannelId", deprecated = true];
  if (!this->_internal_previous_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_previous_channel_id());
  }

  // string counterparty_version = 4 [json_name = "counterpartyVersion"];
  if (!this->_internal_counterparty_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_version());
  }

  // bytes proof_init = 5 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_init());
  }

  // string signer = 7 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Channel channel = 3 [json_name = "channel", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.channel_);
    }

    // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenTry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenTry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenTry::GetClassData() const { return &_class_data_; }


void MsgChannelOpenTry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenTry*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenTry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenTry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_previous_channel_id().empty()) {
    _this->_internal_set_previous_channel_id(from._internal_previous_channel_id());
  }
  if (!from._internal_counterparty_version().empty()) {
    _this->_internal_set_counterparty_version(from._internal_counterparty_version());
  }
  if (!from._internal_proof_init().empty()) {
    _this->_internal_set_proof_init(from._internal_proof_init());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_channel()->::ibc::core::channel::v1::Channel::MergeFrom(
          from._internal_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenTry::CopyFrom(const MsgChannelOpenTry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenTry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenTry::IsInitialized() const {
  return true;
}

void MsgChannelOpenTry::InternalSwap(MsgChannelOpenTry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_channel_id_, lhs_arena,
                                       &other->_impl_.previous_channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_version_, lhs_arena,
                                       &other->_impl_.counterparty_version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_init_, lhs_arena,
                                       &other->_impl_.proof_init_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgChannelOpenTry, _impl_.proof_height_)
      + sizeof(MsgChannelOpenTry::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(MsgChannelOpenTry, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenTry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[2]);
}
// ===================================================================

class MsgChannelOpenTryResponse::_Internal {
 public:
};

MsgChannelOpenTryResponse::MsgChannelOpenTryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenTryResponse)
}
MsgChannelOpenTryResponse::MsgChannelOpenTryResponse(const MsgChannelOpenTryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenTryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenTryResponse)
}

inline void MsgChannelOpenTryResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.version_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenTryResponse::~MsgChannelOpenTryResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenTryResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
  _impl_.channel_id_.Destroy();
}

void MsgChannelOpenTryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenTryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenTryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTryResponse.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenTryResponse.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenTryResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTryResponse.version");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenTryResponse.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  return target;
}

::size_t MsgChannelOpenTryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 1 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenTryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenTryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenTryResponse::GetClassData() const { return &_class_data_; }


void MsgChannelOpenTryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenTryResponse*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenTryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenTryResponse::CopyFrom(const MsgChannelOpenTryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenTryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenTryResponse::IsInitialized() const {
  return true;
}

void MsgChannelOpenTryResponse::InternalSwap(MsgChannelOpenTryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenTryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[3]);
}
// ===================================================================

class MsgChannelOpenAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgChannelOpenAck>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgChannelOpenAck, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const MsgChannelOpenAck* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
MsgChannelOpenAck::_Internal::proof_height(const MsgChannelOpenAck* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgChannelOpenAck::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgChannelOpenAck::MsgChannelOpenAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenAck)
}
MsgChannelOpenAck::MsgChannelOpenAck(const MsgChannelOpenAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.counterparty_channel_id_) {}

    , decltype(_impl_.counterparty_version_) {}

    , decltype(_impl_.proof_try_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_channel_id().empty()) {
    _this->_impl_.counterparty_channel_id_.Set(from._internal_counterparty_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_version().empty()) {
    _this->_impl_.counterparty_version_.Set(from._internal_counterparty_version(), _this->GetArenaForAllocation());
  }
  _impl_.proof_try_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_try_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_try().empty()) {
    _this->_impl_.proof_try_.Set(from._internal_proof_try(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenAck)
}

inline void MsgChannelOpenAck::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.counterparty_channel_id_) {}

    , decltype(_impl_.counterparty_version_) {}

    , decltype(_impl_.proof_try_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_try_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_try_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenAck::~MsgChannelOpenAck() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenAck::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.counterparty_channel_id_.Destroy();
  _impl_.counterparty_version_.Destroy();
  _impl_.proof_try_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgChannelOpenAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenAck)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.counterparty_channel_id_.ClearToEmpty();
  _impl_.counterparty_version_.ClearToEmpty();
  _impl_.proof_try_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenAck.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenAck.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_channel_id = 3 [json_name = "counterpartyChannelId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_counterparty_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenAck.counterparty_channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_version = 4 [json_name = "counterpartyVersion"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_counterparty_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenAck.counterparty_version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_try = 5 [json_name = "proofTry"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_proof_try();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 7 [json_name = "signer"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenAck.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenAck::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenAck)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenAck.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenAck.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string counterparty_channel_id = 3 [json_name = "counterpartyChannelId"];
  if (!this->_internal_counterparty_channel_id().empty()) {
    const std::string& _s = this->_internal_counterparty_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenAck.counterparty_channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string counterparty_version = 4 [json_name = "counterpartyVersion"];
  if (!this->_internal_counterparty_version().empty()) {
    const std::string& _s = this->_internal_counterparty_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenAck.counterparty_version");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bytes proof_try = 5 [json_name = "proofTry"];
  if (!this->_internal_proof_try().empty()) {
    const std::string& _s = this->_internal_proof_try();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 7 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenAck.signer");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenAck)
  return target;
}

::size_t MsgChannelOpenAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenAck)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string counterparty_channel_id = 3 [json_name = "counterpartyChannelId"];
  if (!this->_internal_counterparty_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_channel_id());
  }

  // string counterparty_version = 4 [json_name = "counterpartyVersion"];
  if (!this->_internal_counterparty_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_version());
  }

  // bytes proof_try = 5 [json_name = "proofTry"];
  if (!this->_internal_proof_try().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_try());
  }

  // string signer = 7 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.core.client.v1.Height proof_height = 6 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenAck::GetClassData() const { return &_class_data_; }


void MsgChannelOpenAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenAck*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenAck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_counterparty_channel_id().empty()) {
    _this->_internal_set_counterparty_channel_id(from._internal_counterparty_channel_id());
  }
  if (!from._internal_counterparty_version().empty()) {
    _this->_internal_set_counterparty_version(from._internal_counterparty_version());
  }
  if (!from._internal_proof_try().empty()) {
    _this->_internal_set_proof_try(from._internal_proof_try());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenAck::CopyFrom(const MsgChannelOpenAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenAck::IsInitialized() const {
  return true;
}

void MsgChannelOpenAck::InternalSwap(MsgChannelOpenAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_channel_id_, lhs_arena,
                                       &other->_impl_.counterparty_channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_version_, lhs_arena,
                                       &other->_impl_.counterparty_version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_try_, lhs_arena,
                                       &other->_impl_.proof_try_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[4]);
}
// ===================================================================

class MsgChannelOpenAckResponse::_Internal {
 public:
};

MsgChannelOpenAckResponse::MsgChannelOpenAckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenAckResponse)
}
MsgChannelOpenAckResponse::MsgChannelOpenAckResponse(const MsgChannelOpenAckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgChannelOpenAckResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenAckResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenAckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenAckResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenAckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[5]);
}
// ===================================================================

class MsgChannelOpenConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgChannelOpenConfirm>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgChannelOpenConfirm, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const MsgChannelOpenConfirm* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
MsgChannelOpenConfirm::_Internal::proof_height(const MsgChannelOpenConfirm* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgChannelOpenConfirm::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgChannelOpenConfirm::MsgChannelOpenConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenConfirm)
}
MsgChannelOpenConfirm::MsgChannelOpenConfirm(const MsgChannelOpenConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelOpenConfirm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.proof_ack_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_ack().empty()) {
    _this->_impl_.proof_ack_.Set(from._internal_proof_ack(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenConfirm)
}

inline void MsgChannelOpenConfirm::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.proof_ack_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelOpenConfirm::~MsgChannelOpenConfirm() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelOpenConfirm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelOpenConfirm::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.proof_ack_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgChannelOpenConfirm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelOpenConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelOpenConfirm)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.proof_ack_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelOpenConfirm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenConfirm.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenConfirm.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_ack = 3 [json_name = "proofAck"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof_ack();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 5 [json_name = "signer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelOpenConfirm.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelOpenConfirm::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelOpenConfirm)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenConfirm.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenConfirm.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes proof_ack = 3 [json_name = "proofAck"];
  if (!this->_internal_proof_ack().empty()) {
    const std::string& _s = this->_internal_proof_ack();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelOpenConfirm.signer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelOpenConfirm)
  return target;
}

::size_t MsgChannelOpenConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelOpenConfirm)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // bytes proof_ack = 3 [json_name = "proofAck"];
  if (!this->_internal_proof_ack().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_ack());
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelOpenConfirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenConfirm::GetClassData() const { return &_class_data_; }


void MsgChannelOpenConfirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelOpenConfirm*>(&to_msg);
  auto& from = static_cast<const MsgChannelOpenConfirm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelOpenConfirm)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_proof_ack().empty()) {
    _this->_internal_set_proof_ack(from._internal_proof_ack());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelOpenConfirm::CopyFrom(const MsgChannelOpenConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelOpenConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelOpenConfirm::IsInitialized() const {
  return true;
}

void MsgChannelOpenConfirm::InternalSwap(MsgChannelOpenConfirm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_ack_, lhs_arena,
                                       &other->_impl_.proof_ack_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenConfirm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[6]);
}
// ===================================================================

class MsgChannelOpenConfirmResponse::_Internal {
 public:
};

MsgChannelOpenConfirmResponse::MsgChannelOpenConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelOpenConfirmResponse)
}
MsgChannelOpenConfirmResponse::MsgChannelOpenConfirmResponse(const MsgChannelOpenConfirmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgChannelOpenConfirmResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelOpenConfirmResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelOpenConfirmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelOpenConfirmResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelOpenConfirmResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[7]);
}
// ===================================================================

class MsgChannelCloseInit::_Internal {
 public:
};

MsgChannelCloseInit::MsgChannelCloseInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelCloseInit)
}
MsgChannelCloseInit::MsgChannelCloseInit(const MsgChannelCloseInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelCloseInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.signer_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelCloseInit)
}

inline void MsgChannelCloseInit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.signer_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelCloseInit::~MsgChannelCloseInit() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelCloseInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelCloseInit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.signer_.Destroy();
}

void MsgChannelCloseInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelCloseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelCloseInit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelCloseInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseInit.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseInit.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 3 [json_name = "signer"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseInit.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelCloseInit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelCloseInit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseInit.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseInit.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string signer = 3 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseInit.signer");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelCloseInit)
  return target;
}

::size_t MsgChannelCloseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelCloseInit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string signer = 3 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelCloseInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelCloseInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelCloseInit::GetClassData() const { return &_class_data_; }


void MsgChannelCloseInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelCloseInit*>(&to_msg);
  auto& from = static_cast<const MsgChannelCloseInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelCloseInit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelCloseInit::CopyFrom(const MsgChannelCloseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelCloseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelCloseInit::IsInitialized() const {
  return true;
}

void MsgChannelCloseInit::InternalSwap(MsgChannelCloseInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelCloseInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[8]);
}
// ===================================================================

class MsgChannelCloseInitResponse::_Internal {
 public:
};

MsgChannelCloseInitResponse::MsgChannelCloseInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelCloseInitResponse)
}
MsgChannelCloseInitResponse::MsgChannelCloseInitResponse(const MsgChannelCloseInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgChannelCloseInitResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelCloseInitResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelCloseInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelCloseInitResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelCloseInitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[9]);
}
// ===================================================================

class MsgChannelCloseConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgChannelCloseConfirm>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgChannelCloseConfirm, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const MsgChannelCloseConfirm* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
MsgChannelCloseConfirm::_Internal::proof_height(const MsgChannelCloseConfirm* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgChannelCloseConfirm::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgChannelCloseConfirm::MsgChannelCloseConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelCloseConfirm)
}
MsgChannelCloseConfirm::MsgChannelCloseConfirm(const MsgChannelCloseConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgChannelCloseConfirm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_init().empty()) {
    _this->_impl_.proof_init_.Set(from._internal_proof_init(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelCloseConfirm)
}

inline void MsgChannelCloseConfirm::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgChannelCloseConfirm::~MsgChannelCloseConfirm() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgChannelCloseConfirm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgChannelCloseConfirm::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.proof_init_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgChannelCloseConfirm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgChannelCloseConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgChannelCloseConfirm)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.proof_init_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgChannelCloseConfirm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseConfirm.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseConfirm.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_init = 3 [json_name = "proofInit"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof_init();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 5 [json_name = "signer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgChannelCloseConfirm.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgChannelCloseConfirm::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgChannelCloseConfirm)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseConfirm.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseConfirm.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes proof_init = 3 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    const std::string& _s = this->_internal_proof_init();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgChannelCloseConfirm.signer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgChannelCloseConfirm)
  return target;
}

::size_t MsgChannelCloseConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgChannelCloseConfirm)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // bytes proof_init = 3 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_init());
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelCloseConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgChannelCloseConfirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelCloseConfirm::GetClassData() const { return &_class_data_; }


void MsgChannelCloseConfirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgChannelCloseConfirm*>(&to_msg);
  auto& from = static_cast<const MsgChannelCloseConfirm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgChannelCloseConfirm)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_proof_init().empty()) {
    _this->_internal_set_proof_init(from._internal_proof_init());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgChannelCloseConfirm::CopyFrom(const MsgChannelCloseConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgChannelCloseConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChannelCloseConfirm::IsInitialized() const {
  return true;
}

void MsgChannelCloseConfirm::InternalSwap(MsgChannelCloseConfirm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_init_, lhs_arena,
                                       &other->_impl_.proof_init_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelCloseConfirm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[10]);
}
// ===================================================================

class MsgChannelCloseConfirmResponse::_Internal {
 public:
};

MsgChannelCloseConfirmResponse::MsgChannelCloseConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgChannelCloseConfirmResponse)
}
MsgChannelCloseConfirmResponse::MsgChannelCloseConfirmResponse(const MsgChannelCloseConfirmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgChannelCloseConfirmResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgChannelCloseConfirmResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgChannelCloseConfirmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgChannelCloseConfirmResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgChannelCloseConfirmResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[11]);
}
// ===================================================================

class MsgRecvPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgRecvPacket>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgRecvPacket, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Packet& packet(const MsgRecvPacket* msg);
  static void set_has_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgRecvPacket* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Packet&
MsgRecvPacket::_Internal::packet(const MsgRecvPacket* msg) {
  return *msg->_impl_.packet_;
}
const ::ibc::core::client::v1::Height&
MsgRecvPacket::_Internal::proof_height(const MsgRecvPacket* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgRecvPacket::clear_packet() {
  if (_impl_.packet_ != nullptr) _impl_.packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgRecvPacket::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgRecvPacket::MsgRecvPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgRecvPacket)
}
MsgRecvPacket::MsgRecvPacket(const MsgRecvPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRecvPacket* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_commitment_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_commitment().empty()) {
    _this->_impl_.proof_commitment_.Set(from._internal_proof_commitment(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_ = new ::ibc::core::channel::v1::Packet(*from._impl_.packet_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgRecvPacket)
}

inline void MsgRecvPacket::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_commitment_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.proof_commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgRecvPacket::~MsgRecvPacket() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgRecvPacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRecvPacket::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_commitment_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packet_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgRecvPacket::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRecvPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgRecvPacket)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_commitment_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_ != nullptr);
      _impl_.packet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRecvPacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_commitment = 2 [json_name = "proofCommitment"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof_commitment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 4 [json_name = "signer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgRecvPacket.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgRecvPacket::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgRecvPacket)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet(this),
        _Internal::packet(this).GetCachedSize(), target, stream);
  }

  // bytes proof_commitment = 2 [json_name = "proofCommitment"];
  if (!this->_internal_proof_commitment().empty()) {
    const std::string& _s = this->_internal_proof_commitment();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgRecvPacket.signer");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgRecvPacket)
  return target;
}

::size_t MsgRecvPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgRecvPacket)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof_commitment = 2 [json_name = "proofCommitment"];
  if (!this->_internal_proof_commitment().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_commitment());
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_);
    }

    // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRecvPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRecvPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRecvPacket::GetClassData() const { return &_class_data_; }


void MsgRecvPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRecvPacket*>(&to_msg);
  auto& from = static_cast<const MsgRecvPacket&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgRecvPacket)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof_commitment().empty()) {
    _this->_internal_set_proof_commitment(from._internal_proof_commitment());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet()->::ibc::core::channel::v1::Packet::MergeFrom(
          from._internal_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRecvPacket::CopyFrom(const MsgRecvPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgRecvPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecvPacket::IsInitialized() const {
  return true;
}

void MsgRecvPacket::InternalSwap(MsgRecvPacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_commitment_, lhs_arena,
                                       &other->_impl_.proof_commitment_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRecvPacket, _impl_.proof_height_)
      + sizeof(MsgRecvPacket::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(MsgRecvPacket, _impl_.packet_)>(
          reinterpret_cast<char*>(&_impl_.packet_),
          reinterpret_cast<char*>(&other->_impl_.packet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRecvPacket::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[12]);
}
// ===================================================================

class MsgRecvPacketResponse::_Internal {
 public:
};

MsgRecvPacketResponse::MsgRecvPacketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgRecvPacketResponse)
}
MsgRecvPacketResponse::MsgRecvPacketResponse(const MsgRecvPacketResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgRecvPacketResponse)
}

inline void MsgRecvPacketResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgRecvPacketResponse::~MsgRecvPacketResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgRecvPacketResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRecvPacketResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgRecvPacketResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRecvPacketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgRecvPacketResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRecvPacketResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::ibc::core::channel::v1::ResponseResultType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgRecvPacketResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgRecvPacketResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgRecvPacketResponse)
  return target;
}

::size_t MsgRecvPacketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgRecvPacketResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRecvPacketResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRecvPacketResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRecvPacketResponse::GetClassData() const { return &_class_data_; }


void MsgRecvPacketResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRecvPacketResponse*>(&to_msg);
  auto& from = static_cast<const MsgRecvPacketResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgRecvPacketResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRecvPacketResponse::CopyFrom(const MsgRecvPacketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgRecvPacketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRecvPacketResponse::IsInitialized() const {
  return true;
}

void MsgRecvPacketResponse::InternalSwap(MsgRecvPacketResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRecvPacketResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[13]);
}
// ===================================================================

class MsgTimeout::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgTimeout>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgTimeout, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Packet& packet(const MsgTimeout* msg);
  static void set_has_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgTimeout* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Packet&
MsgTimeout::_Internal::packet(const MsgTimeout* msg) {
  return *msg->_impl_.packet_;
}
const ::ibc::core::client::v1::Height&
MsgTimeout::_Internal::proof_height(const MsgTimeout* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgTimeout::clear_packet() {
  if (_impl_.packet_ != nullptr) _impl_.packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgTimeout::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgTimeout::MsgTimeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgTimeout)
}
MsgTimeout::MsgTimeout(const MsgTimeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgTimeout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_unreceived_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_recv_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_unreceived_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_unreceived_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_unreceived().empty()) {
    _this->_impl_.proof_unreceived_.Set(from._internal_proof_unreceived(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_ = new ::ibc::core::channel::v1::Packet(*from._impl_.packet_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  _this->_impl_.next_sequence_recv_ = from._impl_.next_sequence_recv_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgTimeout)
}

inline void MsgTimeout::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_unreceived_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_recv_) { ::uint64_t{0u} }

  };
  _impl_.proof_unreceived_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_unreceived_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgTimeout::~MsgTimeout() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgTimeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTimeout::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_unreceived_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packet_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgTimeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTimeout::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgTimeout)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_unreceived_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_ != nullptr);
      _impl_.packet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_.next_sequence_recv_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTimeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof_unreceived();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 next_sequence_recv = 4 [json_name = "nextSequenceRecv"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.next_sequence_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 5 [json_name = "signer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgTimeout.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgTimeout::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgTimeout)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet(this),
        _Internal::packet(this).GetCachedSize(), target, stream);
  }

  // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
  if (!this->_internal_proof_unreceived().empty()) {
    const std::string& _s = this->_internal_proof_unreceived();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // uint64 next_sequence_recv = 4 [json_name = "nextSequenceRecv"];
  if (this->_internal_next_sequence_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_next_sequence_recv(), target);
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgTimeout.signer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgTimeout)
  return target;
}

::size_t MsgTimeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgTimeout)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
  if (!this->_internal_proof_unreceived().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_unreceived());
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_);
    }

    // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  // uint64 next_sequence_recv = 4 [json_name = "nextSequenceRecv"];
  if (this->_internal_next_sequence_recv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_sequence_recv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTimeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTimeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTimeout::GetClassData() const { return &_class_data_; }


void MsgTimeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTimeout*>(&to_msg);
  auto& from = static_cast<const MsgTimeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgTimeout)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof_unreceived().empty()) {
    _this->_internal_set_proof_unreceived(from._internal_proof_unreceived());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet()->::ibc::core::channel::v1::Packet::MergeFrom(
          from._internal_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  if (from._internal_next_sequence_recv() != 0) {
    _this->_internal_set_next_sequence_recv(from._internal_next_sequence_recv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTimeout::CopyFrom(const MsgTimeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgTimeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTimeout::IsInitialized() const {
  return true;
}

void MsgTimeout::InternalSwap(MsgTimeout* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_unreceived_, lhs_arena,
                                       &other->_impl_.proof_unreceived_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTimeout, _impl_.next_sequence_recv_)
      + sizeof(MsgTimeout::_impl_.next_sequence_recv_)
      - PROTOBUF_FIELD_OFFSET(MsgTimeout, _impl_.packet_)>(
          reinterpret_cast<char*>(&_impl_.packet_),
          reinterpret_cast<char*>(&other->_impl_.packet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTimeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[14]);
}
// ===================================================================

class MsgTimeoutResponse::_Internal {
 public:
};

MsgTimeoutResponse::MsgTimeoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgTimeoutResponse)
}
MsgTimeoutResponse::MsgTimeoutResponse(const MsgTimeoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgTimeoutResponse)
}

inline void MsgTimeoutResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgTimeoutResponse::~MsgTimeoutResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgTimeoutResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTimeoutResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgTimeoutResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTimeoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgTimeoutResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTimeoutResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::ibc::core::channel::v1::ResponseResultType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgTimeoutResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgTimeoutResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgTimeoutResponse)
  return target;
}

::size_t MsgTimeoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgTimeoutResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTimeoutResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTimeoutResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTimeoutResponse::GetClassData() const { return &_class_data_; }


void MsgTimeoutResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTimeoutResponse*>(&to_msg);
  auto& from = static_cast<const MsgTimeoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgTimeoutResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTimeoutResponse::CopyFrom(const MsgTimeoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgTimeoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTimeoutResponse::IsInitialized() const {
  return true;
}

void MsgTimeoutResponse::InternalSwap(MsgTimeoutResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTimeoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[15]);
}
// ===================================================================

class MsgTimeoutOnClose::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgTimeoutOnClose>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgTimeoutOnClose, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Packet& packet(const MsgTimeoutOnClose* msg);
  static void set_has_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgTimeoutOnClose* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Packet&
MsgTimeoutOnClose::_Internal::packet(const MsgTimeoutOnClose* msg) {
  return *msg->_impl_.packet_;
}
const ::ibc::core::client::v1::Height&
MsgTimeoutOnClose::_Internal::proof_height(const MsgTimeoutOnClose* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgTimeoutOnClose::clear_packet() {
  if (_impl_.packet_ != nullptr) _impl_.packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgTimeoutOnClose::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgTimeoutOnClose::MsgTimeoutOnClose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgTimeoutOnClose)
}
MsgTimeoutOnClose::MsgTimeoutOnClose(const MsgTimeoutOnClose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgTimeoutOnClose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_unreceived_) {}

    , decltype(_impl_.proof_close_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_recv_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_unreceived_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_unreceived_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_unreceived().empty()) {
    _this->_impl_.proof_unreceived_.Set(from._internal_proof_unreceived(), _this->GetArenaForAllocation());
  }
  _impl_.proof_close_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_close_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_close().empty()) {
    _this->_impl_.proof_close_.Set(from._internal_proof_close(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_ = new ::ibc::core::channel::v1::Packet(*from._impl_.packet_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  _this->_impl_.next_sequence_recv_ = from._impl_.next_sequence_recv_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgTimeoutOnClose)
}

inline void MsgTimeoutOnClose::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_unreceived_) {}

    , decltype(_impl_.proof_close_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_recv_) { ::uint64_t{0u} }

  };
  _impl_.proof_unreceived_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_unreceived_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_close_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_close_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgTimeoutOnClose::~MsgTimeoutOnClose() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgTimeoutOnClose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTimeoutOnClose::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_unreceived_.Destroy();
  _impl_.proof_close_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packet_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgTimeoutOnClose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTimeoutOnClose::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgTimeoutOnClose)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_unreceived_.ClearToEmpty();
  _impl_.proof_close_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_ != nullptr);
      _impl_.packet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_.next_sequence_recv_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTimeoutOnClose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof_unreceived();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_close = 3 [json_name = "proofClose"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof_close();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 next_sequence_recv = 5 [json_name = "nextSequenceRecv"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.next_sequence_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 6 [json_name = "signer"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgTimeoutOnClose.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgTimeoutOnClose::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgTimeoutOnClose)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet(this),
        _Internal::packet(this).GetCachedSize(), target, stream);
  }

  // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
  if (!this->_internal_proof_unreceived().empty()) {
    const std::string& _s = this->_internal_proof_unreceived();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes proof_close = 3 [json_name = "proofClose"];
  if (!this->_internal_proof_close().empty()) {
    const std::string& _s = this->_internal_proof_close();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // uint64 next_sequence_recv = 5 [json_name = "nextSequenceRecv"];
  if (this->_internal_next_sequence_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_next_sequence_recv(), target);
  }

  // string signer = 6 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgTimeoutOnClose.signer");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgTimeoutOnClose)
  return target;
}

::size_t MsgTimeoutOnClose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgTimeoutOnClose)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof_unreceived = 2 [json_name = "proofUnreceived"];
  if (!this->_internal_proof_unreceived().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_unreceived());
  }

  // bytes proof_close = 3 [json_name = "proofClose"];
  if (!this->_internal_proof_close().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_close());
  }

  // string signer = 6 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_);
    }

    // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  // uint64 next_sequence_recv = 5 [json_name = "nextSequenceRecv"];
  if (this->_internal_next_sequence_recv() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_sequence_recv());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTimeoutOnClose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTimeoutOnClose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTimeoutOnClose::GetClassData() const { return &_class_data_; }


void MsgTimeoutOnClose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTimeoutOnClose*>(&to_msg);
  auto& from = static_cast<const MsgTimeoutOnClose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgTimeoutOnClose)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof_unreceived().empty()) {
    _this->_internal_set_proof_unreceived(from._internal_proof_unreceived());
  }
  if (!from._internal_proof_close().empty()) {
    _this->_internal_set_proof_close(from._internal_proof_close());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet()->::ibc::core::channel::v1::Packet::MergeFrom(
          from._internal_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  if (from._internal_next_sequence_recv() != 0) {
    _this->_internal_set_next_sequence_recv(from._internal_next_sequence_recv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTimeoutOnClose::CopyFrom(const MsgTimeoutOnClose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgTimeoutOnClose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTimeoutOnClose::IsInitialized() const {
  return true;
}

void MsgTimeoutOnClose::InternalSwap(MsgTimeoutOnClose* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_unreceived_, lhs_arena,
                                       &other->_impl_.proof_unreceived_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_close_, lhs_arena,
                                       &other->_impl_.proof_close_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTimeoutOnClose, _impl_.next_sequence_recv_)
      + sizeof(MsgTimeoutOnClose::_impl_.next_sequence_recv_)
      - PROTOBUF_FIELD_OFFSET(MsgTimeoutOnClose, _impl_.packet_)>(
          reinterpret_cast<char*>(&_impl_.packet_),
          reinterpret_cast<char*>(&other->_impl_.packet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTimeoutOnClose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[16]);
}
// ===================================================================

class MsgTimeoutOnCloseResponse::_Internal {
 public:
};

MsgTimeoutOnCloseResponse::MsgTimeoutOnCloseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
}
MsgTimeoutOnCloseResponse::MsgTimeoutOnCloseResponse(const MsgTimeoutOnCloseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
}

inline void MsgTimeoutOnCloseResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgTimeoutOnCloseResponse::~MsgTimeoutOnCloseResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTimeoutOnCloseResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgTimeoutOnCloseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTimeoutOnCloseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTimeoutOnCloseResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::ibc::core::channel::v1::ResponseResultType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgTimeoutOnCloseResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  return target;
}

::size_t MsgTimeoutOnCloseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTimeoutOnCloseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTimeoutOnCloseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTimeoutOnCloseResponse::GetClassData() const { return &_class_data_; }


void MsgTimeoutOnCloseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTimeoutOnCloseResponse*>(&to_msg);
  auto& from = static_cast<const MsgTimeoutOnCloseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTimeoutOnCloseResponse::CopyFrom(const MsgTimeoutOnCloseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgTimeoutOnCloseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTimeoutOnCloseResponse::IsInitialized() const {
  return true;
}

void MsgTimeoutOnCloseResponse::InternalSwap(MsgTimeoutOnCloseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTimeoutOnCloseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[17]);
}
// ===================================================================

class MsgAcknowledgement::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgAcknowledgement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgAcknowledgement, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Packet& packet(const MsgAcknowledgement* msg);
  static void set_has_packet(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgAcknowledgement* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Packet&
MsgAcknowledgement::_Internal::packet(const MsgAcknowledgement* msg) {
  return *msg->_impl_.packet_;
}
const ::ibc::core::client::v1::Height&
MsgAcknowledgement::_Internal::proof_height(const MsgAcknowledgement* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgAcknowledgement::clear_packet() {
  if (_impl_.packet_ != nullptr) _impl_.packet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgAcknowledgement::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgAcknowledgement::MsgAcknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgAcknowledgement)
}
MsgAcknowledgement::MsgAcknowledgement(const MsgAcknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgAcknowledgement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_) {}

    , decltype(_impl_.proof_acked_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acknowledgement().empty()) {
    _this->_impl_.acknowledgement_.Set(from._internal_acknowledgement(), _this->GetArenaForAllocation());
  }
  _impl_.proof_acked_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_acked_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_acked().empty()) {
    _this->_impl_.proof_acked_.Set(from._internal_proof_acked(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.packet_ = new ::ibc::core::channel::v1::Packet(*from._impl_.packet_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgAcknowledgement)
}

inline void MsgAcknowledgement::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_) {}

    , decltype(_impl_.proof_acked_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.packet_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_acked_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_acked_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgAcknowledgement::~MsgAcknowledgement() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgAcknowledgement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgAcknowledgement::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acknowledgement_.Destroy();
  _impl_.proof_acked_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.packet_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgAcknowledgement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgAcknowledgement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledgement_.ClearToEmpty();
  _impl_.proof_acked_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.packet_ != nullptr);
      _impl_.packet_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAcknowledgement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes acknowledgement = 2 [json_name = "acknowledgement"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_acknowledgement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_acked = 3 [json_name = "proofAcked"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof_acked();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 5 [json_name = "signer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.MsgAcknowledgement.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgAcknowledgement::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgAcknowledgement)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::packet(this),
        _Internal::packet(this).GetCachedSize(), target, stream);
  }

  // bytes acknowledgement = 2 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    const std::string& _s = this->_internal_acknowledgement();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes proof_acked = 3 [json_name = "proofAcked"];
  if (!this->_internal_proof_acked().empty()) {
    const std::string& _s = this->_internal_proof_acked();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.MsgAcknowledgement.signer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgAcknowledgement)
  return target;
}

::size_t MsgAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgAcknowledgement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes acknowledgement = 2 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_acknowledgement());
  }

  // bytes proof_acked = 3 [json_name = "proofAcked"];
  if (!this->_internal_proof_acked().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_acked());
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Packet packet = 1 [json_name = "packet", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_);
    }

    // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgAcknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgAcknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgAcknowledgement::GetClassData() const { return &_class_data_; }


void MsgAcknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgAcknowledgement*>(&to_msg);
  auto& from = static_cast<const MsgAcknowledgement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgAcknowledgement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acknowledgement().empty()) {
    _this->_internal_set_acknowledgement(from._internal_acknowledgement());
  }
  if (!from._internal_proof_acked().empty()) {
    _this->_internal_set_proof_acked(from._internal_proof_acked());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_packet()->::ibc::core::channel::v1::Packet::MergeFrom(
          from._internal_packet());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgAcknowledgement::CopyFrom(const MsgAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAcknowledgement::IsInitialized() const {
  return true;
}

void MsgAcknowledgement::InternalSwap(MsgAcknowledgement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acknowledgement_, lhs_arena,
                                       &other->_impl_.acknowledgement_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_acked_, lhs_arena,
                                       &other->_impl_.proof_acked_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgAcknowledgement, _impl_.proof_height_)
      + sizeof(MsgAcknowledgement::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(MsgAcknowledgement, _impl_.packet_)>(
          reinterpret_cast<char*>(&_impl_.packet_),
          reinterpret_cast<char*>(&other->_impl_.packet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAcknowledgement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[18]);
}
// ===================================================================

class MsgAcknowledgementResponse::_Internal {
 public:
};

MsgAcknowledgementResponse::MsgAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.MsgAcknowledgementResponse)
}
MsgAcknowledgementResponse::MsgAcknowledgementResponse(const MsgAcknowledgementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.MsgAcknowledgementResponse)
}

inline void MsgAcknowledgementResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.result_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgAcknowledgementResponse::~MsgAcknowledgementResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.MsgAcknowledgementResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgAcknowledgementResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgAcknowledgementResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgAcknowledgementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.MsgAcknowledgementResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgAcknowledgementResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::ibc::core::channel::v1::ResponseResultType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgAcknowledgementResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.MsgAcknowledgementResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.MsgAcknowledgementResponse)
  return target;
}

::size_t MsgAcknowledgementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.MsgAcknowledgementResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.channel.v1.ResponseResultType result = 1 [json_name = "result"];
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgAcknowledgementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgAcknowledgementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgAcknowledgementResponse::GetClassData() const { return &_class_data_; }


void MsgAcknowledgementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgAcknowledgementResponse*>(&to_msg);
  auto& from = static_cast<const MsgAcknowledgementResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.MsgAcknowledgementResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgAcknowledgementResponse::CopyFrom(const MsgAcknowledgementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.MsgAcknowledgementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAcknowledgementResponse::IsInitialized() const {
  return true;
}

void MsgAcknowledgementResponse::InternalSwap(MsgAcknowledgementResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgAcknowledgementResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2ftx_2eproto[19]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenInit*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenInit >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenInitResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenTry*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenTry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenTry >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenTryResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenTryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenTryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenAck*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenAckResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenAckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenAckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenConfirm*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelOpenConfirmResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelOpenConfirmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelOpenConfirmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelCloseInit*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelCloseInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelCloseInit >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelCloseInitResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelCloseInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelCloseInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelCloseConfirm*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelCloseConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelCloseConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgChannelCloseConfirmResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgChannelCloseConfirmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgChannelCloseConfirmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgRecvPacket*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgRecvPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgRecvPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgRecvPacketResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgRecvPacketResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgRecvPacketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgTimeout*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgTimeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgTimeout >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgTimeoutResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgTimeoutResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgTimeoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgTimeoutOnClose*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgTimeoutOnClose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgTimeoutOnClose >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgTimeoutOnCloseResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgTimeoutOnCloseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgTimeoutOnCloseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgAcknowledgement*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgAcknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgAcknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::MsgAcknowledgementResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::MsgAcknowledgementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::MsgAcknowledgementResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

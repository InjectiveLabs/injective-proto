// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/channel/v1/query.proto

#include "ibc/core/channel/v1/query.pb.h"
#include "ibc/core/channel/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace core {
namespace channel {
namespace v1 {

static const char* Query_method_names[] = {
  "/ibc.core.channel.v1.Query/Channel",
  "/ibc.core.channel.v1.Query/Channels",
  "/ibc.core.channel.v1.Query/ConnectionChannels",
  "/ibc.core.channel.v1.Query/ChannelClientState",
  "/ibc.core.channel.v1.Query/ChannelConsensusState",
  "/ibc.core.channel.v1.Query/PacketCommitment",
  "/ibc.core.channel.v1.Query/PacketCommitments",
  "/ibc.core.channel.v1.Query/PacketReceipt",
  "/ibc.core.channel.v1.Query/PacketAcknowledgement",
  "/ibc.core.channel.v1.Query/PacketAcknowledgements",
  "/ibc.core.channel.v1.Query/UnreceivedPackets",
  "/ibc.core.channel.v1.Query/UnreceivedAcks",
  "/ibc.core.channel.v1.Query/NextSequenceReceive",
  "/ibc.core.channel.v1.Query/NextSequenceSend",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Channel_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Channels_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionChannels_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelClientState_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelConsensusState_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PacketCommitment_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PacketCommitments_(Query_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PacketReceipt_(Query_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PacketAcknowledgement_(Query_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PacketAcknowledgements_(Query_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnreceivedPackets_(Query_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnreceivedAcks_(Query_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NextSequenceReceive_(Query_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NextSequenceSend_(Query_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::ibc::core::channel::v1::QueryChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Channel_, context, request, response);
}

void Query::Stub::async::Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Channel_, context, request, response, std::move(f));
}

void Query::Stub::async::Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Channel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>* Query::Stub::PrepareAsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryChannelResponse, ::ibc::core::channel::v1::QueryChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Channel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>* Query::Stub::AsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::ibc::core::channel::v1::QueryChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Channels_, context, request, response);
}

void Query::Stub::async::Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Channels_, context, request, response, std::move(f));
}

void Query::Stub::async::Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Channels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>* Query::Stub::PrepareAsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryChannelsResponse, ::ibc::core::channel::v1::QueryChannelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Channels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>* Query::Stub::AsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionChannels_, context, request, response);
}

void Query::Stub::async::ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionChannels_, context, request, response, std::move(f));
}

void Query::Stub::async::ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* Query::Stub::PrepareAsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryConnectionChannelsResponse, ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* Query::Stub::AsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChannelClientState_, context, request, response);
}

void Query::Stub::async::ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChannelClientState_, context, request, response, std::move(f));
}

void Query::Stub::async::ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChannelClientState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* Query::Stub::PrepareAsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryChannelClientStateResponse, ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChannelClientState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* Query::Stub::AsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChannelClientStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChannelConsensusState_, context, request, response);
}

void Query::Stub::async::ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChannelConsensusState_, context, request, response, std::move(f));
}

void Query::Stub::async::ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChannelConsensusState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* Query::Stub::PrepareAsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse, ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChannelConsensusState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* Query::Stub::AsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChannelConsensusStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PacketCommitment_, context, request, response);
}

void Query::Stub::async::PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketCommitment_, context, request, response, std::move(f));
}

void Query::Stub::async::PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketCommitment_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* Query::Stub::PrepareAsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryPacketCommitmentResponse, ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PacketCommitment_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* Query::Stub::AsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPacketCommitmentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PacketCommitments_, context, request, response);
}

void Query::Stub::async::PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketCommitments_, context, request, response, std::move(f));
}

void Query::Stub::async::PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketCommitments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* Query::Stub::PrepareAsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse, ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PacketCommitments_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* Query::Stub::AsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPacketCommitmentsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PacketReceipt_, context, request, response);
}

void Query::Stub::async::PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketReceipt_, context, request, response, std::move(f));
}

void Query::Stub::async::PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketReceipt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* Query::Stub::PrepareAsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryPacketReceiptResponse, ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PacketReceipt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* Query::Stub::AsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPacketReceiptRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PacketAcknowledgement_, context, request, response);
}

void Query::Stub::async::PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketAcknowledgement_, context, request, response, std::move(f));
}

void Query::Stub::async::PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketAcknowledgement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* Query::Stub::PrepareAsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PacketAcknowledgement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* Query::Stub::AsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPacketAcknowledgementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PacketAcknowledgements_, context, request, response);
}

void Query::Stub::async::PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketAcknowledgements_, context, request, response, std::move(f));
}

void Query::Stub::async::PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PacketAcknowledgements_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* Query::Stub::PrepareAsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PacketAcknowledgements_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* Query::Stub::AsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPacketAcknowledgementsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnreceivedPackets_, context, request, response);
}

void Query::Stub::async::UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnreceivedPackets_, context, request, response, std::move(f));
}

void Query::Stub::async::UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnreceivedPackets_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* Query::Stub::PrepareAsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnreceivedPackets_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* Query::Stub::AsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnreceivedPacketsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnreceivedAcks_, context, request, response);
}

void Query::Stub::async::UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnreceivedAcks_, context, request, response, std::move(f));
}

void Query::Stub::async::UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnreceivedAcks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* Query::Stub::PrepareAsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse, ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnreceivedAcks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* Query::Stub::AsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnreceivedAcksRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NextSequenceReceive_, context, request, response);
}

void Query::Stub::async::NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextSequenceReceive_, context, request, response, std::move(f));
}

void Query::Stub::async::NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextSequenceReceive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* Query::Stub::PrepareAsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NextSequenceReceive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* Query::Stub::AsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextSequenceReceiveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_NextSequenceSend_, context, request, response);
}

void Query::Stub::async::NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextSequenceSend_, context, request, response, std::move(f));
}

void Query::Stub::async::NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_NextSequenceSend_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* Query::Stub::PrepareAsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::channel::v1::QueryNextSequenceSendResponse, ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_NextSequenceSend_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* Query::Stub::AsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncNextSequenceSendRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryChannelRequest* req,
             ::ibc::core::channel::v1::QueryChannelResponse* resp) {
               return service->Channel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryChannelsRequest* req,
             ::ibc::core::channel::v1::QueryChannelsResponse* resp) {
               return service->Channels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* req,
             ::ibc::core::channel::v1::QueryConnectionChannelsResponse* resp) {
               return service->ConnectionChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryChannelClientStateRequest* req,
             ::ibc::core::channel::v1::QueryChannelClientStateResponse* resp) {
               return service->ChannelClientState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* req,
             ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* resp) {
               return service->ChannelConsensusState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* req,
             ::ibc::core::channel::v1::QueryPacketCommitmentResponse* resp) {
               return service->PacketCommitment(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* req,
             ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* resp) {
               return service->PacketCommitments(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryPacketReceiptRequest* req,
             ::ibc::core::channel::v1::QueryPacketReceiptResponse* resp) {
               return service->PacketReceipt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* req,
             ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* resp) {
               return service->PacketAcknowledgement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* req,
             ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* resp) {
               return service->PacketAcknowledgements(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* req,
             ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* resp) {
               return service->UnreceivedPackets(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* req,
             ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* resp) {
               return service->UnreceivedAcks(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* req,
             ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* resp) {
               return service->NextSequenceReceive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* req,
             ::ibc::core::channel::v1::QueryNextSequenceSendResponse* resp) {
               return service->NextSequenceSend(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Channel(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Channels(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConnectionChannels(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ChannelClientState(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ChannelConsensusState(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PacketCommitment(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PacketCommitments(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PacketReceipt(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PacketAcknowledgement(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::PacketAcknowledgements(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::UnreceivedPackets(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::UnreceivedAcks(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::NextSequenceReceive(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::NextSequenceSend(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace core
}  // namespace channel
}  // namespace v1


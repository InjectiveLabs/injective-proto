// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/channel/v1/query.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "ibc/core/client/v1/client.pb.h"
#include "cosmos/base/query/v1beta1/pagination.pb.h"
#include "ibc/core/channel/v1/channel.pb.h"
#include "google/api/annotations.pb.h"
#include "google/protobuf/any.pb.h"
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
class QueryChannelClientStateRequest;
struct QueryChannelClientStateRequestDefaultTypeInternal;
extern QueryChannelClientStateRequestDefaultTypeInternal _QueryChannelClientStateRequest_default_instance_;
class QueryChannelClientStateResponse;
struct QueryChannelClientStateResponseDefaultTypeInternal;
extern QueryChannelClientStateResponseDefaultTypeInternal _QueryChannelClientStateResponse_default_instance_;
class QueryChannelConsensusStateRequest;
struct QueryChannelConsensusStateRequestDefaultTypeInternal;
extern QueryChannelConsensusStateRequestDefaultTypeInternal _QueryChannelConsensusStateRequest_default_instance_;
class QueryChannelConsensusStateResponse;
struct QueryChannelConsensusStateResponseDefaultTypeInternal;
extern QueryChannelConsensusStateResponseDefaultTypeInternal _QueryChannelConsensusStateResponse_default_instance_;
class QueryChannelRequest;
struct QueryChannelRequestDefaultTypeInternal;
extern QueryChannelRequestDefaultTypeInternal _QueryChannelRequest_default_instance_;
class QueryChannelResponse;
struct QueryChannelResponseDefaultTypeInternal;
extern QueryChannelResponseDefaultTypeInternal _QueryChannelResponse_default_instance_;
class QueryChannelsRequest;
struct QueryChannelsRequestDefaultTypeInternal;
extern QueryChannelsRequestDefaultTypeInternal _QueryChannelsRequest_default_instance_;
class QueryChannelsResponse;
struct QueryChannelsResponseDefaultTypeInternal;
extern QueryChannelsResponseDefaultTypeInternal _QueryChannelsResponse_default_instance_;
class QueryConnectionChannelsRequest;
struct QueryConnectionChannelsRequestDefaultTypeInternal;
extern QueryConnectionChannelsRequestDefaultTypeInternal _QueryConnectionChannelsRequest_default_instance_;
class QueryConnectionChannelsResponse;
struct QueryConnectionChannelsResponseDefaultTypeInternal;
extern QueryConnectionChannelsResponseDefaultTypeInternal _QueryConnectionChannelsResponse_default_instance_;
class QueryNextSequenceReceiveRequest;
struct QueryNextSequenceReceiveRequestDefaultTypeInternal;
extern QueryNextSequenceReceiveRequestDefaultTypeInternal _QueryNextSequenceReceiveRequest_default_instance_;
class QueryNextSequenceReceiveResponse;
struct QueryNextSequenceReceiveResponseDefaultTypeInternal;
extern QueryNextSequenceReceiveResponseDefaultTypeInternal _QueryNextSequenceReceiveResponse_default_instance_;
class QueryNextSequenceSendRequest;
struct QueryNextSequenceSendRequestDefaultTypeInternal;
extern QueryNextSequenceSendRequestDefaultTypeInternal _QueryNextSequenceSendRequest_default_instance_;
class QueryNextSequenceSendResponse;
struct QueryNextSequenceSendResponseDefaultTypeInternal;
extern QueryNextSequenceSendResponseDefaultTypeInternal _QueryNextSequenceSendResponse_default_instance_;
class QueryPacketAcknowledgementRequest;
struct QueryPacketAcknowledgementRequestDefaultTypeInternal;
extern QueryPacketAcknowledgementRequestDefaultTypeInternal _QueryPacketAcknowledgementRequest_default_instance_;
class QueryPacketAcknowledgementResponse;
struct QueryPacketAcknowledgementResponseDefaultTypeInternal;
extern QueryPacketAcknowledgementResponseDefaultTypeInternal _QueryPacketAcknowledgementResponse_default_instance_;
class QueryPacketAcknowledgementsRequest;
struct QueryPacketAcknowledgementsRequestDefaultTypeInternal;
extern QueryPacketAcknowledgementsRequestDefaultTypeInternal _QueryPacketAcknowledgementsRequest_default_instance_;
class QueryPacketAcknowledgementsResponse;
struct QueryPacketAcknowledgementsResponseDefaultTypeInternal;
extern QueryPacketAcknowledgementsResponseDefaultTypeInternal _QueryPacketAcknowledgementsResponse_default_instance_;
class QueryPacketCommitmentRequest;
struct QueryPacketCommitmentRequestDefaultTypeInternal;
extern QueryPacketCommitmentRequestDefaultTypeInternal _QueryPacketCommitmentRequest_default_instance_;
class QueryPacketCommitmentResponse;
struct QueryPacketCommitmentResponseDefaultTypeInternal;
extern QueryPacketCommitmentResponseDefaultTypeInternal _QueryPacketCommitmentResponse_default_instance_;
class QueryPacketCommitmentsRequest;
struct QueryPacketCommitmentsRequestDefaultTypeInternal;
extern QueryPacketCommitmentsRequestDefaultTypeInternal _QueryPacketCommitmentsRequest_default_instance_;
class QueryPacketCommitmentsResponse;
struct QueryPacketCommitmentsResponseDefaultTypeInternal;
extern QueryPacketCommitmentsResponseDefaultTypeInternal _QueryPacketCommitmentsResponse_default_instance_;
class QueryPacketReceiptRequest;
struct QueryPacketReceiptRequestDefaultTypeInternal;
extern QueryPacketReceiptRequestDefaultTypeInternal _QueryPacketReceiptRequest_default_instance_;
class QueryPacketReceiptResponse;
struct QueryPacketReceiptResponseDefaultTypeInternal;
extern QueryPacketReceiptResponseDefaultTypeInternal _QueryPacketReceiptResponse_default_instance_;
class QueryUnreceivedAcksRequest;
struct QueryUnreceivedAcksRequestDefaultTypeInternal;
extern QueryUnreceivedAcksRequestDefaultTypeInternal _QueryUnreceivedAcksRequest_default_instance_;
class QueryUnreceivedAcksResponse;
struct QueryUnreceivedAcksResponseDefaultTypeInternal;
extern QueryUnreceivedAcksResponseDefaultTypeInternal _QueryUnreceivedAcksResponse_default_instance_;
class QueryUnreceivedPacketsRequest;
struct QueryUnreceivedPacketsRequestDefaultTypeInternal;
extern QueryUnreceivedPacketsRequestDefaultTypeInternal _QueryUnreceivedPacketsRequest_default_instance_;
class QueryUnreceivedPacketsResponse;
struct QueryUnreceivedPacketsResponseDefaultTypeInternal;
extern QueryUnreceivedPacketsResponseDefaultTypeInternal _QueryUnreceivedPacketsResponse_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::core::channel::v1::QueryChannelClientStateRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelClientStateRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelClientStateResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelClientStateResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelConsensusStateRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelConsensusStateRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelConsensusStateResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelConsensusStateResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelsRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelsRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryChannelsResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryChannelsResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryConnectionChannelsRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryConnectionChannelsRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryConnectionChannelsResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryConnectionChannelsResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryNextSequenceReceiveRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryNextSequenceSendRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryNextSequenceSendRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryNextSequenceSendResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryNextSequenceSendResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketAcknowledgementRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketCommitmentRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketCommitmentRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketCommitmentResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketCommitmentResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketCommitmentsRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketCommitmentsRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketCommitmentsResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketCommitmentsResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketReceiptRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketReceiptRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryPacketReceiptResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryPacketReceiptResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryUnreceivedAcksRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryUnreceivedAcksRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryUnreceivedAcksResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryUnreceivedAcksResponse>(Arena*);
template <>
::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryUnreceivedPacketsRequest>(Arena*);
template <>
::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* Arena::CreateMaybeMessage<::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace core {
namespace channel {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class QueryChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelRequest) */ {
 public:
  inline QueryChannelRequest() : QueryChannelRequest(nullptr) {}
  ~QueryChannelRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelRequest(const QueryChannelRequest& from);
  QueryChannelRequest(QueryChannelRequest&& from) noexcept
    : QueryChannelRequest() {
    *this = ::std::move(from);
  }

  inline QueryChannelRequest& operator=(const QueryChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelRequest& operator=(QueryChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelRequest* internal_default_instance() {
    return reinterpret_cast<const QueryChannelRequest*>(
               &_QueryChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryChannelRequest& a, QueryChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelRequest& from) {
    QueryChannelRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelRequest";
  }
  protected:
  explicit QueryChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelResponse) */ {
 public:
  inline QueryChannelResponse() : QueryChannelResponse(nullptr) {}
  ~QueryChannelResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelResponse(const QueryChannelResponse& from);
  QueryChannelResponse(QueryChannelResponse&& from) noexcept
    : QueryChannelResponse() {
    *this = ::std::move(from);
  }

  inline QueryChannelResponse& operator=(const QueryChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelResponse& operator=(QueryChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelResponse* internal_default_instance() {
    return reinterpret_cast<const QueryChannelResponse*>(
               &_QueryChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryChannelResponse& a, QueryChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelResponse& from) {
    QueryChannelResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelResponse";
  }
  protected:
  explicit QueryChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kChannelFieldNumber = 1,
    kProofHeightFieldNumber = 3,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.channel.v1.Channel channel = 1 [json_name = "channel"];
  bool has_channel() const;
  void clear_channel() ;
  const ::ibc::core::channel::v1::Channel& channel() const;
  PROTOBUF_NODISCARD ::ibc::core::channel::v1::Channel* release_channel();
  ::ibc::core::channel::v1::Channel* mutable_channel();
  void set_allocated_channel(::ibc::core::channel::v1::Channel* channel);
  private:
  const ::ibc::core::channel::v1::Channel& _internal_channel() const;
  ::ibc::core::channel::v1::Channel* _internal_mutable_channel();
  public:
  void unsafe_arena_set_allocated_channel(
      ::ibc::core::channel::v1::Channel* channel);
  ::ibc::core::channel::v1::Channel* unsafe_arena_release_channel();
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::channel::v1::Channel* channel_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelsRequest) */ {
 public:
  inline QueryChannelsRequest() : QueryChannelsRequest(nullptr) {}
  ~QueryChannelsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelsRequest(const QueryChannelsRequest& from);
  QueryChannelsRequest(QueryChannelsRequest&& from) noexcept
    : QueryChannelsRequest() {
    *this = ::std::move(from);
  }

  inline QueryChannelsRequest& operator=(const QueryChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelsRequest& operator=(QueryChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryChannelsRequest*>(
               &_QueryChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryChannelsRequest& a, QueryChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelsRequest& from) {
    QueryChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelsRequest";
  }
  protected:
  explicit QueryChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaginationFieldNumber = 1,
  };
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelsResponse) */ {
 public:
  inline QueryChannelsResponse() : QueryChannelsResponse(nullptr) {}
  ~QueryChannelsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelsResponse(const QueryChannelsResponse& from);
  QueryChannelsResponse(QueryChannelsResponse&& from) noexcept
    : QueryChannelsResponse() {
    *this = ::std::move(from);
  }

  inline QueryChannelsResponse& operator=(const QueryChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelsResponse& operator=(QueryChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryChannelsResponse*>(
               &_QueryChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryChannelsResponse& a, QueryChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelsResponse& from) {
    QueryChannelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelsResponse";
  }
  protected:
  explicit QueryChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::ibc::core::channel::v1::IdentifiedChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >*
      mutable_channels();
  private:
  const ::ibc::core::channel::v1::IdentifiedChannel& _internal_channels(int index) const;
  ::ibc::core::channel::v1::IdentifiedChannel* _internal_add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>& _internal_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>* _internal_mutable_channels();
  public:
  const ::ibc::core::channel::v1::IdentifiedChannel& channels(int index) const;
  ::ibc::core::channel::v1::IdentifiedChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >&
      channels() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel > channels_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConnectionChannelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryConnectionChannelsRequest) */ {
 public:
  inline QueryConnectionChannelsRequest() : QueryConnectionChannelsRequest(nullptr) {}
  ~QueryConnectionChannelsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConnectionChannelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConnectionChannelsRequest(const QueryConnectionChannelsRequest& from);
  QueryConnectionChannelsRequest(QueryConnectionChannelsRequest&& from) noexcept
    : QueryConnectionChannelsRequest() {
    *this = ::std::move(from);
  }

  inline QueryConnectionChannelsRequest& operator=(const QueryConnectionChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConnectionChannelsRequest& operator=(QueryConnectionChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConnectionChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConnectionChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryConnectionChannelsRequest*>(
               &_QueryConnectionChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryConnectionChannelsRequest& a, QueryConnectionChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConnectionChannelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConnectionChannelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConnectionChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConnectionChannelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConnectionChannelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConnectionChannelsRequest& from) {
    QueryConnectionChannelsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConnectionChannelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryConnectionChannelsRequest";
  }
  protected:
  explicit QueryConnectionChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionFieldNumber = 1,
    kPaginationFieldNumber = 2,
  };
  // string connection = 1 [json_name = "connection"];
  void clear_connection() ;
  const std::string& connection() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection(Arg_&& arg, Args_... args);
  std::string* mutable_connection();
  PROTOBUF_NODISCARD std::string* release_connection();
  void set_allocated_connection(std::string* ptr);

  private:
  const std::string& _internal_connection() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection(
      const std::string& value);
  std::string* _internal_mutable_connection();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryConnectionChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryConnectionChannelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryConnectionChannelsResponse) */ {
 public:
  inline QueryConnectionChannelsResponse() : QueryConnectionChannelsResponse(nullptr) {}
  ~QueryConnectionChannelsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryConnectionChannelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryConnectionChannelsResponse(const QueryConnectionChannelsResponse& from);
  QueryConnectionChannelsResponse(QueryConnectionChannelsResponse&& from) noexcept
    : QueryConnectionChannelsResponse() {
    *this = ::std::move(from);
  }

  inline QueryConnectionChannelsResponse& operator=(const QueryConnectionChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryConnectionChannelsResponse& operator=(QueryConnectionChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryConnectionChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryConnectionChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryConnectionChannelsResponse*>(
               &_QueryConnectionChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryConnectionChannelsResponse& a, QueryConnectionChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryConnectionChannelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryConnectionChannelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryConnectionChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryConnectionChannelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryConnectionChannelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryConnectionChannelsResponse& from) {
    QueryConnectionChannelsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryConnectionChannelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryConnectionChannelsResponse";
  }
  protected:
  explicit QueryConnectionChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  int channels_size() const;
  private:
  int _internal_channels_size() const;

  public:
  void clear_channels() ;
  ::ibc::core::channel::v1::IdentifiedChannel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >*
      mutable_channels();
  private:
  const ::ibc::core::channel::v1::IdentifiedChannel& _internal_channels(int index) const;
  ::ibc::core::channel::v1::IdentifiedChannel* _internal_add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>& _internal_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>* _internal_mutable_channels();
  public:
  const ::ibc::core::channel::v1::IdentifiedChannel& channels(int index) const;
  ::ibc::core::channel::v1::IdentifiedChannel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >&
      channels() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryConnectionChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel > channels_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelClientStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelClientStateRequest) */ {
 public:
  inline QueryChannelClientStateRequest() : QueryChannelClientStateRequest(nullptr) {}
  ~QueryChannelClientStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelClientStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelClientStateRequest(const QueryChannelClientStateRequest& from);
  QueryChannelClientStateRequest(QueryChannelClientStateRequest&& from) noexcept
    : QueryChannelClientStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryChannelClientStateRequest& operator=(const QueryChannelClientStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelClientStateRequest& operator=(QueryChannelClientStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelClientStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelClientStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryChannelClientStateRequest*>(
               &_QueryChannelClientStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QueryChannelClientStateRequest& a, QueryChannelClientStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelClientStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelClientStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelClientStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelClientStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelClientStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelClientStateRequest& from) {
    QueryChannelClientStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelClientStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelClientStateRequest";
  }
  protected:
  explicit QueryChannelClientStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelClientStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelClientStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelClientStateResponse) */ {
 public:
  inline QueryChannelClientStateResponse() : QueryChannelClientStateResponse(nullptr) {}
  ~QueryChannelClientStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelClientStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelClientStateResponse(const QueryChannelClientStateResponse& from);
  QueryChannelClientStateResponse(QueryChannelClientStateResponse&& from) noexcept
    : QueryChannelClientStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryChannelClientStateResponse& operator=(const QueryChannelClientStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelClientStateResponse& operator=(QueryChannelClientStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelClientStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelClientStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryChannelClientStateResponse*>(
               &_QueryChannelClientStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(QueryChannelClientStateResponse& a, QueryChannelClientStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelClientStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelClientStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelClientStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelClientStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelClientStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelClientStateResponse& from) {
    QueryChannelClientStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelClientStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelClientStateResponse";
  }
  protected:
  explicit QueryChannelClientStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kIdentifiedClientStateFieldNumber = 1,
    kProofHeightFieldNumber = 3,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1 [json_name = "identifiedClientState"];
  bool has_identified_client_state() const;
  void clear_identified_client_state() ;
  const ::ibc::core::client::v1::IdentifiedClientState& identified_client_state() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::IdentifiedClientState* release_identified_client_state();
  ::ibc::core::client::v1::IdentifiedClientState* mutable_identified_client_state();
  void set_allocated_identified_client_state(::ibc::core::client::v1::IdentifiedClientState* identified_client_state);
  private:
  const ::ibc::core::client::v1::IdentifiedClientState& _internal_identified_client_state() const;
  ::ibc::core::client::v1::IdentifiedClientState* _internal_mutable_identified_client_state();
  public:
  void unsafe_arena_set_allocated_identified_client_state(
      ::ibc::core::client::v1::IdentifiedClientState* identified_client_state);
  ::ibc::core::client::v1::IdentifiedClientState* unsafe_arena_release_identified_client_state();
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelClientStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::IdentifiedClientState* identified_client_state_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelConsensusStateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelConsensusStateRequest) */ {
 public:
  inline QueryChannelConsensusStateRequest() : QueryChannelConsensusStateRequest(nullptr) {}
  ~QueryChannelConsensusStateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelConsensusStateRequest(const QueryChannelConsensusStateRequest& from);
  QueryChannelConsensusStateRequest(QueryChannelConsensusStateRequest&& from) noexcept
    : QueryChannelConsensusStateRequest() {
    *this = ::std::move(from);
  }

  inline QueryChannelConsensusStateRequest& operator=(const QueryChannelConsensusStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelConsensusStateRequest& operator=(QueryChannelConsensusStateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelConsensusStateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelConsensusStateRequest* internal_default_instance() {
    return reinterpret_cast<const QueryChannelConsensusStateRequest*>(
               &_QueryChannelConsensusStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(QueryChannelConsensusStateRequest& a, QueryChannelConsensusStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelConsensusStateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelConsensusStateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelConsensusStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelConsensusStateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelConsensusStateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelConsensusStateRequest& from) {
    QueryChannelConsensusStateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelConsensusStateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelConsensusStateRequest";
  }
  protected:
  explicit QueryChannelConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kRevisionNumberFieldNumber = 3,
    kRevisionHeightFieldNumber = 4,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // uint64 revision_number = 3 [json_name = "revisionNumber"];
  void clear_revision_number() ;
  ::uint64_t revision_number() const;
  void set_revision_number(::uint64_t value);

  private:
  ::uint64_t _internal_revision_number() const;
  void _internal_set_revision_number(::uint64_t value);

  public:
  // uint64 revision_height = 4 [json_name = "revisionHeight"];
  void clear_revision_height() ;
  ::uint64_t revision_height() const;
  void set_revision_height(::uint64_t value);

  private:
  ::uint64_t _internal_revision_height() const;
  void _internal_set_revision_height(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::uint64_t revision_number_;
    ::uint64_t revision_height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryChannelConsensusStateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryChannelConsensusStateResponse) */ {
 public:
  inline QueryChannelConsensusStateResponse() : QueryChannelConsensusStateResponse(nullptr) {}
  ~QueryChannelConsensusStateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryChannelConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryChannelConsensusStateResponse(const QueryChannelConsensusStateResponse& from);
  QueryChannelConsensusStateResponse(QueryChannelConsensusStateResponse&& from) noexcept
    : QueryChannelConsensusStateResponse() {
    *this = ::std::move(from);
  }

  inline QueryChannelConsensusStateResponse& operator=(const QueryChannelConsensusStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryChannelConsensusStateResponse& operator=(QueryChannelConsensusStateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryChannelConsensusStateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryChannelConsensusStateResponse* internal_default_instance() {
    return reinterpret_cast<const QueryChannelConsensusStateResponse*>(
               &_QueryChannelConsensusStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryChannelConsensusStateResponse& a, QueryChannelConsensusStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryChannelConsensusStateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryChannelConsensusStateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryChannelConsensusStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryChannelConsensusStateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryChannelConsensusStateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryChannelConsensusStateResponse& from) {
    QueryChannelConsensusStateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryChannelConsensusStateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryChannelConsensusStateResponse";
  }
  protected:
  explicit QueryChannelConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 2,
    kProofFieldNumber = 3,
    kConsensusStateFieldNumber = 1,
    kProofHeightFieldNumber = 4,
  };
  // string client_id = 2 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // bytes proof = 3 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
  bool has_consensus_state() const;
  void clear_consensus_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_consensus_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_consensus_state();
  void set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_consensus_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_consensus_state();
  public:
  void unsafe_arena_set_allocated_consensus_state(
      ::PROTOBUF_NAMESPACE_ID::Any* consensus_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_consensus_state();
  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketCommitmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketCommitmentRequest) */ {
 public:
  inline QueryPacketCommitmentRequest() : QueryPacketCommitmentRequest(nullptr) {}
  ~QueryPacketCommitmentRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketCommitmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketCommitmentRequest(const QueryPacketCommitmentRequest& from);
  QueryPacketCommitmentRequest(QueryPacketCommitmentRequest&& from) noexcept
    : QueryPacketCommitmentRequest() {
    *this = ::std::move(from);
  }

  inline QueryPacketCommitmentRequest& operator=(const QueryPacketCommitmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketCommitmentRequest& operator=(QueryPacketCommitmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketCommitmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketCommitmentRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPacketCommitmentRequest*>(
               &_QueryPacketCommitmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryPacketCommitmentRequest& a, QueryPacketCommitmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketCommitmentRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketCommitmentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketCommitmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketCommitmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketCommitmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketCommitmentRequest& from) {
    QueryPacketCommitmentRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketCommitmentRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketCommitmentRequest";
  }
  protected:
  explicit QueryPacketCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketCommitmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketCommitmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketCommitmentResponse) */ {
 public:
  inline QueryPacketCommitmentResponse() : QueryPacketCommitmentResponse(nullptr) {}
  ~QueryPacketCommitmentResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketCommitmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketCommitmentResponse(const QueryPacketCommitmentResponse& from);
  QueryPacketCommitmentResponse(QueryPacketCommitmentResponse&& from) noexcept
    : QueryPacketCommitmentResponse() {
    *this = ::std::move(from);
  }

  inline QueryPacketCommitmentResponse& operator=(const QueryPacketCommitmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketCommitmentResponse& operator=(QueryPacketCommitmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketCommitmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketCommitmentResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPacketCommitmentResponse*>(
               &_QueryPacketCommitmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(QueryPacketCommitmentResponse& a, QueryPacketCommitmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketCommitmentResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketCommitmentResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketCommitmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketCommitmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketCommitmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketCommitmentResponse& from) {
    QueryPacketCommitmentResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketCommitmentResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketCommitmentResponse";
  }
  protected:
  explicit QueryPacketCommitmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentFieldNumber = 1,
    kProofFieldNumber = 2,
    kProofHeightFieldNumber = 3,
  };
  // bytes commitment = 1 [json_name = "commitment"];
  void clear_commitment() ;
  const std::string& commitment() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_commitment(Arg_&& arg, Args_... args);
  std::string* mutable_commitment();
  PROTOBUF_NODISCARD std::string* release_commitment();
  void set_allocated_commitment(std::string* ptr);

  private:
  const std::string& _internal_commitment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commitment(
      const std::string& value);
  std::string* _internal_mutable_commitment();

  public:
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketCommitmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commitment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketCommitmentsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketCommitmentsRequest) */ {
 public:
  inline QueryPacketCommitmentsRequest() : QueryPacketCommitmentsRequest(nullptr) {}
  ~QueryPacketCommitmentsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketCommitmentsRequest(const QueryPacketCommitmentsRequest& from);
  QueryPacketCommitmentsRequest(QueryPacketCommitmentsRequest&& from) noexcept
    : QueryPacketCommitmentsRequest() {
    *this = ::std::move(from);
  }

  inline QueryPacketCommitmentsRequest& operator=(const QueryPacketCommitmentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketCommitmentsRequest& operator=(QueryPacketCommitmentsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketCommitmentsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketCommitmentsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPacketCommitmentsRequest*>(
               &_QueryPacketCommitmentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(QueryPacketCommitmentsRequest& a, QueryPacketCommitmentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketCommitmentsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketCommitmentsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketCommitmentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketCommitmentsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketCommitmentsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketCommitmentsRequest& from) {
    QueryPacketCommitmentsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketCommitmentsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketCommitmentsRequest";
  }
  protected:
  explicit QueryPacketCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketCommitmentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketCommitmentsResponse) */ {
 public:
  inline QueryPacketCommitmentsResponse() : QueryPacketCommitmentsResponse(nullptr) {}
  ~QueryPacketCommitmentsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketCommitmentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketCommitmentsResponse(const QueryPacketCommitmentsResponse& from);
  QueryPacketCommitmentsResponse(QueryPacketCommitmentsResponse&& from) noexcept
    : QueryPacketCommitmentsResponse() {
    *this = ::std::move(from);
  }

  inline QueryPacketCommitmentsResponse& operator=(const QueryPacketCommitmentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketCommitmentsResponse& operator=(QueryPacketCommitmentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketCommitmentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketCommitmentsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPacketCommitmentsResponse*>(
               &_QueryPacketCommitmentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryPacketCommitmentsResponse& a, QueryPacketCommitmentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketCommitmentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketCommitmentsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketCommitmentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketCommitmentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketCommitmentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketCommitmentsResponse& from) {
    QueryPacketCommitmentsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketCommitmentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketCommitmentsResponse";
  }
  protected:
  explicit QueryPacketCommitmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommitmentsFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ibc.core.channel.v1.PacketState commitments = 1 [json_name = "commitments"];
  int commitments_size() const;
  private:
  int _internal_commitments_size() const;

  public:
  void clear_commitments() ;
  ::ibc::core::channel::v1::PacketState* mutable_commitments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >*
      mutable_commitments();
  private:
  const ::ibc::core::channel::v1::PacketState& _internal_commitments(int index) const;
  ::ibc::core::channel::v1::PacketState* _internal_add_commitments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>& _internal_commitments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>* _internal_mutable_commitments();
  public:
  const ::ibc::core::channel::v1::PacketState& commitments(int index) const;
  ::ibc::core::channel::v1::PacketState* add_commitments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >&
      commitments() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState > commitments_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketReceiptRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketReceiptRequest) */ {
 public:
  inline QueryPacketReceiptRequest() : QueryPacketReceiptRequest(nullptr) {}
  ~QueryPacketReceiptRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketReceiptRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketReceiptRequest(const QueryPacketReceiptRequest& from);
  QueryPacketReceiptRequest(QueryPacketReceiptRequest&& from) noexcept
    : QueryPacketReceiptRequest() {
    *this = ::std::move(from);
  }

  inline QueryPacketReceiptRequest& operator=(const QueryPacketReceiptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketReceiptRequest& operator=(QueryPacketReceiptRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketReceiptRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketReceiptRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPacketReceiptRequest*>(
               &_QueryPacketReceiptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryPacketReceiptRequest& a, QueryPacketReceiptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketReceiptRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketReceiptRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketReceiptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketReceiptRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketReceiptRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketReceiptRequest& from) {
    QueryPacketReceiptRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketReceiptRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketReceiptRequest";
  }
  protected:
  explicit QueryPacketReceiptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketReceiptRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketReceiptResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketReceiptResponse) */ {
 public:
  inline QueryPacketReceiptResponse() : QueryPacketReceiptResponse(nullptr) {}
  ~QueryPacketReceiptResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketReceiptResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketReceiptResponse(const QueryPacketReceiptResponse& from);
  QueryPacketReceiptResponse(QueryPacketReceiptResponse&& from) noexcept
    : QueryPacketReceiptResponse() {
    *this = ::std::move(from);
  }

  inline QueryPacketReceiptResponse& operator=(const QueryPacketReceiptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketReceiptResponse& operator=(QueryPacketReceiptResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketReceiptResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketReceiptResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPacketReceiptResponse*>(
               &_QueryPacketReceiptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(QueryPacketReceiptResponse& a, QueryPacketReceiptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketReceiptResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketReceiptResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketReceiptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketReceiptResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketReceiptResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketReceiptResponse& from) {
    QueryPacketReceiptResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketReceiptResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketReceiptResponse";
  }
  protected:
  explicit QueryPacketReceiptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 3,
    kProofHeightFieldNumber = 4,
    kReceivedFieldNumber = 2,
  };
  // bytes proof = 3 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // bool received = 2 [json_name = "received"];
  void clear_received() ;
  bool received() const;
  void set_received(bool value);

  private:
  bool _internal_received() const;
  void _internal_set_received(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketReceiptResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::Height* proof_height_;
    bool received_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketAcknowledgementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketAcknowledgementRequest) */ {
 public:
  inline QueryPacketAcknowledgementRequest() : QueryPacketAcknowledgementRequest(nullptr) {}
  ~QueryPacketAcknowledgementRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketAcknowledgementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketAcknowledgementRequest(const QueryPacketAcknowledgementRequest& from);
  QueryPacketAcknowledgementRequest(QueryPacketAcknowledgementRequest&& from) noexcept
    : QueryPacketAcknowledgementRequest() {
    *this = ::std::move(from);
  }

  inline QueryPacketAcknowledgementRequest& operator=(const QueryPacketAcknowledgementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketAcknowledgementRequest& operator=(QueryPacketAcknowledgementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketAcknowledgementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketAcknowledgementRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPacketAcknowledgementRequest*>(
               &_QueryPacketAcknowledgementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(QueryPacketAcknowledgementRequest& a, QueryPacketAcknowledgementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketAcknowledgementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketAcknowledgementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketAcknowledgementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketAcknowledgementRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketAcknowledgementRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketAcknowledgementRequest& from) {
    QueryPacketAcknowledgementRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketAcknowledgementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketAcknowledgementRequest";
  }
  protected:
  explicit QueryPacketAcknowledgementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kSequenceFieldNumber = 3,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // uint64 sequence = 3 [json_name = "sequence"];
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::uint64_t sequence_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketAcknowledgementResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketAcknowledgementResponse) */ {
 public:
  inline QueryPacketAcknowledgementResponse() : QueryPacketAcknowledgementResponse(nullptr) {}
  ~QueryPacketAcknowledgementResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketAcknowledgementResponse(const QueryPacketAcknowledgementResponse& from);
  QueryPacketAcknowledgementResponse(QueryPacketAcknowledgementResponse&& from) noexcept
    : QueryPacketAcknowledgementResponse() {
    *this = ::std::move(from);
  }

  inline QueryPacketAcknowledgementResponse& operator=(const QueryPacketAcknowledgementResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketAcknowledgementResponse& operator=(QueryPacketAcknowledgementResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketAcknowledgementResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketAcknowledgementResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPacketAcknowledgementResponse*>(
               &_QueryPacketAcknowledgementResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(QueryPacketAcknowledgementResponse& a, QueryPacketAcknowledgementResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketAcknowledgementResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketAcknowledgementResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketAcknowledgementResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketAcknowledgementResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketAcknowledgementResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketAcknowledgementResponse& from) {
    QueryPacketAcknowledgementResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketAcknowledgementResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketAcknowledgementResponse";
  }
  protected:
  explicit QueryPacketAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgementFieldNumber = 1,
    kProofFieldNumber = 2,
    kProofHeightFieldNumber = 3,
  };
  // bytes acknowledgement = 1 [json_name = "acknowledgement"];
  void clear_acknowledgement() ;
  const std::string& acknowledgement() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_acknowledgement(Arg_&& arg, Args_... args);
  std::string* mutable_acknowledgement();
  PROTOBUF_NODISCARD std::string* release_acknowledgement();
  void set_allocated_acknowledgement(std::string* ptr);

  private:
  const std::string& _internal_acknowledgement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_acknowledgement(
      const std::string& value);
  std::string* _internal_mutable_acknowledgement();

  public:
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acknowledgement_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketAcknowledgementsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest) */ {
 public:
  inline QueryPacketAcknowledgementsRequest() : QueryPacketAcknowledgementsRequest(nullptr) {}
  ~QueryPacketAcknowledgementsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketAcknowledgementsRequest(const QueryPacketAcknowledgementsRequest& from);
  QueryPacketAcknowledgementsRequest(QueryPacketAcknowledgementsRequest&& from) noexcept
    : QueryPacketAcknowledgementsRequest() {
    *this = ::std::move(from);
  }

  inline QueryPacketAcknowledgementsRequest& operator=(const QueryPacketAcknowledgementsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketAcknowledgementsRequest& operator=(QueryPacketAcknowledgementsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketAcknowledgementsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketAcknowledgementsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryPacketAcknowledgementsRequest*>(
               &_QueryPacketAcknowledgementsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(QueryPacketAcknowledgementsRequest& a, QueryPacketAcknowledgementsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketAcknowledgementsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketAcknowledgementsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketAcknowledgementsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketAcknowledgementsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketAcknowledgementsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketAcknowledgementsRequest& from) {
    QueryPacketAcknowledgementsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketAcknowledgementsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest";
  }
  protected:
  explicit QueryPacketAcknowledgementsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketCommitmentSequencesFieldNumber = 4,
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kPaginationFieldNumber = 3,
  };
  // repeated uint64 packet_commitment_sequences = 4 [json_name = "packetCommitmentSequences"];
  int packet_commitment_sequences_size() const;
  private:
  int _internal_packet_commitment_sequences_size() const;

  public:
  void clear_packet_commitment_sequences() ;
  ::uint64_t packet_commitment_sequences(int index) const;
  void set_packet_commitment_sequences(int index, ::uint64_t value);
  void add_packet_commitment_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& packet_commitment_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_packet_commitment_sequences();

  private:
  ::uint64_t _internal_packet_commitment_sequences(int index) const;
  void _internal_add_packet_commitment_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_packet_commitment_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_packet_commitment_sequences();

  public:
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageRequest& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageRequest* release_pagination();
  ::cosmos::base::query::v1beta1::PageRequest* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageRequest& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageRequest* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageRequest* pagination);
  ::cosmos::base::query::v1beta1::PageRequest* unsafe_arena_release_pagination();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> packet_commitment_sequences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _packet_commitment_sequences_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    ::cosmos::base::query::v1beta1::PageRequest* pagination_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryPacketAcknowledgementsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse) */ {
 public:
  inline QueryPacketAcknowledgementsResponse() : QueryPacketAcknowledgementsResponse(nullptr) {}
  ~QueryPacketAcknowledgementsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryPacketAcknowledgementsResponse(const QueryPacketAcknowledgementsResponse& from);
  QueryPacketAcknowledgementsResponse(QueryPacketAcknowledgementsResponse&& from) noexcept
    : QueryPacketAcknowledgementsResponse() {
    *this = ::std::move(from);
  }

  inline QueryPacketAcknowledgementsResponse& operator=(const QueryPacketAcknowledgementsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryPacketAcknowledgementsResponse& operator=(QueryPacketAcknowledgementsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryPacketAcknowledgementsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryPacketAcknowledgementsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryPacketAcknowledgementsResponse*>(
               &_QueryPacketAcknowledgementsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryPacketAcknowledgementsResponse& a, QueryPacketAcknowledgementsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryPacketAcknowledgementsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryPacketAcknowledgementsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryPacketAcknowledgementsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryPacketAcknowledgementsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryPacketAcknowledgementsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryPacketAcknowledgementsResponse& from) {
    QueryPacketAcknowledgementsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryPacketAcknowledgementsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryPacketAcknowledgementsResponse";
  }
  protected:
  explicit QueryPacketAcknowledgementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgementsFieldNumber = 1,
    kPaginationFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated .ibc.core.channel.v1.PacketState acknowledgements = 1 [json_name = "acknowledgements"];
  int acknowledgements_size() const;
  private:
  int _internal_acknowledgements_size() const;

  public:
  void clear_acknowledgements() ;
  ::ibc::core::channel::v1::PacketState* mutable_acknowledgements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >*
      mutable_acknowledgements();
  private:
  const ::ibc::core::channel::v1::PacketState& _internal_acknowledgements(int index) const;
  ::ibc::core::channel::v1::PacketState* _internal_add_acknowledgements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>& _internal_acknowledgements() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>* _internal_mutable_acknowledgements();
  public:
  const ::ibc::core::channel::v1::PacketState& acknowledgements(int index) const;
  ::ibc::core::channel::v1::PacketState* add_acknowledgements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >&
      acknowledgements() const;
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  bool has_pagination() const;
  void clear_pagination() ;
  const ::cosmos::base::query::v1beta1::PageResponse& pagination() const;
  PROTOBUF_NODISCARD ::cosmos::base::query::v1beta1::PageResponse* release_pagination();
  ::cosmos::base::query::v1beta1::PageResponse* mutable_pagination();
  void set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination);
  private:
  const ::cosmos::base::query::v1beta1::PageResponse& _internal_pagination() const;
  ::cosmos::base::query::v1beta1::PageResponse* _internal_mutable_pagination();
  public:
  void unsafe_arena_set_allocated_pagination(
      ::cosmos::base::query::v1beta1::PageResponse* pagination);
  ::cosmos::base::query::v1beta1::PageResponse* unsafe_arena_release_pagination();
  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState > acknowledgements_;
    ::cosmos::base::query::v1beta1::PageResponse* pagination_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUnreceivedPacketsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryUnreceivedPacketsRequest) */ {
 public:
  inline QueryUnreceivedPacketsRequest() : QueryUnreceivedPacketsRequest(nullptr) {}
  ~QueryUnreceivedPacketsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUnreceivedPacketsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUnreceivedPacketsRequest(const QueryUnreceivedPacketsRequest& from);
  QueryUnreceivedPacketsRequest(QueryUnreceivedPacketsRequest&& from) noexcept
    : QueryUnreceivedPacketsRequest() {
    *this = ::std::move(from);
  }

  inline QueryUnreceivedPacketsRequest& operator=(const QueryUnreceivedPacketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUnreceivedPacketsRequest& operator=(QueryUnreceivedPacketsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUnreceivedPacketsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUnreceivedPacketsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUnreceivedPacketsRequest*>(
               &_QueryUnreceivedPacketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryUnreceivedPacketsRequest& a, QueryUnreceivedPacketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUnreceivedPacketsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUnreceivedPacketsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUnreceivedPacketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUnreceivedPacketsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUnreceivedPacketsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUnreceivedPacketsRequest& from) {
    QueryUnreceivedPacketsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUnreceivedPacketsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryUnreceivedPacketsRequest";
  }
  protected:
  explicit QueryUnreceivedPacketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketCommitmentSequencesFieldNumber = 3,
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated uint64 packet_commitment_sequences = 3 [json_name = "packetCommitmentSequences"];
  int packet_commitment_sequences_size() const;
  private:
  int _internal_packet_commitment_sequences_size() const;

  public:
  void clear_packet_commitment_sequences() ;
  ::uint64_t packet_commitment_sequences(int index) const;
  void set_packet_commitment_sequences(int index, ::uint64_t value);
  void add_packet_commitment_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& packet_commitment_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_packet_commitment_sequences();

  private:
  ::uint64_t _internal_packet_commitment_sequences(int index) const;
  void _internal_add_packet_commitment_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_packet_commitment_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_packet_commitment_sequences();

  public:
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> packet_commitment_sequences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _packet_commitment_sequences_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUnreceivedPacketsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryUnreceivedPacketsResponse) */ {
 public:
  inline QueryUnreceivedPacketsResponse() : QueryUnreceivedPacketsResponse(nullptr) {}
  ~QueryUnreceivedPacketsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUnreceivedPacketsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUnreceivedPacketsResponse(const QueryUnreceivedPacketsResponse& from);
  QueryUnreceivedPacketsResponse(QueryUnreceivedPacketsResponse&& from) noexcept
    : QueryUnreceivedPacketsResponse() {
    *this = ::std::move(from);
  }

  inline QueryUnreceivedPacketsResponse& operator=(const QueryUnreceivedPacketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUnreceivedPacketsResponse& operator=(QueryUnreceivedPacketsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUnreceivedPacketsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUnreceivedPacketsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUnreceivedPacketsResponse*>(
               &_QueryUnreceivedPacketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryUnreceivedPacketsResponse& a, QueryUnreceivedPacketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUnreceivedPacketsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUnreceivedPacketsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUnreceivedPacketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUnreceivedPacketsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUnreceivedPacketsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUnreceivedPacketsResponse& from) {
    QueryUnreceivedPacketsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUnreceivedPacketsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryUnreceivedPacketsResponse";
  }
  protected:
  explicit QueryUnreceivedPacketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencesFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated uint64 sequences = 1 [json_name = "sequences"];
  int sequences_size() const;
  private:
  int _internal_sequences_size() const;

  public:
  void clear_sequences() ;
  ::uint64_t sequences(int index) const;
  void set_sequences(int index, ::uint64_t value);
  void add_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_sequences();

  private:
  ::uint64_t _internal_sequences(int index) const;
  void _internal_add_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_sequences();

  public:
  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> sequences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _sequences_cached_byte_size_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUnreceivedAcksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryUnreceivedAcksRequest) */ {
 public:
  inline QueryUnreceivedAcksRequest() : QueryUnreceivedAcksRequest(nullptr) {}
  ~QueryUnreceivedAcksRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUnreceivedAcksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUnreceivedAcksRequest(const QueryUnreceivedAcksRequest& from);
  QueryUnreceivedAcksRequest(QueryUnreceivedAcksRequest&& from) noexcept
    : QueryUnreceivedAcksRequest() {
    *this = ::std::move(from);
  }

  inline QueryUnreceivedAcksRequest& operator=(const QueryUnreceivedAcksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUnreceivedAcksRequest& operator=(QueryUnreceivedAcksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUnreceivedAcksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUnreceivedAcksRequest* internal_default_instance() {
    return reinterpret_cast<const QueryUnreceivedAcksRequest*>(
               &_QueryUnreceivedAcksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryUnreceivedAcksRequest& a, QueryUnreceivedAcksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUnreceivedAcksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUnreceivedAcksRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUnreceivedAcksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUnreceivedAcksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUnreceivedAcksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUnreceivedAcksRequest& from) {
    QueryUnreceivedAcksRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUnreceivedAcksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryUnreceivedAcksRequest";
  }
  protected:
  explicit QueryUnreceivedAcksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketAckSequencesFieldNumber = 3,
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // repeated uint64 packet_ack_sequences = 3 [json_name = "packetAckSequences"];
  int packet_ack_sequences_size() const;
  private:
  int _internal_packet_ack_sequences_size() const;

  public:
  void clear_packet_ack_sequences() ;
  ::uint64_t packet_ack_sequences(int index) const;
  void set_packet_ack_sequences(int index, ::uint64_t value);
  void add_packet_ack_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& packet_ack_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_packet_ack_sequences();

  private:
  ::uint64_t _internal_packet_ack_sequences(int index) const;
  void _internal_add_packet_ack_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_packet_ack_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_packet_ack_sequences();

  public:
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> packet_ack_sequences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _packet_ack_sequences_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryUnreceivedAcksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryUnreceivedAcksResponse) */ {
 public:
  inline QueryUnreceivedAcksResponse() : QueryUnreceivedAcksResponse(nullptr) {}
  ~QueryUnreceivedAcksResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryUnreceivedAcksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryUnreceivedAcksResponse(const QueryUnreceivedAcksResponse& from);
  QueryUnreceivedAcksResponse(QueryUnreceivedAcksResponse&& from) noexcept
    : QueryUnreceivedAcksResponse() {
    *this = ::std::move(from);
  }

  inline QueryUnreceivedAcksResponse& operator=(const QueryUnreceivedAcksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryUnreceivedAcksResponse& operator=(QueryUnreceivedAcksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryUnreceivedAcksResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryUnreceivedAcksResponse* internal_default_instance() {
    return reinterpret_cast<const QueryUnreceivedAcksResponse*>(
               &_QueryUnreceivedAcksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(QueryUnreceivedAcksResponse& a, QueryUnreceivedAcksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryUnreceivedAcksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryUnreceivedAcksResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryUnreceivedAcksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryUnreceivedAcksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryUnreceivedAcksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryUnreceivedAcksResponse& from) {
    QueryUnreceivedAcksResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryUnreceivedAcksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryUnreceivedAcksResponse";
  }
  protected:
  explicit QueryUnreceivedAcksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSequencesFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated uint64 sequences = 1 [json_name = "sequences"];
  int sequences_size() const;
  private:
  int _internal_sequences_size() const;

  public:
  void clear_sequences() ;
  ::uint64_t sequences(int index) const;
  void set_sequences(int index, ::uint64_t value);
  void add_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_sequences();

  private:
  ::uint64_t _internal_sequences(int index) const;
  void _internal_add_sequences(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_sequences() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_sequences();

  public:
  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  bool has_height() const;
  void clear_height() ;
  const ::ibc::core::client::v1::Height& height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_height();
  ::ibc::core::client::v1::Height* mutable_height();
  void set_allocated_height(::ibc::core::client::v1::Height* height);
  private:
  const ::ibc::core::client::v1::Height& _internal_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_height();
  public:
  void unsafe_arena_set_allocated_height(
      ::ibc::core::client::v1::Height* height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_height();
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> sequences_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _sequences_cached_byte_size_;
    ::ibc::core::client::v1::Height* height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNextSequenceReceiveRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryNextSequenceReceiveRequest) */ {
 public:
  inline QueryNextSequenceReceiveRequest() : QueryNextSequenceReceiveRequest(nullptr) {}
  ~QueryNextSequenceReceiveRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNextSequenceReceiveRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNextSequenceReceiveRequest(const QueryNextSequenceReceiveRequest& from);
  QueryNextSequenceReceiveRequest(QueryNextSequenceReceiveRequest&& from) noexcept
    : QueryNextSequenceReceiveRequest() {
    *this = ::std::move(from);
  }

  inline QueryNextSequenceReceiveRequest& operator=(const QueryNextSequenceReceiveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNextSequenceReceiveRequest& operator=(QueryNextSequenceReceiveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNextSequenceReceiveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNextSequenceReceiveRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNextSequenceReceiveRequest*>(
               &_QueryNextSequenceReceiveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(QueryNextSequenceReceiveRequest& a, QueryNextSequenceReceiveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNextSequenceReceiveRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNextSequenceReceiveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNextSequenceReceiveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNextSequenceReceiveRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNextSequenceReceiveRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNextSequenceReceiveRequest& from) {
    QueryNextSequenceReceiveRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNextSequenceReceiveRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryNextSequenceReceiveRequest";
  }
  protected:
  explicit QueryNextSequenceReceiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNextSequenceReceiveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryNextSequenceReceiveResponse) */ {
 public:
  inline QueryNextSequenceReceiveResponse() : QueryNextSequenceReceiveResponse(nullptr) {}
  ~QueryNextSequenceReceiveResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNextSequenceReceiveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNextSequenceReceiveResponse(const QueryNextSequenceReceiveResponse& from);
  QueryNextSequenceReceiveResponse(QueryNextSequenceReceiveResponse&& from) noexcept
    : QueryNextSequenceReceiveResponse() {
    *this = ::std::move(from);
  }

  inline QueryNextSequenceReceiveResponse& operator=(const QueryNextSequenceReceiveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNextSequenceReceiveResponse& operator=(QueryNextSequenceReceiveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNextSequenceReceiveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNextSequenceReceiveResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNextSequenceReceiveResponse*>(
               &_QueryNextSequenceReceiveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(QueryNextSequenceReceiveResponse& a, QueryNextSequenceReceiveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNextSequenceReceiveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNextSequenceReceiveResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNextSequenceReceiveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNextSequenceReceiveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNextSequenceReceiveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNextSequenceReceiveResponse& from) {
    QueryNextSequenceReceiveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNextSequenceReceiveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryNextSequenceReceiveResponse";
  }
  protected:
  explicit QueryNextSequenceReceiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kProofHeightFieldNumber = 3,
    kNextSequenceReceiveFieldNumber = 1,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // uint64 next_sequence_receive = 1 [json_name = "nextSequenceReceive"];
  void clear_next_sequence_receive() ;
  ::uint64_t next_sequence_receive() const;
  void set_next_sequence_receive(::uint64_t value);

  private:
  ::uint64_t _internal_next_sequence_receive() const;
  void _internal_set_next_sequence_receive(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::Height* proof_height_;
    ::uint64_t next_sequence_receive_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNextSequenceSendRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryNextSequenceSendRequest) */ {
 public:
  inline QueryNextSequenceSendRequest() : QueryNextSequenceSendRequest(nullptr) {}
  ~QueryNextSequenceSendRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNextSequenceSendRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNextSequenceSendRequest(const QueryNextSequenceSendRequest& from);
  QueryNextSequenceSendRequest(QueryNextSequenceSendRequest&& from) noexcept
    : QueryNextSequenceSendRequest() {
    *this = ::std::move(from);
  }

  inline QueryNextSequenceSendRequest& operator=(const QueryNextSequenceSendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNextSequenceSendRequest& operator=(QueryNextSequenceSendRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNextSequenceSendRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNextSequenceSendRequest* internal_default_instance() {
    return reinterpret_cast<const QueryNextSequenceSendRequest*>(
               &_QueryNextSequenceSendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(QueryNextSequenceSendRequest& a, QueryNextSequenceSendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNextSequenceSendRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNextSequenceSendRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNextSequenceSendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNextSequenceSendRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNextSequenceSendRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNextSequenceSendRequest& from) {
    QueryNextSequenceSendRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNextSequenceSendRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryNextSequenceSendRequest";
  }
  protected:
  explicit QueryNextSequenceSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortIdFieldNumber = 1,
    kChannelIdFieldNumber = 2,
  };
  // string port_id = 1 [json_name = "portId"];
  void clear_port_id() ;
  const std::string& port_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_port_id(Arg_&& arg, Args_... args);
  std::string* mutable_port_id();
  PROTOBUF_NODISCARD std::string* release_port_id();
  void set_allocated_port_id(std::string* ptr);

  private:
  const std::string& _internal_port_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port_id(
      const std::string& value);
  std::string* _internal_mutable_port_id();

  public:
  // string channel_id = 2 [json_name = "channelId"];
  void clear_channel_id() ;
  const std::string& channel_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* ptr);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryNextSequenceSendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};// -------------------------------------------------------------------

class QueryNextSequenceSendResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.channel.v1.QueryNextSequenceSendResponse) */ {
 public:
  inline QueryNextSequenceSendResponse() : QueryNextSequenceSendResponse(nullptr) {}
  ~QueryNextSequenceSendResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QueryNextSequenceSendResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryNextSequenceSendResponse(const QueryNextSequenceSendResponse& from);
  QueryNextSequenceSendResponse(QueryNextSequenceSendResponse&& from) noexcept
    : QueryNextSequenceSendResponse() {
    *this = ::std::move(from);
  }

  inline QueryNextSequenceSendResponse& operator=(const QueryNextSequenceSendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryNextSequenceSendResponse& operator=(QueryNextSequenceSendResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryNextSequenceSendResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryNextSequenceSendResponse* internal_default_instance() {
    return reinterpret_cast<const QueryNextSequenceSendResponse*>(
               &_QueryNextSequenceSendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(QueryNextSequenceSendResponse& a, QueryNextSequenceSendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryNextSequenceSendResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryNextSequenceSendResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryNextSequenceSendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryNextSequenceSendResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryNextSequenceSendResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryNextSequenceSendResponse& from) {
    QueryNextSequenceSendResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryNextSequenceSendResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.channel.v1.QueryNextSequenceSendResponse";
  }
  protected:
  explicit QueryNextSequenceSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProofFieldNumber = 2,
    kProofHeightFieldNumber = 3,
    kNextSequenceSendFieldNumber = 1,
  };
  // bytes proof = 2 [json_name = "proof"];
  void clear_proof() ;
  const std::string& proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof(Arg_&& arg, Args_... args);
  std::string* mutable_proof();
  PROTOBUF_NODISCARD std::string* release_proof();
  void set_allocated_proof(std::string* ptr);

  private:
  const std::string& _internal_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof(
      const std::string& value);
  std::string* _internal_mutable_proof();

  public:
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // uint64 next_sequence_send = 1 [json_name = "nextSequenceSend"];
  void clear_next_sequence_send() ;
  ::uint64_t next_sequence_send() const;
  void set_next_sequence_send(::uint64_t value);

  private:
  ::uint64_t _internal_next_sequence_send() const;
  void _internal_set_next_sequence_send(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.channel.v1.QueryNextSequenceSendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
    ::ibc::core::client::v1::Height* proof_height_;
    ::uint64_t next_sequence_send_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QueryChannelRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryChannelRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryChannelRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelRequest.port_id)
}
inline std::string* QueryChannelRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelRequest.port_id)
  return _s;
}
inline const std::string& QueryChannelRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryChannelRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryChannelRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryChannelRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryChannelRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelRequest.channel_id)
}
inline std::string* QueryChannelRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelRequest.channel_id)
  return _s;
}
inline const std::string& QueryChannelRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryChannelRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryChannelRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryChannelResponse

// .ibc.core.channel.v1.Channel channel = 1 [json_name = "channel"];
inline bool QueryChannelResponse::has_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.channel_ != nullptr);
  return value;
}
inline const ::ibc::core::channel::v1::Channel& QueryChannelResponse::_internal_channel() const {
  const ::ibc::core::channel::v1::Channel* p = _impl_.channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::channel::v1::Channel&>(
      ::ibc::core::channel::v1::_Channel_default_instance_);
}
inline const ::ibc::core::channel::v1::Channel& QueryChannelResponse::channel() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelResponse.channel)
  return _internal_channel();
}
inline void QueryChannelResponse::unsafe_arena_set_allocated_channel(
    ::ibc::core::channel::v1::Channel* channel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channel_);
  }
  _impl_.channel_ = channel;
  if (channel) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelResponse.channel)
}
inline ::ibc::core::channel::v1::Channel* QueryChannelResponse::release_channel() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Channel* temp = _impl_.channel_;
  _impl_.channel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::channel::v1::Channel* QueryChannelResponse::unsafe_arena_release_channel() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelResponse.channel)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::channel::v1::Channel* temp = _impl_.channel_;
  _impl_.channel_ = nullptr;
  return temp;
}
inline ::ibc::core::channel::v1::Channel* QueryChannelResponse::_internal_mutable_channel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::channel::v1::Channel>(GetArenaForAllocation());
    _impl_.channel_ = p;
  }
  return _impl_.channel_;
}
inline ::ibc::core::channel::v1::Channel* QueryChannelResponse::mutable_channel() {
  ::ibc::core::channel::v1::Channel* _msg = _internal_mutable_channel();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelResponse.channel)
  return _msg;
}
inline void QueryChannelResponse::set_allocated_channel(::ibc::core::channel::v1::Channel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel));
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelResponse.channel)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryChannelResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryChannelResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelResponse.proof)
}
inline std::string* QueryChannelResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelResponse.proof)
  return _s;
}
inline const std::string& QueryChannelResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryChannelResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryChannelResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryChannelResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryChannelResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryChannelResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryChannelResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryChannelResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryChannelResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelResponse.proof_height)
  return _msg;
}
inline void QueryChannelResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryChannelsRequest

// .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
inline bool QueryChannelsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryChannelsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryChannelsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelsRequest.pagination)
  return _internal_pagination();
}
inline void QueryChannelsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryChannelsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryChannelsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryChannelsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryChannelsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelsRequest.pagination)
  return _msg;
}
inline void QueryChannelsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryChannelsResponse

// repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
inline int QueryChannelsResponse::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int QueryChannelsResponse::channels_size() const {
  return _internal_channels_size();
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelsResponse.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >*
QueryChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryChannelsResponse.channels)
  return _internal_mutable_channels();
}
inline const ::ibc::core::channel::v1::IdentifiedChannel& QueryChannelsResponse::_internal_channels(int index) const {
  return _internal_channels().Get(index);
}
inline const ::ibc::core::channel::v1::IdentifiedChannel& QueryChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelsResponse.channels)
  return _internal_channels(index);
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryChannelsResponse::_internal_add_channels() {
  return _internal_mutable_channels()->Add();
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryChannelsResponse::add_channels() {
  ::ibc::core::channel::v1::IdentifiedChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryChannelsResponse.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >&
QueryChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryChannelsResponse.channels)
  return _internal_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>&
QueryChannelsResponse::_internal_channels() const {
  return _impl_.channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>*
QueryChannelsResponse::_internal_mutable_channels() {
  return &_impl_.channels_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryChannelsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryChannelsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryChannelsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelsResponse.pagination)
  return _internal_pagination();
}
inline void QueryChannelsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryChannelsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryChannelsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryChannelsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryChannelsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelsResponse.pagination)
  return _msg;
}
inline void QueryChannelsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelsResponse.pagination)
}

// .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryChannelsResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryChannelsResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryChannelsResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelsResponse.height)
  return _internal_height();
}
inline void QueryChannelsResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelsResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryChannelsResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelsResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelsResponse.height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelsResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryChannelsResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelsResponse.height)
  return _msg;
}
inline void QueryChannelsResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelsResponse.height)
}

// -------------------------------------------------------------------

// QueryConnectionChannelsRequest

// string connection = 1 [json_name = "connection"];
inline void QueryConnectionChannelsRequest::clear_connection() {
  _impl_.connection_.ClearToEmpty();
}
inline const std::string& QueryConnectionChannelsRequest::connection() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryConnectionChannelsRequest.connection)
  return _internal_connection();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryConnectionChannelsRequest::set_connection(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryConnectionChannelsRequest.connection)
}
inline std::string* QueryConnectionChannelsRequest::mutable_connection() {
  std::string* _s = _internal_mutable_connection();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryConnectionChannelsRequest.connection)
  return _s;
}
inline const std::string& QueryConnectionChannelsRequest::_internal_connection() const {
  return _impl_.connection_.Get();
}
inline void QueryConnectionChannelsRequest::_internal_set_connection(const std::string& value) {
  ;


  _impl_.connection_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryConnectionChannelsRequest::_internal_mutable_connection() {
  ;
  return _impl_.connection_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryConnectionChannelsRequest::release_connection() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryConnectionChannelsRequest.connection)
  return _impl_.connection_.Release();
}
inline void QueryConnectionChannelsRequest::set_allocated_connection(std::string* value) {
  _impl_.connection_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_.IsDefault()) {
          _impl_.connection_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsRequest.connection)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
inline bool QueryConnectionChannelsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConnectionChannelsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryConnectionChannelsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination)
  return _internal_pagination();
}
inline void QueryConnectionChannelsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConnectionChannelsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConnectionChannelsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConnectionChannelsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryConnectionChannelsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination)
  return _msg;
}
inline void QueryConnectionChannelsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryConnectionChannelsResponse

// repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
inline int QueryConnectionChannelsResponse::_internal_channels_size() const {
  return _impl_.channels_.size();
}
inline int QueryConnectionChannelsResponse::channels_size() const {
  return _internal_channels_size();
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryConnectionChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryConnectionChannelsResponse.channels)
  return _internal_mutable_channels()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >*
QueryConnectionChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryConnectionChannelsResponse.channels)
  return _internal_mutable_channels();
}
inline const ::ibc::core::channel::v1::IdentifiedChannel& QueryConnectionChannelsResponse::_internal_channels(int index) const {
  return _internal_channels().Get(index);
}
inline const ::ibc::core::channel::v1::IdentifiedChannel& QueryConnectionChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryConnectionChannelsResponse.channels)
  return _internal_channels(index);
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryConnectionChannelsResponse::_internal_add_channels() {
  return _internal_mutable_channels()->Add();
}
inline ::ibc::core::channel::v1::IdentifiedChannel* QueryConnectionChannelsResponse::add_channels() {
  ::ibc::core::channel::v1::IdentifiedChannel* _add = _internal_add_channels();
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryConnectionChannelsResponse.channels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::IdentifiedChannel >&
QueryConnectionChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryConnectionChannelsResponse.channels)
  return _internal_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>&
QueryConnectionChannelsResponse::_internal_channels() const {
  return _impl_.channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::IdentifiedChannel>*
QueryConnectionChannelsResponse::_internal_mutable_channels() {
  return &_impl_.channels_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryConnectionChannelsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConnectionChannelsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryConnectionChannelsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination)
  return _internal_pagination();
}
inline void QueryConnectionChannelsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConnectionChannelsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConnectionChannelsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConnectionChannelsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryConnectionChannelsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination)
  return _msg;
}
inline void QueryConnectionChannelsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsResponse.pagination)
}

// .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryConnectionChannelsResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryConnectionChannelsResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryConnectionChannelsResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryConnectionChannelsResponse.height)
  return _internal_height();
}
inline void QueryConnectionChannelsResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryConnectionChannelsResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryConnectionChannelsResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryConnectionChannelsResponse.height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryConnectionChannelsResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryConnectionChannelsResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryConnectionChannelsResponse.height)
  return _msg;
}
inline void QueryConnectionChannelsResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryConnectionChannelsResponse.height)
}

// -------------------------------------------------------------------

// QueryChannelClientStateRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryChannelClientStateRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryChannelClientStateRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelClientStateRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelClientStateRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelClientStateRequest.port_id)
}
inline std::string* QueryChannelClientStateRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelClientStateRequest.port_id)
  return _s;
}
inline const std::string& QueryChannelClientStateRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryChannelClientStateRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelClientStateRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryChannelClientStateRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelClientStateRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryChannelClientStateRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryChannelClientStateRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelClientStateRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id)
}
inline std::string* QueryChannelClientStateRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id)
  return _s;
}
inline const std::string& QueryChannelClientStateRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryChannelClientStateRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryChannelClientStateRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryChannelClientStateResponse

// .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1 [json_name = "identifiedClientState"];
inline bool QueryChannelClientStateResponse::has_identified_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identified_client_state_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::IdentifiedClientState& QueryChannelClientStateResponse::_internal_identified_client_state() const {
  const ::ibc::core::client::v1::IdentifiedClientState* p = _impl_.identified_client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::IdentifiedClientState&>(
      ::ibc::core::client::v1::_IdentifiedClientState_default_instance_);
}
inline const ::ibc::core::client::v1::IdentifiedClientState& QueryChannelClientStateResponse::identified_client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state)
  return _internal_identified_client_state();
}
inline void QueryChannelClientStateResponse::unsafe_arena_set_allocated_identified_client_state(
    ::ibc::core::client::v1::IdentifiedClientState* identified_client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identified_client_state_);
  }
  _impl_.identified_client_state_ = identified_client_state;
  if (identified_client_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state)
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryChannelClientStateResponse::release_identified_client_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::IdentifiedClientState* temp = _impl_.identified_client_state_;
  _impl_.identified_client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryChannelClientStateResponse::unsafe_arena_release_identified_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::IdentifiedClientState* temp = _impl_.identified_client_state_;
  _impl_.identified_client_state_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryChannelClientStateResponse::_internal_mutable_identified_client_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identified_client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::IdentifiedClientState>(GetArenaForAllocation());
    _impl_.identified_client_state_ = p;
  }
  return _impl_.identified_client_state_;
}
inline ::ibc::core::client::v1::IdentifiedClientState* QueryChannelClientStateResponse::mutable_identified_client_state() {
  ::ibc::core::client::v1::IdentifiedClientState* _msg = _internal_mutable_identified_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state)
  return _msg;
}
inline void QueryChannelClientStateResponse::set_allocated_identified_client_state(::ibc::core::client::v1::IdentifiedClientState* identified_client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identified_client_state_);
  }
  if (identified_client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identified_client_state));
    if (message_arena != submessage_arena) {
      identified_client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identified_client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identified_client_state_ = identified_client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelClientStateResponse.identified_client_state)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryChannelClientStateResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryChannelClientStateResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelClientStateResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelClientStateResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelClientStateResponse.proof)
}
inline std::string* QueryChannelClientStateResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelClientStateResponse.proof)
  return _s;
}
inline const std::string& QueryChannelClientStateResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryChannelClientStateResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelClientStateResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelClientStateResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryChannelClientStateResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelClientStateResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryChannelClientStateResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryChannelClientStateResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryChannelClientStateResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryChannelClientStateResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryChannelClientStateResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelClientStateResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelClientStateResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryChannelClientStateResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height)
  return _msg;
}
inline void QueryChannelClientStateResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelClientStateResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryChannelConsensusStateRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryChannelConsensusStateRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryChannelConsensusStateRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelConsensusStateRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id)
}
inline std::string* QueryChannelConsensusStateRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id)
  return _s;
}
inline const std::string& QueryChannelConsensusStateRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryChannelConsensusStateRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryChannelConsensusStateRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryChannelConsensusStateRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryChannelConsensusStateRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelConsensusStateRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id)
}
inline std::string* QueryChannelConsensusStateRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id)
  return _s;
}
inline const std::string& QueryChannelConsensusStateRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryChannelConsensusStateRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryChannelConsensusStateRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id)
}

// uint64 revision_number = 3 [json_name = "revisionNumber"];
inline void QueryChannelConsensusStateRequest::clear_revision_number() {
  _impl_.revision_number_ = ::uint64_t{0u};
}
inline ::uint64_t QueryChannelConsensusStateRequest::revision_number() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateRequest.revision_number)
  return _internal_revision_number();
}
inline void QueryChannelConsensusStateRequest::set_revision_number(::uint64_t value) {
  _internal_set_revision_number(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateRequest.revision_number)
}
inline ::uint64_t QueryChannelConsensusStateRequest::_internal_revision_number() const {
  return _impl_.revision_number_;
}
inline void QueryChannelConsensusStateRequest::_internal_set_revision_number(::uint64_t value) {
  ;
  _impl_.revision_number_ = value;
}

// uint64 revision_height = 4 [json_name = "revisionHeight"];
inline void QueryChannelConsensusStateRequest::clear_revision_height() {
  _impl_.revision_height_ = ::uint64_t{0u};
}
inline ::uint64_t QueryChannelConsensusStateRequest::revision_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateRequest.revision_height)
  return _internal_revision_height();
}
inline void QueryChannelConsensusStateRequest::set_revision_height(::uint64_t value) {
  _internal_set_revision_height(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateRequest.revision_height)
}
inline ::uint64_t QueryChannelConsensusStateRequest::_internal_revision_height() const {
  return _impl_.revision_height_;
}
inline void QueryChannelConsensusStateRequest::_internal_set_revision_height(::uint64_t value) {
  ;
  _impl_.revision_height_ = value;
}

// -------------------------------------------------------------------

// QueryChannelConsensusStateResponse

// .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
inline bool QueryChannelConsensusStateResponse::has_consensus_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryChannelConsensusStateResponse::_internal_consensus_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.consensus_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& QueryChannelConsensusStateResponse::consensus_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state)
  return _internal_consensus_state();
}
inline void QueryChannelConsensusStateResponse::unsafe_arena_set_allocated_consensus_state(
    ::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  _impl_.consensus_state_ = consensus_state;
  if (consensus_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryChannelConsensusStateResponse::release_consensus_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryChannelConsensusStateResponse::unsafe_arena_release_consensus_state() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.consensus_state_;
  _impl_.consensus_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryChannelConsensusStateResponse::_internal_mutable_consensus_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.consensus_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.consensus_state_ = p;
  }
  return _impl_.consensus_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* QueryChannelConsensusStateResponse::mutable_consensus_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_consensus_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state)
  return _msg;
}
inline void QueryChannelConsensusStateResponse::set_allocated_consensus_state(::PROTOBUF_NAMESPACE_ID::Any* consensus_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_state_);
  }
  if (consensus_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_state));
    if (message_arena != submessage_arena) {
      consensus_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.consensus_state_ = consensus_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.consensus_state)
}

// string client_id = 2 [json_name = "clientId"];
inline void QueryChannelConsensusStateResponse::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& QueryChannelConsensusStateResponse::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelConsensusStateResponse::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id)
}
inline std::string* QueryChannelConsensusStateResponse::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id)
  return _s;
}
inline const std::string& QueryChannelConsensusStateResponse::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void QueryChannelConsensusStateResponse::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateResponse::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateResponse::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id)
  return _impl_.client_id_.Release();
}
inline void QueryChannelConsensusStateResponse::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id)
}

// bytes proof = 3 [json_name = "proof"];
inline void QueryChannelConsensusStateResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryChannelConsensusStateResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryChannelConsensusStateResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof)
}
inline std::string* QueryChannelConsensusStateResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof)
  return _s;
}
inline const std::string& QueryChannelConsensusStateResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryChannelConsensusStateResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryChannelConsensusStateResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryChannelConsensusStateResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryChannelConsensusStateResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryChannelConsensusStateResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryChannelConsensusStateResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryChannelConsensusStateResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryChannelConsensusStateResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelConsensusStateResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryChannelConsensusStateResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryChannelConsensusStateResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height)
  return _msg;
}
inline void QueryChannelConsensusStateResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryChannelConsensusStateResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryPacketCommitmentRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryPacketCommitmentRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id)
}
inline std::string* QueryPacketCommitmentRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id)
  return _s;
}
inline const std::string& QueryPacketCommitmentRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryPacketCommitmentRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryPacketCommitmentRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryPacketCommitmentRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id)
}
inline std::string* QueryPacketCommitmentRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id)
  return _s;
}
inline const std::string& QueryPacketCommitmentRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPacketCommitmentRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPacketCommitmentRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void QueryPacketCommitmentRequest::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t QueryPacketCommitmentRequest::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentRequest.sequence)
  return _internal_sequence();
}
inline void QueryPacketCommitmentRequest::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentRequest.sequence)
}
inline ::uint64_t QueryPacketCommitmentRequest::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void QueryPacketCommitmentRequest::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// QueryPacketCommitmentResponse

// bytes commitment = 1 [json_name = "commitment"];
inline void QueryPacketCommitmentResponse::clear_commitment() {
  _impl_.commitment_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentResponse::commitment() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentResponse.commitment)
  return _internal_commitment();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentResponse::set_commitment(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.commitment_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentResponse.commitment)
}
inline std::string* QueryPacketCommitmentResponse::mutable_commitment() {
  std::string* _s = _internal_mutable_commitment();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentResponse.commitment)
  return _s;
}
inline const std::string& QueryPacketCommitmentResponse::_internal_commitment() const {
  return _impl_.commitment_.Get();
}
inline void QueryPacketCommitmentResponse::_internal_set_commitment(const std::string& value) {
  ;


  _impl_.commitment_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentResponse::_internal_mutable_commitment() {
  ;
  return _impl_.commitment_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentResponse::release_commitment() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentResponse.commitment)
  return _impl_.commitment_.Release();
}
inline void QueryPacketCommitmentResponse::set_allocated_commitment(std::string* value) {
  _impl_.commitment_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.commitment_.IsDefault()) {
          _impl_.commitment_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentResponse.commitment)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryPacketCommitmentResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof)
}
inline std::string* QueryPacketCommitmentResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof)
  return _s;
}
inline const std::string& QueryPacketCommitmentResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryPacketCommitmentResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryPacketCommitmentResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryPacketCommitmentResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryPacketCommitmentResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryPacketCommitmentResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryPacketCommitmentResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height)
  return _msg;
}
inline void QueryPacketCommitmentResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryPacketCommitmentsRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryPacketCommitmentsRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentsRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentsRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id)
}
inline std::string* QueryPacketCommitmentsRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id)
  return _s;
}
inline const std::string& QueryPacketCommitmentsRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryPacketCommitmentsRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentsRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentsRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryPacketCommitmentsRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryPacketCommitmentsRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPacketCommitmentsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketCommitmentsRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id)
}
inline std::string* QueryPacketCommitmentsRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id)
  return _s;
}
inline const std::string& QueryPacketCommitmentsRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPacketCommitmentsRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentsRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketCommitmentsRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPacketCommitmentsRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
inline bool QueryPacketCommitmentsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPacketCommitmentsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPacketCommitmentsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination)
  return _internal_pagination();
}
inline void QueryPacketCommitmentsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketCommitmentsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketCommitmentsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketCommitmentsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketCommitmentsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination)
  return _msg;
}
inline void QueryPacketCommitmentsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsRequest.pagination)
}

// -------------------------------------------------------------------

// QueryPacketCommitmentsResponse

// repeated .ibc.core.channel.v1.PacketState commitments = 1 [json_name = "commitments"];
inline int QueryPacketCommitmentsResponse::_internal_commitments_size() const {
  return _impl_.commitments_.size();
}
inline int QueryPacketCommitmentsResponse::commitments_size() const {
  return _internal_commitments_size();
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketCommitmentsResponse::mutable_commitments(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments)
  return _internal_mutable_commitments()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >*
QueryPacketCommitmentsResponse::mutable_commitments() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments)
  return _internal_mutable_commitments();
}
inline const ::ibc::core::channel::v1::PacketState& QueryPacketCommitmentsResponse::_internal_commitments(int index) const {
  return _internal_commitments().Get(index);
}
inline const ::ibc::core::channel::v1::PacketState& QueryPacketCommitmentsResponse::commitments(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments)
  return _internal_commitments(index);
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketCommitmentsResponse::_internal_add_commitments() {
  return _internal_mutable_commitments()->Add();
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketCommitmentsResponse::add_commitments() {
  ::ibc::core::channel::v1::PacketState* _add = _internal_add_commitments();
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >&
QueryPacketCommitmentsResponse::commitments() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryPacketCommitmentsResponse.commitments)
  return _internal_commitments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>&
QueryPacketCommitmentsResponse::_internal_commitments() const {
  return _impl_.commitments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>*
QueryPacketCommitmentsResponse::_internal_mutable_commitments() {
  return &_impl_.commitments_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryPacketCommitmentsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPacketCommitmentsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPacketCommitmentsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination)
  return _internal_pagination();
}
inline void QueryPacketCommitmentsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketCommitmentsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketCommitmentsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketCommitmentsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketCommitmentsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination)
  return _msg;
}
inline void QueryPacketCommitmentsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsResponse.pagination)
}

// .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryPacketCommitmentsResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryPacketCommitmentsResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryPacketCommitmentsResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketCommitmentsResponse.height)
  return _internal_height();
}
inline void QueryPacketCommitmentsResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentsResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentsResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketCommitmentsResponse.height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentsResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryPacketCommitmentsResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketCommitmentsResponse.height)
  return _msg;
}
inline void QueryPacketCommitmentsResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketCommitmentsResponse.height)
}

// -------------------------------------------------------------------

// QueryPacketReceiptRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryPacketReceiptRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryPacketReceiptRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketReceiptRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketReceiptRequest.port_id)
}
inline std::string* QueryPacketReceiptRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketReceiptRequest.port_id)
  return _s;
}
inline const std::string& QueryPacketReceiptRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryPacketReceiptRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketReceiptRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryPacketReceiptRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketReceiptRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryPacketReceiptRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPacketReceiptRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketReceiptRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id)
}
inline std::string* QueryPacketReceiptRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id)
  return _s;
}
inline const std::string& QueryPacketReceiptRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPacketReceiptRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPacketReceiptRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void QueryPacketReceiptRequest::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t QueryPacketReceiptRequest::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptRequest.sequence)
  return _internal_sequence();
}
inline void QueryPacketReceiptRequest::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketReceiptRequest.sequence)
}
inline ::uint64_t QueryPacketReceiptRequest::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void QueryPacketReceiptRequest::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// QueryPacketReceiptResponse

// bool received = 2 [json_name = "received"];
inline void QueryPacketReceiptResponse::clear_received() {
  _impl_.received_ = false;
}
inline bool QueryPacketReceiptResponse::received() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptResponse.received)
  return _internal_received();
}
inline void QueryPacketReceiptResponse::set_received(bool value) {
  _internal_set_received(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketReceiptResponse.received)
}
inline bool QueryPacketReceiptResponse::_internal_received() const {
  return _impl_.received_;
}
inline void QueryPacketReceiptResponse::_internal_set_received(bool value) {
  ;
  _impl_.received_ = value;
}

// bytes proof = 3 [json_name = "proof"];
inline void QueryPacketReceiptResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryPacketReceiptResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketReceiptResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketReceiptResponse.proof)
}
inline std::string* QueryPacketReceiptResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketReceiptResponse.proof)
  return _s;
}
inline const std::string& QueryPacketReceiptResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryPacketReceiptResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketReceiptResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketReceiptResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryPacketReceiptResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketReceiptResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryPacketReceiptResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryPacketReceiptResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryPacketReceiptResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryPacketReceiptResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryPacketReceiptResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketReceiptResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketReceiptResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryPacketReceiptResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height)
  return _msg;
}
inline void QueryPacketReceiptResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketReceiptResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryPacketAcknowledgementRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryPacketAcknowledgementRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id)
}
inline std::string* QueryPacketAcknowledgementRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryPacketAcknowledgementRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryPacketAcknowledgementRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryPacketAcknowledgementRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id)
}
inline std::string* QueryPacketAcknowledgementRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPacketAcknowledgementRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPacketAcknowledgementRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id)
}

// uint64 sequence = 3 [json_name = "sequence"];
inline void QueryPacketAcknowledgementRequest::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t QueryPacketAcknowledgementRequest::sequence() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.sequence)
  return _internal_sequence();
}
inline void QueryPacketAcknowledgementRequest::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementRequest.sequence)
}
inline ::uint64_t QueryPacketAcknowledgementRequest::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void QueryPacketAcknowledgementRequest::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// -------------------------------------------------------------------

// QueryPacketAcknowledgementResponse

// bytes acknowledgement = 1 [json_name = "acknowledgement"];
inline void QueryPacketAcknowledgementResponse::clear_acknowledgement() {
  _impl_.acknowledgement_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementResponse::acknowledgement() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.acknowledgement)
  return _internal_acknowledgement();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementResponse::set_acknowledgement(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.acknowledgement_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.acknowledgement)
}
inline std::string* QueryPacketAcknowledgementResponse::mutable_acknowledgement() {
  std::string* _s = _internal_mutable_acknowledgement();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.acknowledgement)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementResponse::_internal_acknowledgement() const {
  return _impl_.acknowledgement_.Get();
}
inline void QueryPacketAcknowledgementResponse::_internal_set_acknowledgement(const std::string& value) {
  ;


  _impl_.acknowledgement_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementResponse::_internal_mutable_acknowledgement() {
  ;
  return _impl_.acknowledgement_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementResponse::release_acknowledgement() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.acknowledgement)
  return _impl_.acknowledgement_.Release();
}
inline void QueryPacketAcknowledgementResponse::set_allocated_acknowledgement(std::string* value) {
  _impl_.acknowledgement_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.acknowledgement_.IsDefault()) {
          _impl_.acknowledgement_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.acknowledgement)
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryPacketAcknowledgementResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof)
}
inline std::string* QueryPacketAcknowledgementResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryPacketAcknowledgementResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryPacketAcknowledgementResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryPacketAcknowledgementResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryPacketAcknowledgementResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryPacketAcknowledgementResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryPacketAcknowledgementResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height)
  return _msg;
}
inline void QueryPacketAcknowledgementResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryPacketAcknowledgementsRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryPacketAcknowledgementsRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementsRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementsRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id)
}
inline std::string* QueryPacketAcknowledgementsRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementsRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryPacketAcknowledgementsRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementsRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementsRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryPacketAcknowledgementsRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryPacketAcknowledgementsRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryPacketAcknowledgementsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryPacketAcknowledgementsRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id)
}
inline std::string* QueryPacketAcknowledgementsRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id)
  return _s;
}
inline const std::string& QueryPacketAcknowledgementsRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryPacketAcknowledgementsRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementsRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryPacketAcknowledgementsRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryPacketAcknowledgementsRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id)
}

// .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
inline bool QueryPacketAcknowledgementsRequest::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPacketAcknowledgementsRequest::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageRequest* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageRequest&>(
      ::cosmos::base::query::v1beta1::_PageRequest_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageRequest& QueryPacketAcknowledgementsRequest::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination)
  return _internal_pagination();
}
inline void QueryPacketAcknowledgementsRequest::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageRequest* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination)
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketAcknowledgementsRequest::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketAcknowledgementsRequest::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageRequest* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketAcknowledgementsRequest::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageRequest>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageRequest* QueryPacketAcknowledgementsRequest::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageRequest* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination)
  return _msg;
}
inline void QueryPacketAcknowledgementsRequest::set_allocated_pagination(::cosmos::base::query::v1beta1::PageRequest* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.pagination)
}

// repeated uint64 packet_commitment_sequences = 4 [json_name = "packetCommitmentSequences"];
inline int QueryPacketAcknowledgementsRequest::_internal_packet_commitment_sequences_size() const {
  return _impl_.packet_commitment_sequences_.size();
}
inline int QueryPacketAcknowledgementsRequest::packet_commitment_sequences_size() const {
  return _internal_packet_commitment_sequences_size();
}
inline void QueryPacketAcknowledgementsRequest::clear_packet_commitment_sequences() {
  _internal_mutable_packet_commitment_sequences()->Clear();
}
inline ::uint64_t QueryPacketAcknowledgementsRequest::packet_commitment_sequences(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences)
  return _internal_packet_commitment_sequences(index);
}
inline void QueryPacketAcknowledgementsRequest::set_packet_commitment_sequences(int index, ::uint64_t value) {
  _internal_mutable_packet_commitment_sequences()->Set(index, value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences)
}
inline void QueryPacketAcknowledgementsRequest::add_packet_commitment_sequences(::uint64_t value) {
  _internal_add_packet_commitment_sequences(value);
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryPacketAcknowledgementsRequest::packet_commitment_sequences() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences)
  return _internal_packet_commitment_sequences();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryPacketAcknowledgementsRequest::mutable_packet_commitment_sequences() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.packet_commitment_sequences)
  return _internal_mutable_packet_commitment_sequences();
}

inline ::uint64_t QueryPacketAcknowledgementsRequest::_internal_packet_commitment_sequences(int index) const {
  return _internal_packet_commitment_sequences().Get(index);
}
inline void QueryPacketAcknowledgementsRequest::_internal_add_packet_commitment_sequences(::uint64_t value) {
  _internal_mutable_packet_commitment_sequences()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryPacketAcknowledgementsRequest::_internal_packet_commitment_sequences() const {
  return _impl_.packet_commitment_sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryPacketAcknowledgementsRequest::_internal_mutable_packet_commitment_sequences() {
  return &_impl_.packet_commitment_sequences_;
}

// -------------------------------------------------------------------

// QueryPacketAcknowledgementsResponse

// repeated .ibc.core.channel.v1.PacketState acknowledgements = 1 [json_name = "acknowledgements"];
inline int QueryPacketAcknowledgementsResponse::_internal_acknowledgements_size() const {
  return _impl_.acknowledgements_.size();
}
inline int QueryPacketAcknowledgementsResponse::acknowledgements_size() const {
  return _internal_acknowledgements_size();
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketAcknowledgementsResponse::mutable_acknowledgements(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements)
  return _internal_mutable_acknowledgements()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >*
QueryPacketAcknowledgementsResponse::mutable_acknowledgements() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements)
  return _internal_mutable_acknowledgements();
}
inline const ::ibc::core::channel::v1::PacketState& QueryPacketAcknowledgementsResponse::_internal_acknowledgements(int index) const {
  return _internal_acknowledgements().Get(index);
}
inline const ::ibc::core::channel::v1::PacketState& QueryPacketAcknowledgementsResponse::acknowledgements(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements)
  return _internal_acknowledgements(index);
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketAcknowledgementsResponse::_internal_add_acknowledgements() {
  return _internal_mutable_acknowledgements()->Add();
}
inline ::ibc::core::channel::v1::PacketState* QueryPacketAcknowledgementsResponse::add_acknowledgements() {
  ::ibc::core::channel::v1::PacketState* _add = _internal_add_acknowledgements();
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::channel::v1::PacketState >&
QueryPacketAcknowledgementsResponse::acknowledgements() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.acknowledgements)
  return _internal_acknowledgements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>&
QueryPacketAcknowledgementsResponse::_internal_acknowledgements() const {
  return _impl_.acknowledgements_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::channel::v1::PacketState>*
QueryPacketAcknowledgementsResponse::_internal_mutable_acknowledgements() {
  return &_impl_.acknowledgements_;
}

// .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
inline bool QueryPacketAcknowledgementsResponse::has_pagination() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagination_ != nullptr);
  return value;
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPacketAcknowledgementsResponse::_internal_pagination() const {
  const ::cosmos::base::query::v1beta1::PageResponse* p = _impl_.pagination_;
  return p != nullptr ? *p : reinterpret_cast<const ::cosmos::base::query::v1beta1::PageResponse&>(
      ::cosmos::base::query::v1beta1::_PageResponse_default_instance_);
}
inline const ::cosmos::base::query::v1beta1::PageResponse& QueryPacketAcknowledgementsResponse::pagination() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination)
  return _internal_pagination();
}
inline void QueryPacketAcknowledgementsResponse::unsafe_arena_set_allocated_pagination(
    ::cosmos::base::query::v1beta1::PageResponse* pagination) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  _impl_.pagination_ = pagination;
  if (pagination) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination)
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketAcknowledgementsResponse::release_pagination() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketAcknowledgementsResponse::unsafe_arena_release_pagination() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cosmos::base::query::v1beta1::PageResponse* temp = _impl_.pagination_;
  _impl_.pagination_ = nullptr;
  return temp;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketAcknowledgementsResponse::_internal_mutable_pagination() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pagination_ == nullptr) {
    auto* p = CreateMaybeMessage<::cosmos::base::query::v1beta1::PageResponse>(GetArenaForAllocation());
    _impl_.pagination_ = p;
  }
  return _impl_.pagination_;
}
inline ::cosmos::base::query::v1beta1::PageResponse* QueryPacketAcknowledgementsResponse::mutable_pagination() {
  ::cosmos::base::query::v1beta1::PageResponse* _msg = _internal_mutable_pagination();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination)
  return _msg;
}
inline void QueryPacketAcknowledgementsResponse::set_allocated_pagination(::cosmos::base::query::v1beta1::PageResponse* pagination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagination_);
  }
  if (pagination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagination));
    if (message_arena != submessage_arena) {
      pagination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.pagination)
}

// .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryPacketAcknowledgementsResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryPacketAcknowledgementsResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryPacketAcknowledgementsResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height)
  return _internal_height();
}
inline void QueryPacketAcknowledgementsResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementsResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementsResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementsResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryPacketAcknowledgementsResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height)
  return _msg;
}
inline void QueryPacketAcknowledgementsResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse.height)
}

// -------------------------------------------------------------------

// QueryUnreceivedPacketsRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryUnreceivedPacketsRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryUnreceivedPacketsRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUnreceivedPacketsRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id)
}
inline std::string* QueryUnreceivedPacketsRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id)
  return _s;
}
inline const std::string& QueryUnreceivedPacketsRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryUnreceivedPacketsRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUnreceivedPacketsRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUnreceivedPacketsRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryUnreceivedPacketsRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryUnreceivedPacketsRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryUnreceivedPacketsRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUnreceivedPacketsRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id)
}
inline std::string* QueryUnreceivedPacketsRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id)
  return _s;
}
inline const std::string& QueryUnreceivedPacketsRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryUnreceivedPacketsRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUnreceivedPacketsRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUnreceivedPacketsRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryUnreceivedPacketsRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id)
}

// repeated uint64 packet_commitment_sequences = 3 [json_name = "packetCommitmentSequences"];
inline int QueryUnreceivedPacketsRequest::_internal_packet_commitment_sequences_size() const {
  return _impl_.packet_commitment_sequences_.size();
}
inline int QueryUnreceivedPacketsRequest::packet_commitment_sequences_size() const {
  return _internal_packet_commitment_sequences_size();
}
inline void QueryUnreceivedPacketsRequest::clear_packet_commitment_sequences() {
  _internal_mutable_packet_commitment_sequences()->Clear();
}
inline ::uint64_t QueryUnreceivedPacketsRequest::packet_commitment_sequences(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences)
  return _internal_packet_commitment_sequences(index);
}
inline void QueryUnreceivedPacketsRequest::set_packet_commitment_sequences(int index, ::uint64_t value) {
  _internal_mutable_packet_commitment_sequences()->Set(index, value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences)
}
inline void QueryUnreceivedPacketsRequest::add_packet_commitment_sequences(::uint64_t value) {
  _internal_add_packet_commitment_sequences(value);
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedPacketsRequest::packet_commitment_sequences() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences)
  return _internal_packet_commitment_sequences();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedPacketsRequest::mutable_packet_commitment_sequences() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryUnreceivedPacketsRequest.packet_commitment_sequences)
  return _internal_mutable_packet_commitment_sequences();
}

inline ::uint64_t QueryUnreceivedPacketsRequest::_internal_packet_commitment_sequences(int index) const {
  return _internal_packet_commitment_sequences().Get(index);
}
inline void QueryUnreceivedPacketsRequest::_internal_add_packet_commitment_sequences(::uint64_t value) {
  _internal_mutable_packet_commitment_sequences()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedPacketsRequest::_internal_packet_commitment_sequences() const {
  return _impl_.packet_commitment_sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedPacketsRequest::_internal_mutable_packet_commitment_sequences() {
  return &_impl_.packet_commitment_sequences_;
}

// -------------------------------------------------------------------

// QueryUnreceivedPacketsResponse

// repeated uint64 sequences = 1 [json_name = "sequences"];
inline int QueryUnreceivedPacketsResponse::_internal_sequences_size() const {
  return _impl_.sequences_.size();
}
inline int QueryUnreceivedPacketsResponse::sequences_size() const {
  return _internal_sequences_size();
}
inline void QueryUnreceivedPacketsResponse::clear_sequences() {
  _internal_mutable_sequences()->Clear();
}
inline ::uint64_t QueryUnreceivedPacketsResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences)
  return _internal_sequences(index);
}
inline void QueryUnreceivedPacketsResponse::set_sequences(int index, ::uint64_t value) {
  _internal_mutable_sequences()->Set(index, value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences)
}
inline void QueryUnreceivedPacketsResponse::add_sequences(::uint64_t value) {
  _internal_add_sequences(value);
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedPacketsResponse::sequences() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences)
  return _internal_sequences();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedPacketsResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.sequences)
  return _internal_mutable_sequences();
}

inline ::uint64_t QueryUnreceivedPacketsResponse::_internal_sequences(int index) const {
  return _internal_sequences().Get(index);
}
inline void QueryUnreceivedPacketsResponse::_internal_add_sequences(::uint64_t value) {
  _internal_mutable_sequences()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedPacketsResponse::_internal_sequences() const {
  return _impl_.sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedPacketsResponse::_internal_mutable_sequences() {
  return &_impl_.sequences_;
}

// .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryUnreceivedPacketsResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryUnreceivedPacketsResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryUnreceivedPacketsResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height)
  return _internal_height();
}
inline void QueryUnreceivedPacketsResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedPacketsResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedPacketsResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedPacketsResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedPacketsResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height)
  return _msg;
}
inline void QueryUnreceivedPacketsResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedPacketsResponse.height)
}

// -------------------------------------------------------------------

// QueryUnreceivedAcksRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryUnreceivedAcksRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryUnreceivedAcksRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUnreceivedAcksRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id)
}
inline std::string* QueryUnreceivedAcksRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id)
  return _s;
}
inline const std::string& QueryUnreceivedAcksRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryUnreceivedAcksRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUnreceivedAcksRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUnreceivedAcksRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryUnreceivedAcksRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryUnreceivedAcksRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryUnreceivedAcksRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryUnreceivedAcksRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id)
}
inline std::string* QueryUnreceivedAcksRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id)
  return _s;
}
inline const std::string& QueryUnreceivedAcksRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryUnreceivedAcksRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryUnreceivedAcksRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryUnreceivedAcksRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryUnreceivedAcksRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id)
}

// repeated uint64 packet_ack_sequences = 3 [json_name = "packetAckSequences"];
inline int QueryUnreceivedAcksRequest::_internal_packet_ack_sequences_size() const {
  return _impl_.packet_ack_sequences_.size();
}
inline int QueryUnreceivedAcksRequest::packet_ack_sequences_size() const {
  return _internal_packet_ack_sequences_size();
}
inline void QueryUnreceivedAcksRequest::clear_packet_ack_sequences() {
  _internal_mutable_packet_ack_sequences()->Clear();
}
inline ::uint64_t QueryUnreceivedAcksRequest::packet_ack_sequences(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences)
  return _internal_packet_ack_sequences(index);
}
inline void QueryUnreceivedAcksRequest::set_packet_ack_sequences(int index, ::uint64_t value) {
  _internal_mutable_packet_ack_sequences()->Set(index, value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences)
}
inline void QueryUnreceivedAcksRequest::add_packet_ack_sequences(::uint64_t value) {
  _internal_add_packet_ack_sequences(value);
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedAcksRequest::packet_ack_sequences() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences)
  return _internal_packet_ack_sequences();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedAcksRequest::mutable_packet_ack_sequences() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryUnreceivedAcksRequest.packet_ack_sequences)
  return _internal_mutable_packet_ack_sequences();
}

inline ::uint64_t QueryUnreceivedAcksRequest::_internal_packet_ack_sequences(int index) const {
  return _internal_packet_ack_sequences().Get(index);
}
inline void QueryUnreceivedAcksRequest::_internal_add_packet_ack_sequences(::uint64_t value) {
  _internal_mutable_packet_ack_sequences()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedAcksRequest::_internal_packet_ack_sequences() const {
  return _impl_.packet_ack_sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedAcksRequest::_internal_mutable_packet_ack_sequences() {
  return &_impl_.packet_ack_sequences_;
}

// -------------------------------------------------------------------

// QueryUnreceivedAcksResponse

// repeated uint64 sequences = 1 [json_name = "sequences"];
inline int QueryUnreceivedAcksResponse::_internal_sequences_size() const {
  return _impl_.sequences_.size();
}
inline int QueryUnreceivedAcksResponse::sequences_size() const {
  return _internal_sequences_size();
}
inline void QueryUnreceivedAcksResponse::clear_sequences() {
  _internal_mutable_sequences()->Clear();
}
inline ::uint64_t QueryUnreceivedAcksResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences)
  return _internal_sequences(index);
}
inline void QueryUnreceivedAcksResponse::set_sequences(int index, ::uint64_t value) {
  _internal_mutable_sequences()->Set(index, value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences)
}
inline void QueryUnreceivedAcksResponse::add_sequences(::uint64_t value) {
  _internal_add_sequences(value);
  // @@protoc_insertion_point(field_add:ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedAcksResponse::sequences() const {
  // @@protoc_insertion_point(field_list:ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences)
  return _internal_sequences();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedAcksResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.channel.v1.QueryUnreceivedAcksResponse.sequences)
  return _internal_mutable_sequences();
}

inline ::uint64_t QueryUnreceivedAcksResponse::_internal_sequences(int index) const {
  return _internal_sequences().Get(index);
}
inline void QueryUnreceivedAcksResponse::_internal_add_sequences(::uint64_t value) {
  _internal_mutable_sequences()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& QueryUnreceivedAcksResponse::_internal_sequences() const {
  return _impl_.sequences_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* QueryUnreceivedAcksResponse::_internal_mutable_sequences() {
  return &_impl_.sequences_;
}

// .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
inline bool QueryUnreceivedAcksResponse::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryUnreceivedAcksResponse::_internal_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryUnreceivedAcksResponse::height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryUnreceivedAcksResponse.height)
  return _internal_height();
}
inline void QueryUnreceivedAcksResponse::unsafe_arena_set_allocated_height(
    ::ibc::core::client::v1::Height* height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  _impl_.height_ = height;
  if (height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryUnreceivedAcksResponse.height)
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedAcksResponse::release_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedAcksResponse::unsafe_arena_release_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryUnreceivedAcksResponse.height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.height_;
  _impl_.height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedAcksResponse::_internal_mutable_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.height_ = p;
  }
  return _impl_.height_;
}
inline ::ibc::core::client::v1::Height* QueryUnreceivedAcksResponse::mutable_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryUnreceivedAcksResponse.height)
  return _msg;
}
inline void QueryUnreceivedAcksResponse::set_allocated_height(::ibc::core::client::v1::Height* height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.height_);
  }
  if (height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(height));
    if (message_arena != submessage_arena) {
      height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.height_ = height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryUnreceivedAcksResponse.height)
}

// -------------------------------------------------------------------

// QueryNextSequenceReceiveRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryNextSequenceReceiveRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceReceiveRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceReceiveRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id)
}
inline std::string* QueryNextSequenceReceiveRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id)
  return _s;
}
inline const std::string& QueryNextSequenceReceiveRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryNextSequenceReceiveRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryNextSequenceReceiveRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryNextSequenceReceiveRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceReceiveRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceReceiveRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id)
}
inline std::string* QueryNextSequenceReceiveRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id)
  return _s;
}
inline const std::string& QueryNextSequenceReceiveRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryNextSequenceReceiveRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryNextSequenceReceiveRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryNextSequenceReceiveResponse

// uint64 next_sequence_receive = 1 [json_name = "nextSequenceReceive"];
inline void QueryNextSequenceReceiveResponse::clear_next_sequence_receive() {
  _impl_.next_sequence_receive_ = ::uint64_t{0u};
}
inline ::uint64_t QueryNextSequenceReceiveResponse::next_sequence_receive() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.next_sequence_receive)
  return _internal_next_sequence_receive();
}
inline void QueryNextSequenceReceiveResponse::set_next_sequence_receive(::uint64_t value) {
  _internal_set_next_sequence_receive(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.next_sequence_receive)
}
inline ::uint64_t QueryNextSequenceReceiveResponse::_internal_next_sequence_receive() const {
  return _impl_.next_sequence_receive_;
}
inline void QueryNextSequenceReceiveResponse::_internal_set_next_sequence_receive(::uint64_t value) {
  ;
  _impl_.next_sequence_receive_ = value;
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryNextSequenceReceiveResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceReceiveResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceReceiveResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof)
}
inline std::string* QueryNextSequenceReceiveResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof)
  return _s;
}
inline const std::string& QueryNextSequenceReceiveResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryNextSequenceReceiveResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceReceiveResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryNextSequenceReceiveResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryNextSequenceReceiveResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryNextSequenceReceiveResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryNextSequenceReceiveResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryNextSequenceReceiveResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceReceiveResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceReceiveResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceReceiveResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceReceiveResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height)
  return _msg;
}
inline void QueryNextSequenceReceiveResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceReceiveResponse.proof_height)
}

// -------------------------------------------------------------------

// QueryNextSequenceSendRequest

// string port_id = 1 [json_name = "portId"];
inline void QueryNextSequenceSendRequest::clear_port_id() {
  _impl_.port_id_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceSendRequest::port_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id)
  return _internal_port_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceSendRequest::set_port_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.port_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id)
}
inline std::string* QueryNextSequenceSendRequest::mutable_port_id() {
  std::string* _s = _internal_mutable_port_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id)
  return _s;
}
inline const std::string& QueryNextSequenceSendRequest::_internal_port_id() const {
  return _impl_.port_id_.Get();
}
inline void QueryNextSequenceSendRequest::_internal_set_port_id(const std::string& value) {
  ;


  _impl_.port_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendRequest::_internal_mutable_port_id() {
  ;
  return _impl_.port_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendRequest::release_port_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id)
  return _impl_.port_id_.Release();
}
inline void QueryNextSequenceSendRequest::set_allocated_port_id(std::string* value) {
  _impl_.port_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.port_id_.IsDefault()) {
          _impl_.port_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id)
}

// string channel_id = 2 [json_name = "channelId"];
inline void QueryNextSequenceSendRequest::clear_channel_id() {
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceSendRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceSendRequest::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id)
}
inline std::string* QueryNextSequenceSendRequest::mutable_channel_id() {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id)
  return _s;
}
inline const std::string& QueryNextSequenceSendRequest::_internal_channel_id() const {
  return _impl_.channel_id_.Get();
}
inline void QueryNextSequenceSendRequest::_internal_set_channel_id(const std::string& value) {
  ;


  _impl_.channel_id_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendRequest::_internal_mutable_channel_id() {
  ;
  return _impl_.channel_id_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendRequest::release_channel_id() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id)
  return _impl_.channel_id_.Release();
}
inline void QueryNextSequenceSendRequest::set_allocated_channel_id(std::string* value) {
  _impl_.channel_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.channel_id_.IsDefault()) {
          _impl_.channel_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id)
}

// -------------------------------------------------------------------

// QueryNextSequenceSendResponse

// uint64 next_sequence_send = 1 [json_name = "nextSequenceSend"];
inline void QueryNextSequenceSendResponse::clear_next_sequence_send() {
  _impl_.next_sequence_send_ = ::uint64_t{0u};
}
inline ::uint64_t QueryNextSequenceSendResponse::next_sequence_send() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceSendResponse.next_sequence_send)
  return _internal_next_sequence_send();
}
inline void QueryNextSequenceSendResponse::set_next_sequence_send(::uint64_t value) {
  _internal_set_next_sequence_send(value);
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceSendResponse.next_sequence_send)
}
inline ::uint64_t QueryNextSequenceSendResponse::_internal_next_sequence_send() const {
  return _impl_.next_sequence_send_;
}
inline void QueryNextSequenceSendResponse::_internal_set_next_sequence_send(::uint64_t value) {
  ;
  _impl_.next_sequence_send_ = value;
}

// bytes proof = 2 [json_name = "proof"];
inline void QueryNextSequenceSendResponse::clear_proof() {
  _impl_.proof_.ClearToEmpty();
}
inline const std::string& QueryNextSequenceSendResponse::proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof)
  return _internal_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QueryNextSequenceSendResponse::set_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof)
}
inline std::string* QueryNextSequenceSendResponse::mutable_proof() {
  std::string* _s = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof)
  return _s;
}
inline const std::string& QueryNextSequenceSendResponse::_internal_proof() const {
  return _impl_.proof_.Get();
}
inline void QueryNextSequenceSendResponse::_internal_set_proof(const std::string& value) {
  ;


  _impl_.proof_.Set(value, GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendResponse::_internal_mutable_proof() {
  ;
  return _impl_.proof_.Mutable( GetArenaForAllocation());
}
inline std::string* QueryNextSequenceSendResponse::release_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof)
  return _impl_.proof_.Release();
}
inline void QueryNextSequenceSendResponse::set_allocated_proof(std::string* value) {
  _impl_.proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_.IsDefault()) {
          _impl_.proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool QueryNextSequenceSendResponse::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& QueryNextSequenceSendResponse::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& QueryNextSequenceSendResponse::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof_height)
  return _internal_proof_height();
}
inline void QueryNextSequenceSendResponse::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof_height)
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceSendResponse::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceSendResponse::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceSendResponse::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* QueryNextSequenceSendResponse::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof_height)
  return _msg;
}
inline void QueryNextSequenceSendResponse::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.channel.v1.QueryNextSequenceSendResponse.proof_height)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/channel/v1/genesis.proto

#include "ibc/core/channel/v1/genesis.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR GenesisState::GenesisState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.acknowledgements_)*/{}
  , /*decltype(_impl_.commitments_)*/{}
  , /*decltype(_impl_.receipts_)*/{}
  , /*decltype(_impl_.send_sequences_)*/{}
  , /*decltype(_impl_.recv_sequences_)*/{}
  , /*decltype(_impl_.ack_sequences_)*/{}
  , /*decltype(_impl_.next_channel_sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GenesisStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenesisStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenesisStateDefaultTypeInternal() {}
  union {
    GenesisState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenesisStateDefaultTypeInternal _GenesisState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketSequence::PacketSequence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketSequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketSequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketSequenceDefaultTypeInternal() {}
  union {
    PacketSequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketSequenceDefaultTypeInternal _PacketSequence_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.acknowledgements_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.commitments_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.receipts_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.send_sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.recv_sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.ack_sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::GenesisState, _impl_.next_channel_sequence_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketSequence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketSequence, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketSequence, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketSequence, _impl_.sequence_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::core::channel::v1::GenesisState)},
        { 16, -1, -1, sizeof(::ibc::core::channel::v1::PacketSequence)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::channel::v1::_GenesisState_default_instance_._instance,
    &::ibc::core::channel::v1::_PacketSequence_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!ibc/core/channel/v1/genesis.proto\022\023ibc"
    ".core.channel.v1\032\024gogoproto/gogo.proto\032!"
    "ibc/core/channel/v1/channel.proto\"\367\004\n\014Ge"
    "nesisState\022]\n\010channels\030\001 \003(\0132&.ibc.core."
    "channel.v1.IdentifiedChannelB\031\310\336\037\000\372\336\037\021Id"
    "entifiedChannelR\010channels\022R\n\020acknowledge"
    "ments\030\002 \003(\0132 .ibc.core.channel.v1.Packet"
    "StateB\004\310\336\037\000R\020acknowledgements\022H\n\013commitm"
    "ents\030\003 \003(\0132 .ibc.core.channel.v1.PacketS"
    "tateB\004\310\336\037\000R\013commitments\022B\n\010receipts\030\004 \003("
    "\0132 .ibc.core.channel.v1.PacketStateB\004\310\336\037"
    "\000R\010receipts\022P\n\016send_sequences\030\005 \003(\0132#.ib"
    "c.core.channel.v1.PacketSequenceB\004\310\336\037\000R\r"
    "sendSequences\022P\n\016recv_sequences\030\006 \003(\0132#."
    "ibc.core.channel.v1.PacketSequenceB\004\310\336\037\000"
    "R\rrecvSequences\022N\n\rack_sequences\030\007 \003(\0132#"
    ".ibc.core.channel.v1.PacketSequenceB\004\310\336\037"
    "\000R\014ackSequences\0222\n\025next_channel_sequence"
    "\030\010 \001(\004R\023nextChannelSequence\"d\n\016PacketSeq"
    "uence\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchanne"
    "l_id\030\002 \001(\tR\tchannelId\022\032\n\010sequence\030\003 \001(\004R"
    "\010sequenceB\321\001\n\027com.ibc.core.channel.v1B\014G"
    "enesisProtoP\001Z9github.com/cosmos/ibc-go/"
    "v7/modules/core/04-channel/types\242\002\003ICC\252\002"
    "\023Ibc.Core.Channel.V1\312\002\023Ibc\\Core\\Channel\\"
    "V1\342\002\037Ibc\\Core\\Channel\\V1\\GPBMetadata\352\002\026I"
    "bc::Core::Channel::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto = {
    false,
    false,
    1069,
    descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto,
    "ibc/core/channel/v1/genesis.proto",
    &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_once,
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_deps,
    2,
    2,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto);
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
// ===================================================================

class GenesisState::_Internal {
 public:
};

void GenesisState::clear_channels() {
  _internal_mutable_channels()->Clear();
}
void GenesisState::clear_acknowledgements() {
  _internal_mutable_acknowledgements()->Clear();
}
void GenesisState::clear_commitments() {
  _internal_mutable_commitments()->Clear();
}
void GenesisState::clear_receipts() {
  _internal_mutable_receipts()->Clear();
}
GenesisState::GenesisState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.GenesisState)
}
GenesisState::GenesisState(const GenesisState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GenesisState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.acknowledgements_){from._impl_.acknowledgements_}
    , decltype(_impl_.commitments_){from._impl_.commitments_}
    , decltype(_impl_.receipts_){from._impl_.receipts_}
    , decltype(_impl_.send_sequences_){from._impl_.send_sequences_}
    , decltype(_impl_.recv_sequences_){from._impl_.recv_sequences_}
    , decltype(_impl_.ack_sequences_){from._impl_.ack_sequences_}
    , decltype(_impl_.next_channel_sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.next_channel_sequence_ = from._impl_.next_channel_sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.GenesisState)
}

inline void GenesisState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.channels_){arena}
    , decltype(_impl_.acknowledgements_){arena}
    , decltype(_impl_.commitments_){arena}
    , decltype(_impl_.receipts_){arena}
    , decltype(_impl_.send_sequences_){arena}
    , decltype(_impl_.recv_sequences_){arena}
    , decltype(_impl_.ack_sequences_){arena}
    , decltype(_impl_.next_channel_sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GenesisState::~GenesisState() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.GenesisState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenesisState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_channels()->~RepeatedPtrField();
  _internal_mutable_acknowledgements()->~RepeatedPtrField();
  _internal_mutable_commitments()->~RepeatedPtrField();
  _internal_mutable_receipts()->~RepeatedPtrField();
  _internal_mutable_send_sequences()->~RepeatedPtrField();
  _internal_mutable_recv_sequences()->~RepeatedPtrField();
  _internal_mutable_ack_sequences()->~RepeatedPtrField();
}

void GenesisState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenesisState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  _internal_mutable_acknowledgements()->Clear();
  _internal_mutable_commitments()->Clear();
  _internal_mutable_receipts()->Clear();
  _internal_mutable_send_sequences()->Clear();
  _internal_mutable_recv_sequences()->Clear();
  _internal_mutable_ack_sequences()->Clear();
  _impl_.next_channel_sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenesisState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels", (.gogoproto.nullable) = false, (.gogoproto.casttype) = "IdentifiedChannel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketState acknowledgements = 2 [json_name = "acknowledgements", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledgements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketState commitments = 3 [json_name = "commitments", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commitments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketState receipts = 4 [json_name = "receipts", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_receipts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketSequence send_sequences = 5 [json_name = "sendSequences", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_send_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketSequence recv_sequences = 6 [json_name = "recvSequences", (.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recv_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.channel.v1.PacketSequence ack_sequences = 7 [json_name = "ackSequences", (.gogoproto.nullable) = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ack_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 next_channel_sequence = 8 [json_name = "nextChannelSequence"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.next_channel_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenesisState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.GenesisState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels", (.gogoproto.nullable) = false, (.gogoproto.casttype) = "IdentifiedChannel"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketState acknowledgements = 2 [json_name = "acknowledgements", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_acknowledgements_size()); i < n; i++) {
    const auto& repfield = this->_internal_acknowledgements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketState commitments = 3 [json_name = "commitments", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commitments_size()); i < n; i++) {
    const auto& repfield = this->_internal_commitments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketState receipts = 4 [json_name = "receipts", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_receipts_size()); i < n; i++) {
    const auto& repfield = this->_internal_receipts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketSequence send_sequences = 5 [json_name = "sendSequences", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_send_sequences_size()); i < n; i++) {
    const auto& repfield = this->_internal_send_sequences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketSequence recv_sequences = 6 [json_name = "recvSequences", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recv_sequences_size()); i < n; i++) {
    const auto& repfield = this->_internal_recv_sequences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .ibc.core.channel.v1.PacketSequence ack_sequences = 7 [json_name = "ackSequences", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ack_sequences_size()); i < n; i++) {
    const auto& repfield = this->_internal_ack_sequences(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 next_channel_sequence = 8 [json_name = "nextChannelSequence"];
  if (this->_internal_next_channel_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_next_channel_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.GenesisState)
  return target;
}

::size_t GenesisState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.GenesisState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels", (.gogoproto.nullable) = false, (.gogoproto.casttype) = "IdentifiedChannel"];
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketState acknowledgements = 2 [json_name = "acknowledgements", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_acknowledgements_size();
  for (const auto& msg : this->_internal_acknowledgements()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketState commitments = 3 [json_name = "commitments", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_commitments_size();
  for (const auto& msg : this->_internal_commitments()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketState receipts = 4 [json_name = "receipts", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_receipts_size();
  for (const auto& msg : this->_internal_receipts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketSequence send_sequences = 5 [json_name = "sendSequences", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_send_sequences_size();
  for (const auto& msg : this->_internal_send_sequences()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketSequence recv_sequences = 6 [json_name = "recvSequences", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_recv_sequences_size();
  for (const auto& msg : this->_internal_recv_sequences()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ibc.core.channel.v1.PacketSequence ack_sequences = 7 [json_name = "ackSequences", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_ack_sequences_size();
  for (const auto& msg : this->_internal_ack_sequences()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 next_channel_sequence = 8 [json_name = "nextChannelSequence"];
  if (this->_internal_next_channel_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_channel_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GenesisState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GenesisState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GenesisState::GetClassData() const { return &_class_data_; }


void GenesisState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GenesisState*>(&to_msg);
  auto& from = static_cast<const GenesisState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.GenesisState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  _this->_internal_mutable_acknowledgements()->MergeFrom(from._internal_acknowledgements());
  _this->_internal_mutable_commitments()->MergeFrom(from._internal_commitments());
  _this->_internal_mutable_receipts()->MergeFrom(from._internal_receipts());
  _this->_internal_mutable_send_sequences()->MergeFrom(from._internal_send_sequences());
  _this->_internal_mutable_recv_sequences()->MergeFrom(from._internal_recv_sequences());
  _this->_internal_mutable_ack_sequences()->MergeFrom(from._internal_ack_sequences());
  if (from._internal_next_channel_sequence() != 0) {
    _this->_internal_set_next_channel_sequence(from._internal_next_channel_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GenesisState::CopyFrom(const GenesisState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.GenesisState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenesisState::IsInitialized() const {
  return true;
}

void GenesisState::InternalSwap(GenesisState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_channels()->InternalSwap(other->_internal_mutable_channels());
  _internal_mutable_acknowledgements()->InternalSwap(other->_internal_mutable_acknowledgements());
  _internal_mutable_commitments()->InternalSwap(other->_internal_mutable_commitments());
  _internal_mutable_receipts()->InternalSwap(other->_internal_mutable_receipts());
  _internal_mutable_send_sequences()->InternalSwap(other->_internal_mutable_send_sequences());
  _internal_mutable_recv_sequences()->InternalSwap(other->_internal_mutable_recv_sequences());
  _internal_mutable_ack_sequences()->InternalSwap(other->_internal_mutable_ack_sequences());

  swap(_impl_.next_channel_sequence_, other->_impl_.next_channel_sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenesisState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto[0]);
}
// ===================================================================

class PacketSequence::_Internal {
 public:
};

PacketSequence::PacketSequence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.PacketSequence)
}
PacketSequence::PacketSequence(const PacketSequence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketSequence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.PacketSequence)
}

inline void PacketSequence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketSequence::~PacketSequence() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.PacketSequence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketSequence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void PacketSequence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.PacketSequence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketSequence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketSequence.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketSequence.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketSequence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.PacketSequence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketSequence.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketSequence.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.PacketSequence)
  return target;
}

::size_t PacketSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.PacketSequence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketSequence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketSequence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketSequence::GetClassData() const { return &_class_data_; }


void PacketSequence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketSequence*>(&to_msg);
  auto& from = static_cast<const PacketSequence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.PacketSequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketSequence::CopyFrom(const PacketSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.PacketSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketSequence::IsInitialized() const {
  return true;
}

void PacketSequence::InternalSwap(PacketSequence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketSequence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fgenesis_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::GenesisState*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::GenesisState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::GenesisState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::PacketSequence*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::PacketSequence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::PacketSequence >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

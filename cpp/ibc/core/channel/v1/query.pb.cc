// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/channel/v1/query.proto

#include "ibc/core/channel/v1/query.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR QueryChannelRequest::QueryChannelRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryChannelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelRequestDefaultTypeInternal() {}
  union {
    QueryChannelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelRequestDefaultTypeInternal _QueryChannelRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelResponse::QueryChannelResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct QueryChannelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelResponseDefaultTypeInternal() {}
  union {
    QueryChannelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelResponseDefaultTypeInternal _QueryChannelResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelsRequest::QueryChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelsRequestDefaultTypeInternal() {}
  union {
    QueryChannelsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelsRequestDefaultTypeInternal _QueryChannelsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelsResponse::QueryChannelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryChannelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelsResponseDefaultTypeInternal() {}
  union {
    QueryChannelsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelsResponseDefaultTypeInternal _QueryChannelsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryConnectionChannelsRequest::QueryConnectionChannelsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryConnectionChannelsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryConnectionChannelsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryConnectionChannelsRequestDefaultTypeInternal() {}
  union {
    QueryConnectionChannelsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryConnectionChannelsRequestDefaultTypeInternal _QueryConnectionChannelsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryConnectionChannelsResponse::QueryConnectionChannelsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channels_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryConnectionChannelsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryConnectionChannelsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryConnectionChannelsResponseDefaultTypeInternal() {}
  union {
    QueryConnectionChannelsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryConnectionChannelsResponseDefaultTypeInternal _QueryConnectionChannelsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelClientStateRequest::QueryChannelClientStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryChannelClientStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelClientStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelClientStateRequestDefaultTypeInternal() {}
  union {
    QueryChannelClientStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelClientStateRequestDefaultTypeInternal _QueryChannelClientStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelClientStateResponse::QueryChannelClientStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.identified_client_state_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct QueryChannelClientStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelClientStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelClientStateResponseDefaultTypeInternal() {}
  union {
    QueryChannelClientStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelClientStateResponseDefaultTypeInternal _QueryChannelClientStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelConsensusStateRequest::QueryChannelConsensusStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.revision_number_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.revision_height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryChannelConsensusStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelConsensusStateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelConsensusStateRequestDefaultTypeInternal() {}
  union {
    QueryChannelConsensusStateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelConsensusStateRequestDefaultTypeInternal _QueryChannelConsensusStateRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryChannelConsensusStateResponse::QueryChannelConsensusStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_state_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct QueryChannelConsensusStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryChannelConsensusStateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryChannelConsensusStateResponseDefaultTypeInternal() {}
  union {
    QueryChannelConsensusStateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryChannelConsensusStateResponseDefaultTypeInternal _QueryChannelConsensusStateResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketCommitmentRequest::QueryPacketCommitmentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPacketCommitmentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketCommitmentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketCommitmentRequestDefaultTypeInternal() {}
  union {
    QueryPacketCommitmentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketCommitmentRequestDefaultTypeInternal _QueryPacketCommitmentRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketCommitmentResponse::QueryPacketCommitmentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commitment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct QueryPacketCommitmentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketCommitmentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketCommitmentResponseDefaultTypeInternal() {}
  union {
    QueryPacketCommitmentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketCommitmentResponseDefaultTypeInternal _QueryPacketCommitmentResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketCommitmentsRequest::QueryPacketCommitmentsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryPacketCommitmentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketCommitmentsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketCommitmentsRequestDefaultTypeInternal() {}
  union {
    QueryPacketCommitmentsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketCommitmentsRequestDefaultTypeInternal _QueryPacketCommitmentsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketCommitmentsResponse::QueryPacketCommitmentsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commitments_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryPacketCommitmentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketCommitmentsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketCommitmentsResponseDefaultTypeInternal() {}
  union {
    QueryPacketCommitmentsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketCommitmentsResponseDefaultTypeInternal _QueryPacketCommitmentsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketReceiptRequest::QueryPacketReceiptRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPacketReceiptRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketReceiptRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketReceiptRequestDefaultTypeInternal() {}
  union {
    QueryPacketReceiptRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketReceiptRequestDefaultTypeInternal _QueryPacketReceiptRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketReceiptResponse::QueryPacketReceiptResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.received_)*/ false
} {}
struct QueryPacketReceiptResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketReceiptResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketReceiptResponseDefaultTypeInternal() {}
  union {
    QueryPacketReceiptResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketReceiptResponseDefaultTypeInternal _QueryPacketReceiptResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketAcknowledgementRequest::QueryPacketAcknowledgementRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryPacketAcknowledgementRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketAcknowledgementRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketAcknowledgementRequestDefaultTypeInternal() {}
  union {
    QueryPacketAcknowledgementRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketAcknowledgementRequestDefaultTypeInternal _QueryPacketAcknowledgementRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketAcknowledgementResponse::QueryPacketAcknowledgementResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledgement_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct QueryPacketAcknowledgementResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketAcknowledgementResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketAcknowledgementResponseDefaultTypeInternal() {}
  union {
    QueryPacketAcknowledgementResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketAcknowledgementResponseDefaultTypeInternal _QueryPacketAcknowledgementResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsRequest::QueryPacketAcknowledgementsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packet_commitment_sequences_)*/ {}
  ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pagination_)*/nullptr} {}
struct QueryPacketAcknowledgementsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketAcknowledgementsRequestDefaultTypeInternal() {}
  union {
    QueryPacketAcknowledgementsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketAcknowledgementsRequestDefaultTypeInternal _QueryPacketAcknowledgementsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsResponse::QueryPacketAcknowledgementsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.acknowledgements_)*/{}
  , /*decltype(_impl_.pagination_)*/nullptr
  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryPacketAcknowledgementsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryPacketAcknowledgementsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryPacketAcknowledgementsResponseDefaultTypeInternal() {}
  union {
    QueryPacketAcknowledgementsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryPacketAcknowledgementsResponseDefaultTypeInternal _QueryPacketAcknowledgementsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryUnreceivedPacketsRequest::QueryUnreceivedPacketsRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_commitment_sequences_)*/ {}
  ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryUnreceivedPacketsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryUnreceivedPacketsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryUnreceivedPacketsRequestDefaultTypeInternal() {}
  union {
    QueryUnreceivedPacketsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryUnreceivedPacketsRequestDefaultTypeInternal _QueryUnreceivedPacketsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryUnreceivedPacketsResponse::QueryUnreceivedPacketsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequences_)*/ {}
  ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryUnreceivedPacketsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryUnreceivedPacketsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryUnreceivedPacketsResponseDefaultTypeInternal() {}
  union {
    QueryUnreceivedPacketsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryUnreceivedPacketsResponseDefaultTypeInternal _QueryUnreceivedPacketsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryUnreceivedAcksRequest::QueryUnreceivedAcksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packet_ack_sequences_)*/ {}
  ,/* _impl_._packet_ack_sequences_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryUnreceivedAcksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryUnreceivedAcksRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryUnreceivedAcksRequestDefaultTypeInternal() {}
  union {
    QueryUnreceivedAcksRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryUnreceivedAcksRequestDefaultTypeInternal _QueryUnreceivedAcksRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryUnreceivedAcksResponse::QueryUnreceivedAcksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sequences_)*/ {}
  ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.height_)*/nullptr} {}
struct QueryUnreceivedAcksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryUnreceivedAcksResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryUnreceivedAcksResponseDefaultTypeInternal() {}
  union {
    QueryUnreceivedAcksResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryUnreceivedAcksResponseDefaultTypeInternal _QueryUnreceivedAcksResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNextSequenceReceiveRequest::QueryNextSequenceReceiveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryNextSequenceReceiveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNextSequenceReceiveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNextSequenceReceiveRequestDefaultTypeInternal() {}
  union {
    QueryNextSequenceReceiveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNextSequenceReceiveRequestDefaultTypeInternal _QueryNextSequenceReceiveRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNextSequenceReceiveResponse::QueryNextSequenceReceiveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.next_sequence_receive_)*/ ::uint64_t{0u}
} {}
struct QueryNextSequenceReceiveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNextSequenceReceiveResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNextSequenceReceiveResponseDefaultTypeInternal() {}
  union {
    QueryNextSequenceReceiveResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNextSequenceReceiveResponseDefaultTypeInternal _QueryNextSequenceReceiveResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNextSequenceSendRequest::QueryNextSequenceSendRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueryNextSequenceSendRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNextSequenceSendRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNextSequenceSendRequestDefaultTypeInternal() {}
  union {
    QueryNextSequenceSendRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNextSequenceSendRequestDefaultTypeInternal _QueryNextSequenceSendRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR QueryNextSequenceSendResponse::QueryNextSequenceSendResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.next_sequence_send_)*/ ::uint64_t{0u}
} {}
struct QueryNextSequenceSendResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueryNextSequenceSendResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueryNextSequenceSendResponseDefaultTypeInternal() {}
  union {
    QueryNextSequenceSendResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueryNextSequenceSendResponseDefaultTypeInternal _QueryNextSequenceSendResponse_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[28];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelResponse, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelResponse, _impl_.proof_height_),
    0,
    ~0u,
    1,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsRequest, _impl_.pagination_),
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsResponse, _impl_.channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsResponse, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelsResponse, _impl_.height_),
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsRequest, _impl_.connection_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsRequest, _impl_.pagination_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsResponse, _impl_.channels_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsResponse, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryConnectionChannelsResponse, _impl_.height_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateResponse, _impl_.identified_client_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelClientStateResponse, _impl_.proof_height_),
    0,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateRequest, _impl_.revision_number_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateRequest, _impl_.revision_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _impl_.consensus_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryChannelConsensusStateResponse, _impl_.proof_height_),
    0,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentRequest, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentResponse, _impl_.commitment_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentResponse, _impl_.proof_height_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsRequest, _impl_.pagination_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsResponse, _impl_.commitments_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsResponse, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketCommitmentsResponse, _impl_.height_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptRequest, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptResponse, _impl_.received_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketReceiptResponse, _impl_.proof_height_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, _impl_.acknowledgement_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse, _impl_.proof_height_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, _impl_.packet_commitment_sequences_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, _impl_.acknowledgements_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, _impl_.pagination_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse, _impl_.height_),
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, _impl_.packet_commitment_sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, _impl_.sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedPacketsResponse, _impl_.height_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksRequest, _impl_.packet_ack_sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksResponse, _impl_.sequences_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryUnreceivedAcksResponse, _impl_.height_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, _impl_.next_sequence_receive_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse, _impl_.proof_height_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendRequest, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendResponse, _impl_.next_sequence_send_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendResponse, _impl_.proof_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::QueryNextSequenceSendResponse, _impl_.proof_height_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::core::channel::v1::QueryChannelRequest)},
        { 10, 21, -1, sizeof(::ibc::core::channel::v1::QueryChannelResponse)},
        { 24, 33, -1, sizeof(::ibc::core::channel::v1::QueryChannelsRequest)},
        { 34, 45, -1, sizeof(::ibc::core::channel::v1::QueryChannelsResponse)},
        { 48, 58, -1, sizeof(::ibc::core::channel::v1::QueryConnectionChannelsRequest)},
        { 60, 71, -1, sizeof(::ibc::core::channel::v1::QueryConnectionChannelsResponse)},
        { 74, -1, -1, sizeof(::ibc::core::channel::v1::QueryChannelClientStateRequest)},
        { 84, 95, -1, sizeof(::ibc::core::channel::v1::QueryChannelClientStateResponse)},
        { 98, -1, -1, sizeof(::ibc::core::channel::v1::QueryChannelConsensusStateRequest)},
        { 110, 122, -1, sizeof(::ibc::core::channel::v1::QueryChannelConsensusStateResponse)},
        { 126, -1, -1, sizeof(::ibc::core::channel::v1::QueryPacketCommitmentRequest)},
        { 137, 148, -1, sizeof(::ibc::core::channel::v1::QueryPacketCommitmentResponse)},
        { 151, 162, -1, sizeof(::ibc::core::channel::v1::QueryPacketCommitmentsRequest)},
        { 165, 176, -1, sizeof(::ibc::core::channel::v1::QueryPacketCommitmentsResponse)},
        { 179, -1, -1, sizeof(::ibc::core::channel::v1::QueryPacketReceiptRequest)},
        { 190, 201, -1, sizeof(::ibc::core::channel::v1::QueryPacketReceiptResponse)},
        { 204, -1, -1, sizeof(::ibc::core::channel::v1::QueryPacketAcknowledgementRequest)},
        { 215, 226, -1, sizeof(::ibc::core::channel::v1::QueryPacketAcknowledgementResponse)},
        { 229, 241, -1, sizeof(::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest)},
        { 245, 256, -1, sizeof(::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse)},
        { 259, -1, -1, sizeof(::ibc::core::channel::v1::QueryUnreceivedPacketsRequest)},
        { 270, 280, -1, sizeof(::ibc::core::channel::v1::QueryUnreceivedPacketsResponse)},
        { 282, -1, -1, sizeof(::ibc::core::channel::v1::QueryUnreceivedAcksRequest)},
        { 293, 303, -1, sizeof(::ibc::core::channel::v1::QueryUnreceivedAcksResponse)},
        { 305, -1, -1, sizeof(::ibc::core::channel::v1::QueryNextSequenceReceiveRequest)},
        { 315, 326, -1, sizeof(::ibc::core::channel::v1::QueryNextSequenceReceiveResponse)},
        { 329, -1, -1, sizeof(::ibc::core::channel::v1::QueryNextSequenceSendRequest)},
        { 339, 350, -1, sizeof(::ibc::core::channel::v1::QueryNextSequenceSendResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::channel::v1::_QueryChannelRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelsRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelsResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryConnectionChannelsRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryConnectionChannelsResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelClientStateRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelClientStateResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelConsensusStateRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryChannelConsensusStateResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketCommitmentRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketCommitmentResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketCommitmentsRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketCommitmentsResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketReceiptRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketReceiptResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketAcknowledgementRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketAcknowledgementResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketAcknowledgementsRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryPacketAcknowledgementsResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryUnreceivedPacketsRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryUnreceivedPacketsResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryUnreceivedAcksRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryUnreceivedAcksResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryNextSequenceReceiveRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryNextSequenceReceiveResponse_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryNextSequenceSendRequest_default_instance_._instance,
    &::ibc::core::channel::v1::_QueryNextSequenceSendResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037ibc/core/channel/v1/query.proto\022\023ibc.c"
    "ore.channel.v1\032\037ibc/core/client/v1/clien"
    "t.proto\032*cosmos/base/query/v1beta1/pagin"
    "ation.proto\032!ibc/core/channel/v1/channel"
    ".proto\032\034google/api/annotations.proto\032\031go"
    "ogle/protobuf/any.proto\032\024gogoproto/gogo."
    "proto\"M\n\023QueryChannelRequest\022\027\n\007port_id\030"
    "\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\tchann"
    "elId\"\251\001\n\024QueryChannelResponse\0226\n\007channel"
    "\030\001 \001(\0132\034.ibc.core.channel.v1.ChannelR\007ch"
    "annel\022\024\n\005proof\030\002 \001(\014R\005proof\022C\n\014proof_hei"
    "ght\030\003 \001(\0132\032.ibc.core.client.v1.HeightB\004\310"
    "\336\037\000R\013proofHeight\"^\n\024QueryChannelsRequest"
    "\022F\n\npagination\030\001 \001(\0132&.cosmos.base.query"
    ".v1beta1.PageRequestR\npagination\"\336\001\n\025Que"
    "ryChannelsResponse\022B\n\010channels\030\001 \003(\0132&.i"
    "bc.core.channel.v1.IdentifiedChannelR\010ch"
    "annels\022G\n\npagination\030\002 \001(\0132\'.cosmos.base"
    ".query.v1beta1.PageResponseR\npagination\022"
    "8\n\006height\030\003 \001(\0132\032.ibc.core.client.v1.Hei"
    "ghtB\004\310\336\037\000R\006height\"\210\001\n\036QueryConnectionCha"
    "nnelsRequest\022\036\n\nconnection\030\001 \001(\tR\nconnec"
    "tion\022F\n\npagination\030\002 \001(\0132&.cosmos.base.q"
    "uery.v1beta1.PageRequestR\npagination\"\350\001\n"
    "\037QueryConnectionChannelsResponse\022B\n\010chan"
    "nels\030\001 \003(\0132&.ibc.core.channel.v1.Identif"
    "iedChannelR\010channels\022G\n\npagination\030\002 \001(\013"
    "2\'.cosmos.base.query.v1beta1.PageRespons"
    "eR\npagination\0228\n\006height\030\003 \001(\0132\032.ibc.core"
    ".client.v1.HeightB\004\310\336\037\000R\006height\"X\n\036Query"
    "ChannelClientStateRequest\022\027\n\007port_id\030\001 \001"
    "(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\tchannelI"
    "d\"\337\001\n\037QueryChannelClientStateResponse\022a\n"
    "\027identified_client_state\030\001 \001(\0132).ibc.cor"
    "e.client.v1.IdentifiedClientStateR\025ident"
    "ifiedClientState\022\024\n\005proof\030\002 \001(\014R\005proof\022C"
    "\n\014proof_height\030\003 \001(\0132\032.ibc.core.client.v"
    "1.HeightB\004\310\336\037\000R\013proofHeight\"\255\001\n!QueryCha"
    "nnelConsensusStateRequest\022\027\n\007port_id\030\001 \001"
    "(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\tchannelI"
    "d\022\'\n\017revision_number\030\003 \001(\004R\016revisionNumb"
    "er\022\'\n\017revision_height\030\004 \001(\004R\016revisionHei"
    "ght\"\333\001\n\"QueryChannelConsensusStateRespon"
    "se\022=\n\017consensus_state\030\001 \001(\0132\024.google.pro"
    "tobuf.AnyR\016consensusState\022\033\n\tclient_id\030\002"
    " \001(\tR\010clientId\022\024\n\005proof\030\003 \001(\014R\005proof\022C\n\014"
    "proof_height\030\004 \001(\0132\032.ibc.core.client.v1."
    "HeightB\004\310\336\037\000R\013proofHeight\"r\n\034QueryPacket"
    "CommitmentRequest\022\027\n\007port_id\030\001 \001(\tR\006port"
    "Id\022\035\n\nchannel_id\030\002 \001(\tR\tchannelId\022\032\n\010seq"
    "uence\030\003 \001(\004R\010sequence\"\232\001\n\035QueryPacketCom"
    "mitmentResponse\022\036\n\ncommitment\030\001 \001(\014R\ncom"
    "mitment\022\024\n\005proof\030\002 \001(\014R\005proof\022C\n\014proof_h"
    "eight\030\003 \001(\0132\032.ibc.core.client.v1.HeightB"
    "\004\310\336\037\000R\013proofHeight\"\237\001\n\035QueryPacketCommit"
    "mentsRequest\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n"
    "\nchannel_id\030\002 \001(\tR\tchannelId\022F\n\npaginati"
    "on\030\003 \001(\0132&.cosmos.base.query.v1beta1.Pag"
    "eRequestR\npagination\"\347\001\n\036QueryPacketComm"
    "itmentsResponse\022B\n\013commitments\030\001 \003(\0132 .i"
    "bc.core.channel.v1.PacketStateR\013commitme"
    "nts\022G\n\npagination\030\002 \001(\0132\'.cosmos.base.qu"
    "ery.v1beta1.PageResponseR\npagination\0228\n\006"
    "height\030\003 \001(\0132\032.ibc.core.client.v1.Height"
    "B\004\310\336\037\000R\006height\"o\n\031QueryPacketReceiptRequ"
    "est\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel_"
    "id\030\002 \001(\tR\tchannelId\022\032\n\010sequence\030\003 \001(\004R\010s"
    "equence\"\223\001\n\032QueryPacketReceiptResponse\022\032"
    "\n\010received\030\002 \001(\010R\010received\022\024\n\005proof\030\003 \001("
    "\014R\005proof\022C\n\014proof_height\030\004 \001(\0132\032.ibc.cor"
    "e.client.v1.HeightB\004\310\336\037\000R\013proofHeight\"w\n"
    "!QueryPacketAcknowledgementRequest\022\027\n\007po"
    "rt_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR"
    "\tchannelId\022\032\n\010sequence\030\003 \001(\004R\010sequence\"\251"
    "\001\n\"QueryPacketAcknowledgementResponse\022(\n"
    "\017acknowledgement\030\001 \001(\014R\017acknowledgement\022"
    "\024\n\005proof\030\002 \001(\014R\005proof\022C\n\014proof_height\030\003 "
    "\001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037\000R\013p"
    "roofHeight\"\344\001\n\"QueryPacketAcknowledgemen"
    "tsRequest\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nch"
    "annel_id\030\002 \001(\tR\tchannelId\022F\n\npagination\030"
    "\003 \001(\0132&.cosmos.base.query.v1beta1.PageRe"
    "questR\npagination\022>\n\033packet_commitment_s"
    "equences\030\004 \003(\004R\031packetCommitmentSequence"
    "s\"\366\001\n#QueryPacketAcknowledgementsRespons"
    "e\022L\n\020acknowledgements\030\001 \003(\0132 .ibc.core.c"
    "hannel.v1.PacketStateR\020acknowledgements\022"
    "G\n\npagination\030\002 \001(\0132\'.cosmos.base.query."
    "v1beta1.PageResponseR\npagination\0228\n\006heig"
    "ht\030\003 \001(\0132\032.ibc.core.client.v1.HeightB\004\310\336"
    "\037\000R\006height\"\227\001\n\035QueryUnreceivedPacketsReq"
    "uest\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel"
    "_id\030\002 \001(\tR\tchannelId\022>\n\033packet_commitmen"
    "t_sequences\030\003 \003(\004R\031packetCommitmentSeque"
    "nces\"x\n\036QueryUnreceivedPacketsResponse\022\034"
    "\n\tsequences\030\001 \003(\004R\tsequences\0228\n\006height\030\002"
    " \001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037\000R\006"
    "height\"\206\001\n\032QueryUnreceivedAcksRequest\022\027\n"
    "\007port_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001"
    "(\tR\tchannelId\0220\n\024packet_ack_sequences\030\003 "
    "\003(\004R\022packetAckSequences\"u\n\033QueryUnreceiv"
    "edAcksResponse\022\034\n\tsequences\030\001 \003(\004R\tseque"
    "nces\0228\n\006height\030\002 \001(\0132\032.ibc.core.client.v"
    "1.HeightB\004\310\336\037\000R\006height\"Y\n\037QueryNextSeque"
    "nceReceiveRequest\022\027\n\007port_id\030\001 \001(\tR\006port"
    "Id\022\035\n\nchannel_id\030\002 \001(\tR\tchannelId\"\261\001\n Qu"
    "eryNextSequenceReceiveResponse\0222\n\025next_s"
    "equence_receive\030\001 \001(\004R\023nextSequenceRecei"
    "ve\022\024\n\005proof\030\002 \001(\014R\005proof\022C\n\014proof_height"
    "\030\003 \001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037\000"
    "R\013proofHeight\"V\n\034QueryNextSequenceSendRe"
    "quest\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nchanne"
    "l_id\030\002 \001(\tR\tchannelId\"\250\001\n\035QueryNextSeque"
    "nceSendResponse\022,\n\022next_sequence_send\030\001 "
    "\001(\004R\020nextSequenceSend\022\024\n\005proof\030\002 \001(\014R\005pr"
    "oof\022C\n\014proof_height\030\003 \001(\0132\032.ibc.core.cli"
    "ent.v1.HeightB\004\310\336\037\000R\013proofHeight2\336\027\n\005Que"
    "ry\022\242\001\n\007Channel\022(.ibc.core.channel.v1.Que"
    "ryChannelRequest\032).ibc.core.channel.v1.Q"
    "ueryChannelResponse\"B\202\323\344\223\002<\022:/ibc/core/c"
    "hannel/v1/channels/{channel_id}/ports/{p"
    "ort_id}\022\210\001\n\010Channels\022).ibc.core.channel."
    "v1.QueryChannelsRequest\032*.ibc.core.chann"
    "el.v1.QueryChannelsResponse\"%\202\323\344\223\002\037\022\035/ib"
    "c/core/channel/v1/channels\022\277\001\n\022Connectio"
    "nChannels\0223.ibc.core.channel.v1.QueryCon"
    "nectionChannelsRequest\0324.ibc.core.channe"
    "l.v1.QueryConnectionChannelsResponse\">\202\323"
    "\344\223\0028\0226/ibc/core/channel/v1/connections/{"
    "connection}/channels\022\320\001\n\022ChannelClientSt"
    "ate\0223.ibc.core.channel.v1.QueryChannelCl"
    "ientStateRequest\0324.ibc.core.channel.v1.Q"
    "ueryChannelClientStateResponse\"O\202\323\344\223\002I\022G"
    "/ibc/core/channel/v1/channels/{channel_i"
    "d}/ports/{port_id}/client_state\022\222\002\n\025Chan"
    "nelConsensusState\0226.ibc.core.channel.v1."
    "QueryChannelConsensusStateRequest\0327.ibc."
    "core.channel.v1.QueryChannelConsensusSta"
    "teResponse\"\207\001\202\323\344\223\002\200\001\022~/ibc/core/channel/"
    "v1/channels/{channel_id}/ports/{port_id}"
    "/consensus_state/revision/{revision_numb"
    "er}/height/{revision_height}\022\333\001\n\020PacketC"
    "ommitment\0221.ibc.core.channel.v1.QueryPac"
    "ketCommitmentRequest\0322.ibc.core.channel."
    "v1.QueryPacketCommitmentResponse\"`\202\323\344\223\002Z"
    "\022X/ibc/core/channel/v1/channels/{channel"
    "_id}/ports/{port_id}/packet_commitments/"
    "{sequence}\022\323\001\n\021PacketCommitments\0222.ibc.c"
    "ore.channel.v1.QueryPacketCommitmentsReq"
    "uest\0323.ibc.core.channel.v1.QueryPacketCo"
    "mmitmentsResponse\"U\202\323\344\223\002O\022M/ibc/core/cha"
    "nnel/v1/channels/{channel_id}/ports/{por"
    "t_id}/packet_commitments\022\317\001\n\rPacketRecei"
    "pt\022..ibc.core.channel.v1.QueryPacketRece"
    "iptRequest\032/.ibc.core.channel.v1.QueryPa"
    "cketReceiptResponse\"]\202\323\344\223\002W\022U/ibc/core/c"
    "hannel/v1/channels/{channel_id}/ports/{p"
    "ort_id}/packet_receipts/{sequence}\022\343\001\n\025P"
    "acketAcknowledgement\0226.ibc.core.channel."
    "v1.QueryPacketAcknowledgementRequest\0327.i"
    "bc.core.channel.v1.QueryPacketAcknowledg"
    "ementResponse\"Y\202\323\344\223\002S\022Q/ibc/core/channel"
    "/v1/channels/{channel_id}/ports/{port_id"
    "}/packet_acks/{sequence}\022\347\001\n\026PacketAckno"
    "wledgements\0227.ibc.core.channel.v1.QueryP"
    "acketAcknowledgementsRequest\0328.ibc.core."
    "channel.v1.QueryPacketAcknowledgementsRe"
    "sponse\"Z\202\323\344\223\002T\022R/ibc/core/channel/v1/cha"
    "nnels/{channel_id}/ports/{port_id}/packe"
    "t_acknowledgements\022\206\002\n\021UnreceivedPackets"
    "\0222.ibc.core.channel.v1.QueryUnreceivedPa"
    "cketsRequest\0323.ibc.core.channel.v1.Query"
    "UnreceivedPacketsResponse\"\207\001\202\323\344\223\002\200\001\022~/ib"
    "c/core/channel/v1/channels/{channel_id}/"
    "ports/{port_id}/packet_commitments/{pack"
    "et_commitment_sequences}/unreceived_pack"
    "ets\022\361\001\n\016UnreceivedAcks\022/.ibc.core.channe"
    "l.v1.QueryUnreceivedAcksRequest\0320.ibc.co"
    "re.channel.v1.QueryUnreceivedAcksRespons"
    "e\"|\202\323\344\223\002v\022t/ibc/core/channel/v1/channels"
    "/{channel_id}/ports/{port_id}/packet_com"
    "mitments/{packet_ack_sequences}/unreceiv"
    "ed_acks\022\324\001\n\023NextSequenceReceive\0224.ibc.co"
    "re.channel.v1.QueryNextSequenceReceiveRe"
    "quest\0325.ibc.core.channel.v1.QueryNextSeq"
    "uenceReceiveResponse\"P\202\323\344\223\002J\022H/ibc/core/"
    "channel/v1/channels/{channel_id}/ports/{"
    "port_id}/next_sequence\022\320\001\n\020NextSequenceS"
    "end\0221.ibc.core.channel.v1.QueryNextSeque"
    "nceSendRequest\0322.ibc.core.channel.v1.Que"
    "ryNextSequenceSendResponse\"U\202\323\344\223\002O\022M/ibc"
    "/core/channel/v1/channels/{channel_id}/p"
    "orts/{port_id}/next_sequence_sendB\317\001\n\027co"
    "m.ibc.core.channel.v1B\nQueryProtoP\001Z9git"
    "hub.com/cosmos/ibc-go/v7/modules/core/04"
    "-channel/types\242\002\003ICC\252\002\023Ibc.Core.Channel."
    "V1\312\002\023Ibc\\Core\\Channel\\V1\342\002\037Ibc\\Core\\Chan"
    "nel\\V1\\GPBMetadata\352\002\026Ibc::Core::Channel:"
    ":V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_deps[6] =
    {
        &::descriptor_table_cosmos_2fbase_2fquery_2fv1beta1_2fpagination_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto = {
    false,
    false,
    7931,
    descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto,
    "ibc/core/channel/v1/query.proto",
    &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_deps,
    6,
    28,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto);
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
// ===================================================================

class QueryChannelRequest::_Internal {
 public:
};

QueryChannelRequest::QueryChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelRequest)
}
QueryChannelRequest::QueryChannelRequest(const QueryChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelRequest)
}

inline void QueryChannelRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelRequest::~QueryChannelRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryChannelRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelRequest)
  return target;
}

::size_t QueryChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelRequest::GetClassData() const { return &_class_data_; }


void QueryChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelRequest*>(&to_msg);
  auto& from = static_cast<const QueryChannelRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelRequest::CopyFrom(const QueryChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelRequest::IsInitialized() const {
  return true;
}

void QueryChannelRequest::InternalSwap(QueryChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[0]);
}
// ===================================================================

class QueryChannelResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryChannelResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryChannelResponse, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Channel& channel(const QueryChannelResponse* msg);
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const QueryChannelResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::channel::v1::Channel&
QueryChannelResponse::_Internal::channel(const QueryChannelResponse* msg) {
  return *msg->_impl_.channel_;
}
const ::ibc::core::client::v1::Height&
QueryChannelResponse::_Internal::proof_height(const QueryChannelResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryChannelResponse::clear_channel() {
  if (_impl_.channel_ != nullptr) _impl_.channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryChannelResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryChannelResponse::QueryChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelResponse)
}
QueryChannelResponse::QueryChannelResponse(const QueryChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.channel_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.channel_ = new ::ibc::core::channel::v1::Channel(*from._impl_.channel_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelResponse)
}

inline void QueryChannelResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.channel_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelResponse::~QueryChannelResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.channel_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryChannelResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.channel_ != nullptr);
      _impl_.channel_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.Channel channel = 1 [json_name = "channel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Channel channel = 1 [json_name = "channel"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::channel(this),
        _Internal::channel(this).GetCachedSize(), target, stream);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelResponse)
  return target;
}

::size_t QueryChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.channel.v1.Channel channel = 1 [json_name = "channel"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.channel_);
    }

    // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelResponse::GetClassData() const { return &_class_data_; }


void QueryChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelResponse*>(&to_msg);
  auto& from = static_cast<const QueryChannelResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_channel()->::ibc::core::channel::v1::Channel::MergeFrom(
          from._internal_channel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelResponse::CopyFrom(const QueryChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelResponse::IsInitialized() const {
  return true;
}

void QueryChannelResponse::InternalSwap(QueryChannelResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryChannelResponse, _impl_.proof_height_)
      + sizeof(QueryChannelResponse::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(QueryChannelResponse, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[1]);
}
// ===================================================================

class QueryChannelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryChannelsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryChannelsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryChannelsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryChannelsRequest::_Internal::pagination(const QueryChannelsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryChannelsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryChannelsRequest::QueryChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelsRequest)
}
QueryChannelsRequest::QueryChannelsRequest(const QueryChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelsRequest)
}

inline void QueryChannelsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pagination_){nullptr}
  };
}

QueryChannelsRequest::~QueryChannelsRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelsRequest)
  return target;
}

::size_t QueryChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .cosmos.base.query.v1beta1.PageRequest pagination = 1 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelsRequest::GetClassData() const { return &_class_data_; }


void QueryChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelsRequest*>(&to_msg);
  auto& from = static_cast<const QueryChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelsRequest::CopyFrom(const QueryChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelsRequest::IsInitialized() const {
  return true;
}

void QueryChannelsRequest::InternalSwap(QueryChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[2]);
}
// ===================================================================

class QueryChannelsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryChannelsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryChannelsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryChannelsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& height(const QueryChannelsResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryChannelsResponse::_Internal::pagination(const QueryChannelsResponse* msg) {
  return *msg->_impl_.pagination_;
}
const ::ibc::core::client::v1::Height&
QueryChannelsResponse::_Internal::height(const QueryChannelsResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryChannelsResponse::clear_channels() {
  _internal_mutable_channels()->Clear();
}
void QueryChannelsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryChannelsResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryChannelsResponse::QueryChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelsResponse)
}
QueryChannelsResponse::QueryChannelsResponse(const QueryChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelsResponse)
}

inline void QueryChannelsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channels_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}
  };
}

QueryChannelsResponse::~QueryChannelsResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_channels()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryChannelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pagination_ != nullptr);
      _impl_.pagination_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.height_ != nullptr);
      _impl_.height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelsResponse)
  return target;
}

::size_t QueryChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_);
    }

    // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelsResponse::GetClassData() const { return &_class_data_; }


void QueryChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelsResponse*>(&to_msg);
  auto& from = static_cast<const QueryChannelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
          from._internal_pagination());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelsResponse::CopyFrom(const QueryChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelsResponse::IsInitialized() const {
  return true;
}

void QueryChannelsResponse::InternalSwap(QueryChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_channels()->InternalSwap(other->_internal_mutable_channels());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryChannelsResponse, _impl_.height_)
      + sizeof(QueryChannelsResponse::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(QueryChannelsResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[3]);
}
// ===================================================================

class QueryConnectionChannelsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryConnectionChannelsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryConnectionChannelsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryConnectionChannelsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryConnectionChannelsRequest::_Internal::pagination(const QueryConnectionChannelsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryConnectionChannelsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryConnectionChannelsRequest::QueryConnectionChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryConnectionChannelsRequest)
}
QueryConnectionChannelsRequest::QueryConnectionChannelsRequest(const QueryConnectionChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryConnectionChannelsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection().empty()) {
    _this->_impl_.connection_.Set(from._internal_connection(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryConnectionChannelsRequest)
}

inline void QueryConnectionChannelsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.connection_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryConnectionChannelsRequest::~QueryConnectionChannelsRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryConnectionChannelsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryConnectionChannelsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryConnectionChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryConnectionChannelsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection = 1 [json_name = "connection"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryConnectionChannelsRequest.connection"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryConnectionChannelsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection = 1 [json_name = "connection"];
  if (!this->_internal_connection().empty()) {
    const std::string& _s = this->_internal_connection();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryConnectionChannelsRequest.connection");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  return target;
}

::size_t QueryConnectionChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection = 1 [json_name = "connection"];
  if (!this->_internal_connection().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 2 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryConnectionChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryConnectionChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryConnectionChannelsRequest::GetClassData() const { return &_class_data_; }


void QueryConnectionChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryConnectionChannelsRequest*>(&to_msg);
  auto& from = static_cast<const QueryConnectionChannelsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection().empty()) {
    _this->_internal_set_connection(from._internal_connection());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryConnectionChannelsRequest::CopyFrom(const QueryConnectionChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryConnectionChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryConnectionChannelsRequest::IsInitialized() const {
  return true;
}

void QueryConnectionChannelsRequest::InternalSwap(QueryConnectionChannelsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_, lhs_arena,
                                       &other->_impl_.connection_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryConnectionChannelsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[4]);
}
// ===================================================================

class QueryConnectionChannelsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryConnectionChannelsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryConnectionChannelsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryConnectionChannelsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& height(const QueryConnectionChannelsResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryConnectionChannelsResponse::_Internal::pagination(const QueryConnectionChannelsResponse* msg) {
  return *msg->_impl_.pagination_;
}
const ::ibc::core::client::v1::Height&
QueryConnectionChannelsResponse::_Internal::height(const QueryConnectionChannelsResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryConnectionChannelsResponse::clear_channels() {
  _internal_mutable_channels()->Clear();
}
void QueryConnectionChannelsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryConnectionChannelsResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryConnectionChannelsResponse::QueryConnectionChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryConnectionChannelsResponse)
}
QueryConnectionChannelsResponse::QueryConnectionChannelsResponse(const QueryConnectionChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryConnectionChannelsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channels_){from._impl_.channels_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryConnectionChannelsResponse)
}

inline void QueryConnectionChannelsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channels_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}
  };
}

QueryConnectionChannelsResponse::~QueryConnectionChannelsResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryConnectionChannelsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_channels()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryConnectionChannelsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryConnectionChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_channels()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pagination_ != nullptr);
      _impl_.pagination_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.height_ != nullptr);
      _impl_.height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryConnectionChannelsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryConnectionChannelsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  return target;
}

::size_t QueryConnectionChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.IdentifiedChannel channels = 1 [json_name = "channels"];
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_);
    }

    // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryConnectionChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryConnectionChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryConnectionChannelsResponse::GetClassData() const { return &_class_data_; }


void QueryConnectionChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryConnectionChannelsResponse*>(&to_msg);
  auto& from = static_cast<const QueryConnectionChannelsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(from._internal_channels());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
          from._internal_pagination());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryConnectionChannelsResponse::CopyFrom(const QueryConnectionChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryConnectionChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryConnectionChannelsResponse::IsInitialized() const {
  return true;
}

void QueryConnectionChannelsResponse::InternalSwap(QueryConnectionChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_channels()->InternalSwap(other->_internal_mutable_channels());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryConnectionChannelsResponse, _impl_.height_)
      + sizeof(QueryConnectionChannelsResponse::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(QueryConnectionChannelsResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryConnectionChannelsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[5]);
}
// ===================================================================

class QueryChannelClientStateRequest::_Internal {
 public:
};

QueryChannelClientStateRequest::QueryChannelClientStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelClientStateRequest)
}
QueryChannelClientStateRequest::QueryChannelClientStateRequest(const QueryChannelClientStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelClientStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelClientStateRequest)
}

inline void QueryChannelClientStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelClientStateRequest::~QueryChannelClientStateRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelClientStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelClientStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryChannelClientStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelClientStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelClientStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelClientStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelClientStateRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelClientStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelClientStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelClientStateRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelClientStateRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelClientStateRequest)
  return target;
}

::size_t QueryChannelClientStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelClientStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelClientStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelClientStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelClientStateRequest::GetClassData() const { return &_class_data_; }


void QueryChannelClientStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelClientStateRequest*>(&to_msg);
  auto& from = static_cast<const QueryChannelClientStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelClientStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelClientStateRequest::CopyFrom(const QueryChannelClientStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelClientStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelClientStateRequest::IsInitialized() const {
  return true;
}

void QueryChannelClientStateRequest::InternalSwap(QueryChannelClientStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelClientStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[6]);
}
// ===================================================================

class QueryChannelClientStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryChannelClientStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryChannelClientStateResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::IdentifiedClientState& identified_client_state(const QueryChannelClientStateResponse* msg);
  static void set_has_identified_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const QueryChannelClientStateResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::client::v1::IdentifiedClientState&
QueryChannelClientStateResponse::_Internal::identified_client_state(const QueryChannelClientStateResponse* msg) {
  return *msg->_impl_.identified_client_state_;
}
const ::ibc::core::client::v1::Height&
QueryChannelClientStateResponse::_Internal::proof_height(const QueryChannelClientStateResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryChannelClientStateResponse::clear_identified_client_state() {
  if (_impl_.identified_client_state_ != nullptr) _impl_.identified_client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryChannelClientStateResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryChannelClientStateResponse::QueryChannelClientStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelClientStateResponse)
}
QueryChannelClientStateResponse::QueryChannelClientStateResponse(const QueryChannelClientStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelClientStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.identified_client_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identified_client_state_ = new ::ibc::core::client::v1::IdentifiedClientState(*from._impl_.identified_client_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelClientStateResponse)
}

inline void QueryChannelClientStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.identified_client_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelClientStateResponse::~QueryChannelClientStateResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelClientStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelClientStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.identified_client_state_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryChannelClientStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelClientStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelClientStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.identified_client_state_ != nullptr);
      _impl_.identified_client_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelClientStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1 [json_name = "identifiedClientState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identified_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelClientStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelClientStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1 [json_name = "identifiedClientState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identified_client_state(this),
        _Internal::identified_client_state(this).GetCachedSize(), target, stream);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelClientStateResponse)
  return target;
}

::size_t QueryChannelClientStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelClientStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.client.v1.IdentifiedClientState identified_client_state = 1 [json_name = "identifiedClientState"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identified_client_state_);
    }

    // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelClientStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelClientStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelClientStateResponse::GetClassData() const { return &_class_data_; }


void QueryChannelClientStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelClientStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryChannelClientStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelClientStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_identified_client_state()->::ibc::core::client::v1::IdentifiedClientState::MergeFrom(
          from._internal_identified_client_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelClientStateResponse::CopyFrom(const QueryChannelClientStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelClientStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelClientStateResponse::IsInitialized() const {
  return true;
}

void QueryChannelClientStateResponse::InternalSwap(QueryChannelClientStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryChannelClientStateResponse, _impl_.proof_height_)
      + sizeof(QueryChannelClientStateResponse::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(QueryChannelClientStateResponse, _impl_.identified_client_state_)>(
          reinterpret_cast<char*>(&_impl_.identified_client_state_),
          reinterpret_cast<char*>(&other->_impl_.identified_client_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelClientStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[7]);
}
// ===================================================================

class QueryChannelConsensusStateRequest::_Internal {
 public:
};

QueryChannelConsensusStateRequest::QueryChannelConsensusStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
}
QueryChannelConsensusStateRequest::QueryChannelConsensusStateRequest(const QueryChannelConsensusStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelConsensusStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.revision_number_) {}

    , decltype(_impl_.revision_height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.revision_number_, &from._impl_.revision_number_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.revision_height_) -
    reinterpret_cast<char*>(&_impl_.revision_number_)) + sizeof(_impl_.revision_height_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
}

inline void QueryChannelConsensusStateRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.revision_number_) { ::uint64_t{0u} }

    , decltype(_impl_.revision_height_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelConsensusStateRequest::~QueryChannelConsensusStateRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelConsensusStateRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryChannelConsensusStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelConsensusStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  ::memset(&_impl_.revision_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.revision_height_) -
      reinterpret_cast<char*>(&_impl_.revision_number_)) + sizeof(_impl_.revision_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelConsensusStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 revision_number = 3 [json_name = "revisionNumber"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.revision_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 revision_height = 4 [json_name = "revisionHeight"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.revision_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelConsensusStateRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelConsensusStateRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelConsensusStateRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 revision_number = 3 [json_name = "revisionNumber"];
  if (this->_internal_revision_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_revision_number(), target);
  }

  // uint64 revision_height = 4 [json_name = "revisionHeight"];
  if (this->_internal_revision_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_revision_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  return target;
}

::size_t QueryChannelConsensusStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 revision_number = 3 [json_name = "revisionNumber"];
  if (this->_internal_revision_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_revision_number());
  }

  // uint64 revision_height = 4 [json_name = "revisionHeight"];
  if (this->_internal_revision_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_revision_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelConsensusStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelConsensusStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelConsensusStateRequest::GetClassData() const { return &_class_data_; }


void QueryChannelConsensusStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelConsensusStateRequest*>(&to_msg);
  auto& from = static_cast<const QueryChannelConsensusStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_revision_number() != 0) {
    _this->_internal_set_revision_number(from._internal_revision_number());
  }
  if (from._internal_revision_height() != 0) {
    _this->_internal_set_revision_height(from._internal_revision_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelConsensusStateRequest::CopyFrom(const QueryChannelConsensusStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelConsensusStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelConsensusStateRequest::IsInitialized() const {
  return true;
}

void QueryChannelConsensusStateRequest::InternalSwap(QueryChannelConsensusStateRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryChannelConsensusStateRequest, _impl_.revision_height_)
      + sizeof(QueryChannelConsensusStateRequest::_impl_.revision_height_)
      - PROTOBUF_FIELD_OFFSET(QueryChannelConsensusStateRequest, _impl_.revision_number_)>(
          reinterpret_cast<char*>(&_impl_.revision_number_),
          reinterpret_cast<char*>(&other->_impl_.revision_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelConsensusStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[8]);
}
// ===================================================================

class QueryChannelConsensusStateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryChannelConsensusStateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryChannelConsensusStateResponse, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& consensus_state(const QueryChannelConsensusStateResponse* msg);
  static void set_has_consensus_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const QueryChannelConsensusStateResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
QueryChannelConsensusStateResponse::_Internal::consensus_state(const QueryChannelConsensusStateResponse* msg) {
  return *msg->_impl_.consensus_state_;
}
const ::ibc::core::client::v1::Height&
QueryChannelConsensusStateResponse::_Internal::proof_height(const QueryChannelConsensusStateResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryChannelConsensusStateResponse::clear_consensus_state() {
  if (_impl_.consensus_state_ != nullptr) _impl_.consensus_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryChannelConsensusStateResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryChannelConsensusStateResponse::QueryChannelConsensusStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
}
QueryChannelConsensusStateResponse::QueryChannelConsensusStateResponse(const QueryChannelConsensusStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryChannelConsensusStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.consensus_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.consensus_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.consensus_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
}

inline void QueryChannelConsensusStateResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.consensus_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryChannelConsensusStateResponse::~QueryChannelConsensusStateResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryChannelConsensusStateResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.consensus_state_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryChannelConsensusStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryChannelConsensusStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.consensus_state_ != nullptr);
      _impl_.consensus_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryChannelConsensusStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 3 [json_name = "proof"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryChannelConsensusStateResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consensus_state(this),
        _Internal::consensus_state(this).GetCachedSize(), target, stream);
  }

  // string client_id = 2 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryChannelConsensusStateResponse.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes proof = 3 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  return target;
}

::size_t QueryChannelConsensusStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 2 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // bytes proof = 3 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Any consensus_state = 1 [json_name = "consensusState"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consensus_state_);
    }

    // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryChannelConsensusStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryChannelConsensusStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryChannelConsensusStateResponse::GetClassData() const { return &_class_data_; }


void QueryChannelConsensusStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryChannelConsensusStateResponse*>(&to_msg);
  auto& from = static_cast<const QueryChannelConsensusStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_consensus_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_consensus_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryChannelConsensusStateResponse::CopyFrom(const QueryChannelConsensusStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryChannelConsensusStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChannelConsensusStateResponse::IsInitialized() const {
  return true;
}

void QueryChannelConsensusStateResponse::InternalSwap(QueryChannelConsensusStateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryChannelConsensusStateResponse, _impl_.proof_height_)
      + sizeof(QueryChannelConsensusStateResponse::_impl_.proof_height_)
      - PROTOBUF_FIELD_OFFSET(QueryChannelConsensusStateResponse, _impl_.consensus_state_)>(
          reinterpret_cast<char*>(&_impl_.consensus_state_),
          reinterpret_cast<char*>(&other->_impl_.consensus_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryChannelConsensusStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[9]);
}
// ===================================================================

class QueryPacketCommitmentRequest::_Internal {
 public:
};

QueryPacketCommitmentRequest::QueryPacketCommitmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketCommitmentRequest)
}
QueryPacketCommitmentRequest::QueryPacketCommitmentRequest(const QueryPacketCommitmentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketCommitmentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketCommitmentRequest)
}

inline void QueryPacketCommitmentRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketCommitmentRequest::~QueryPacketCommitmentRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketCommitmentRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryPacketCommitmentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketCommitmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketCommitmentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketCommitmentRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketCommitmentRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketCommitmentRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  return target;
}

::size_t QueryPacketCommitmentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketCommitmentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketCommitmentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketCommitmentRequest::GetClassData() const { return &_class_data_; }


void QueryPacketCommitmentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketCommitmentRequest*>(&to_msg);
  auto& from = static_cast<const QueryPacketCommitmentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketCommitmentRequest::CopyFrom(const QueryPacketCommitmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketCommitmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketCommitmentRequest::IsInitialized() const {
  return true;
}

void QueryPacketCommitmentRequest::InternalSwap(QueryPacketCommitmentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketCommitmentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[10]);
}
// ===================================================================

class QueryPacketCommitmentResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketCommitmentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketCommitmentResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const QueryPacketCommitmentResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryPacketCommitmentResponse::_Internal::proof_height(const QueryPacketCommitmentResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryPacketCommitmentResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPacketCommitmentResponse::QueryPacketCommitmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketCommitmentResponse)
}
QueryPacketCommitmentResponse::QueryPacketCommitmentResponse(const QueryPacketCommitmentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketCommitmentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitment_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_commitment().empty()) {
    _this->_impl_.commitment_.Set(from._internal_commitment(), _this->GetArenaForAllocation());
  }
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketCommitmentResponse)
}

inline void QueryPacketCommitmentResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitment_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketCommitmentResponse::~QueryPacketCommitmentResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketCommitmentResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commitment_.Destroy();
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryPacketCommitmentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketCommitmentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commitment_.ClearToEmpty();
  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketCommitmentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes commitment = 1 [json_name = "commitment"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_commitment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketCommitmentResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes commitment = 1 [json_name = "commitment"];
  if (!this->_internal_commitment().empty()) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  return target;
}

::size_t QueryPacketCommitmentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes commitment = 1 [json_name = "commitment"];
  if (!this->_internal_commitment().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_commitment());
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketCommitmentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketCommitmentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketCommitmentResponse::GetClassData() const { return &_class_data_; }


void QueryPacketCommitmentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketCommitmentResponse*>(&to_msg);
  auto& from = static_cast<const QueryPacketCommitmentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_commitment().empty()) {
    _this->_internal_set_commitment(from._internal_commitment());
  }
  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketCommitmentResponse::CopyFrom(const QueryPacketCommitmentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketCommitmentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketCommitmentResponse::IsInitialized() const {
  return true;
}

void QueryPacketCommitmentResponse::InternalSwap(QueryPacketCommitmentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, lhs_arena,
                                       &other->_impl_.commitment_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketCommitmentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[11]);
}
// ===================================================================

class QueryPacketCommitmentsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketCommitmentsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketCommitmentsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryPacketCommitmentsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryPacketCommitmentsRequest::_Internal::pagination(const QueryPacketCommitmentsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryPacketCommitmentsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPacketCommitmentsRequest::QueryPacketCommitmentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
}
QueryPacketCommitmentsRequest::QueryPacketCommitmentsRequest(const QueryPacketCommitmentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketCommitmentsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
}

inline void QueryPacketCommitmentsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketCommitmentsRequest::~QueryPacketCommitmentsRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketCommitmentsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryPacketCommitmentsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketCommitmentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketCommitmentsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketCommitmentsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketCommitmentsRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketCommitmentsRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  return target;
}

::size_t QueryPacketCommitmentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketCommitmentsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketCommitmentsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketCommitmentsRequest::GetClassData() const { return &_class_data_; }


void QueryPacketCommitmentsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketCommitmentsRequest*>(&to_msg);
  auto& from = static_cast<const QueryPacketCommitmentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketCommitmentsRequest::CopyFrom(const QueryPacketCommitmentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketCommitmentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketCommitmentsRequest::IsInitialized() const {
  return true;
}

void QueryPacketCommitmentsRequest::InternalSwap(QueryPacketCommitmentsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketCommitmentsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[12]);
}
// ===================================================================

class QueryPacketCommitmentsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketCommitmentsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketCommitmentsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryPacketCommitmentsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& height(const QueryPacketCommitmentsResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryPacketCommitmentsResponse::_Internal::pagination(const QueryPacketCommitmentsResponse* msg) {
  return *msg->_impl_.pagination_;
}
const ::ibc::core::client::v1::Height&
QueryPacketCommitmentsResponse::_Internal::height(const QueryPacketCommitmentsResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryPacketCommitmentsResponse::clear_commitments() {
  _internal_mutable_commitments()->Clear();
}
void QueryPacketCommitmentsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryPacketCommitmentsResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryPacketCommitmentsResponse::QueryPacketCommitmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
}
QueryPacketCommitmentsResponse::QueryPacketCommitmentsResponse(const QueryPacketCommitmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketCommitmentsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitments_){from._impl_.commitments_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
}

inline void QueryPacketCommitmentsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitments_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}
  };
}

QueryPacketCommitmentsResponse::~QueryPacketCommitmentsResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketCommitmentsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_commitments()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryPacketCommitmentsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketCommitmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_commitments()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pagination_ != nullptr);
      _impl_.pagination_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.height_ != nullptr);
      _impl_.height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketCommitmentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.core.channel.v1.PacketState commitments = 1 [json_name = "commitments"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commitments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketCommitmentsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.PacketState commitments = 1 [json_name = "commitments"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commitments_size()); i < n; i++) {
    const auto& repfield = this->_internal_commitments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  return target;
}

::size_t QueryPacketCommitmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.PacketState commitments = 1 [json_name = "commitments"];
  total_size += 1UL * this->_internal_commitments_size();
  for (const auto& msg : this->_internal_commitments()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_);
    }

    // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketCommitmentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketCommitmentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketCommitmentsResponse::GetClassData() const { return &_class_data_; }


void QueryPacketCommitmentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketCommitmentsResponse*>(&to_msg);
  auto& from = static_cast<const QueryPacketCommitmentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_commitments()->MergeFrom(from._internal_commitments());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
          from._internal_pagination());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketCommitmentsResponse::CopyFrom(const QueryPacketCommitmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketCommitmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketCommitmentsResponse::IsInitialized() const {
  return true;
}

void QueryPacketCommitmentsResponse::InternalSwap(QueryPacketCommitmentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_commitments()->InternalSwap(other->_internal_mutable_commitments());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPacketCommitmentsResponse, _impl_.height_)
      + sizeof(QueryPacketCommitmentsResponse::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(QueryPacketCommitmentsResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketCommitmentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[13]);
}
// ===================================================================

class QueryPacketReceiptRequest::_Internal {
 public:
};

QueryPacketReceiptRequest::QueryPacketReceiptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketReceiptRequest)
}
QueryPacketReceiptRequest::QueryPacketReceiptRequest(const QueryPacketReceiptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketReceiptRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketReceiptRequest)
}

inline void QueryPacketReceiptRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketReceiptRequest::~QueryPacketReceiptRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketReceiptRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketReceiptRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryPacketReceiptRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketReceiptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketReceiptRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketReceiptRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketReceiptRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketReceiptRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketReceiptRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketReceiptRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketReceiptRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketReceiptRequest)
  return target;
}

::size_t QueryPacketReceiptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketReceiptRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketReceiptRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketReceiptRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketReceiptRequest::GetClassData() const { return &_class_data_; }


void QueryPacketReceiptRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketReceiptRequest*>(&to_msg);
  auto& from = static_cast<const QueryPacketReceiptRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketReceiptRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketReceiptRequest::CopyFrom(const QueryPacketReceiptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketReceiptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketReceiptRequest::IsInitialized() const {
  return true;
}

void QueryPacketReceiptRequest::InternalSwap(QueryPacketReceiptRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketReceiptRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[14]);
}
// ===================================================================

class QueryPacketReceiptResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketReceiptResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketReceiptResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const QueryPacketReceiptResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryPacketReceiptResponse::_Internal::proof_height(const QueryPacketReceiptResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryPacketReceiptResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPacketReceiptResponse::QueryPacketReceiptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketReceiptResponse)
}
QueryPacketReceiptResponse::QueryPacketReceiptResponse(const QueryPacketReceiptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketReceiptResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.received_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  _this->_impl_.received_ = from._impl_.received_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketReceiptResponse)
}

inline void QueryPacketReceiptResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.received_) { false }

  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketReceiptResponse::~QueryPacketReceiptResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketReceiptResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketReceiptResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryPacketReceiptResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketReceiptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketReceiptResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_.received_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketReceiptResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool received = 2 [json_name = "received"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 3 [json_name = "proof"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketReceiptResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketReceiptResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool received = 2 [json_name = "received"];
  if (this->_internal_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_received(), target);
  }

  // bytes proof = 3 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketReceiptResponse)
  return target;
}

::size_t QueryPacketReceiptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketReceiptResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof = 3 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  // .ibc.core.client.v1.Height proof_height = 4 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  // bool received = 2 [json_name = "received"];
  if (this->_internal_received() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketReceiptResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketReceiptResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketReceiptResponse::GetClassData() const { return &_class_data_; }


void QueryPacketReceiptResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketReceiptResponse*>(&to_msg);
  auto& from = static_cast<const QueryPacketReceiptResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketReceiptResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  if (from._internal_received() != 0) {
    _this->_internal_set_received(from._internal_received());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketReceiptResponse::CopyFrom(const QueryPacketReceiptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketReceiptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketReceiptResponse::IsInitialized() const {
  return true;
}

void QueryPacketReceiptResponse::InternalSwap(QueryPacketReceiptResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPacketReceiptResponse, _impl_.received_)
      + sizeof(QueryPacketReceiptResponse::_impl_.received_)
      - PROTOBUF_FIELD_OFFSET(QueryPacketReceiptResponse, _impl_.proof_height_)>(
          reinterpret_cast<char*>(&_impl_.proof_height_),
          reinterpret_cast<char*>(&other->_impl_.proof_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketReceiptResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[15]);
}
// ===================================================================

class QueryPacketAcknowledgementRequest::_Internal {
 public:
};

QueryPacketAcknowledgementRequest::QueryPacketAcknowledgementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
}
QueryPacketAcknowledgementRequest::QueryPacketAcknowledgementRequest(const QueryPacketAcknowledgementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketAcknowledgementRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
}

inline void QueryPacketAcknowledgementRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketAcknowledgementRequest::~QueryPacketAcknowledgementRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketAcknowledgementRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryPacketAcknowledgementRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketAcknowledgementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketAcknowledgementRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketAcknowledgementRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketAcknowledgementRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketAcknowledgementRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  return target;
}

::size_t QueryPacketAcknowledgementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketAcknowledgementRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketAcknowledgementRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketAcknowledgementRequest::GetClassData() const { return &_class_data_; }


void QueryPacketAcknowledgementRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketAcknowledgementRequest*>(&to_msg);
  auto& from = static_cast<const QueryPacketAcknowledgementRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketAcknowledgementRequest::CopyFrom(const QueryPacketAcknowledgementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketAcknowledgementRequest::IsInitialized() const {
  return true;
}

void QueryPacketAcknowledgementRequest::InternalSwap(QueryPacketAcknowledgementRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketAcknowledgementRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[16]);
}
// ===================================================================

class QueryPacketAcknowledgementResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketAcknowledgementResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketAcknowledgementResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const QueryPacketAcknowledgementResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryPacketAcknowledgementResponse::_Internal::proof_height(const QueryPacketAcknowledgementResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryPacketAcknowledgementResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPacketAcknowledgementResponse::QueryPacketAcknowledgementResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
}
QueryPacketAcknowledgementResponse::QueryPacketAcknowledgementResponse(const QueryPacketAcknowledgementResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketAcknowledgementResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_acknowledgement().empty()) {
    _this->_impl_.acknowledgement_.Set(from._internal_acknowledgement(), _this->GetArenaForAllocation());
  }
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
}

inline void QueryPacketAcknowledgementResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgement_) {}

    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.acknowledgement_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.acknowledgement_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketAcknowledgementResponse::~QueryPacketAcknowledgementResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketAcknowledgementResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.acknowledgement_.Destroy();
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryPacketAcknowledgementResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketAcknowledgementResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.acknowledgement_.ClearToEmpty();
  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketAcknowledgementResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes acknowledgement = 1 [json_name = "acknowledgement"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_acknowledgement();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketAcknowledgementResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes acknowledgement = 1 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    const std::string& _s = this->_internal_acknowledgement();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  return target;
}

::size_t QueryPacketAcknowledgementResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes acknowledgement = 1 [json_name = "acknowledgement"];
  if (!this->_internal_acknowledgement().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_acknowledgement());
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketAcknowledgementResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketAcknowledgementResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketAcknowledgementResponse::GetClassData() const { return &_class_data_; }


void QueryPacketAcknowledgementResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketAcknowledgementResponse*>(&to_msg);
  auto& from = static_cast<const QueryPacketAcknowledgementResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_acknowledgement().empty()) {
    _this->_internal_set_acknowledgement(from._internal_acknowledgement());
  }
  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketAcknowledgementResponse::CopyFrom(const QueryPacketAcknowledgementResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketAcknowledgementResponse::IsInitialized() const {
  return true;
}

void QueryPacketAcknowledgementResponse::InternalSwap(QueryPacketAcknowledgementResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.acknowledgement_, lhs_arena,
                                       &other->_impl_.acknowledgement_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketAcknowledgementResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[17]);
}
// ===================================================================

class QueryPacketAcknowledgementsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketAcknowledgementsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketAcknowledgementsRequest, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageRequest& pagination(const QueryPacketAcknowledgementsRequest* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::cosmos::base::query::v1beta1::PageRequest&
QueryPacketAcknowledgementsRequest::_Internal::pagination(const QueryPacketAcknowledgementsRequest* msg) {
  return *msg->_impl_.pagination_;
}
void QueryPacketAcknowledgementsRequest::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryPacketAcknowledgementsRequest::QueryPacketAcknowledgementsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
}
QueryPacketAcknowledgementsRequest::QueryPacketAcknowledgementsRequest(const QueryPacketAcknowledgementsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketAcknowledgementsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_commitment_sequences_) { from._impl_.packet_commitment_sequences_ }
    ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageRequest(*from._impl_.pagination_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
}

inline void QueryPacketAcknowledgementsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packet_commitment_sequences_) { arena }
    ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.pagination_){nullptr}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryPacketAcknowledgementsRequest::~QueryPacketAcknowledgementsRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketAcknowledgementsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_commitment_sequences_.~RepeatedField();
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pagination_;
}

void QueryPacketAcknowledgementsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketAcknowledgementsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_commitment_sequences()->Clear();
  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pagination_ != nullptr);
    _impl_.pagination_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketAcknowledgementsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 packet_commitment_sequences = 4 [json_name = "packetCommitmentSequences"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packet_commitment_sequences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 32) {
          _internal_add_packet_commitment_sequences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketAcknowledgementsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryPacketAcknowledgementsRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 packet_commitment_sequences = 4 [json_name = "packetCommitmentSequences"];
  {
    int byte_size = _impl_._packet_commitment_sequences_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(4, _internal_packet_commitment_sequences(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  return target;
}

::size_t QueryPacketAcknowledgementsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 packet_commitment_sequences = 4 [json_name = "packetCommitmentSequences"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packet_commitment_sequences())
    ;
    _impl_._packet_commitment_sequences_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .cosmos.base.query.v1beta1.PageRequest pagination = 3 [json_name = "pagination"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pagination_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketAcknowledgementsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketAcknowledgementsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketAcknowledgementsRequest::GetClassData() const { return &_class_data_; }


void QueryPacketAcknowledgementsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketAcknowledgementsRequest*>(&to_msg);
  auto& from = static_cast<const QueryPacketAcknowledgementsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packet_commitment_sequences_.MergeFrom(from._impl_.packet_commitment_sequences_);
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageRequest::MergeFrom(
        from._internal_pagination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketAcknowledgementsRequest::CopyFrom(const QueryPacketAcknowledgementsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketAcknowledgementsRequest::IsInitialized() const {
  return true;
}

void QueryPacketAcknowledgementsRequest::InternalSwap(QueryPacketAcknowledgementsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.packet_commitment_sequences_.InternalSwap(&other->_impl_.packet_commitment_sequences_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  swap(_impl_.pagination_, other->_impl_.pagination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketAcknowledgementsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[18]);
}
// ===================================================================

class QueryPacketAcknowledgementsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryPacketAcknowledgementsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryPacketAcknowledgementsResponse, _impl_._has_bits_);
  static const ::cosmos::base::query::v1beta1::PageResponse& pagination(const QueryPacketAcknowledgementsResponse* msg);
  static void set_has_pagination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::client::v1::Height& height(const QueryPacketAcknowledgementsResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::cosmos::base::query::v1beta1::PageResponse&
QueryPacketAcknowledgementsResponse::_Internal::pagination(const QueryPacketAcknowledgementsResponse* msg) {
  return *msg->_impl_.pagination_;
}
const ::ibc::core::client::v1::Height&
QueryPacketAcknowledgementsResponse::_Internal::height(const QueryPacketAcknowledgementsResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryPacketAcknowledgementsResponse::clear_acknowledgements() {
  _internal_mutable_acknowledgements()->Clear();
}
void QueryPacketAcknowledgementsResponse::clear_pagination() {
  if (_impl_.pagination_ != nullptr) _impl_.pagination_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void QueryPacketAcknowledgementsResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
QueryPacketAcknowledgementsResponse::QueryPacketAcknowledgementsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
}
QueryPacketAcknowledgementsResponse::QueryPacketAcknowledgementsResponse(const QueryPacketAcknowledgementsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryPacketAcknowledgementsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgements_){from._impl_.acknowledgements_}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pagination_ = new ::cosmos::base::query::v1beta1::PageResponse(*from._impl_.pagination_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
}

inline void QueryPacketAcknowledgementsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.acknowledgements_){arena}
    , decltype(_impl_.pagination_){nullptr}
    , decltype(_impl_.height_){nullptr}
  };
}

QueryPacketAcknowledgementsResponse::~QueryPacketAcknowledgementsResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryPacketAcknowledgementsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_acknowledgements()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.pagination_;
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryPacketAcknowledgementsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryPacketAcknowledgementsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_acknowledgements()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pagination_ != nullptr);
      _impl_.pagination_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.height_ != nullptr);
      _impl_.height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryPacketAcknowledgementsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ibc.core.channel.v1.PacketState acknowledgements = 1 [json_name = "acknowledgements"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_acknowledgements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pagination(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryPacketAcknowledgementsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.PacketState acknowledgements = 1 [json_name = "acknowledgements"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_acknowledgements_size()); i < n; i++) {
    const auto& repfield = this->_internal_acknowledgements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pagination(this),
        _Internal::pagination(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  return target;
}

::size_t QueryPacketAcknowledgementsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.channel.v1.PacketState acknowledgements = 1 [json_name = "acknowledgements"];
  total_size += 1UL * this->_internal_acknowledgements_size();
  for (const auto& msg : this->_internal_acknowledgements()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .cosmos.base.query.v1beta1.PageResponse pagination = 2 [json_name = "pagination"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pagination_);
    }

    // .ibc.core.client.v1.Height height = 3 [json_name = "height", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryPacketAcknowledgementsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryPacketAcknowledgementsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryPacketAcknowledgementsResponse::GetClassData() const { return &_class_data_; }


void QueryPacketAcknowledgementsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryPacketAcknowledgementsResponse*>(&to_msg);
  auto& from = static_cast<const QueryPacketAcknowledgementsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_acknowledgements()->MergeFrom(from._internal_acknowledgements());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pagination()->::cosmos::base::query::v1beta1::PageResponse::MergeFrom(
          from._internal_pagination());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryPacketAcknowledgementsResponse::CopyFrom(const QueryPacketAcknowledgementsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryPacketAcknowledgementsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPacketAcknowledgementsResponse::IsInitialized() const {
  return true;
}

void QueryPacketAcknowledgementsResponse::InternalSwap(QueryPacketAcknowledgementsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_acknowledgements()->InternalSwap(other->_internal_mutable_acknowledgements());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryPacketAcknowledgementsResponse, _impl_.height_)
      + sizeof(QueryPacketAcknowledgementsResponse::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(QueryPacketAcknowledgementsResponse, _impl_.pagination_)>(
          reinterpret_cast<char*>(&_impl_.pagination_),
          reinterpret_cast<char*>(&other->_impl_.pagination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryPacketAcknowledgementsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[19]);
}
// ===================================================================

class QueryUnreceivedPacketsRequest::_Internal {
 public:
};

QueryUnreceivedPacketsRequest::QueryUnreceivedPacketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
}
QueryUnreceivedPacketsRequest::QueryUnreceivedPacketsRequest(const QueryUnreceivedPacketsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryUnreceivedPacketsRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_commitment_sequences_) { from._impl_.packet_commitment_sequences_ }
    ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
}

inline void QueryUnreceivedPacketsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_commitment_sequences_) { arena }
    ,/* _impl_._packet_commitment_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryUnreceivedPacketsRequest::~QueryUnreceivedPacketsRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryUnreceivedPacketsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_commitment_sequences_.~RepeatedField();
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryUnreceivedPacketsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryUnreceivedPacketsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_commitment_sequences()->Clear();
  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUnreceivedPacketsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 packet_commitment_sequences = 3 [json_name = "packetCommitmentSequences"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packet_commitment_sequences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_packet_commitment_sequences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryUnreceivedPacketsRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryUnreceivedPacketsRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryUnreceivedPacketsRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 packet_commitment_sequences = 3 [json_name = "packetCommitmentSequences"];
  {
    int byte_size = _impl_._packet_commitment_sequences_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_packet_commitment_sequences(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  return target;
}

::size_t QueryUnreceivedPacketsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 packet_commitment_sequences = 3 [json_name = "packetCommitmentSequences"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packet_commitment_sequences())
    ;
    _impl_._packet_commitment_sequences_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUnreceivedPacketsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryUnreceivedPacketsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUnreceivedPacketsRequest::GetClassData() const { return &_class_data_; }


void QueryUnreceivedPacketsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryUnreceivedPacketsRequest*>(&to_msg);
  auto& from = static_cast<const QueryUnreceivedPacketsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packet_commitment_sequences_.MergeFrom(from._impl_.packet_commitment_sequences_);
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUnreceivedPacketsRequest::CopyFrom(const QueryUnreceivedPacketsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryUnreceivedPacketsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUnreceivedPacketsRequest::IsInitialized() const {
  return true;
}

void QueryUnreceivedPacketsRequest::InternalSwap(QueryUnreceivedPacketsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packet_commitment_sequences_.InternalSwap(&other->_impl_.packet_commitment_sequences_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUnreceivedPacketsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[20]);
}
// ===================================================================

class QueryUnreceivedPacketsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryUnreceivedPacketsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryUnreceivedPacketsResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& height(const QueryUnreceivedPacketsResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryUnreceivedPacketsResponse::_Internal::height(const QueryUnreceivedPacketsResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryUnreceivedPacketsResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryUnreceivedPacketsResponse::QueryUnreceivedPacketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
}
QueryUnreceivedPacketsResponse::QueryUnreceivedPacketsResponse(const QueryUnreceivedPacketsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryUnreceivedPacketsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequences_) { from._impl_.sequences_ }
    ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
}

inline void QueryUnreceivedPacketsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequences_) { arena }
    ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.height_){nullptr}
  };
}

QueryUnreceivedPacketsResponse::~QueryUnreceivedPacketsResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryUnreceivedPacketsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sequences_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryUnreceivedPacketsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryUnreceivedPacketsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sequences()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.height_ != nullptr);
    _impl_.height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUnreceivedPacketsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 sequences = 1 [json_name = "sequences"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_sequences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryUnreceivedPacketsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sequences = 1 [json_name = "sequences"];
  {
    int byte_size = _impl_._sequences_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_sequences(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  return target;
}

::size_t QueryUnreceivedPacketsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 sequences = 1 [json_name = "sequences"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sequences())
    ;
    _impl_._sequences_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUnreceivedPacketsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryUnreceivedPacketsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUnreceivedPacketsResponse::GetClassData() const { return &_class_data_; }


void QueryUnreceivedPacketsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryUnreceivedPacketsResponse*>(&to_msg);
  auto& from = static_cast<const QueryUnreceivedPacketsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sequences_.MergeFrom(from._impl_.sequences_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUnreceivedPacketsResponse::CopyFrom(const QueryUnreceivedPacketsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryUnreceivedPacketsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUnreceivedPacketsResponse::IsInitialized() const {
  return true;
}

void QueryUnreceivedPacketsResponse::InternalSwap(QueryUnreceivedPacketsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sequences_.InternalSwap(&other->_impl_.sequences_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUnreceivedPacketsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[21]);
}
// ===================================================================

class QueryUnreceivedAcksRequest::_Internal {
 public:
};

QueryUnreceivedAcksRequest::QueryUnreceivedAcksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
}
QueryUnreceivedAcksRequest::QueryUnreceivedAcksRequest(const QueryUnreceivedAcksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryUnreceivedAcksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_ack_sequences_) { from._impl_.packet_ack_sequences_ }
    ,/* _impl_._packet_ack_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
}

inline void QueryUnreceivedAcksRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.packet_ack_sequences_) { arena }
    ,/* _impl_._packet_ack_sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryUnreceivedAcksRequest::~QueryUnreceivedAcksRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryUnreceivedAcksRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packet_ack_sequences_.~RepeatedField();
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryUnreceivedAcksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryUnreceivedAcksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_packet_ack_sequences()->Clear();
  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUnreceivedAcksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint64 packet_ack_sequences = 3 [json_name = "packetAckSequences"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_packet_ack_sequences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 24) {
          _internal_add_packet_ack_sequences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryUnreceivedAcksRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryUnreceivedAcksRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryUnreceivedAcksRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated uint64 packet_ack_sequences = 3 [json_name = "packetAckSequences"];
  {
    int byte_size = _impl_._packet_ack_sequences_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(3, _internal_packet_ack_sequences(),
                                                 byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  return target;
}

::size_t QueryUnreceivedAcksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 packet_ack_sequences = 3 [json_name = "packetAckSequences"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_packet_ack_sequences())
    ;
    _impl_._packet_ack_sequences_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUnreceivedAcksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryUnreceivedAcksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUnreceivedAcksRequest::GetClassData() const { return &_class_data_; }


void QueryUnreceivedAcksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryUnreceivedAcksRequest*>(&to_msg);
  auto& from = static_cast<const QueryUnreceivedAcksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packet_ack_sequences_.MergeFrom(from._impl_.packet_ack_sequences_);
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUnreceivedAcksRequest::CopyFrom(const QueryUnreceivedAcksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryUnreceivedAcksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUnreceivedAcksRequest::IsInitialized() const {
  return true;
}

void QueryUnreceivedAcksRequest::InternalSwap(QueryUnreceivedAcksRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packet_ack_sequences_.InternalSwap(&other->_impl_.packet_ack_sequences_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUnreceivedAcksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[22]);
}
// ===================================================================

class QueryUnreceivedAcksResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryUnreceivedAcksResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryUnreceivedAcksResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& height(const QueryUnreceivedAcksResponse* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryUnreceivedAcksResponse::_Internal::height(const QueryUnreceivedAcksResponse* msg) {
  return *msg->_impl_.height_;
}
void QueryUnreceivedAcksResponse::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryUnreceivedAcksResponse::QueryUnreceivedAcksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
}
QueryUnreceivedAcksResponse::QueryUnreceivedAcksResponse(const QueryUnreceivedAcksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryUnreceivedAcksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequences_) { from._impl_.sequences_ }
    ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
}

inline void QueryUnreceivedAcksResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sequences_) { arena }
    ,/* _impl_._sequences_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.height_){nullptr}
  };
}

QueryUnreceivedAcksResponse::~QueryUnreceivedAcksResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryUnreceivedAcksResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sequences_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.height_;
}

void QueryUnreceivedAcksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryUnreceivedAcksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_sequences()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.height_ != nullptr);
    _impl_.height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryUnreceivedAcksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 sequences = 1 [json_name = "sequences"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_sequences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 8) {
          _internal_add_sequences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryUnreceivedAcksResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 sequences = 1 [json_name = "sequences"];
  {
    int byte_size = _impl_._sequences_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(1, _internal_sequences(),
                                                 byte_size, target);
    }
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  return target;
}

::size_t QueryUnreceivedAcksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 sequences = 1 [json_name = "sequences"];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_sequences())
    ;
    _impl_._sequences_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // .ibc.core.client.v1.Height height = 2 [json_name = "height", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryUnreceivedAcksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryUnreceivedAcksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryUnreceivedAcksResponse::GetClassData() const { return &_class_data_; }


void QueryUnreceivedAcksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryUnreceivedAcksResponse*>(&to_msg);
  auto& from = static_cast<const QueryUnreceivedAcksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sequences_.MergeFrom(from._impl_.sequences_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryUnreceivedAcksResponse::CopyFrom(const QueryUnreceivedAcksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryUnreceivedAcksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUnreceivedAcksResponse::IsInitialized() const {
  return true;
}

void QueryUnreceivedAcksResponse::InternalSwap(QueryUnreceivedAcksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sequences_.InternalSwap(&other->_impl_.sequences_);
  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryUnreceivedAcksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[23]);
}
// ===================================================================

class QueryNextSequenceReceiveRequest::_Internal {
 public:
};

QueryNextSequenceReceiveRequest::QueryNextSequenceReceiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
}
QueryNextSequenceReceiveRequest::QueryNextSequenceReceiveRequest(const QueryNextSequenceReceiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNextSequenceReceiveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
}

inline void QueryNextSequenceReceiveRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNextSequenceReceiveRequest::~QueryNextSequenceReceiveRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNextSequenceReceiveRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryNextSequenceReceiveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNextSequenceReceiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNextSequenceReceiveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNextSequenceReceiveRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryNextSequenceReceiveRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryNextSequenceReceiveRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  return target;
}

::size_t QueryNextSequenceReceiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNextSequenceReceiveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNextSequenceReceiveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNextSequenceReceiveRequest::GetClassData() const { return &_class_data_; }


void QueryNextSequenceReceiveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNextSequenceReceiveRequest*>(&to_msg);
  auto& from = static_cast<const QueryNextSequenceReceiveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNextSequenceReceiveRequest::CopyFrom(const QueryNextSequenceReceiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryNextSequenceReceiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNextSequenceReceiveRequest::IsInitialized() const {
  return true;
}

void QueryNextSequenceReceiveRequest::InternalSwap(QueryNextSequenceReceiveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNextSequenceReceiveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[24]);
}
// ===================================================================

class QueryNextSequenceReceiveResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNextSequenceReceiveResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNextSequenceReceiveResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const QueryNextSequenceReceiveResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryNextSequenceReceiveResponse::_Internal::proof_height(const QueryNextSequenceReceiveResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryNextSequenceReceiveResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryNextSequenceReceiveResponse::QueryNextSequenceReceiveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
}
QueryNextSequenceReceiveResponse::QueryNextSequenceReceiveResponse(const QueryNextSequenceReceiveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNextSequenceReceiveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_receive_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  _this->_impl_.next_sequence_receive_ = from._impl_.next_sequence_receive_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
}

inline void QueryNextSequenceReceiveResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_receive_) { ::uint64_t{0u} }

  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNextSequenceReceiveResponse::~QueryNextSequenceReceiveResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNextSequenceReceiveResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryNextSequenceReceiveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNextSequenceReceiveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_.next_sequence_receive_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNextSequenceReceiveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_sequence_receive = 1 [json_name = "nextSequenceReceive"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.next_sequence_receive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNextSequenceReceiveResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_sequence_receive = 1 [json_name = "nextSequenceReceive"];
  if (this->_internal_next_sequence_receive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_next_sequence_receive(), target);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  return target;
}

::size_t QueryNextSequenceReceiveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  // uint64 next_sequence_receive = 1 [json_name = "nextSequenceReceive"];
  if (this->_internal_next_sequence_receive() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_sequence_receive());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNextSequenceReceiveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNextSequenceReceiveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNextSequenceReceiveResponse::GetClassData() const { return &_class_data_; }


void QueryNextSequenceReceiveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNextSequenceReceiveResponse*>(&to_msg);
  auto& from = static_cast<const QueryNextSequenceReceiveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  if (from._internal_next_sequence_receive() != 0) {
    _this->_internal_set_next_sequence_receive(from._internal_next_sequence_receive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNextSequenceReceiveResponse::CopyFrom(const QueryNextSequenceReceiveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryNextSequenceReceiveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNextSequenceReceiveResponse::IsInitialized() const {
  return true;
}

void QueryNextSequenceReceiveResponse::InternalSwap(QueryNextSequenceReceiveResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryNextSequenceReceiveResponse, _impl_.next_sequence_receive_)
      + sizeof(QueryNextSequenceReceiveResponse::_impl_.next_sequence_receive_)
      - PROTOBUF_FIELD_OFFSET(QueryNextSequenceReceiveResponse, _impl_.proof_height_)>(
          reinterpret_cast<char*>(&_impl_.proof_height_),
          reinterpret_cast<char*>(&other->_impl_.proof_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNextSequenceReceiveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[25]);
}
// ===================================================================

class QueryNextSequenceSendRequest::_Internal {
 public:
};

QueryNextSequenceSendRequest::QueryNextSequenceSendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryNextSequenceSendRequest)
}
QueryNextSequenceSendRequest::QueryNextSequenceSendRequest(const QueryNextSequenceSendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNextSequenceSendRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryNextSequenceSendRequest)
}

inline void QueryNextSequenceSendRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNextSequenceSendRequest::~QueryNextSequenceSendRequest() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNextSequenceSendRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void QueryNextSequenceSendRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNextSequenceSendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNextSequenceSendRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNextSequenceSendRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryNextSequenceSendRequest.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.QueryNextSequenceSendRequest.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  return target;
}

::size_t QueryNextSequenceSendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNextSequenceSendRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNextSequenceSendRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNextSequenceSendRequest::GetClassData() const { return &_class_data_; }


void QueryNextSequenceSendRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNextSequenceSendRequest*>(&to_msg);
  auto& from = static_cast<const QueryNextSequenceSendRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNextSequenceSendRequest::CopyFrom(const QueryNextSequenceSendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryNextSequenceSendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNextSequenceSendRequest::IsInitialized() const {
  return true;
}

void QueryNextSequenceSendRequest::InternalSwap(QueryNextSequenceSendRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNextSequenceSendRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[26]);
}
// ===================================================================

class QueryNextSequenceSendResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<QueryNextSequenceSendResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(QueryNextSequenceSendResponse, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const QueryNextSequenceSendResponse* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
QueryNextSequenceSendResponse::_Internal::proof_height(const QueryNextSequenceSendResponse* msg) {
  return *msg->_impl_.proof_height_;
}
void QueryNextSequenceSendResponse::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
QueryNextSequenceSendResponse::QueryNextSequenceSendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.QueryNextSequenceSendResponse)
}
QueryNextSequenceSendResponse::QueryNextSequenceSendResponse(const QueryNextSequenceSendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueryNextSequenceSendResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_send_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof().empty()) {
    _this->_impl_.proof_.Set(from._internal_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  _this->_impl_.next_sequence_send_ = from._impl_.next_sequence_send_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.QueryNextSequenceSendResponse)
}

inline void QueryNextSequenceSendResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proof_) {}

    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.next_sequence_send_) { ::uint64_t{0u} }

  };
  _impl_.proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

QueryNextSequenceSendResponse::~QueryNextSequenceSendResponse() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueryNextSequenceSendResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void QueryNextSequenceSendResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueryNextSequenceSendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_.next_sequence_send_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryNextSequenceSendResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 next_sequence_send = 1 [json_name = "nextSequenceSend"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.next_sequence_send_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* QueryNextSequenceSendResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_sequence_send = 1 [json_name = "nextSequenceSend"];
  if (this->_internal_next_sequence_send() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_next_sequence_send(), target);
  }

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    const std::string& _s = this->_internal_proof();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  return target;
}

::size_t QueryNextSequenceSendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes proof = 2 [json_name = "proof"];
  if (!this->_internal_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof());
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  // uint64 next_sequence_send = 1 [json_name = "nextSequenceSend"];
  if (this->_internal_next_sequence_send() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_next_sequence_send());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueryNextSequenceSendResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueryNextSequenceSendResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueryNextSequenceSendResponse::GetClassData() const { return &_class_data_; }


void QueryNextSequenceSendResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueryNextSequenceSendResponse*>(&to_msg);
  auto& from = static_cast<const QueryNextSequenceSendResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_proof().empty()) {
    _this->_internal_set_proof(from._internal_proof());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  if (from._internal_next_sequence_send() != 0) {
    _this->_internal_set_next_sequence_send(from._internal_next_sequence_send());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueryNextSequenceSendResponse::CopyFrom(const QueryNextSequenceSendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.QueryNextSequenceSendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryNextSequenceSendResponse::IsInitialized() const {
  return true;
}

void QueryNextSequenceSendResponse::InternalSwap(QueryNextSequenceSendResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_, lhs_arena,
                                       &other->_impl_.proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryNextSequenceSendResponse, _impl_.next_sequence_send_)
      + sizeof(QueryNextSequenceSendResponse::_impl_.next_sequence_send_)
      - PROTOBUF_FIELD_OFFSET(QueryNextSequenceSendResponse, _impl_.proof_height_)>(
          reinterpret_cast<char*>(&_impl_.proof_height_),
          reinterpret_cast<char*>(&other->_impl_.proof_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryNextSequenceSendResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto[27]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelsRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelsResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryConnectionChannelsRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryConnectionChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryConnectionChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryConnectionChannelsResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryConnectionChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryConnectionChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelClientStateRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelClientStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelClientStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelClientStateResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelClientStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelClientStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelConsensusStateRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryChannelConsensusStateResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketCommitmentRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketCommitmentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketCommitmentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketCommitmentResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketCommitmentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketCommitmentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketCommitmentsRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketCommitmentsResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketReceiptRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketReceiptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketReceiptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketReceiptResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketReceiptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketReceiptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryUnreceivedAcksRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryUnreceivedAcksResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryNextSequenceSendRequest*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryNextSequenceSendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryNextSequenceSendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::QueryNextSequenceSendResponse*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::QueryNextSequenceSendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::QueryNextSequenceSendResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

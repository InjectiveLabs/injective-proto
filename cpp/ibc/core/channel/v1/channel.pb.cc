// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/channel/v1/channel.proto

#include "ibc/core/channel/v1/channel.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR Channel::Channel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_hops_)*/{}
  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_.ordering_)*/ 0
} {}
struct ChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelDefaultTypeInternal _Channel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IdentifiedChannel::IdentifiedChannel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_hops_)*/{}
  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.state_)*/ 0

  , /*decltype(_impl_.ordering_)*/ 0
} {}
struct IdentifiedChannelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentifiedChannelDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentifiedChannelDefaultTypeInternal() {}
  union {
    IdentifiedChannel _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentifiedChannelDefaultTypeInternal _IdentifiedChannel_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Counterparty::Counterparty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CounterpartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterpartyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterpartyDefaultTypeInternal() {}
  union {
    Counterparty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterpartyDefaultTypeInternal _Counterparty_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.source_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_port_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.destination_channel_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timeout_height_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.timeout_timestamp_)*/ ::uint64_t{0u}
} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketState::PacketState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketStateDefaultTypeInternal() {}
  union {
    PacketState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketStateDefaultTypeInternal _PacketState_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketId::PacketId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.port_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketIdDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketIdDefaultTypeInternal() {}
  union {
    PacketId _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketIdDefaultTypeInternal _PacketId_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Acknowledgement::Acknowledgement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AcknowledgementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcknowledgementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcknowledgementDefaultTypeInternal() {}
  union {
    Acknowledgement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Timeout::Timeout(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.height_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/ ::uint64_t{0u}
} {}
struct TimeoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeoutDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeoutDefaultTypeInternal() {}
  union {
    Timeout _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeoutDefaultTypeInternal _Timeout_default_instance_;
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_.ordering_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_.connection_hops_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Channel, _impl_.version_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.ordering_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.connection_hops_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::IdentifiedChannel, _impl_.channel_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Counterparty, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Counterparty, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Counterparty, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.source_port_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.source_channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.destination_port_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.destination_channel_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.timeout_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Packet, _impl_.timeout_timestamp_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketState, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketState, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketState, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketState, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketId, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketId, _impl_.port_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketId, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::PacketId, _impl_.sequence_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Acknowledgement, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Acknowledgement, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Acknowledgement, _impl_.response_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Timeout, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Timeout, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Timeout, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Timeout, _impl_.timestamp_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::ibc::core::channel::v1::Channel)},
        { 18, 33, -1, sizeof(::ibc::core::channel::v1::IdentifiedChannel)},
        { 40, -1, -1, sizeof(::ibc::core::channel::v1::Counterparty)},
        { 50, 66, -1, sizeof(::ibc::core::channel::v1::Packet)},
        { 74, -1, -1, sizeof(::ibc::core::channel::v1::PacketState)},
        { 86, -1, -1, sizeof(::ibc::core::channel::v1::PacketId)},
        { 97, -1, -1, sizeof(::ibc::core::channel::v1::Acknowledgement)},
        { 108, 118, -1, sizeof(::ibc::core::channel::v1::Timeout)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::channel::v1::_Channel_default_instance_._instance,
    &::ibc::core::channel::v1::_IdentifiedChannel_default_instance_._instance,
    &::ibc::core::channel::v1::_Counterparty_default_instance_._instance,
    &::ibc::core::channel::v1::_Packet_default_instance_._instance,
    &::ibc::core::channel::v1::_PacketState_default_instance_._instance,
    &::ibc::core::channel::v1::_PacketId_default_instance_._instance,
    &::ibc::core::channel::v1::_Acknowledgement_default_instance_._instance,
    &::ibc::core::channel::v1::_Timeout_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n!ibc/core/channel/v1/channel.proto\022\023ibc"
    ".core.channel.v1\032\024gogoproto/gogo.proto\032\037"
    "ibc/core/client/v1/client.proto\"\211\002\n\007Chan"
    "nel\0220\n\005state\030\001 \001(\0162\032.ibc.core.channel.v1"
    ".StateR\005state\0226\n\010ordering\030\002 \001(\0162\032.ibc.co"
    "re.channel.v1.OrderR\010ordering\022K\n\014counter"
    "party\030\003 \001(\0132!.ibc.core.channel.v1.Counte"
    "rpartyB\004\310\336\037\000R\014counterparty\022\'\n\017connection"
    "_hops\030\004 \003(\tR\016connectionHops\022\030\n\007version\030\005"
    " \001(\tR\007version:\004\210\240\037\000\"\313\002\n\021IdentifiedChanne"
    "l\0220\n\005state\030\001 \001(\0162\032.ibc.core.channel.v1.S"
    "tateR\005state\0226\n\010ordering\030\002 \001(\0162\032.ibc.core"
    ".channel.v1.OrderR\010ordering\022K\n\014counterpa"
    "rty\030\003 \001(\0132!.ibc.core.channel.v1.Counterp"
    "artyB\004\310\336\037\000R\014counterparty\022\'\n\017connection_h"
    "ops\030\004 \003(\tR\016connectionHops\022\030\n\007version\030\005 \001"
    "(\tR\007version\022\027\n\007port_id\030\006 \001(\tR\006portId\022\035\n\n"
    "channel_id\030\007 \001(\tR\tchannelId:\004\210\240\037\000\"L\n\014Cou"
    "nterparty\022\027\n\007port_id\030\001 \001(\tR\006portId\022\035\n\nch"
    "annel_id\030\002 \001(\tR\tchannelId:\004\210\240\037\000\"\330\002\n\006Pack"
    "et\022\032\n\010sequence\030\001 \001(\004R\010sequence\022\037\n\013source"
    "_port\030\002 \001(\tR\nsourcePort\022%\n\016source_channe"
    "l\030\003 \001(\tR\rsourceChannel\022)\n\020destination_po"
    "rt\030\004 \001(\tR\017destinationPort\022/\n\023destination"
    "_channel\030\005 \001(\tR\022destinationChannel\022\022\n\004da"
    "ta\030\006 \001(\014R\004data\022G\n\016timeout_height\030\007 \001(\0132\032"
    ".ibc.core.client.v1.HeightB\004\310\336\037\000R\rtimeou"
    "tHeight\022+\n\021timeout_timestamp\030\010 \001(\004R\020time"
    "outTimestamp:\004\210\240\037\000\"{\n\013PacketState\022\027\n\007por"
    "t_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\tR\t"
    "channelId\022\032\n\010sequence\030\003 \001(\004R\010sequence\022\022\n"
    "\004data\030\004 \001(\014R\004data:\004\210\240\037\000\"d\n\010PacketId\022\027\n\007p"
    "ort_id\030\001 \001(\tR\006portId\022\035\n\nchannel_id\030\002 \001(\t"
    "R\tchannelId\022\032\n\010sequence\030\003 \001(\004R\010sequence:"
    "\004\210\240\037\000\"O\n\017Acknowledgement\022\030\n\006result\030\025 \001(\014"
    "H\000R\006result\022\026\n\005error\030\026 \001(\tH\000R\005errorB\n\n\010re"
    "sponse\"a\n\007Timeout\0228\n\006height\030\001 \001(\0132\032.ibc."
    "core.client.v1.HeightB\004\310\336\037\000R\006height\022\034\n\tt"
    "imestamp\030\002 \001(\004R\ttimestamp*\267\001\n\005State\0226\n\037S"
    "TATE_UNINITIALIZED_UNSPECIFIED\020\000\032\021\212\235 \rUN"
    "INITIALIZED\022\030\n\nSTATE_INIT\020\001\032\010\212\235 \004INIT\022\036\n"
    "\rSTATE_TRYOPEN\020\002\032\013\212\235 \007TRYOPEN\022\030\n\nSTATE_O"
    "PEN\020\003\032\010\212\235 \004OPEN\022\034\n\014STATE_CLOSED\020\004\032\n\212\235 \006C"
    "LOSED\032\004\210\243\036\000*w\n\005Order\022$\n\026ORDER_NONE_UNSPE"
    "CIFIED\020\000\032\010\212\235 \004NONE\022\"\n\017ORDER_UNORDERED\020\001\032"
    "\r\212\235 \tUNORDERED\022\036\n\rORDER_ORDERED\020\002\032\013\212\235 \007O"
    "RDERED\032\004\210\243\036\000B\321\001\n\027com.ibc.core.channel.v1"
    "B\014ChannelProtoP\001Z9github.com/cosmos/ibc-"
    "go/v7/modules/core/04-channel/types\242\002\003IC"
    "C\252\002\023Ibc.Core.Channel.V1\312\002\023Ibc\\Core\\Chann"
    "el\\V1\342\002\037Ibc\\Core\\Channel\\V1\\GPBMetadata\352"
    "\002\026Ibc::Core::Channel::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto = {
    false,
    false,
    2072,
    descriptor_table_protodef_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
    "ibc/core/channel/v1/channel.proto",
    &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
    descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_deps,
    2,
    8,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto);
namespace ibc {
namespace core {
namespace channel {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto);
  return file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[0];
}
bool State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto);
  return file_level_enum_descriptors_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[1];
}
bool Order_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class Channel::_Internal {
 public:
  using HasBits = decltype(std::declval<Channel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Channel, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Counterparty& counterparty(const Channel* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::Counterparty&
Channel::_Internal::counterparty(const Channel* msg) {
  return *msg->_impl_.counterparty_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Channel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_hops_){from._impl_.connection_hops_}
    , decltype(_impl_.version_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.state_) {}

    , decltype(_impl_.ordering_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::channel::v1::Counterparty(*from._impl_.counterparty_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ordering_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.ordering_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.Channel)
}

inline void Channel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_hops_){arena}
    , decltype(_impl_.version_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.state_) { 0 }

    , decltype(_impl_.ordering_) { 0 }

  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.Channel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Channel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_connection_hops()->~RepeatedPtrField();
  _impl_.version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counterparty_;
}

void Channel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.Channel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_connection_hops()->Clear();
  _impl_.version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.counterparty_ != nullptr);
    _impl_.counterparty_->Clear();
  }
  ::memset(&_impl_.state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ordering_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.ordering_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ibc::core::channel::v1::State>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_ordering(static_cast<::ibc::core::channel::v1::Order>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string connection_hops = 4 [json_name = "connectionHops"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_connection_hops();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Channel.connection_hops"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 5 [json_name = "version"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Channel.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Channel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.Channel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  if (this->_internal_ordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_ordering(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  for (int i = 0, n = this->_internal_connection_hops_size(); i < n; ++i) {
    const auto& s = this->_internal_connection_hops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Channel.connection_hops");
    target = stream->WriteString(4, s, target);
  }

  // string version = 5 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Channel.version");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.Channel)
  return target;
}

::size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.Channel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_connection_hops().size());
  for (int i = 0, n = _internal_connection_hops().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_connection_hops().Get(i));
  }

  // string version = 5 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counterparty_);
  }

  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  if (this->_internal_ordering() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_ordering());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }


void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Channel*>(&to_msg);
  auto& from = static_cast<const Channel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.Channel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_connection_hops()->MergeFrom(from._internal_connection_hops());
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_counterparty()->::ibc::core::channel::v1::Counterparty::MergeFrom(
        from._internal_counterparty());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_ordering() != 0) {
    _this->_internal_set_ordering(from._internal_ordering());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_connection_hops()->InternalSwap(
      other->_internal_mutable_connection_hops());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, _impl_.ordering_)
      + sizeof(Channel::_impl_.ordering_)
      - PROTOBUF_FIELD_OFFSET(Channel, _impl_.counterparty_)>(
          reinterpret_cast<char*>(&_impl_.counterparty_),
          reinterpret_cast<char*>(&other->_impl_.counterparty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[0]);
}
// ===================================================================

class IdentifiedChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifiedChannel>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IdentifiedChannel, _impl_._has_bits_);
  static const ::ibc::core::channel::v1::Counterparty& counterparty(const IdentifiedChannel* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::channel::v1::Counterparty&
IdentifiedChannel::_Internal::counterparty(const IdentifiedChannel* msg) {
  return *msg->_impl_.counterparty_;
}
IdentifiedChannel::IdentifiedChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.IdentifiedChannel)
}
IdentifiedChannel::IdentifiedChannel(const IdentifiedChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentifiedChannel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_hops_){from._impl_.connection_hops_}
    , decltype(_impl_.version_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.state_) {}

    , decltype(_impl_.ordering_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::channel::v1::Counterparty(*from._impl_.counterparty_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.ordering_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.ordering_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.IdentifiedChannel)
}

inline void IdentifiedChannel::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_hops_){arena}
    , decltype(_impl_.version_) {}

    , decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.state_) { 0 }

    , decltype(_impl_.ordering_) { 0 }

  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdentifiedChannel::~IdentifiedChannel() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.IdentifiedChannel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentifiedChannel::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_connection_hops()->~RepeatedPtrField();
  _impl_.version_.Destroy();
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counterparty_;
}

void IdentifiedChannel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentifiedChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.IdentifiedChannel)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_connection_hops()->Clear();
  _impl_.version_.ClearToEmpty();
  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.counterparty_ != nullptr);
    _impl_.counterparty_->Clear();
  }
  ::memset(&_impl_.state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ordering_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.ordering_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifiedChannel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ibc::core::channel::v1::State>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_ordering(static_cast<::ibc::core::channel::v1::Order>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string connection_hops = 4 [json_name = "connectionHops"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_connection_hops();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.IdentifiedChannel.connection_hops"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string version = 5 [json_name = "version"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.IdentifiedChannel.version"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string port_id = 6 [json_name = "portId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.IdentifiedChannel.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 7 [json_name = "channelId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.IdentifiedChannel.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IdentifiedChannel::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.IdentifiedChannel)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_state(), target);
  }

  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  if (this->_internal_ordering() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_ordering(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  for (int i = 0, n = this->_internal_connection_hops_size(); i < n; ++i) {
    const auto& s = this->_internal_connection_hops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.IdentifiedChannel.connection_hops");
    target = stream->WriteString(4, s, target);
  }

  // string version = 5 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.IdentifiedChannel.version");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string port_id = 6 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.IdentifiedChannel.port_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string channel_id = 7 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.IdentifiedChannel.channel_id");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.IdentifiedChannel)
  return target;
}

::size_t IdentifiedChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.IdentifiedChannel)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string connection_hops = 4 [json_name = "connectionHops"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_connection_hops().size());
  for (int i = 0, n = _internal_connection_hops().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_connection_hops().Get(i));
  }

  // string version = 5 [json_name = "version"];
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_version());
  }

  // string port_id = 6 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 7 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .ibc.core.channel.v1.Counterparty counterparty = 3 [json_name = "counterparty", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counterparty_);
  }

  // .ibc.core.channel.v1.State state = 1 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .ibc.core.channel.v1.Order ordering = 2 [json_name = "ordering"];
  if (this->_internal_ordering() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_ordering());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifiedChannel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentifiedChannel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifiedChannel::GetClassData() const { return &_class_data_; }


void IdentifiedChannel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentifiedChannel*>(&to_msg);
  auto& from = static_cast<const IdentifiedChannel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.IdentifiedChannel)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_connection_hops()->MergeFrom(from._internal_connection_hops());
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_counterparty()->::ibc::core::channel::v1::Counterparty::MergeFrom(
        from._internal_counterparty());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_ordering() != 0) {
    _this->_internal_set_ordering(from._internal_ordering());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifiedChannel::CopyFrom(const IdentifiedChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.IdentifiedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifiedChannel::IsInitialized() const {
  return true;
}

void IdentifiedChannel::InternalSwap(IdentifiedChannel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_connection_hops()->InternalSwap(
      other->_internal_mutable_connection_hops());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifiedChannel, _impl_.ordering_)
      + sizeof(IdentifiedChannel::_impl_.ordering_)
      - PROTOBUF_FIELD_OFFSET(IdentifiedChannel, _impl_.counterparty_)>(
          reinterpret_cast<char*>(&_impl_.counterparty_),
          reinterpret_cast<char*>(&other->_impl_.counterparty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifiedChannel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[1]);
}
// ===================================================================

class Counterparty::_Internal {
 public:
};

Counterparty::Counterparty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.Counterparty)
}
Counterparty::Counterparty(const Counterparty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Counterparty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.Counterparty)
}

inline void Counterparty::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Counterparty::~Counterparty() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.Counterparty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Counterparty::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void Counterparty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Counterparty::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.Counterparty)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counterparty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Counterparty.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Counterparty.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Counterparty::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.Counterparty)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Counterparty.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Counterparty.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.Counterparty)
  return target;
}

::size_t Counterparty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.Counterparty)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Counterparty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Counterparty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Counterparty::GetClassData() const { return &_class_data_; }


void Counterparty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Counterparty*>(&to_msg);
  auto& from = static_cast<const Counterparty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.Counterparty)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Counterparty::CopyFrom(const Counterparty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.Counterparty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counterparty::IsInitialized() const {
  return true;
}

void Counterparty::InternalSwap(Counterparty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Counterparty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[2]);
}
// ===================================================================

class Packet::_Internal {
 public:
  using HasBits = decltype(std::declval<Packet>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Packet, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& timeout_height(const Packet* msg);
  static void set_has_timeout_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
Packet::_Internal::timeout_height(const Packet* msg) {
  return *msg->_impl_.timeout_height_;
}
void Packet::clear_timeout_height() {
  if (_impl_.timeout_height_ != nullptr) _impl_.timeout_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , decltype(_impl_.destination_port_) {}

    , decltype(_impl_.destination_channel_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timeout_height_){nullptr}
    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.timeout_timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_port().empty()) {
    _this->_impl_.source_port_.Set(from._internal_source_port(), _this->GetArenaForAllocation());
  }
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source_channel().empty()) {
    _this->_impl_.source_channel_.Set(from._internal_source_channel(), _this->GetArenaForAllocation());
  }
  _impl_.destination_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_port().empty()) {
    _this->_impl_.destination_port_.Set(from._internal_destination_port(), _this->GetArenaForAllocation());
  }
  _impl_.destination_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_destination_channel().empty()) {
    _this->_impl_.destination_channel_.Set(from._internal_destination_channel(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timeout_height_ = new ::ibc::core::client::v1::Height(*from._impl_.timeout_height_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.timeout_timestamp_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.Packet)
}

inline void Packet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_port_) {}

    , decltype(_impl_.source_channel_) {}

    , decltype(_impl_.destination_port_) {}

    , decltype(_impl_.destination_channel_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.timeout_height_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.timeout_timestamp_) { ::uint64_t{0u} }

  };
  _impl_.source_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.source_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_port_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.destination_channel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.destination_channel_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_port_.Destroy();
  _impl_.source_channel_.Destroy();
  _impl_.destination_port_.Destroy();
  _impl_.destination_channel_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timeout_height_;
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.Packet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_port_.ClearToEmpty();
  _impl_.source_channel_.ClearToEmpty();
  _impl_.destination_port_.ClearToEmpty();
  _impl_.destination_channel_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timeout_height_ != nullptr);
    _impl_.timeout_height_->Clear();
  }
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.timeout_timestamp_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.timeout_timestamp_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 sequence = 1 [json_name = "sequence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_port = 2 [json_name = "sourcePort"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Packet.source_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string source_channel = 3 [json_name = "sourceChannel"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Packet.source_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_port = 4 [json_name = "destinationPort"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_destination_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Packet.destination_port"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string destination_channel = 5 [json_name = "destinationChannel"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_destination_channel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Packet.destination_channel"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 6 [json_name = "data"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height timeout_height = 7 [json_name = "timeoutHeight", (.gogoproto.nullable) = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timeout_timestamp = 8 [json_name = "timeoutTimestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.timeout_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Packet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.Packet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_sequence(), target);
  }

  // string source_port = 2 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    const std::string& _s = this->_internal_source_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Packet.source_port");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string source_channel = 3 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    const std::string& _s = this->_internal_source_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Packet.source_channel");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string destination_port = 4 [json_name = "destinationPort"];
  if (!this->_internal_destination_port().empty()) {
    const std::string& _s = this->_internal_destination_port();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Packet.destination_port");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string destination_channel = 5 [json_name = "destinationChannel"];
  if (!this->_internal_destination_channel().empty()) {
    const std::string& _s = this->_internal_destination_channel();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Packet.destination_channel");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height timeout_height = 7 [json_name = "timeoutHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::timeout_height(this),
        _Internal::timeout_height(this).GetCachedSize(), target, stream);
  }

  // uint64 timeout_timestamp = 8 [json_name = "timeoutTimestamp"];
  if (this->_internal_timeout_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        8, this->_internal_timeout_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.Packet)
  return target;
}

::size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.Packet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_port = 2 [json_name = "sourcePort"];
  if (!this->_internal_source_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_port());
  }

  // string source_channel = 3 [json_name = "sourceChannel"];
  if (!this->_internal_source_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_source_channel());
  }

  // string destination_port = 4 [json_name = "destinationPort"];
  if (!this->_internal_destination_port().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_port());
  }

  // string destination_channel = 5 [json_name = "destinationChannel"];
  if (!this->_internal_destination_channel().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_destination_channel());
  }

  // bytes data = 6 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .ibc.core.client.v1.Height timeout_height = 7 [json_name = "timeoutHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeout_height_);
  }

  // uint64 sequence = 1 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // uint64 timeout_timestamp = 8 [json_name = "timeoutTimestamp"];
  if (this->_internal_timeout_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timeout_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.Packet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_port().empty()) {
    _this->_internal_set_source_port(from._internal_source_port());
  }
  if (!from._internal_source_channel().empty()) {
    _this->_internal_set_source_channel(from._internal_source_channel());
  }
  if (!from._internal_destination_port().empty()) {
    _this->_internal_set_destination_port(from._internal_destination_port());
  }
  if (!from._internal_destination_channel().empty()) {
    _this->_internal_set_destination_channel(from._internal_destination_channel());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timeout_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_timeout_height());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_timeout_timestamp() != 0) {
    _this->_internal_set_timeout_timestamp(from._internal_timeout_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_port_, lhs_arena,
                                       &other->_impl_.source_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_channel_, lhs_arena,
                                       &other->_impl_.source_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_port_, lhs_arena,
                                       &other->_impl_.destination_port_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.destination_channel_, lhs_arena,
                                       &other->_impl_.destination_channel_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Packet, _impl_.timeout_timestamp_)
      + sizeof(Packet::_impl_.timeout_timestamp_)
      - PROTOBUF_FIELD_OFFSET(Packet, _impl_.timeout_height_)>(
          reinterpret_cast<char*>(&_impl_.timeout_height_),
          reinterpret_cast<char*>(&other->_impl_.timeout_height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[3]);
}
// ===================================================================

class PacketState::_Internal {
 public:
};

PacketState::PacketState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.PacketState)
}
PacketState::PacketState(const PacketState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.PacketState)
}

inline void PacketState::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketState::~PacketState() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.PacketState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketState::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.data_.Destroy();
}

void PacketState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketState::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.PacketState)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketState.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketState.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 4 [json_name = "data"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketState::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.PacketState)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketState.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketState.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  // bytes data = 4 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.PacketState)
  return target;
}

::size_t PacketState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.PacketState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // bytes data = 4 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketState::GetClassData() const { return &_class_data_; }


void PacketState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketState*>(&to_msg);
  auto& from = static_cast<const PacketState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.PacketState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketState::CopyFrom(const PacketState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.PacketState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketState::IsInitialized() const {
  return true;
}

void PacketState::InternalSwap(PacketState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[4]);
}
// ===================================================================

class PacketId::_Internal {
 public:
};

PacketId::PacketId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.PacketId)
}
PacketId::PacketId(const PacketId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port_id().empty()) {
    _this->_impl_.port_id_.Set(from._internal_port_id(), _this->GetArenaForAllocation());
  }
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    _this->_impl_.channel_id_.Set(from._internal_channel_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_ = from._impl_.sequence_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.PacketId)
}

inline void PacketId::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.port_id_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.port_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.port_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.channel_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.channel_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketId::~PacketId() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.PacketId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketId::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.port_id_.Destroy();
  _impl_.channel_id_.Destroy();
}

void PacketId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketId::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.PacketId)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.port_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.sequence_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string port_id = 1 [json_name = "portId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_port_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketId.port_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string channel_id = 2 [json_name = "channelId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.PacketId.channel_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 3 [json_name = "sequence"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketId::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.PacketId)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    const std::string& _s = this->_internal_port_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketId.port_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.PacketId.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.PacketId)
  return target;
}

::size_t PacketId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.PacketId)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string port_id = 1 [json_name = "portId"];
  if (!this->_internal_port_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_port_id());
  }

  // string channel_id = 2 [json_name = "channelId"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // uint64 sequence = 3 [json_name = "sequence"];
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketId::GetClassData() const { return &_class_data_; }


void PacketId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketId*>(&to_msg);
  auto& from = static_cast<const PacketId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.PacketId)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_port_id().empty()) {
    _this->_internal_set_port_id(from._internal_port_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketId::CopyFrom(const PacketId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.PacketId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketId::IsInitialized() const {
  return true;
}

void PacketId::InternalSwap(PacketId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.port_id_, lhs_arena,
                                       &other->_impl_.port_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, lhs_arena,
                                       &other->_impl_.channel_id_, rhs_arena);

  swap(_impl_.sequence_, other->_impl_.sequence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[5]);
}
// ===================================================================

class Acknowledgement::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::ibc::core::channel::v1::Acknowledgement, _impl_._oneof_case_);
};

Acknowledgement::Acknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.Acknowledgement)
}
Acknowledgement::Acknowledgement(const Acknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Acknowledgement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kResult: {
      _this->_internal_set_result(from._internal_result());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.Acknowledgement)
}

inline void Acknowledgement::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

Acknowledgement::~Acknowledgement() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.Acknowledgement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Acknowledgement::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void Acknowledgement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Acknowledgement::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:ibc.core.channel.v1.Acknowledgement)
  switch (response_case()) {
    case kResult: {
      _impl_.response_.result_.Destroy();
      break;
    }
    case kError: {
      _impl_.response_.error_.Destroy();
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void Acknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.Acknowledgement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledgement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes result = 21 [json_name = "result"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string error = 22 [json_name = "error"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.channel.v1.Acknowledgement.error"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Acknowledgement::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.Acknowledgement)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (response_case()) {
    case kResult: {
      const std::string& _s = this->_internal_result();
      target = stream->WriteBytesMaybeAliased(21, _s, target);
      break;
    }
    case kError: {
      const std::string& _s = this->_internal_error();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.channel.v1.Acknowledgement.error");
      target = stream->WriteStringMaybeAliased(22, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.Acknowledgement)
  return target;
}

::size_t Acknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.Acknowledgement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // bytes result = 21 [json_name = "result"];
    case kResult: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_result());
      break;
    }
    // string error = 22 [json_name = "error"];
    case kError: {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Acknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Acknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Acknowledgement::GetClassData() const { return &_class_data_; }


void Acknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Acknowledgement*>(&to_msg);
  auto& from = static_cast<const Acknowledgement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.Acknowledgement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kResult: {
      _this->_internal_set_result(from._internal_result());
      break;
    }
    case kError: {
      _this->_internal_set_error(from._internal_error());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledgement::CopyFrom(const Acknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.Acknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledgement::IsInitialized() const {
  return true;
}

void Acknowledgement::InternalSwap(Acknowledgement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledgement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[6]);
}
// ===================================================================

class Timeout::_Internal {
 public:
  using HasBits = decltype(std::declval<Timeout>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Timeout, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& height(const Timeout* msg);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
Timeout::_Internal::height(const Timeout* msg) {
  return *msg->_impl_.height_;
}
void Timeout::clear_height() {
  if (_impl_.height_ != nullptr) _impl_.height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Timeout::Timeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.channel.v1.Timeout)
}
Timeout::Timeout(const Timeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Timeout* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_){nullptr}
    , decltype(_impl_.timestamp_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.height_ = new ::ibc::core::client::v1::Height(*from._impl_.height_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.channel.v1.Timeout)
}

inline void Timeout::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.height_){nullptr}
    , decltype(_impl_.timestamp_) { ::uint64_t{0u} }

  };
}

Timeout::~Timeout() {
  // @@protoc_insertion_point(destructor:ibc.core.channel.v1.Timeout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Timeout::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.height_;
}

void Timeout::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.channel.v1.Timeout)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.height_ != nullptr);
    _impl_.height_->Clear();
  }
  _impl_.timestamp_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timeout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Timeout::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.channel.v1.Timeout)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::height(this),
        _Internal::height(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.channel.v1.Timeout)
  return target;
}

::size_t Timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.channel.v1.Timeout)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ibc.core.client.v1.Height height = 1 [json_name = "height", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.height_);
  }

  // uint64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Timeout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Timeout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Timeout::GetClassData() const { return &_class_data_; }


void Timeout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Timeout*>(&to_msg);
  auto& from = static_cast<const Timeout&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.channel.v1.Timeout)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_height());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Timeout::CopyFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.channel.v1.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timeout::IsInitialized() const {
  return true;
}

void Timeout::InternalSwap(Timeout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Timeout, _impl_.timestamp_)
      + sizeof(Timeout::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Timeout, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Timeout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_getter, &descriptor_table_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto_once,
      file_level_metadata_ibc_2fcore_2fchannel_2fv1_2fchannel_2eproto[7]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::Channel*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::IdentifiedChannel*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::IdentifiedChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::IdentifiedChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::Counterparty*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::Counterparty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::Counterparty >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::Packet*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::PacketState*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::PacketState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::PacketState >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::PacketId*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::PacketId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::PacketId >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::Acknowledgement*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::Acknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::Acknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::channel::v1::Timeout*
Arena::CreateMaybeMessage< ::ibc::core::channel::v1::Timeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::channel::v1::Timeout >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

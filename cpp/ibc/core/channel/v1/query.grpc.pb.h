// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/channel/v1/query.proto
#ifndef GRPC_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto__INCLUDED

#include "ibc/core/channel/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace ibc {
namespace core {
namespace channel {
namespace v1 {

// Query provides defines the gRPC querier service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "ibc.core.channel.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Channel queries an IBC Channel.
    virtual ::grpc::Status Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::ibc::core::channel::v1::QueryChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>> AsyncChannel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>>(AsyncChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>> PrepareAsyncChannel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>>(PrepareAsyncChannelRaw(context, request, cq));
    }
    // Channels queries all the IBC channels of a chain.
    virtual ::grpc::Status Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::ibc::core::channel::v1::QueryChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>> AsyncChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>>(AsyncChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>> PrepareAsyncChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>>(PrepareAsyncChannelsRaw(context, request, cq));
    }
    // ConnectionChannels queries all the channels associated with a connection
    // end.
    virtual ::grpc::Status ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>> AsyncConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>>(AsyncConnectionChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>> PrepareAsyncConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>>(PrepareAsyncConnectionChannelsRaw(context, request, cq));
    }
    // ChannelClientState queries for the client state for the channel associated
    // with the provided channel identifiers.
    virtual ::grpc::Status ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>> AsyncChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>>(AsyncChannelClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>> PrepareAsyncChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>>(PrepareAsyncChannelClientStateRaw(context, request, cq));
    }
    // ChannelConsensusState queries for the consensus state for the channel
    // associated with the provided channel identifiers.
    virtual ::grpc::Status ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>> AsyncChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>>(AsyncChannelConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>> PrepareAsyncChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>>(PrepareAsyncChannelConsensusStateRaw(context, request, cq));
    }
    // PacketCommitment queries a stored packet commitment hash.
    virtual ::grpc::Status PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>> AsyncPacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>>(AsyncPacketCommitmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>> PrepareAsyncPacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>>(PrepareAsyncPacketCommitmentRaw(context, request, cq));
    }
    // PacketCommitments returns all the packet commitments hashes associated
    // with a channel.
    virtual ::grpc::Status PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>> AsyncPacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>>(AsyncPacketCommitmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>> PrepareAsyncPacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>>(PrepareAsyncPacketCommitmentsRaw(context, request, cq));
    }
    // PacketReceipt queries if a given packet sequence has been received on the
    // queried chain
    virtual ::grpc::Status PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>> AsyncPacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>>(AsyncPacketReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>> PrepareAsyncPacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>>(PrepareAsyncPacketReceiptRaw(context, request, cq));
    }
    // PacketAcknowledgement queries a stored packet acknowledgement hash.
    virtual ::grpc::Status PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>> AsyncPacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>>(AsyncPacketAcknowledgementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>> PrepareAsyncPacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>>(PrepareAsyncPacketAcknowledgementRaw(context, request, cq));
    }
    // PacketAcknowledgements returns all the packet acknowledgements associated
    // with a channel.
    virtual ::grpc::Status PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>> AsyncPacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>>(AsyncPacketAcknowledgementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>> PrepareAsyncPacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>>(PrepareAsyncPacketAcknowledgementsRaw(context, request, cq));
    }
    // UnreceivedPackets returns all the unreceived IBC packets associated with a
    // channel and sequences.
    virtual ::grpc::Status UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>> AsyncUnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>>(AsyncUnreceivedPacketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>> PrepareAsyncUnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>>(PrepareAsyncUnreceivedPacketsRaw(context, request, cq));
    }
    // UnreceivedAcks returns all the unreceived IBC acknowledgements associated
    // with a channel and sequences.
    virtual ::grpc::Status UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>> AsyncUnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>>(AsyncUnreceivedAcksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>> PrepareAsyncUnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>>(PrepareAsyncUnreceivedAcksRaw(context, request, cq));
    }
    // NextSequenceReceive returns the next receive sequence for a given channel.
    virtual ::grpc::Status NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>> AsyncNextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>>(AsyncNextSequenceReceiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>> PrepareAsyncNextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>>(PrepareAsyncNextSequenceReceiveRaw(context, request, cq));
    }
    // NextSequenceSend returns the next send sequence for a given channel.
    virtual ::grpc::Status NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>> AsyncNextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>>(AsyncNextSequenceSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>> PrepareAsyncNextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>>(PrepareAsyncNextSequenceSendRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Channel queries an IBC Channel.
      virtual void Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Channels queries all the IBC channels of a chain.
      virtual void Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ConnectionChannels queries all the channels associated with a connection
      // end.
      virtual void ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ChannelClientState queries for the client state for the channel associated
      // with the provided channel identifiers.
      virtual void ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ChannelConsensusState queries for the consensus state for the channel
      // associated with the provided channel identifiers.
      virtual void ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PacketCommitment queries a stored packet commitment hash.
      virtual void PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PacketCommitments returns all the packet commitments hashes associated
      // with a channel.
      virtual void PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PacketReceipt queries if a given packet sequence has been received on the
      // queried chain
      virtual void PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PacketAcknowledgement queries a stored packet acknowledgement hash.
      virtual void PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PacketAcknowledgements returns all the packet acknowledgements associated
      // with a channel.
      virtual void PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UnreceivedPackets returns all the unreceived IBC packets associated with a
      // channel and sequences.
      virtual void UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UnreceivedAcks returns all the unreceived IBC acknowledgements associated
      // with a channel and sequences.
      virtual void UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NextSequenceReceive returns the next receive sequence for a given channel.
      virtual void NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // NextSequenceSend returns the next send sequence for a given channel.
      virtual void NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>* AsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelResponse>* PrepareAsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>* AsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelsResponse>* PrepareAsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* AsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* PrepareAsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* AsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* PrepareAsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* AsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* PrepareAsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* AsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* PrepareAsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* AsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* PrepareAsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* AsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* PrepareAsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* AsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* PrepareAsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* AsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* PrepareAsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* AsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* PrepareAsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* AsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* PrepareAsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* AsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* PrepareAsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* AsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* PrepareAsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::ibc::core::channel::v1::QueryChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>> AsyncChannel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>>(AsyncChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>> PrepareAsyncChannel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>>(PrepareAsyncChannelRaw(context, request, cq));
    }
    ::grpc::Status Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::ibc::core::channel::v1::QueryChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>> AsyncChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>>(AsyncChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>> PrepareAsyncChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>>(PrepareAsyncChannelsRaw(context, request, cq));
    }
    ::grpc::Status ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>> AsyncConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>>(AsyncConnectionChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>> PrepareAsyncConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>>(PrepareAsyncConnectionChannelsRaw(context, request, cq));
    }
    ::grpc::Status ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>> AsyncChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>>(AsyncChannelClientStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>> PrepareAsyncChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>>(PrepareAsyncChannelClientStateRaw(context, request, cq));
    }
    ::grpc::Status ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>> AsyncChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>>(AsyncChannelConsensusStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>> PrepareAsyncChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>>(PrepareAsyncChannelConsensusStateRaw(context, request, cq));
    }
    ::grpc::Status PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>> AsyncPacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>>(AsyncPacketCommitmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>> PrepareAsyncPacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>>(PrepareAsyncPacketCommitmentRaw(context, request, cq));
    }
    ::grpc::Status PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>> AsyncPacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>>(AsyncPacketCommitmentsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>> PrepareAsyncPacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>>(PrepareAsyncPacketCommitmentsRaw(context, request, cq));
    }
    ::grpc::Status PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>> AsyncPacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>>(AsyncPacketReceiptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>> PrepareAsyncPacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>>(PrepareAsyncPacketReceiptRaw(context, request, cq));
    }
    ::grpc::Status PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>> AsyncPacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>>(AsyncPacketAcknowledgementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>> PrepareAsyncPacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>>(PrepareAsyncPacketAcknowledgementRaw(context, request, cq));
    }
    ::grpc::Status PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>> AsyncPacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>>(AsyncPacketAcknowledgementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>> PrepareAsyncPacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>>(PrepareAsyncPacketAcknowledgementsRaw(context, request, cq));
    }
    ::grpc::Status UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>> AsyncUnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>>(AsyncUnreceivedPacketsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>> PrepareAsyncUnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>>(PrepareAsyncUnreceivedPacketsRaw(context, request, cq));
    }
    ::grpc::Status UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>> AsyncUnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>>(AsyncUnreceivedAcksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>> PrepareAsyncUnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>>(PrepareAsyncUnreceivedAcksRaw(context, request, cq));
    }
    ::grpc::Status NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>> AsyncNextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>>(AsyncNextSequenceReceiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>> PrepareAsyncNextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>>(PrepareAsyncNextSequenceReceiveRaw(context, request, cq));
    }
    ::grpc::Status NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>> AsyncNextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>>(AsyncNextSequenceSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>> PrepareAsyncNextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>>(PrepareAsyncNextSequenceSendRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void Channel(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void Channels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ConnectionChannels(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ChannelClientState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, std::function<void(::grpc::Status)>) override;
      void ChannelConsensusState(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, std::function<void(::grpc::Status)>) override;
      void PacketCommitment(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, std::function<void(::grpc::Status)>) override;
      void PacketCommitments(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, std::function<void(::grpc::Status)>) override;
      void PacketReceipt(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, std::function<void(::grpc::Status)>) override;
      void PacketAcknowledgement(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, std::function<void(::grpc::Status)>) override;
      void PacketAcknowledgements(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, std::function<void(::grpc::Status)>) override;
      void UnreceivedPackets(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, std::function<void(::grpc::Status)>) override;
      void UnreceivedAcks(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, std::function<void(::grpc::Status)>) override;
      void NextSequenceReceive(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, std::function<void(::grpc::Status)>) override;
      void NextSequenceSend(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>* AsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelResponse>* PrepareAsyncChannelRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>* AsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelsResponse>* PrepareAsyncChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* AsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* PrepareAsyncConnectionChannelsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* AsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* PrepareAsyncChannelClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* AsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* PrepareAsyncChannelConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* AsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* PrepareAsyncPacketCommitmentRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* AsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* PrepareAsyncPacketCommitmentsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* AsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* PrepareAsyncPacketReceiptRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* AsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* PrepareAsyncPacketAcknowledgementRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* AsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* PrepareAsyncPacketAcknowledgementsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* AsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* PrepareAsyncUnreceivedPacketsRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* AsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* PrepareAsyncUnreceivedAcksRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* AsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* PrepareAsyncNextSequenceReceiveRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* AsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* PrepareAsyncNextSequenceSendRaw(::grpc::ClientContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Channel_;
    const ::grpc::internal::RpcMethod rpcmethod_Channels_;
    const ::grpc::internal::RpcMethod rpcmethod_ConnectionChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_ChannelClientState_;
    const ::grpc::internal::RpcMethod rpcmethod_ChannelConsensusState_;
    const ::grpc::internal::RpcMethod rpcmethod_PacketCommitment_;
    const ::grpc::internal::RpcMethod rpcmethod_PacketCommitments_;
    const ::grpc::internal::RpcMethod rpcmethod_PacketReceipt_;
    const ::grpc::internal::RpcMethod rpcmethod_PacketAcknowledgement_;
    const ::grpc::internal::RpcMethod rpcmethod_PacketAcknowledgements_;
    const ::grpc::internal::RpcMethod rpcmethod_UnreceivedPackets_;
    const ::grpc::internal::RpcMethod rpcmethod_UnreceivedAcks_;
    const ::grpc::internal::RpcMethod rpcmethod_NextSequenceReceive_;
    const ::grpc::internal::RpcMethod rpcmethod_NextSequenceSend_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Channel queries an IBC Channel.
    virtual ::grpc::Status Channel(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response);
    // Channels queries all the IBC channels of a chain.
    virtual ::grpc::Status Channels(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response);
    // ConnectionChannels queries all the channels associated with a connection
    // end.
    virtual ::grpc::Status ConnectionChannels(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response);
    // ChannelClientState queries for the client state for the channel associated
    // with the provided channel identifiers.
    virtual ::grpc::Status ChannelClientState(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response);
    // ChannelConsensusState queries for the consensus state for the channel
    // associated with the provided channel identifiers.
    virtual ::grpc::Status ChannelConsensusState(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response);
    // PacketCommitment queries a stored packet commitment hash.
    virtual ::grpc::Status PacketCommitment(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response);
    // PacketCommitments returns all the packet commitments hashes associated
    // with a channel.
    virtual ::grpc::Status PacketCommitments(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response);
    // PacketReceipt queries if a given packet sequence has been received on the
    // queried chain
    virtual ::grpc::Status PacketReceipt(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response);
    // PacketAcknowledgement queries a stored packet acknowledgement hash.
    virtual ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response);
    // PacketAcknowledgements returns all the packet acknowledgements associated
    // with a channel.
    virtual ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response);
    // UnreceivedPackets returns all the unreceived IBC packets associated with a
    // channel and sequences.
    virtual ::grpc::Status UnreceivedPackets(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response);
    // UnreceivedAcks returns all the unreceived IBC acknowledgements associated
    // with a channel and sequences.
    virtual ::grpc::Status UnreceivedAcks(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response);
    // NextSequenceReceive returns the next receive sequence for a given channel.
    virtual ::grpc::Status NextSequenceReceive(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response);
    // NextSequenceSend returns the next send sequence for a given channel.
    virtual ::grpc::Status NextSequenceSend(::grpc::ServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Channel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannel(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Channels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannels(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectionChannels(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannelClientState(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryChannelClientStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannelConsensusState(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketCommitment(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketCommitments(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketReceipt(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryPacketReceiptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketAcknowledgement(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketAcknowledgements(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnreceivedPackets(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnreceivedAcks(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextSequenceReceive(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextSequenceSend(::grpc::ServerContext* context, ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::grpc::ServerAsyncResponseWriter< ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Channel<WithAsyncMethod_Channels<WithAsyncMethod_ConnectionChannels<WithAsyncMethod_ChannelClientState<WithAsyncMethod_ChannelConsensusState<WithAsyncMethod_PacketCommitment<WithAsyncMethod_PacketCommitments<WithAsyncMethod_PacketReceipt<WithAsyncMethod_PacketAcknowledgement<WithAsyncMethod_PacketAcknowledgements<WithAsyncMethod_UnreceivedPackets<WithAsyncMethod_UnreceivedAcks<WithAsyncMethod_NextSequenceReceive<WithAsyncMethod_NextSequenceSend<Service > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Channel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryChannelRequest* request, ::ibc::core::channel::v1::QueryChannelResponse* response) { return this->Channel(context, request, response); }));}
    void SetMessageAllocatorFor_Channel(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Channel(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Channels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryChannelsRequest* request, ::ibc::core::channel::v1::QueryChannelsResponse* response) { return this->Channels(context, request, response); }));}
    void SetMessageAllocatorFor_Channels(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Channels(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* request, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* response) { return this->ConnectionChannels(context, request, response); }));}
    void SetMessageAllocatorFor_ConnectionChannels(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConnectionChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* request, ::ibc::core::channel::v1::QueryChannelClientStateResponse* response) { return this->ChannelClientState(context, request, response); }));}
    void SetMessageAllocatorFor_ChannelClientState(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChannelClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* request, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* response) { return this->ChannelConsensusState(context, request, response); }));}
    void SetMessageAllocatorFor_ChannelConsensusState(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChannelConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* response) { return this->PacketCommitment(context, request, response); }));}
    void SetMessageAllocatorFor_PacketCommitment(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketCommitment(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* request, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* response) { return this->PacketCommitments(context, request, response); }));}
    void SetMessageAllocatorFor_PacketCommitments(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketCommitments(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* request, ::ibc::core::channel::v1::QueryPacketReceiptResponse* response) { return this->PacketReceipt(context, request, response); }));}
    void SetMessageAllocatorFor_PacketReceipt(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* response) { return this->PacketAcknowledgement(context, request, response); }));}
    void SetMessageAllocatorFor_PacketAcknowledgement(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketAcknowledgement(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* request, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* response) { return this->PacketAcknowledgements(context, request, response); }));}
    void SetMessageAllocatorFor_PacketAcknowledgements(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketAcknowledgements(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* request, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* response) { return this->UnreceivedPackets(context, request, response); }));}
    void SetMessageAllocatorFor_UnreceivedPackets(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnreceivedPackets(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* request, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* response) { return this->UnreceivedAcks(context, request, response); }));}
    void SetMessageAllocatorFor_UnreceivedAcks(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnreceivedAcks(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* request, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* response) { return this->NextSequenceReceive(context, request, response); }));}
    void SetMessageAllocatorFor_NextSequenceReceive(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextSequenceReceive(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* request, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* response) { return this->NextSequenceSend(context, request, response); }));}
    void SetMessageAllocatorFor_NextSequenceSend(
        ::grpc::MessageAllocator< ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextSequenceSend(
      ::grpc::CallbackServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Channel<WithCallbackMethod_Channels<WithCallbackMethod_ConnectionChannels<WithCallbackMethod_ChannelClientState<WithCallbackMethod_ChannelConsensusState<WithCallbackMethod_PacketCommitment<WithCallbackMethod_PacketCommitments<WithCallbackMethod_PacketReceipt<WithCallbackMethod_PacketAcknowledgement<WithCallbackMethod_PacketAcknowledgements<WithCallbackMethod_UnreceivedPackets<WithCallbackMethod_UnreceivedAcks<WithCallbackMethod_NextSequenceReceive<WithCallbackMethod_NextSequenceSend<Service > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Channel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Channels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Channel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Channels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnectionChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannelClientState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChannelConsensusState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketCommitment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketCommitments(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketReceipt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketAcknowledgement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPacketAcknowledgements(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnreceivedPackets(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnreceivedAcks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextSequenceReceive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNextSequenceSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Channel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Channel(context, request, response); }));
    }
    ~WithRawCallbackMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Channel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Channels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Channels(context, request, response); }));
    }
    ~WithRawCallbackMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Channels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ConnectionChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ConnectionChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChannelClientState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChannelClientState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ChannelConsensusState(context, request, response); }));
    }
    ~WithRawCallbackMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ChannelConsensusState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PacketCommitment(context, request, response); }));
    }
    ~WithRawCallbackMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketCommitment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PacketCommitments(context, request, response); }));
    }
    ~WithRawCallbackMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketCommitments(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PacketReceipt(context, request, response); }));
    }
    ~WithRawCallbackMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketReceipt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PacketAcknowledgement(context, request, response); }));
    }
    ~WithRawCallbackMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketAcknowledgement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PacketAcknowledgements(context, request, response); }));
    }
    ~WithRawCallbackMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PacketAcknowledgements(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnreceivedPackets(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnreceivedPackets(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UnreceivedAcks(context, request, response); }));
    }
    ~WithRawCallbackMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UnreceivedAcks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NextSequenceReceive(context, request, response); }));
    }
    ~WithRawCallbackMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextSequenceReceive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->NextSequenceSend(context, request, response); }));
    }
    ~WithRawCallbackMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* NextSequenceSend(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Channel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Channel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryChannelRequest, ::ibc::core::channel::v1::QueryChannelResponse>* streamer) {
                       return this->StreamedChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Channel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Channel(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryChannelRequest,::ibc::core::channel::v1::QueryChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Channels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Channels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryChannelsRequest, ::ibc::core::channel::v1::QueryChannelsResponse>* streamer) {
                       return this->StreamedChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Channels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Channels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryChannelsRequest,::ibc::core::channel::v1::QueryChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ConnectionChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ConnectionChannels() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryConnectionChannelsRequest, ::ibc::core::channel::v1::QueryConnectionChannelsResponse>* streamer) {
                       return this->StreamedConnectionChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ConnectionChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConnectionChannels(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryConnectionChannelsRequest* /*request*/, ::ibc::core::channel::v1::QueryConnectionChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnectionChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryConnectionChannelsRequest,::ibc::core::channel::v1::QueryConnectionChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChannelClientState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChannelClientState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryChannelClientStateRequest, ::ibc::core::channel::v1::QueryChannelClientStateResponse>* streamer) {
                       return this->StreamedChannelClientState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChannelClientState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChannelClientState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelClientStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelClientStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChannelClientState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryChannelClientStateRequest,::ibc::core::channel::v1::QueryChannelClientStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ChannelConsensusState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ChannelConsensusState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryChannelConsensusStateRequest, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* streamer) {
                       return this->StreamedChannelConsensusState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ChannelConsensusState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ChannelConsensusState(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryChannelConsensusStateRequest* /*request*/, ::ibc::core::channel::v1::QueryChannelConsensusStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedChannelConsensusState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryChannelConsensusStateRequest,::ibc::core::channel::v1::QueryChannelConsensusStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PacketCommitment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PacketCommitment() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryPacketCommitmentRequest, ::ibc::core::channel::v1::QueryPacketCommitmentResponse>* streamer) {
                       return this->StreamedPacketCommitment(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PacketCommitment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PacketCommitment(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacketCommitment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryPacketCommitmentRequest,::ibc::core::channel::v1::QueryPacketCommitmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PacketCommitments : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PacketCommitments() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryPacketCommitmentsRequest, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* streamer) {
                       return this->StreamedPacketCommitments(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PacketCommitments() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PacketCommitments(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketCommitmentsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketCommitmentsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacketCommitments(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryPacketCommitmentsRequest,::ibc::core::channel::v1::QueryPacketCommitmentsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PacketReceipt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PacketReceipt() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryPacketReceiptRequest, ::ibc::core::channel::v1::QueryPacketReceiptResponse>* streamer) {
                       return this->StreamedPacketReceipt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PacketReceipt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PacketReceipt(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketReceiptRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketReceiptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacketReceipt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryPacketReceiptRequest,::ibc::core::channel::v1::QueryPacketReceiptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PacketAcknowledgement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PacketAcknowledgement() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* streamer) {
                       return this->StreamedPacketAcknowledgement(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PacketAcknowledgement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PacketAcknowledgement(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacketAcknowledgement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryPacketAcknowledgementRequest,::ibc::core::channel::v1::QueryPacketAcknowledgementResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PacketAcknowledgements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PacketAcknowledgements() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* streamer) {
                       return this->StreamedPacketAcknowledgements(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PacketAcknowledgements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PacketAcknowledgements(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest* /*request*/, ::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPacketAcknowledgements(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryPacketAcknowledgementsRequest,::ibc::core::channel::v1::QueryPacketAcknowledgementsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnreceivedPackets : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnreceivedPackets() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* streamer) {
                       return this->StreamedUnreceivedPackets(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnreceivedPackets() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnreceivedPackets(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedPacketsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnreceivedPackets(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryUnreceivedPacketsRequest,::ibc::core::channel::v1::QueryUnreceivedPacketsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UnreceivedAcks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UnreceivedAcks() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryUnreceivedAcksRequest, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* streamer) {
                       return this->StreamedUnreceivedAcks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UnreceivedAcks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UnreceivedAcks(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryUnreceivedAcksRequest* /*request*/, ::ibc::core::channel::v1::QueryUnreceivedAcksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnreceivedAcks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryUnreceivedAcksRequest,::ibc::core::channel::v1::QueryUnreceivedAcksResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NextSequenceReceive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NextSequenceReceive() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* streamer) {
                       return this->StreamedNextSequenceReceive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NextSequenceReceive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NextSequenceReceive(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceReceiveResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNextSequenceReceive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryNextSequenceReceiveRequest,::ibc::core::channel::v1::QueryNextSequenceReceiveResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NextSequenceSend : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_NextSequenceSend() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ibc::core::channel::v1::QueryNextSequenceSendRequest, ::ibc::core::channel::v1::QueryNextSequenceSendResponse>* streamer) {
                       return this->StreamedNextSequenceSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_NextSequenceSend() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NextSequenceSend(::grpc::ServerContext* /*context*/, const ::ibc::core::channel::v1::QueryNextSequenceSendRequest* /*request*/, ::ibc::core::channel::v1::QueryNextSequenceSendResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNextSequenceSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ibc::core::channel::v1::QueryNextSequenceSendRequest,::ibc::core::channel::v1::QueryNextSequenceSendResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Channel<WithStreamedUnaryMethod_Channels<WithStreamedUnaryMethod_ConnectionChannels<WithStreamedUnaryMethod_ChannelClientState<WithStreamedUnaryMethod_ChannelConsensusState<WithStreamedUnaryMethod_PacketCommitment<WithStreamedUnaryMethod_PacketCommitments<WithStreamedUnaryMethod_PacketReceipt<WithStreamedUnaryMethod_PacketAcknowledgement<WithStreamedUnaryMethod_PacketAcknowledgements<WithStreamedUnaryMethod_UnreceivedPackets<WithStreamedUnaryMethod_UnreceivedAcks<WithStreamedUnaryMethod_NextSequenceReceive<WithStreamedUnaryMethod_NextSequenceSend<Service > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Channel<WithStreamedUnaryMethod_Channels<WithStreamedUnaryMethod_ConnectionChannels<WithStreamedUnaryMethod_ChannelClientState<WithStreamedUnaryMethod_ChannelConsensusState<WithStreamedUnaryMethod_PacketCommitment<WithStreamedUnaryMethod_PacketCommitments<WithStreamedUnaryMethod_PacketReceipt<WithStreamedUnaryMethod_PacketAcknowledgement<WithStreamedUnaryMethod_PacketAcknowledgements<WithStreamedUnaryMethod_UnreceivedPackets<WithStreamedUnaryMethod_UnreceivedAcks<WithStreamedUnaryMethod_NextSequenceReceive<WithStreamedUnaryMethod_NextSequenceSend<Service > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace channel
}  // namespace core
}  // namespace ibc


#endif  // GRPC_ibc_2fcore_2fchannel_2fv1_2fquery_2eproto__INCLUDED

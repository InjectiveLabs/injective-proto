// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/commitment/v1/commitment.proto

#include "ibc/core/commitment/v1/commitment.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace commitment {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MerkleRoot::MerkleRoot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MerkleRootDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerkleRootDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerkleRootDefaultTypeInternal() {}
  union {
    MerkleRoot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerkleRootDefaultTypeInternal _MerkleRoot_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MerklePrefix::MerklePrefix(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_prefix_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MerklePrefixDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerklePrefixDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerklePrefixDefaultTypeInternal() {}
  union {
    MerklePrefix _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerklePrefixDefaultTypeInternal _MerklePrefix_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MerklePath::MerklePath(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_path_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MerklePathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerklePathDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerklePathDefaultTypeInternal() {}
  union {
    MerklePath _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerklePathDefaultTypeInternal _MerklePath_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MerkleProof::MerkleProof(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.proofs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MerkleProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MerkleProofDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MerkleProofDefaultTypeInternal() {}
  union {
    MerkleProof _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MerkleProofDefaultTypeInternal _MerkleProof_default_instance_;
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleRoot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleRoot, _impl_.hash_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePrefix, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePrefix, _impl_.key_prefix_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePath, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerklePath, _impl_.key_path_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleProof, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::commitment::v1::MerkleProof, _impl_.proofs_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::ibc::core::commitment::v1::MerkleRoot)},
        { 9, -1, -1, sizeof(::ibc::core::commitment::v1::MerklePrefix)},
        { 18, -1, -1, sizeof(::ibc::core::commitment::v1::MerklePath)},
        { 27, -1, -1, sizeof(::ibc::core::commitment::v1::MerkleProof)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::commitment::v1::_MerkleRoot_default_instance_._instance,
    &::ibc::core::commitment::v1::_MerklePrefix_default_instance_._instance,
    &::ibc::core::commitment::v1::_MerklePath_default_instance_._instance,
    &::ibc::core::commitment::v1::_MerkleProof_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'ibc/core/commitment/v1/commitment.prot"
    "o\022\026ibc.core.commitment.v1\032\024gogoproto/gog"
    "o.proto\032\034cosmos/ics23/v1/proofs.proto\"&\n"
    "\nMerkleRoot\022\022\n\004hash\030\001 \001(\014R\004hash:\004\210\240\037\000\"-\n"
    "\014MerklePrefix\022\035\n\nkey_prefix\030\001 \001(\014R\tkeyPr"
    "efix\"-\n\nMerklePath\022\031\n\010key_path\030\001 \003(\tR\007ke"
    "yPath:\004\230\240\037\000\"G\n\013MerkleProof\0228\n\006proofs\030\001 \003"
    "(\0132 .cosmos.ics23.v1.CommitmentProofR\006pr"
    "oofsB\346\001\n\032com.ibc.core.commitment.v1B\017Com"
    "mitmentProtoP\001Z<github.com/cosmos/ibc-go"
    "/v7/modules/core/23-commitment/types\242\002\003I"
    "CC\252\002\026Ibc.Core.Commitment.V1\312\002\026Ibc\\Core\\C"
    "ommitment\\V1\342\002\"Ibc\\Core\\Commitment\\V1\\GP"
    "BMetadata\352\002\031Ibc::Core::Commitment::V1b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_deps[2] =
    {
        &::descriptor_table_cosmos_2fics23_2fv1_2fproofs_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto = {
    false,
    false,
    565,
    descriptor_table_protodef_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    "ibc/core/commitment/v1/commitment.proto",
    &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
    descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto(&descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto);
namespace ibc {
namespace core {
namespace commitment {
namespace v1 {
// ===================================================================

class MerkleRoot::_Internal {
 public:
};

MerkleRoot::MerkleRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerkleRoot)
}
MerkleRoot::MerkleRoot(const MerkleRoot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MerkleRoot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerkleRoot)
}

inline void MerkleRoot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MerkleRoot::~MerkleRoot() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerkleRoot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MerkleRoot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void MerkleRoot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MerkleRoot::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerkleRoot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerkleRoot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MerkleRoot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerkleRoot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerkleRoot)
  return target;
}

::size_t MerkleRoot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerkleRoot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MerkleRoot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MerkleRoot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MerkleRoot::GetClassData() const { return &_class_data_; }


void MerkleRoot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MerkleRoot*>(&to_msg);
  auto& from = static_cast<const MerkleRoot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerkleRoot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MerkleRoot::CopyFrom(const MerkleRoot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerkleRoot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleRoot::IsInitialized() const {
  return true;
}

void MerkleRoot::InternalSwap(MerkleRoot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MerkleRoot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_getter, &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
      file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[0]);
}
// ===================================================================

class MerklePrefix::_Internal {
 public:
};

MerklePrefix::MerklePrefix(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerklePrefix)
}
MerklePrefix::MerklePrefix(const MerklePrefix& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MerklePrefix* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_prefix_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_prefix().empty()) {
    _this->_impl_.key_prefix_.Set(from._internal_key_prefix(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerklePrefix)
}

inline void MerklePrefix::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_prefix_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_prefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_prefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MerklePrefix::~MerklePrefix() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerklePrefix)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MerklePrefix::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_prefix_.Destroy();
}

void MerklePrefix::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MerklePrefix::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerklePrefix)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_prefix_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerklePrefix::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key_prefix = 1 [json_name = "keyPrefix"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key_prefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MerklePrefix::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerklePrefix)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key_prefix = 1 [json_name = "keyPrefix"];
  if (!this->_internal_key_prefix().empty()) {
    const std::string& _s = this->_internal_key_prefix();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerklePrefix)
  return target;
}

::size_t MerklePrefix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerklePrefix)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key_prefix = 1 [json_name = "keyPrefix"];
  if (!this->_internal_key_prefix().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key_prefix());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MerklePrefix::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MerklePrefix::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MerklePrefix::GetClassData() const { return &_class_data_; }


void MerklePrefix::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MerklePrefix*>(&to_msg);
  auto& from = static_cast<const MerklePrefix&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerklePrefix)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_prefix().empty()) {
    _this->_internal_set_key_prefix(from._internal_key_prefix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MerklePrefix::CopyFrom(const MerklePrefix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerklePrefix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePrefix::IsInitialized() const {
  return true;
}

void MerklePrefix::InternalSwap(MerklePrefix* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_prefix_, lhs_arena,
                                       &other->_impl_.key_prefix_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePrefix::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_getter, &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
      file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[1]);
}
// ===================================================================

class MerklePath::_Internal {
 public:
};

MerklePath::MerklePath(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MerklePath* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_path_){from._impl_.key_path_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerklePath)
}

inline void MerklePath::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_path_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerklePath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MerklePath::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_key_path()->~RepeatedPtrField();
}

void MerklePath::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerklePath)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_key_path()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerklePath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string key_path = 1 [json_name = "keyPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_key_path();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.commitment.v1.MerklePath.key_path"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MerklePath::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerklePath)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string key_path = 1 [json_name = "keyPath"];
  for (int i = 0, n = this->_internal_key_path_size(); i < n; ++i) {
    const auto& s = this->_internal_key_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.commitment.v1.MerklePath.key_path");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerklePath)
  return target;
}

::size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerklePath)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string key_path = 1 [json_name = "keyPath"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_key_path().size());
  for (int i = 0, n = _internal_key_path().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_key_path().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MerklePath::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MerklePath::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MerklePath::GetClassData() const { return &_class_data_; }


void MerklePath::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MerklePath*>(&to_msg);
  auto& from = static_cast<const MerklePath&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerklePath)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_key_path()->MergeFrom(from._internal_key_path());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_key_path()->InternalSwap(
      other->_internal_mutable_key_path());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePath::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_getter, &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
      file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[2]);
}
// ===================================================================

class MerkleProof::_Internal {
 public:
};

void MerkleProof::clear_proofs() {
  _internal_mutable_proofs()->Clear();
}
MerkleProof::MerkleProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.commitment.v1.MerkleProof)
}
MerkleProof::MerkleProof(const MerkleProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MerkleProof* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.proofs_){from._impl_.proofs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.commitment.v1.MerkleProof)
}

inline void MerkleProof::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.proofs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MerkleProof::~MerkleProof() {
  // @@protoc_insertion_point(destructor:ibc.core.commitment.v1.MerkleProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MerkleProof::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_proofs()->~RepeatedPtrField();
}

void MerkleProof::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MerkleProof::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.commitment.v1.MerkleProof)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_proofs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MerkleProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proofs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MerkleProof::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.commitment.v1.MerkleProof)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_proofs_size()); i < n; i++) {
    const auto& repfield = this->_internal_proofs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.commitment.v1.MerkleProof)
  return target;
}

::size_t MerkleProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.commitment.v1.MerkleProof)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cosmos.ics23.v1.CommitmentProof proofs = 1 [json_name = "proofs"];
  total_size += 1UL * this->_internal_proofs_size();
  for (const auto& msg : this->_internal_proofs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MerkleProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MerkleProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MerkleProof::GetClassData() const { return &_class_data_; }


void MerkleProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MerkleProof*>(&to_msg);
  auto& from = static_cast<const MerkleProof&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.commitment.v1.MerkleProof)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_proofs()->MergeFrom(from._internal_proofs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MerkleProof::CopyFrom(const MerkleProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.commitment.v1.MerkleProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkleProof::IsInitialized() const {
  return true;
}

void MerkleProof::InternalSwap(MerkleProof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_proofs()->InternalSwap(other->_internal_mutable_proofs());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerkleProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_getter, &descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto_once,
      file_level_metadata_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace commitment
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::commitment::v1::MerkleRoot*
Arena::CreateMaybeMessage< ::ibc::core::commitment::v1::MerkleRoot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::commitment::v1::MerkleRoot >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::commitment::v1::MerklePrefix*
Arena::CreateMaybeMessage< ::ibc::core::commitment::v1::MerklePrefix >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::commitment::v1::MerklePrefix >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::commitment::v1::MerklePath*
Arena::CreateMaybeMessage< ::ibc::core::commitment::v1::MerklePath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::commitment::v1::MerklePath >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::commitment::v1::MerkleProof*
Arena::CreateMaybeMessage< ::ibc::core::commitment::v1::MerkleProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::commitment::v1::MerkleProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/connection/v1/connection.proto

#include "ibc/core/connection/v1/connection.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR ConnectionEnd::ConnectionEnd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.delay_period_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.state_)*/ 0
} {}
struct ConnectionEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionEndDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionEndDefaultTypeInternal() {}
  union {
    ConnectionEnd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionEndDefaultTypeInternal _ConnectionEnd_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR IdentifiedConnection::IdentifiedConnection(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.versions_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.delay_period_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.state_)*/ 0
} {}
struct IdentifiedConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdentifiedConnectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdentifiedConnectionDefaultTypeInternal() {}
  union {
    IdentifiedConnection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdentifiedConnectionDefaultTypeInternal _IdentifiedConnection_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Counterparty::Counterparty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.prefix_)*/nullptr} {}
struct CounterpartyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CounterpartyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CounterpartyDefaultTypeInternal() {}
  union {
    Counterparty _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CounterpartyDefaultTypeInternal _Counterparty_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ClientPaths::ClientPaths(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientPathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientPathsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientPathsDefaultTypeInternal() {}
  union {
    ClientPaths _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientPathsDefaultTypeInternal _ClientPaths_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ConnectionPaths::ConnectionPaths(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paths_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectionPathsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectionPathsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectionPathsDefaultTypeInternal() {}
  union {
    ConnectionPaths _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectionPathsDefaultTypeInternal _ConnectionPaths_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Version::Version(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.features_)*/{}
  , /*decltype(_impl_.identifier_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VersionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VersionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VersionDefaultTypeInternal() {}
  union {
    Version _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Params::Params(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_expected_time_per_block_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ParamsDefaultTypeInternal() {}
  union {
    Params _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_.versions_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionEnd, _impl_.delay_period_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.versions_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::IdentifiedConnection, _impl_.delay_period_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Counterparty, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Counterparty, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Counterparty, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Counterparty, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Counterparty, _impl_.prefix_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ClientPaths, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ClientPaths, _impl_.paths_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionPaths, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionPaths, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::ConnectionPaths, _impl_.paths_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Version, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Version, _impl_.identifier_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Version, _impl_.features_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Params, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::Params, _impl_.max_expected_time_per_block_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::ibc::core::connection::v1::ConnectionEnd)},
        { 18, 32, -1, sizeof(::ibc::core::connection::v1::IdentifiedConnection)},
        { 38, 49, -1, sizeof(::ibc::core::connection::v1::Counterparty)},
        { 52, -1, -1, sizeof(::ibc::core::connection::v1::ClientPaths)},
        { 61, -1, -1, sizeof(::ibc::core::connection::v1::ConnectionPaths)},
        { 71, -1, -1, sizeof(::ibc::core::connection::v1::Version)},
        { 81, -1, -1, sizeof(::ibc::core::connection::v1::Params)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::connection::v1::_ConnectionEnd_default_instance_._instance,
    &::ibc::core::connection::v1::_IdentifiedConnection_default_instance_._instance,
    &::ibc::core::connection::v1::_Counterparty_default_instance_._instance,
    &::ibc::core::connection::v1::_ClientPaths_default_instance_._instance,
    &::ibc::core::connection::v1::_ConnectionPaths_default_instance_._instance,
    &::ibc::core::connection::v1::_Version_default_instance_._instance,
    &::ibc::core::connection::v1::_Params_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\'ibc/core/connection/v1/connection.prot"
    "o\022\026ibc.core.connection.v1\032\024gogoproto/gog"
    "o.proto\032\'ibc/core/commitment/v1/commitme"
    "nt.proto\"\227\002\n\rConnectionEnd\022\033\n\tclient_id\030"
    "\001 \001(\tR\010clientId\022;\n\010versions\030\002 \003(\0132\037.ibc."
    "core.connection.v1.VersionR\010versions\0223\n\005"
    "state\030\003 \001(\0162\035.ibc.core.connection.v1.Sta"
    "teR\005state\022N\n\014counterparty\030\004 \001(\0132$.ibc.co"
    "re.connection.v1.CounterpartyB\004\310\336\037\000R\014cou"
    "nterparty\022!\n\014delay_period\030\005 \001(\004R\013delayPe"
    "riod:\004\210\240\037\000\"\256\002\n\024IdentifiedConnection\022\016\n\002i"
    "d\030\001 \001(\tR\002id\022\033\n\tclient_id\030\002 \001(\tR\010clientId"
    "\022;\n\010versions\030\003 \003(\0132\037.ibc.core.connection"
    ".v1.VersionR\010versions\0223\n\005state\030\004 \001(\0162\035.i"
    "bc.core.connection.v1.StateR\005state\022N\n\014co"
    "unterparty\030\005 \001(\0132$.ibc.core.connection.v"
    "1.CounterpartyB\004\310\336\037\000R\014counterparty\022!\n\014de"
    "lay_period\030\006 \001(\004R\013delayPeriod:\004\210\240\037\000\"\232\001\n\014"
    "Counterparty\022\033\n\tclient_id\030\001 \001(\tR\010clientI"
    "d\022#\n\rconnection_id\030\002 \001(\tR\014connectionId\022B"
    "\n\006prefix\030\003 \001(\0132$.ibc.core.commitment.v1."
    "MerklePrefixB\004\310\336\037\000R\006prefix:\004\210\240\037\000\"#\n\013Clie"
    "ntPaths\022\024\n\005paths\030\001 \003(\tR\005paths\"D\n\017Connect"
    "ionPaths\022\033\n\tclient_id\030\001 \001(\tR\010clientId\022\024\n"
    "\005paths\030\002 \003(\tR\005paths\"K\n\007Version\022\036\n\nidenti"
    "fier\030\001 \001(\tR\nidentifier\022\032\n\010features\030\002 \003(\t"
    "R\010features:\004\210\240\037\000\"F\n\006Params\022<\n\033max_expect"
    "ed_time_per_block\030\001 \001(\004R\027maxExpectedTime"
    "PerBlock*\231\001\n\005State\0226\n\037STATE_UNINITIALIZE"
    "D_UNSPECIFIED\020\000\032\021\212\235 \rUNINITIALIZED\022\030\n\nST"
    "ATE_INIT\020\001\032\010\212\235 \004INIT\022\036\n\rSTATE_TRYOPEN\020\002\032"
    "\013\212\235 \007TRYOPEN\022\030\n\nSTATE_OPEN\020\003\032\010\212\235 \004OPEN\032\004"
    "\210\243\036\000B\346\001\n\032com.ibc.core.connection.v1B\017Con"
    "nectionProtoP\001Z<github.com/cosmos/ibc-go"
    "/v7/modules/core/03-connection/types\242\002\003I"
    "CC\252\002\026Ibc.Core.Connection.V1\312\002\026Ibc\\Core\\C"
    "onnection\\V1\342\002\"Ibc\\Core\\Connection\\V1\\GP"
    "BMetadata\352\002\031Ibc::Core::Connection::V1b\006p"
    "roto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_ibc_2fcore_2fcommitment_2fv1_2fcommitment_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto = {
    false,
    false,
    1525,
    descriptor_table_protodef_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
    "ibc/core/connection/v1/connection.proto",
    &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
    descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto(&descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto);
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto);
  return file_level_enum_descriptors_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[0];
}
bool State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class ConnectionEnd::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionEnd>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ConnectionEnd, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::Counterparty& counterparty(const ConnectionEnd* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::connection::v1::Counterparty&
ConnectionEnd::_Internal::counterparty(const ConnectionEnd* msg) {
  return *msg->_impl_.counterparty_;
}
ConnectionEnd::ConnectionEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.ConnectionEnd)
}
ConnectionEnd::ConnectionEnd(const ConnectionEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionEnd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.delay_period_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::connection::v1::Counterparty(*from._impl_.counterparty_);
  }
  ::memcpy(&_impl_.delay_period_, &from._impl_.delay_period_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.delay_period_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.ConnectionEnd)
}

inline void ConnectionEnd::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){arena}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.delay_period_) { ::uint64_t{0u} }

    , decltype(_impl_.state_) { 0 }

  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionEnd::~ConnectionEnd() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.ConnectionEnd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionEnd::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_versions()->~RepeatedPtrField();
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counterparty_;
}

void ConnectionEnd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.ConnectionEnd)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_versions()->Clear();
  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.counterparty_ != nullptr);
    _impl_.counterparty_->Clear();
  }
  ::memset(&_impl_.delay_period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.delay_period_)) + sizeof(_impl_.state_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionEnd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.ConnectionEnd.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.connection.v1.Version versions = 2 [json_name = "versions"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.State state = 3 [json_name = "state"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ibc::core::connection::v1::State>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 delay_period = 5 [json_name = "delayPeriod"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.delay_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectionEnd::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.ConnectionEnd)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.ConnectionEnd.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .ibc.core.connection.v1.Version versions = 2 [json_name = "versions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ibc.core.connection.v1.State state = 3 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_delay_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.ConnectionEnd)
  return target;
}

::size_t ConnectionEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.ConnectionEnd)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.connection.v1.Version versions = 2 [json_name = "versions"];
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->_internal_versions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counterparty_);
  }

  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_delay_period());
  }

  // .ibc.core.connection.v1.State state = 3 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionEnd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionEnd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionEnd::GetClassData() const { return &_class_data_; }


void ConnectionEnd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionEnd*>(&to_msg);
  auto& from = static_cast<const ConnectionEnd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.ConnectionEnd)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_versions()->MergeFrom(from._internal_versions());
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_counterparty()->::ibc::core::connection::v1::Counterparty::MergeFrom(
        from._internal_counterparty());
  }
  if (from._internal_delay_period() != 0) {
    _this->_internal_set_delay_period(from._internal_delay_period());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionEnd::CopyFrom(const ConnectionEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.ConnectionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionEnd::IsInitialized() const {
  return true;
}

void ConnectionEnd::InternalSwap(ConnectionEnd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_versions()->InternalSwap(other->_internal_mutable_versions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectionEnd, _impl_.state_)
      + sizeof(ConnectionEnd::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(ConnectionEnd, _impl_.counterparty_)>(
          reinterpret_cast<char*>(&_impl_.counterparty_),
          reinterpret_cast<char*>(&other->_impl_.counterparty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionEnd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[0]);
}
// ===================================================================

class IdentifiedConnection::_Internal {
 public:
  using HasBits = decltype(std::declval<IdentifiedConnection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IdentifiedConnection, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::Counterparty& counterparty(const IdentifiedConnection* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::connection::v1::Counterparty&
IdentifiedConnection::_Internal::counterparty(const IdentifiedConnection* msg) {
  return *msg->_impl_.counterparty_;
}
IdentifiedConnection::IdentifiedConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.IdentifiedConnection)
}
IdentifiedConnection::IdentifiedConnection(const IdentifiedConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdentifiedConnection* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){from._impl_.versions_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.delay_period_) {}

    , decltype(_impl_.state_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::connection::v1::Counterparty(*from._impl_.counterparty_);
  }
  ::memcpy(&_impl_.delay_period_, &from._impl_.delay_period_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.state_) -
    reinterpret_cast<char*>(&_impl_.delay_period_)) + sizeof(_impl_.state_));
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.IdentifiedConnection)
}

inline void IdentifiedConnection::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.versions_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.delay_period_) { ::uint64_t{0u} }

    , decltype(_impl_.state_) { 0 }

  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IdentifiedConnection::~IdentifiedConnection() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.IdentifiedConnection)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdentifiedConnection::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_versions()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.client_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counterparty_;
}

void IdentifiedConnection::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdentifiedConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.IdentifiedConnection)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_versions()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.counterparty_ != nullptr);
    _impl_.counterparty_->Clear();
  }
  ::memset(&_impl_.delay_period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.state_) -
      reinterpret_cast<char*>(&_impl_.delay_period_)) + sizeof(_impl_.state_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdentifiedConnection::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.IdentifiedConnection.id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string client_id = 2 [json_name = "clientId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.IdentifiedConnection.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.connection.v1.Version versions = 3 [json_name = "versions"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.State state = 4 [json_name = "state"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ibc::core::connection::v1::State>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Counterparty counterparty = 5 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 delay_period = 6 [json_name = "delayPeriod"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.delay_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IdentifiedConnection::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.IdentifiedConnection)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.IdentifiedConnection.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.IdentifiedConnection.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .ibc.core.connection.v1.Version versions = 3 [json_name = "versions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ibc.core.connection.v1.State state = 4 [json_name = "state"];
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_state(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.Counterparty counterparty = 5 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // uint64 delay_period = 6 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_delay_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.IdentifiedConnection)
  return target;
}

::size_t IdentifiedConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.IdentifiedConnection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.connection.v1.Version versions = 3 [json_name = "versions"];
  total_size += 1UL * this->_internal_versions_size();
  for (const auto& msg : this->_internal_versions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string client_id = 2 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // .ibc.core.connection.v1.Counterparty counterparty = 5 [json_name = "counterparty", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.counterparty_);
  }

  // uint64 delay_period = 6 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_delay_period());
  }

  // .ibc.core.connection.v1.State state = 4 [json_name = "state"];
  if (this->_internal_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdentifiedConnection::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdentifiedConnection::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdentifiedConnection::GetClassData() const { return &_class_data_; }


void IdentifiedConnection::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdentifiedConnection*>(&to_msg);
  auto& from = static_cast<const IdentifiedConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.IdentifiedConnection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_versions()->MergeFrom(from._internal_versions());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_counterparty()->::ibc::core::connection::v1::Counterparty::MergeFrom(
        from._internal_counterparty());
  }
  if (from._internal_delay_period() != 0) {
    _this->_internal_set_delay_period(from._internal_delay_period());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdentifiedConnection::CopyFrom(const IdentifiedConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.IdentifiedConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifiedConnection::IsInitialized() const {
  return true;
}

void IdentifiedConnection::InternalSwap(IdentifiedConnection* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_versions()->InternalSwap(other->_internal_mutable_versions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IdentifiedConnection, _impl_.state_)
      + sizeof(IdentifiedConnection::_impl_.state_)
      - PROTOBUF_FIELD_OFFSET(IdentifiedConnection, _impl_.counterparty_)>(
          reinterpret_cast<char*>(&_impl_.counterparty_),
          reinterpret_cast<char*>(&other->_impl_.counterparty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentifiedConnection::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[1]);
}
// ===================================================================

class Counterparty::_Internal {
 public:
  using HasBits = decltype(std::declval<Counterparty>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Counterparty, _impl_._has_bits_);
  static const ::ibc::core::commitment::v1::MerklePrefix& prefix(const Counterparty* msg);
  static void set_has_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::commitment::v1::MerklePrefix&
Counterparty::_Internal::prefix(const Counterparty* msg) {
  return *msg->_impl_.prefix_;
}
void Counterparty::clear_prefix() {
  if (_impl_.prefix_ != nullptr) _impl_.prefix_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Counterparty::Counterparty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.Counterparty)
}
Counterparty::Counterparty(const Counterparty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Counterparty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.prefix_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.prefix_ = new ::ibc::core::commitment::v1::MerklePrefix(*from._impl_.prefix_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.Counterparty)
}

inline void Counterparty::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.prefix_){nullptr}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Counterparty::~Counterparty() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.Counterparty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Counterparty::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  _impl_.connection_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.prefix_;
}

void Counterparty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Counterparty::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.Counterparty)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  _impl_.connection_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.prefix_ != nullptr);
    _impl_.prefix_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Counterparty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.Counterparty.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string connection_id = 2 [json_name = "connectionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.Counterparty.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prefix(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Counterparty::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.Counterparty)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.Counterparty.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string connection_id = 2 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.Counterparty.connection_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prefix(this),
        _Internal::prefix(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.Counterparty)
  return target;
}

::size_t Counterparty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.Counterparty)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string connection_id = 2 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // .ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prefix_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Counterparty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Counterparty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Counterparty::GetClassData() const { return &_class_data_; }


void Counterparty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Counterparty*>(&to_msg);
  auto& from = static_cast<const Counterparty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.Counterparty)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_prefix()->::ibc::core::commitment::v1::MerklePrefix::MergeFrom(
        from._internal_prefix());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Counterparty::CopyFrom(const Counterparty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.Counterparty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Counterparty::IsInitialized() const {
  return true;
}

void Counterparty::InternalSwap(Counterparty* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  swap(_impl_.prefix_, other->_impl_.prefix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Counterparty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[2]);
}
// ===================================================================

class ClientPaths::_Internal {
 public:
};

ClientPaths::ClientPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.ClientPaths)
}
ClientPaths::ClientPaths(const ClientPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientPaths* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){from._impl_.paths_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.ClientPaths)
}

inline void ClientPaths::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientPaths::~ClientPaths() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.ClientPaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientPaths::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_paths()->~RepeatedPtrField();
}

void ClientPaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.ClientPaths)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_paths()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientPaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string paths = 1 [json_name = "paths"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.ClientPaths.paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientPaths::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.ClientPaths)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string paths = 1 [json_name = "paths"];
  for (int i = 0, n = this->_internal_paths_size(); i < n; ++i) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.ClientPaths.paths");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.ClientPaths)
  return target;
}

::size_t ClientPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.ClientPaths)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 1 [json_name = "paths"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_paths().size());
  for (int i = 0, n = _internal_paths().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_paths().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientPaths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientPaths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientPaths::GetClassData() const { return &_class_data_; }


void ClientPaths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientPaths*>(&to_msg);
  auto& from = static_cast<const ClientPaths&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.ClientPaths)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_paths()->MergeFrom(from._internal_paths());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientPaths::CopyFrom(const ClientPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.ClientPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPaths::IsInitialized() const {
  return true;
}

void ClientPaths::InternalSwap(ClientPaths* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_paths()->InternalSwap(
      other->_internal_mutable_paths());
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientPaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[3]);
}
// ===================================================================

class ConnectionPaths::_Internal {
 public:
};

ConnectionPaths::ConnectionPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.ConnectionPaths)
}
ConnectionPaths::ConnectionPaths(const ConnectionPaths& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConnectionPaths* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){from._impl_.paths_}
    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.ConnectionPaths)
}

inline void ConnectionPaths::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.paths_){arena}
    , decltype(_impl_.client_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionPaths::~ConnectionPaths() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.ConnectionPaths)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConnectionPaths::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_paths()->~RepeatedPtrField();
  _impl_.client_id_.Destroy();
}

void ConnectionPaths::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConnectionPaths::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.ConnectionPaths)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_paths()->Clear();
  _impl_.client_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionPaths::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.ConnectionPaths.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string paths = 2 [json_name = "paths"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.ConnectionPaths.paths"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ConnectionPaths::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.ConnectionPaths)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.ConnectionPaths.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string paths = 2 [json_name = "paths"];
  for (int i = 0, n = this->_internal_paths_size(); i < n; ++i) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.ConnectionPaths.paths");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.ConnectionPaths)
  return target;
}

::size_t ConnectionPaths::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.ConnectionPaths)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 2 [json_name = "paths"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_paths().size());
  for (int i = 0, n = _internal_paths().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_paths().Get(i));
  }

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionPaths::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConnectionPaths::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionPaths::GetClassData() const { return &_class_data_; }


void ConnectionPaths::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConnectionPaths*>(&to_msg);
  auto& from = static_cast<const ConnectionPaths&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.ConnectionPaths)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_paths()->MergeFrom(from._internal_paths());
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionPaths::CopyFrom(const ConnectionPaths& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.ConnectionPaths)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionPaths::IsInitialized() const {
  return true;
}

void ConnectionPaths::InternalSwap(ConnectionPaths* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_paths()->InternalSwap(
      other->_internal_mutable_paths());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionPaths::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[4]);
}
// ===================================================================

class Version::_Internal {
 public:
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Version* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){from._impl_.features_}
    , decltype(_impl_.identifier_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.Version)
}

inline void Version::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.features_){arena}
    , decltype(_impl_.identifier_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.Version)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Version::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_features()->~RepeatedPtrField();
  _impl_.identifier_.Destroy();
}

void Version::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.Version)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_features()->Clear();
  _impl_.identifier_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string identifier = 1 [json_name = "identifier"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.Version.identifier"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string features = 2 [json_name = "features"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_features();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.Version.features"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Version::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.Version)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    const std::string& _s = this->_internal_identifier();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.Version.identifier");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string features = 2 [json_name = "features"];
  for (int i = 0, n = this->_internal_features_size(); i < n; ++i) {
    const auto& s = this->_internal_features(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.Version.features");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.Version)
  return target;
}

::size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.Version)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string features = 2 [json_name = "features"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_features().size());
  for (int i = 0, n = _internal_features().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_features().Get(i));
  }

  // string identifier = 1 [json_name = "identifier"];
  if (!this->_internal_identifier().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_identifier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Version::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Version::GetClassData() const { return &_class_data_; }


void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Version*>(&to_msg);
  auto& from = static_cast<const Version&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.Version)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_features()->MergeFrom(from._internal_features());
  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_features()->InternalSwap(
      other->_internal_mutable_features());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identifier_, lhs_arena,
                                       &other->_impl_.identifier_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[5]);
}
// ===================================================================

class Params::_Internal {
 public:
};

Params::Params(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.Params)
}
Params::Params(const Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.Params)
}

inline void Params::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.max_expected_time_per_block_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.Params)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Params::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Params::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.Params)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_expected_time_per_block_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Params::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 max_expected_time_per_block = 1 [json_name = "maxExpectedTimePerBlock"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.max_expected_time_per_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Params::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.Params)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 max_expected_time_per_block = 1 [json_name = "maxExpectedTimePerBlock"];
  if (this->_internal_max_expected_time_per_block() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_max_expected_time_per_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.Params)
  return target;
}

::size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.Params)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 max_expected_time_per_block = 1 [json_name = "maxExpectedTimePerBlock"];
  if (this->_internal_max_expected_time_per_block() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_max_expected_time_per_block());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Params::GetClassData() const { return &_class_data_; }


void Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Params*>(&to_msg);
  auto& from = static_cast<const Params&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.Params)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_max_expected_time_per_block() != 0) {
    _this->_internal_set_max_expected_time_per_block(from._internal_max_expected_time_per_block());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  return true;
}

void Params::InternalSwap(Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.max_expected_time_per_block_, other->_impl_.max_expected_time_per_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Params::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::ConnectionEnd*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::ConnectionEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::ConnectionEnd >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::IdentifiedConnection*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::IdentifiedConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::IdentifiedConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::Counterparty*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::Counterparty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::Counterparty >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::ClientPaths*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::ClientPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::ClientPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::ConnectionPaths*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::ConnectionPaths >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::ConnectionPaths >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::Version*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::Params*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::Params >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

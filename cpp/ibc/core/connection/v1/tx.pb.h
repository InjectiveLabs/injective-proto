// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/connection/v1/tx.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "cosmos/msg/v1/msg.pb.h"
#include "google/protobuf/any.pb.h"
#include "ibc/core/client/v1/client.pb.h"
#include "ibc/core/connection/v1/connection.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
class MsgConnectionOpenAck;
struct MsgConnectionOpenAckDefaultTypeInternal;
extern MsgConnectionOpenAckDefaultTypeInternal _MsgConnectionOpenAck_default_instance_;
class MsgConnectionOpenAckResponse;
struct MsgConnectionOpenAckResponseDefaultTypeInternal;
extern MsgConnectionOpenAckResponseDefaultTypeInternal _MsgConnectionOpenAckResponse_default_instance_;
class MsgConnectionOpenConfirm;
struct MsgConnectionOpenConfirmDefaultTypeInternal;
extern MsgConnectionOpenConfirmDefaultTypeInternal _MsgConnectionOpenConfirm_default_instance_;
class MsgConnectionOpenConfirmResponse;
struct MsgConnectionOpenConfirmResponseDefaultTypeInternal;
extern MsgConnectionOpenConfirmResponseDefaultTypeInternal _MsgConnectionOpenConfirmResponse_default_instance_;
class MsgConnectionOpenInit;
struct MsgConnectionOpenInitDefaultTypeInternal;
extern MsgConnectionOpenInitDefaultTypeInternal _MsgConnectionOpenInit_default_instance_;
class MsgConnectionOpenInitResponse;
struct MsgConnectionOpenInitResponseDefaultTypeInternal;
extern MsgConnectionOpenInitResponseDefaultTypeInternal _MsgConnectionOpenInitResponse_default_instance_;
class MsgConnectionOpenTry;
struct MsgConnectionOpenTryDefaultTypeInternal;
extern MsgConnectionOpenTryDefaultTypeInternal _MsgConnectionOpenTry_default_instance_;
class MsgConnectionOpenTryResponse;
struct MsgConnectionOpenTryResponseDefaultTypeInternal;
extern MsgConnectionOpenTryResponseDefaultTypeInternal _MsgConnectionOpenTryResponse_default_instance_;
class MsgUpdateParams;
struct MsgUpdateParamsDefaultTypeInternal;
extern MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
class MsgUpdateParamsResponse;
struct MsgUpdateParamsResponseDefaultTypeInternal;
extern MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::core::connection::v1::MsgConnectionOpenAck* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenAck>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenAckResponse* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenAckResponse>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenConfirm* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenConfirm>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenInit* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenInit>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenInitResponse* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenInitResponse>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenTry* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenTry>(Arena*);
template <>
::ibc::core::connection::v1::MsgConnectionOpenTryResponse* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgConnectionOpenTryResponse>(Arena*);
template <>
::ibc::core::connection::v1::MsgUpdateParams* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgUpdateParams>(Arena*);
template <>
::ibc::core::connection::v1::MsgUpdateParamsResponse* Arena::CreateMaybeMessage<::ibc::core::connection::v1::MsgUpdateParamsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace core {
namespace connection {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class MsgConnectionOpenInit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenInit) */ {
 public:
  inline MsgConnectionOpenInit() : MsgConnectionOpenInit(nullptr) {}
  ~MsgConnectionOpenInit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenInit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenInit(const MsgConnectionOpenInit& from);
  MsgConnectionOpenInit(MsgConnectionOpenInit&& from) noexcept
    : MsgConnectionOpenInit() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenInit& operator=(const MsgConnectionOpenInit& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenInit& operator=(MsgConnectionOpenInit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenInit& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenInit* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenInit*>(
               &_MsgConnectionOpenInit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgConnectionOpenInit& a, MsgConnectionOpenInit& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenInit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenInit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenInit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenInit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgConnectionOpenInit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgConnectionOpenInit& from) {
    MsgConnectionOpenInit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgConnectionOpenInit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenInit";
  }
  protected:
  explicit MsgConnectionOpenInit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kSignerFieldNumber = 5,
    kCounterpartyFieldNumber = 2,
    kVersionFieldNumber = 3,
    kDelayPeriodFieldNumber = 4,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string signer = 5 [json_name = "signer"];
  void clear_signer() ;
  const std::string& signer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signer(Arg_&& arg, Args_... args);
  std::string* mutable_signer();
  PROTOBUF_NODISCARD std::string* release_signer();
  void set_allocated_signer(std::string* ptr);

  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(
      const std::string& value);
  std::string* _internal_mutable_signer();

  public:
  // .ibc.core.connection.v1.Counterparty counterparty = 2 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::connection::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Counterparty* release_counterparty();
  ::ibc::core::connection::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty);
  private:
  const ::ibc::core::connection::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::connection::v1::Counterparty* _internal_mutable_counterparty();
  public:
  void unsafe_arena_set_allocated_counterparty(
      ::ibc::core::connection::v1::Counterparty* counterparty);
  ::ibc::core::connection::v1::Counterparty* unsafe_arena_release_counterparty();
  // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const ::ibc::core::connection::v1::Version& version() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Version* release_version();
  ::ibc::core::connection::v1::Version* mutable_version();
  void set_allocated_version(::ibc::core::connection::v1::Version* version);
  private:
  const ::ibc::core::connection::v1::Version& _internal_version() const;
  ::ibc::core::connection::v1::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::ibc::core::connection::v1::Version* version);
  ::ibc::core::connection::v1::Version* unsafe_arena_release_version();
  // uint64 delay_period = 4 [json_name = "delayPeriod"];
  void clear_delay_period() ;
  ::uint64_t delay_period() const;
  void set_delay_period(::uint64_t value);

  private:
  ::uint64_t _internal_delay_period() const;
  void _internal_set_delay_period(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenInit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
    ::ibc::core::connection::v1::Counterparty* counterparty_;
    ::ibc::core::connection::v1::Version* version_;
    ::uint64_t delay_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenInitResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenInitResponse) */ {
 public:
  inline MsgConnectionOpenInitResponse() : MsgConnectionOpenInitResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenInitResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenInitResponse(const MsgConnectionOpenInitResponse& from);
  MsgConnectionOpenInitResponse(MsgConnectionOpenInitResponse&& from) noexcept
    : MsgConnectionOpenInitResponse() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenInitResponse& operator=(const MsgConnectionOpenInitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenInitResponse& operator=(MsgConnectionOpenInitResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenInitResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenInitResponse* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenInitResponse*>(
               &_MsgConnectionOpenInitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MsgConnectionOpenInitResponse& a, MsgConnectionOpenInitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenInitResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenInitResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenInitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenInitResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgConnectionOpenInitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgConnectionOpenInitResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenInitResponse";
  }
  protected:
  explicit MsgConnectionOpenInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenInitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenTry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenTry) */ {
 public:
  inline MsgConnectionOpenTry() : MsgConnectionOpenTry(nullptr) {}
  ~MsgConnectionOpenTry() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenTry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenTry(const MsgConnectionOpenTry& from);
  MsgConnectionOpenTry(MsgConnectionOpenTry&& from) noexcept
    : MsgConnectionOpenTry() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenTry& operator=(const MsgConnectionOpenTry& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenTry& operator=(MsgConnectionOpenTry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenTry& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenTry* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenTry*>(
               &_MsgConnectionOpenTry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MsgConnectionOpenTry& a, MsgConnectionOpenTry& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenTry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenTry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenTry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenTry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgConnectionOpenTry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgConnectionOpenTry& from) {
    MsgConnectionOpenTry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgConnectionOpenTry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenTry";
  }
  protected:
  explicit MsgConnectionOpenTry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCounterpartyVersionsFieldNumber = 6,
    kClientIdFieldNumber = 1,
    kPreviousConnectionIdFieldNumber = 2,
    kProofInitFieldNumber = 8,
    kProofClientFieldNumber = 9,
    kProofConsensusFieldNumber = 10,
    kSignerFieldNumber = 12,
    kHostConsensusStateProofFieldNumber = 13,
    kClientStateFieldNumber = 3,
    kCounterpartyFieldNumber = 4,
    kProofHeightFieldNumber = 7,
    kConsensusHeightFieldNumber = 11,
    kDelayPeriodFieldNumber = 5,
  };
  // repeated .ibc.core.connection.v1.Version counterparty_versions = 6 [json_name = "counterpartyVersions"];
  int counterparty_versions_size() const;
  private:
  int _internal_counterparty_versions_size() const;

  public:
  void clear_counterparty_versions() ;
  ::ibc::core::connection::v1::Version* mutable_counterparty_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
      mutable_counterparty_versions();
  private:
  const ::ibc::core::connection::v1::Version& _internal_counterparty_versions(int index) const;
  ::ibc::core::connection::v1::Version* _internal_add_counterparty_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>& _internal_counterparty_versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>* _internal_mutable_counterparty_versions();
  public:
  const ::ibc::core::connection::v1::Version& counterparty_versions(int index) const;
  ::ibc::core::connection::v1::Version* add_counterparty_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
      counterparty_versions() const;
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string previous_connection_id = 2 [json_name = "previousConnectionId", deprecated = true];
  [[deprecated]]  void clear_previous_connection_id() ;
  [[deprecated]] const std::string& previous_connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_previous_connection_id(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_previous_connection_id();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_previous_connection_id();
  [[deprecated]] void set_allocated_previous_connection_id(std::string* ptr);

  private:
  const std::string& _internal_previous_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_previous_connection_id(
      const std::string& value);
  std::string* _internal_mutable_previous_connection_id();

  public:
  // bytes proof_init = 8 [json_name = "proofInit"];
  void clear_proof_init() ;
  const std::string& proof_init() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_init(Arg_&& arg, Args_... args);
  std::string* mutable_proof_init();
  PROTOBUF_NODISCARD std::string* release_proof_init();
  void set_allocated_proof_init(std::string* ptr);

  private:
  const std::string& _internal_proof_init() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_init(
      const std::string& value);
  std::string* _internal_mutable_proof_init();

  public:
  // bytes proof_client = 9 [json_name = "proofClient"];
  void clear_proof_client() ;
  const std::string& proof_client() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_client(Arg_&& arg, Args_... args);
  std::string* mutable_proof_client();
  PROTOBUF_NODISCARD std::string* release_proof_client();
  void set_allocated_proof_client(std::string* ptr);

  private:
  const std::string& _internal_proof_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_client(
      const std::string& value);
  std::string* _internal_mutable_proof_client();

  public:
  // bytes proof_consensus = 10 [json_name = "proofConsensus"];
  void clear_proof_consensus() ;
  const std::string& proof_consensus() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_consensus(Arg_&& arg, Args_... args);
  std::string* mutable_proof_consensus();
  PROTOBUF_NODISCARD std::string* release_proof_consensus();
  void set_allocated_proof_consensus(std::string* ptr);

  private:
  const std::string& _internal_proof_consensus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_consensus(
      const std::string& value);
  std::string* _internal_mutable_proof_consensus();

  public:
  // string signer = 12 [json_name = "signer"];
  void clear_signer() ;
  const std::string& signer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signer(Arg_&& arg, Args_... args);
  std::string* mutable_signer();
  PROTOBUF_NODISCARD std::string* release_signer();
  void set_allocated_signer(std::string* ptr);

  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(
      const std::string& value);
  std::string* _internal_mutable_signer();

  public:
  // bytes host_consensus_state_proof = 13 [json_name = "hostConsensusStateProof"];
  void clear_host_consensus_state_proof() ;
  const std::string& host_consensus_state_proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_consensus_state_proof(Arg_&& arg, Args_... args);
  std::string* mutable_host_consensus_state_proof();
  PROTOBUF_NODISCARD std::string* release_host_consensus_state_proof();
  void set_allocated_host_consensus_state_proof(std::string* ptr);

  private:
  const std::string& _internal_host_consensus_state_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_consensus_state_proof(
      const std::string& value);
  std::string* _internal_mutable_host_consensus_state_proof();

  public:
  // .google.protobuf.Any client_state = 3 [json_name = "clientState"];
  bool has_client_state() const;
  void clear_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_client_state();
  void set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_client_state();
  public:
  void unsafe_arena_set_allocated_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_client_state();
  // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::connection::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Counterparty* release_counterparty();
  ::ibc::core::connection::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty);
  private:
  const ::ibc::core::connection::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::connection::v1::Counterparty* _internal_mutable_counterparty();
  public:
  void unsafe_arena_set_allocated_counterparty(
      ::ibc::core::connection::v1::Counterparty* counterparty);
  ::ibc::core::connection::v1::Counterparty* unsafe_arena_release_counterparty();
  // .ibc.core.client.v1.Height proof_height = 7 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // .ibc.core.client.v1.Height consensus_height = 11 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
  bool has_consensus_height() const;
  void clear_consensus_height() ;
  const ::ibc::core::client::v1::Height& consensus_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_consensus_height();
  ::ibc::core::client::v1::Height* mutable_consensus_height();
  void set_allocated_consensus_height(::ibc::core::client::v1::Height* consensus_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_consensus_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_consensus_height();
  public:
  void unsafe_arena_set_allocated_consensus_height(
      ::ibc::core::client::v1::Height* consensus_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_consensus_height();
  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  void clear_delay_period() ;
  ::uint64_t delay_period() const;
  void set_delay_period(::uint64_t value);

  private:
  ::uint64_t _internal_delay_period() const;
  void _internal_set_delay_period(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenTry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version > counterparty_versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previous_connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_init_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_consensus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_consensus_state_proof_;
    ::PROTOBUF_NAMESPACE_ID::Any* client_state_;
    ::ibc::core::connection::v1::Counterparty* counterparty_;
    ::ibc::core::client::v1::Height* proof_height_;
    ::ibc::core::client::v1::Height* consensus_height_;
    ::uint64_t delay_period_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenTryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenTryResponse) */ {
 public:
  inline MsgConnectionOpenTryResponse() : MsgConnectionOpenTryResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenTryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenTryResponse(const MsgConnectionOpenTryResponse& from);
  MsgConnectionOpenTryResponse(MsgConnectionOpenTryResponse&& from) noexcept
    : MsgConnectionOpenTryResponse() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenTryResponse& operator=(const MsgConnectionOpenTryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenTryResponse& operator=(MsgConnectionOpenTryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenTryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenTryResponse* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenTryResponse*>(
               &_MsgConnectionOpenTryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgConnectionOpenTryResponse& a, MsgConnectionOpenTryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenTryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenTryResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenTryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenTryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgConnectionOpenTryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgConnectionOpenTryResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenTryResponse";
  }
  protected:
  explicit MsgConnectionOpenTryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenTryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenAck) */ {
 public:
  inline MsgConnectionOpenAck() : MsgConnectionOpenAck(nullptr) {}
  ~MsgConnectionOpenAck() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenAck(const MsgConnectionOpenAck& from);
  MsgConnectionOpenAck(MsgConnectionOpenAck&& from) noexcept
    : MsgConnectionOpenAck() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenAck& operator=(const MsgConnectionOpenAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenAck& operator=(MsgConnectionOpenAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenAck* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenAck*>(
               &_MsgConnectionOpenAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MsgConnectionOpenAck& a, MsgConnectionOpenAck& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenAck* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgConnectionOpenAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgConnectionOpenAck& from) {
    MsgConnectionOpenAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgConnectionOpenAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenAck";
  }
  protected:
  explicit MsgConnectionOpenAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kCounterpartyConnectionIdFieldNumber = 2,
    kProofTryFieldNumber = 6,
    kProofClientFieldNumber = 7,
    kProofConsensusFieldNumber = 8,
    kSignerFieldNumber = 10,
    kHostConsensusStateProofFieldNumber = 11,
    kVersionFieldNumber = 3,
    kClientStateFieldNumber = 4,
    kProofHeightFieldNumber = 5,
    kConsensusHeightFieldNumber = 9,
  };
  // string connection_id = 1 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // string counterparty_connection_id = 2 [json_name = "counterpartyConnectionId"];
  void clear_counterparty_connection_id() ;
  const std::string& counterparty_connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_counterparty_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_counterparty_connection_id();
  PROTOBUF_NODISCARD std::string* release_counterparty_connection_id();
  void set_allocated_counterparty_connection_id(std::string* ptr);

  private:
  const std::string& _internal_counterparty_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_counterparty_connection_id(
      const std::string& value);
  std::string* _internal_mutable_counterparty_connection_id();

  public:
  // bytes proof_try = 6 [json_name = "proofTry"];
  void clear_proof_try() ;
  const std::string& proof_try() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_try(Arg_&& arg, Args_... args);
  std::string* mutable_proof_try();
  PROTOBUF_NODISCARD std::string* release_proof_try();
  void set_allocated_proof_try(std::string* ptr);

  private:
  const std::string& _internal_proof_try() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_try(
      const std::string& value);
  std::string* _internal_mutable_proof_try();

  public:
  // bytes proof_client = 7 [json_name = "proofClient"];
  void clear_proof_client() ;
  const std::string& proof_client() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_client(Arg_&& arg, Args_... args);
  std::string* mutable_proof_client();
  PROTOBUF_NODISCARD std::string* release_proof_client();
  void set_allocated_proof_client(std::string* ptr);

  private:
  const std::string& _internal_proof_client() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_client(
      const std::string& value);
  std::string* _internal_mutable_proof_client();

  public:
  // bytes proof_consensus = 8 [json_name = "proofConsensus"];
  void clear_proof_consensus() ;
  const std::string& proof_consensus() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_consensus(Arg_&& arg, Args_... args);
  std::string* mutable_proof_consensus();
  PROTOBUF_NODISCARD std::string* release_proof_consensus();
  void set_allocated_proof_consensus(std::string* ptr);

  private:
  const std::string& _internal_proof_consensus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_consensus(
      const std::string& value);
  std::string* _internal_mutable_proof_consensus();

  public:
  // string signer = 10 [json_name = "signer"];
  void clear_signer() ;
  const std::string& signer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signer(Arg_&& arg, Args_... args);
  std::string* mutable_signer();
  PROTOBUF_NODISCARD std::string* release_signer();
  void set_allocated_signer(std::string* ptr);

  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(
      const std::string& value);
  std::string* _internal_mutable_signer();

  public:
  // bytes host_consensus_state_proof = 11 [json_name = "hostConsensusStateProof"];
  void clear_host_consensus_state_proof() ;
  const std::string& host_consensus_state_proof() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host_consensus_state_proof(Arg_&& arg, Args_... args);
  std::string* mutable_host_consensus_state_proof();
  PROTOBUF_NODISCARD std::string* release_host_consensus_state_proof();
  void set_allocated_host_consensus_state_proof(std::string* ptr);

  private:
  const std::string& _internal_host_consensus_state_proof() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_consensus_state_proof(
      const std::string& value);
  std::string* _internal_mutable_host_consensus_state_proof();

  public:
  // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const ::ibc::core::connection::v1::Version& version() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Version* release_version();
  ::ibc::core::connection::v1::Version* mutable_version();
  void set_allocated_version(::ibc::core::connection::v1::Version* version);
  private:
  const ::ibc::core::connection::v1::Version& _internal_version() const;
  ::ibc::core::connection::v1::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::ibc::core::connection::v1::Version* version);
  ::ibc::core::connection::v1::Version* unsafe_arena_release_version();
  // .google.protobuf.Any client_state = 4 [json_name = "clientState"];
  bool has_client_state() const;
  void clear_client_state() ;
  const ::PROTOBUF_NAMESPACE_ID::Any& client_state() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_client_state();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_client_state();
  void set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_client_state() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_client_state();
  public:
  void unsafe_arena_set_allocated_client_state(
      ::PROTOBUF_NAMESPACE_ID::Any* client_state);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_client_state();
  // .ibc.core.client.v1.Height proof_height = 5 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // .ibc.core.client.v1.Height consensus_height = 9 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
  bool has_consensus_height() const;
  void clear_consensus_height() ;
  const ::ibc::core::client::v1::Height& consensus_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_consensus_height();
  ::ibc::core::client::v1::Height* mutable_consensus_height();
  void set_allocated_consensus_height(::ibc::core::client::v1::Height* consensus_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_consensus_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_consensus_height();
  public:
  void unsafe_arena_set_allocated_consensus_height(
      ::ibc::core::client::v1::Height* consensus_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_consensus_height();
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr counterparty_connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_try_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_client_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_consensus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_consensus_state_proof_;
    ::ibc::core::connection::v1::Version* version_;
    ::PROTOBUF_NAMESPACE_ID::Any* client_state_;
    ::ibc::core::client::v1::Height* proof_height_;
    ::ibc::core::client::v1::Height* consensus_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenAckResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenAckResponse) */ {
 public:
  inline MsgConnectionOpenAckResponse() : MsgConnectionOpenAckResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenAckResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenAckResponse(const MsgConnectionOpenAckResponse& from);
  MsgConnectionOpenAckResponse(MsgConnectionOpenAckResponse&& from) noexcept
    : MsgConnectionOpenAckResponse() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenAckResponse& operator=(const MsgConnectionOpenAckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenAckResponse& operator=(MsgConnectionOpenAckResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenAckResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenAckResponse* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenAckResponse*>(
               &_MsgConnectionOpenAckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MsgConnectionOpenAckResponse& a, MsgConnectionOpenAckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenAckResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenAckResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenAckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenAckResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgConnectionOpenAckResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgConnectionOpenAckResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenAckResponse";
  }
  protected:
  explicit MsgConnectionOpenAckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenAckResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenConfirm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenConfirm) */ {
 public:
  inline MsgConnectionOpenConfirm() : MsgConnectionOpenConfirm(nullptr) {}
  ~MsgConnectionOpenConfirm() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenConfirm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenConfirm(const MsgConnectionOpenConfirm& from);
  MsgConnectionOpenConfirm(MsgConnectionOpenConfirm&& from) noexcept
    : MsgConnectionOpenConfirm() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenConfirm& operator=(const MsgConnectionOpenConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenConfirm& operator=(MsgConnectionOpenConfirm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenConfirm& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenConfirm* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenConfirm*>(
               &_MsgConnectionOpenConfirm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MsgConnectionOpenConfirm& a, MsgConnectionOpenConfirm& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenConfirm* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenConfirm* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenConfirm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenConfirm>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgConnectionOpenConfirm& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgConnectionOpenConfirm& from) {
    MsgConnectionOpenConfirm::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgConnectionOpenConfirm* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenConfirm";
  }
  protected:
  explicit MsgConnectionOpenConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionIdFieldNumber = 1,
    kProofAckFieldNumber = 2,
    kSignerFieldNumber = 4,
    kProofHeightFieldNumber = 3,
  };
  // string connection_id = 1 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // bytes proof_ack = 2 [json_name = "proofAck"];
  void clear_proof_ack() ;
  const std::string& proof_ack() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proof_ack(Arg_&& arg, Args_... args);
  std::string* mutable_proof_ack();
  PROTOBUF_NODISCARD std::string* release_proof_ack();
  void set_allocated_proof_ack(std::string* ptr);

  private:
  const std::string& _internal_proof_ack() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proof_ack(
      const std::string& value);
  std::string* _internal_mutable_proof_ack();

  public:
  // string signer = 4 [json_name = "signer"];
  void clear_signer() ;
  const std::string& signer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signer(Arg_&& arg, Args_... args);
  std::string* mutable_signer();
  PROTOBUF_NODISCARD std::string* release_signer();
  void set_allocated_signer(std::string* ptr);

  private:
  const std::string& _internal_signer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signer(
      const std::string& value);
  std::string* _internal_mutable_signer();

  public:
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  bool has_proof_height() const;
  void clear_proof_height() ;
  const ::ibc::core::client::v1::Height& proof_height() const;
  PROTOBUF_NODISCARD ::ibc::core::client::v1::Height* release_proof_height();
  ::ibc::core::client::v1::Height* mutable_proof_height();
  void set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height);
  private:
  const ::ibc::core::client::v1::Height& _internal_proof_height() const;
  ::ibc::core::client::v1::Height* _internal_mutable_proof_height();
  public:
  void unsafe_arena_set_allocated_proof_height(
      ::ibc::core::client::v1::Height* proof_height);
  ::ibc::core::client::v1::Height* unsafe_arena_release_proof_height();
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenConfirm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_ack_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_;
    ::ibc::core::client::v1::Height* proof_height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgConnectionOpenConfirmResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse) */ {
 public:
  inline MsgConnectionOpenConfirmResponse() : MsgConnectionOpenConfirmResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgConnectionOpenConfirmResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgConnectionOpenConfirmResponse(const MsgConnectionOpenConfirmResponse& from);
  MsgConnectionOpenConfirmResponse(MsgConnectionOpenConfirmResponse&& from) noexcept
    : MsgConnectionOpenConfirmResponse() {
    *this = ::std::move(from);
  }

  inline MsgConnectionOpenConfirmResponse& operator=(const MsgConnectionOpenConfirmResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgConnectionOpenConfirmResponse& operator=(MsgConnectionOpenConfirmResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgConnectionOpenConfirmResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgConnectionOpenConfirmResponse* internal_default_instance() {
    return reinterpret_cast<const MsgConnectionOpenConfirmResponse*>(
               &_MsgConnectionOpenConfirmResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MsgConnectionOpenConfirmResponse& a, MsgConnectionOpenConfirmResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgConnectionOpenConfirmResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgConnectionOpenConfirmResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgConnectionOpenConfirmResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgConnectionOpenConfirmResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgConnectionOpenConfirmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgConnectionOpenConfirmResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgConnectionOpenConfirmResponse";
  }
  protected:
  explicit MsgConnectionOpenConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgUpdateParams) */ {
 public:
  inline MsgUpdateParams() : MsgUpdateParams(nullptr) {}
  ~MsgUpdateParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParams(const MsgUpdateParams& from);
  MsgUpdateParams(MsgUpdateParams&& from) noexcept
    : MsgUpdateParams() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParams& operator=(const MsgUpdateParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParams& operator=(MsgUpdateParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParams* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParams*>(
               &_MsgUpdateParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MsgUpdateParams& a, MsgUpdateParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgUpdateParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgUpdateParams& from) {
    MsgUpdateParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgUpdateParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgUpdateParams";
  }
  protected:
  explicit MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorityFieldNumber = 1,
    kParamsFieldNumber = 2,
  };
  // string authority = 1 [json_name = "authority"];
  void clear_authority() ;
  const std::string& authority() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authority(Arg_&& arg, Args_... args);
  std::string* mutable_authority();
  PROTOBUF_NODISCARD std::string* release_authority();
  void set_allocated_authority(std::string* ptr);

  private:
  const std::string& _internal_authority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authority(
      const std::string& value);
  std::string* _internal_mutable_authority();

  public:
  // .ibc.core.connection.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  bool has_params() const;
  void clear_params() ;
  const ::ibc::core::connection::v1::Params& params() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Params* release_params();
  ::ibc::core::connection::v1::Params* mutable_params();
  void set_allocated_params(::ibc::core::connection::v1::Params* params);
  private:
  const ::ibc::core::connection::v1::Params& _internal_params() const;
  ::ibc::core::connection::v1::Params* _internal_mutable_params();
  public:
  void unsafe_arena_set_allocated_params(
      ::ibc::core::connection::v1::Params* params);
  ::ibc::core::connection::v1::Params* unsafe_arena_release_params();
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgUpdateParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authority_;
    ::ibc::core::connection::v1::Params* params_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};// -------------------------------------------------------------------

class MsgUpdateParamsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.MsgUpdateParamsResponse) */ {
 public:
  inline MsgUpdateParamsResponse() : MsgUpdateParamsResponse(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from);
  MsgUpdateParamsResponse(MsgUpdateParamsResponse&& from) noexcept
    : MsgUpdateParamsResponse() {
    *this = ::std::move(from);
  }

  inline MsgUpdateParamsResponse& operator=(const MsgUpdateParamsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgUpdateParamsResponse& operator=(MsgUpdateParamsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgUpdateParamsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgUpdateParamsResponse* internal_default_instance() {
    return reinterpret_cast<const MsgUpdateParamsResponse*>(
               &_MsgUpdateParamsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MsgUpdateParamsResponse& a, MsgUpdateParamsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgUpdateParamsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgUpdateParamsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgUpdateParamsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MsgUpdateParamsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.MsgUpdateParamsResponse";
  }
  protected:
  explicit MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.MsgUpdateParamsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgConnectionOpenInit

// string client_id = 1 [json_name = "clientId"];
inline void MsgConnectionOpenInit::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenInit::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenInit::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
}
inline std::string* MsgConnectionOpenInit::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
  return _s;
}
inline const std::string& MsgConnectionOpenInit::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void MsgConnectionOpenInit::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenInit::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenInit::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
  return _impl_.client_id_.Release();
}
inline void MsgConnectionOpenInit::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.client_id)
}

// .ibc.core.connection.v1.Counterparty counterparty = 2 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenInit::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::Counterparty& MsgConnectionOpenInit::_internal_counterparty() const {
  const ::ibc::core::connection::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Counterparty&>(
      ::ibc::core::connection::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::connection::v1::Counterparty& MsgConnectionOpenInit::counterparty() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
  return _internal_counterparty();
}
inline void MsgConnectionOpenInit::unsafe_arena_set_allocated_counterparty(
    ::ibc::core::connection::v1::Counterparty* counterparty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = counterparty;
  if (counterparty) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenInit::release_counterparty() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenInit::unsafe_arena_release_counterparty() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenInit::_internal_mutable_counterparty() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.counterparty_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Counterparty>(GetArenaForAllocation());
    _impl_.counterparty_ = p;
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenInit::mutable_counterparty() {
  ::ibc::core::connection::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
  return _msg;
}
inline void MsgConnectionOpenInit::set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  if (counterparty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counterparty));
    if (message_arena != submessage_arena) {
      counterparty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counterparty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.counterparty_ = counterparty;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.counterparty)
}

// .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
inline bool MsgConnectionOpenInit::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenInit::_internal_version() const {
  const ::ibc::core::connection::v1::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Version&>(
      ::ibc::core::connection::v1::_Version_default_instance_);
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenInit::version() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenInit.version)
  return _internal_version();
}
inline void MsgConnectionOpenInit::unsafe_arena_set_allocated_version(
    ::ibc::core::connection::v1::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.version)
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenInit::release_version() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::connection::v1::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenInit::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenInit.version)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::connection::v1::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenInit::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Version>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenInit::mutable_version() {
  ::ibc::core::connection::v1::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenInit.version)
  return _msg;
}
inline void MsgConnectionOpenInit::set_allocated_version(::ibc::core::connection::v1::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.version)
}

// uint64 delay_period = 4 [json_name = "delayPeriod"];
inline void MsgConnectionOpenInit::clear_delay_period() {
  _impl_.delay_period_ = ::uint64_t{0u};
}
inline ::uint64_t MsgConnectionOpenInit::delay_period() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenInit.delay_period)
  return _internal_delay_period();
}
inline void MsgConnectionOpenInit::set_delay_period(::uint64_t value) {
  _internal_set_delay_period(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenInit.delay_period)
}
inline ::uint64_t MsgConnectionOpenInit::_internal_delay_period() const {
  return _impl_.delay_period_;
}
inline void MsgConnectionOpenInit::_internal_set_delay_period(::uint64_t value) {
  ;
  _impl_.delay_period_ = value;
}

// string signer = 5 [json_name = "signer"];
inline void MsgConnectionOpenInit::clear_signer() {
  _impl_.signer_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenInit::signer() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
  return _internal_signer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenInit::set_signer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
}
inline std::string* MsgConnectionOpenInit::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
  return _s;
}
inline const std::string& MsgConnectionOpenInit::_internal_signer() const {
  return _impl_.signer_.Get();
}
inline void MsgConnectionOpenInit::_internal_set_signer(const std::string& value) {
  ;


  _impl_.signer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenInit::_internal_mutable_signer() {
  ;
  return _impl_.signer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenInit::release_signer() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
  return _impl_.signer_.Release();
}
inline void MsgConnectionOpenInit::set_allocated_signer(std::string* value) {
  _impl_.signer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signer_.IsDefault()) {
          _impl_.signer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenInit.signer)
}

// -------------------------------------------------------------------

// MsgConnectionOpenInitResponse

// -------------------------------------------------------------------

// MsgConnectionOpenTry

// string client_id = 1 [json_name = "clientId"];
inline void MsgConnectionOpenTry::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
}
inline std::string* MsgConnectionOpenTry::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
  return _impl_.client_id_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.client_id)
}

// string previous_connection_id = 2 [json_name = "previousConnectionId", deprecated = true];
inline void MsgConnectionOpenTry::clear_previous_connection_id() {
  _impl_.previous_connection_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::previous_connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
  return _internal_previous_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_previous_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.previous_connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
}
inline std::string* MsgConnectionOpenTry::mutable_previous_connection_id() {
  std::string* _s = _internal_mutable_previous_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_previous_connection_id() const {
  return _impl_.previous_connection_id_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_previous_connection_id(const std::string& value) {
  ;


  _impl_.previous_connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_previous_connection_id() {
  ;
  return _impl_.previous_connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_previous_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
  return _impl_.previous_connection_id_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_previous_connection_id(std::string* value) {
  _impl_.previous_connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.previous_connection_id_.IsDefault()) {
          _impl_.previous_connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id)
}

// .google.protobuf.Any client_state = 3 [json_name = "clientState"];
inline bool MsgConnectionOpenTry::has_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgConnectionOpenTry::_internal_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgConnectionOpenTry::client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
  return _internal_client_state();
}
inline void MsgConnectionOpenTry::unsafe_arena_set_allocated_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  _impl_.client_state_ = client_state;
  if (client_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenTry::release_client_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenTry::unsafe_arena_release_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenTry::_internal_mutable_client_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.client_state_ = p;
  }
  return _impl_.client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenTry::mutable_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
  return _msg;
}
inline void MsgConnectionOpenTry::set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  if (client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_state));
    if (message_arena != submessage_arena) {
      client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.client_state_ = client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.client_state)
}

// .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenTry::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::Counterparty& MsgConnectionOpenTry::_internal_counterparty() const {
  const ::ibc::core::connection::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Counterparty&>(
      ::ibc::core::connection::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::connection::v1::Counterparty& MsgConnectionOpenTry::counterparty() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
  return _internal_counterparty();
}
inline void MsgConnectionOpenTry::unsafe_arena_set_allocated_counterparty(
    ::ibc::core::connection::v1::Counterparty* counterparty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = counterparty;
  if (counterparty) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenTry::release_counterparty() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenTry::unsafe_arena_release_counterparty() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenTry::_internal_mutable_counterparty() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.counterparty_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Counterparty>(GetArenaForAllocation());
    _impl_.counterparty_ = p;
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::connection::v1::Counterparty* MsgConnectionOpenTry::mutable_counterparty() {
  ::ibc::core::connection::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
  return _msg;
}
inline void MsgConnectionOpenTry::set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  if (counterparty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(counterparty));
    if (message_arena != submessage_arena) {
      counterparty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counterparty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.counterparty_ = counterparty;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty)
}

// uint64 delay_period = 5 [json_name = "delayPeriod"];
inline void MsgConnectionOpenTry::clear_delay_period() {
  _impl_.delay_period_ = ::uint64_t{0u};
}
inline ::uint64_t MsgConnectionOpenTry::delay_period() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.delay_period)
  return _internal_delay_period();
}
inline void MsgConnectionOpenTry::set_delay_period(::uint64_t value) {
  _internal_set_delay_period(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.delay_period)
}
inline ::uint64_t MsgConnectionOpenTry::_internal_delay_period() const {
  return _impl_.delay_period_;
}
inline void MsgConnectionOpenTry::_internal_set_delay_period(::uint64_t value) {
  ;
  _impl_.delay_period_ = value;
}

// repeated .ibc.core.connection.v1.Version counterparty_versions = 6 [json_name = "counterpartyVersions"];
inline int MsgConnectionOpenTry::_internal_counterparty_versions_size() const {
  return _impl_.counterparty_versions_.size();
}
inline int MsgConnectionOpenTry::counterparty_versions_size() const {
  return _internal_counterparty_versions_size();
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenTry::mutable_counterparty_versions(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
  return _internal_mutable_counterparty_versions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
MsgConnectionOpenTry::mutable_counterparty_versions() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
  return _internal_mutable_counterparty_versions();
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenTry::_internal_counterparty_versions(int index) const {
  return _internal_counterparty_versions().Get(index);
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenTry::counterparty_versions(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
  return _internal_counterparty_versions(index);
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenTry::_internal_add_counterparty_versions() {
  return _internal_mutable_counterparty_versions()->Add();
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenTry::add_counterparty_versions() {
  ::ibc::core::connection::v1::Version* _add = _internal_add_counterparty_versions();
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
MsgConnectionOpenTry::counterparty_versions() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.MsgConnectionOpenTry.counterparty_versions)
  return _internal_counterparty_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>&
MsgConnectionOpenTry::_internal_counterparty_versions() const {
  return _impl_.counterparty_versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>*
MsgConnectionOpenTry::_internal_mutable_counterparty_versions() {
  return &_impl_.counterparty_versions_;
}

// .ibc.core.client.v1.Height proof_height = 7 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenTry::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenTry::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenTry::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
  return _internal_proof_height();
}
inline void MsgConnectionOpenTry::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
  return _msg;
}
inline void MsgConnectionOpenTry::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.proof_height)
}

// bytes proof_init = 8 [json_name = "proofInit"];
inline void MsgConnectionOpenTry::clear_proof_init() {
  _impl_.proof_init_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::proof_init() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
  return _internal_proof_init();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_proof_init(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_init_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
}
inline std::string* MsgConnectionOpenTry::mutable_proof_init() {
  std::string* _s = _internal_mutable_proof_init();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_proof_init() const {
  return _impl_.proof_init_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_proof_init(const std::string& value) {
  ;


  _impl_.proof_init_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_proof_init() {
  ;
  return _impl_.proof_init_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_proof_init() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
  return _impl_.proof_init_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_proof_init(std::string* value) {
  _impl_.proof_init_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_init_.IsDefault()) {
          _impl_.proof_init_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.proof_init)
}

// bytes proof_client = 9 [json_name = "proofClient"];
inline void MsgConnectionOpenTry::clear_proof_client() {
  _impl_.proof_client_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::proof_client() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
  return _internal_proof_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_proof_client(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_client_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
}
inline std::string* MsgConnectionOpenTry::mutable_proof_client() {
  std::string* _s = _internal_mutable_proof_client();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_proof_client() const {
  return _impl_.proof_client_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_proof_client(const std::string& value) {
  ;


  _impl_.proof_client_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_proof_client() {
  ;
  return _impl_.proof_client_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_proof_client() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
  return _impl_.proof_client_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_proof_client(std::string* value) {
  _impl_.proof_client_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_client_.IsDefault()) {
          _impl_.proof_client_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.proof_client)
}

// bytes proof_consensus = 10 [json_name = "proofConsensus"];
inline void MsgConnectionOpenTry::clear_proof_consensus() {
  _impl_.proof_consensus_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::proof_consensus() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
  return _internal_proof_consensus();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_proof_consensus(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_consensus_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
}
inline std::string* MsgConnectionOpenTry::mutable_proof_consensus() {
  std::string* _s = _internal_mutable_proof_consensus();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_proof_consensus() const {
  return _impl_.proof_consensus_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_proof_consensus(const std::string& value) {
  ;


  _impl_.proof_consensus_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_proof_consensus() {
  ;
  return _impl_.proof_consensus_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_proof_consensus() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
  return _impl_.proof_consensus_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_proof_consensus(std::string* value) {
  _impl_.proof_consensus_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_consensus_.IsDefault()) {
          _impl_.proof_consensus_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.proof_consensus)
}

// .ibc.core.client.v1.Height consensus_height = 11 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenTry::has_consensus_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenTry::_internal_consensus_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.consensus_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenTry::consensus_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
  return _internal_consensus_height();
}
inline void MsgConnectionOpenTry::unsafe_arena_set_allocated_consensus_height(
    ::ibc::core::client::v1::Height* consensus_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_height_);
  }
  _impl_.consensus_height_ = consensus_height;
  if (consensus_height) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::release_consensus_height() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ibc::core::client::v1::Height* temp = _impl_.consensus_height_;
  _impl_.consensus_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::unsafe_arena_release_consensus_height() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ibc::core::client::v1::Height* temp = _impl_.consensus_height_;
  _impl_.consensus_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::_internal_mutable_consensus_height() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.consensus_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.consensus_height_ = p;
  }
  return _impl_.consensus_height_;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenTry::mutable_consensus_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_consensus_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
  return _msg;
}
inline void MsgConnectionOpenTry::set_allocated_consensus_height(::ibc::core::client::v1::Height* consensus_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_height_);
  }
  if (consensus_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_height));
    if (message_arena != submessage_arena) {
      consensus_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.consensus_height_ = consensus_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.consensus_height)
}

// string signer = 12 [json_name = "signer"];
inline void MsgConnectionOpenTry::clear_signer() {
  _impl_.signer_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::signer() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
  return _internal_signer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_signer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
}
inline std::string* MsgConnectionOpenTry::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_signer() const {
  return _impl_.signer_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_signer(const std::string& value) {
  ;


  _impl_.signer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_signer() {
  ;
  return _impl_.signer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_signer() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
  return _impl_.signer_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_signer(std::string* value) {
  _impl_.signer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signer_.IsDefault()) {
          _impl_.signer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.signer)
}

// bytes host_consensus_state_proof = 13 [json_name = "hostConsensusStateProof"];
inline void MsgConnectionOpenTry::clear_host_consensus_state_proof() {
  _impl_.host_consensus_state_proof_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenTry::host_consensus_state_proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenTry.host_consensus_state_proof)
  return _internal_host_consensus_state_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenTry::set_host_consensus_state_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_consensus_state_proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenTry.host_consensus_state_proof)
}
inline std::string* MsgConnectionOpenTry::mutable_host_consensus_state_proof() {
  std::string* _s = _internal_mutable_host_consensus_state_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenTry.host_consensus_state_proof)
  return _s;
}
inline const std::string& MsgConnectionOpenTry::_internal_host_consensus_state_proof() const {
  return _impl_.host_consensus_state_proof_.Get();
}
inline void MsgConnectionOpenTry::_internal_set_host_consensus_state_proof(const std::string& value) {
  ;


  _impl_.host_consensus_state_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::_internal_mutable_host_consensus_state_proof() {
  ;
  return _impl_.host_consensus_state_proof_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenTry::release_host_consensus_state_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenTry.host_consensus_state_proof)
  return _impl_.host_consensus_state_proof_.Release();
}
inline void MsgConnectionOpenTry::set_allocated_host_consensus_state_proof(std::string* value) {
  _impl_.host_consensus_state_proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_consensus_state_proof_.IsDefault()) {
          _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenTry.host_consensus_state_proof)
}

// -------------------------------------------------------------------

// MsgConnectionOpenTryResponse

// -------------------------------------------------------------------

// MsgConnectionOpenAck

// string connection_id = 1 [json_name = "connectionId"];
inline void MsgConnectionOpenAck::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
}
inline std::string* MsgConnectionOpenAck::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
  return _impl_.connection_id_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.connection_id)
}

// string counterparty_connection_id = 2 [json_name = "counterpartyConnectionId"];
inline void MsgConnectionOpenAck::clear_counterparty_connection_id() {
  _impl_.counterparty_connection_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::counterparty_connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
  return _internal_counterparty_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_counterparty_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.counterparty_connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
}
inline std::string* MsgConnectionOpenAck::mutable_counterparty_connection_id() {
  std::string* _s = _internal_mutable_counterparty_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_counterparty_connection_id() const {
  return _impl_.counterparty_connection_id_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_counterparty_connection_id(const std::string& value) {
  ;


  _impl_.counterparty_connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_counterparty_connection_id() {
  ;
  return _impl_.counterparty_connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_counterparty_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
  return _impl_.counterparty_connection_id_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_counterparty_connection_id(std::string* value) {
  _impl_.counterparty_connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.counterparty_connection_id_.IsDefault()) {
          _impl_.counterparty_connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id)
}

// .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
inline bool MsgConnectionOpenAck::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenAck::_internal_version() const {
  const ::ibc::core::connection::v1::Version* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Version&>(
      ::ibc::core::connection::v1::_Version_default_instance_);
}
inline const ::ibc::core::connection::v1::Version& MsgConnectionOpenAck::version() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.version)
  return _internal_version();
}
inline void MsgConnectionOpenAck::unsafe_arena_set_allocated_version(
    ::ibc::core::connection::v1::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.version)
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenAck::release_version() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenAck::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.version)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Version* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenAck::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Version>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::ibc::core::connection::v1::Version* MsgConnectionOpenAck::mutable_version() {
  ::ibc::core::connection::v1::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.version)
  return _msg;
}
inline void MsgConnectionOpenAck::set_allocated_version(::ibc::core::connection::v1::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.version)
}

// .google.protobuf.Any client_state = 4 [json_name = "clientState"];
inline bool MsgConnectionOpenAck::has_client_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.client_state_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgConnectionOpenAck::_internal_client_state() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.client_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& MsgConnectionOpenAck::client_state() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
  return _internal_client_state();
}
inline void MsgConnectionOpenAck::unsafe_arena_set_allocated_client_state(
    ::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  _impl_.client_state_ = client_state;
  if (client_state) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenAck::release_client_state() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenAck::unsafe_arena_release_client_state() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.client_state_;
  _impl_.client_state_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenAck::_internal_mutable_client_state() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.client_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.client_state_ = p;
  }
  return _impl_.client_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* MsgConnectionOpenAck::mutable_client_state() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_client_state();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
  return _msg;
}
inline void MsgConnectionOpenAck::set_allocated_client_state(::PROTOBUF_NAMESPACE_ID::Any* client_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_state_);
  }
  if (client_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_state));
    if (message_arena != submessage_arena) {
      client_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.client_state_ = client_state;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.client_state)
}

// .ibc.core.client.v1.Height proof_height = 5 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenAck::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenAck::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenAck::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
  return _internal_proof_height();
}
inline void MsgConnectionOpenAck::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
  return _msg;
}
inline void MsgConnectionOpenAck::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.proof_height)
}

// bytes proof_try = 6 [json_name = "proofTry"];
inline void MsgConnectionOpenAck::clear_proof_try() {
  _impl_.proof_try_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::proof_try() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
  return _internal_proof_try();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_proof_try(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_try_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
}
inline std::string* MsgConnectionOpenAck::mutable_proof_try() {
  std::string* _s = _internal_mutable_proof_try();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_proof_try() const {
  return _impl_.proof_try_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_proof_try(const std::string& value) {
  ;


  _impl_.proof_try_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_proof_try() {
  ;
  return _impl_.proof_try_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_proof_try() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
  return _impl_.proof_try_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_proof_try(std::string* value) {
  _impl_.proof_try_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_try_.IsDefault()) {
          _impl_.proof_try_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.proof_try)
}

// bytes proof_client = 7 [json_name = "proofClient"];
inline void MsgConnectionOpenAck::clear_proof_client() {
  _impl_.proof_client_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::proof_client() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
  return _internal_proof_client();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_proof_client(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_client_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
}
inline std::string* MsgConnectionOpenAck::mutable_proof_client() {
  std::string* _s = _internal_mutable_proof_client();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_proof_client() const {
  return _impl_.proof_client_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_proof_client(const std::string& value) {
  ;


  _impl_.proof_client_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_proof_client() {
  ;
  return _impl_.proof_client_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_proof_client() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
  return _impl_.proof_client_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_proof_client(std::string* value) {
  _impl_.proof_client_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_client_.IsDefault()) {
          _impl_.proof_client_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.proof_client)
}

// bytes proof_consensus = 8 [json_name = "proofConsensus"];
inline void MsgConnectionOpenAck::clear_proof_consensus() {
  _impl_.proof_consensus_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::proof_consensus() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
  return _internal_proof_consensus();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_proof_consensus(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_consensus_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
}
inline std::string* MsgConnectionOpenAck::mutable_proof_consensus() {
  std::string* _s = _internal_mutable_proof_consensus();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_proof_consensus() const {
  return _impl_.proof_consensus_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_proof_consensus(const std::string& value) {
  ;


  _impl_.proof_consensus_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_proof_consensus() {
  ;
  return _impl_.proof_consensus_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_proof_consensus() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
  return _impl_.proof_consensus_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_proof_consensus(std::string* value) {
  _impl_.proof_consensus_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_consensus_.IsDefault()) {
          _impl_.proof_consensus_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.proof_consensus)
}

// .ibc.core.client.v1.Height consensus_height = 9 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenAck::has_consensus_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consensus_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenAck::_internal_consensus_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.consensus_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenAck::consensus_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
  return _internal_consensus_height();
}
inline void MsgConnectionOpenAck::unsafe_arena_set_allocated_consensus_height(
    ::ibc::core::client::v1::Height* consensus_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_height_);
  }
  _impl_.consensus_height_ = consensus_height;
  if (consensus_height) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::release_consensus_height() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ibc::core::client::v1::Height* temp = _impl_.consensus_height_;
  _impl_.consensus_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::unsafe_arena_release_consensus_height() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::ibc::core::client::v1::Height* temp = _impl_.consensus_height_;
  _impl_.consensus_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::_internal_mutable_consensus_height() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.consensus_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.consensus_height_ = p;
  }
  return _impl_.consensus_height_;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenAck::mutable_consensus_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_consensus_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
  return _msg;
}
inline void MsgConnectionOpenAck::set_allocated_consensus_height(::ibc::core::client::v1::Height* consensus_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consensus_height_);
  }
  if (consensus_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consensus_height));
    if (message_arena != submessage_arena) {
      consensus_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consensus_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.consensus_height_ = consensus_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.consensus_height)
}

// string signer = 10 [json_name = "signer"];
inline void MsgConnectionOpenAck::clear_signer() {
  _impl_.signer_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::signer() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
  return _internal_signer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_signer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
}
inline std::string* MsgConnectionOpenAck::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_signer() const {
  return _impl_.signer_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_signer(const std::string& value) {
  ;


  _impl_.signer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_signer() {
  ;
  return _impl_.signer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_signer() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
  return _impl_.signer_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_signer(std::string* value) {
  _impl_.signer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signer_.IsDefault()) {
          _impl_.signer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.signer)
}

// bytes host_consensus_state_proof = 11 [json_name = "hostConsensusStateProof"];
inline void MsgConnectionOpenAck::clear_host_consensus_state_proof() {
  _impl_.host_consensus_state_proof_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenAck::host_consensus_state_proof() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenAck.host_consensus_state_proof)
  return _internal_host_consensus_state_proof();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenAck::set_host_consensus_state_proof(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.host_consensus_state_proof_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenAck.host_consensus_state_proof)
}
inline std::string* MsgConnectionOpenAck::mutable_host_consensus_state_proof() {
  std::string* _s = _internal_mutable_host_consensus_state_proof();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenAck.host_consensus_state_proof)
  return _s;
}
inline const std::string& MsgConnectionOpenAck::_internal_host_consensus_state_proof() const {
  return _impl_.host_consensus_state_proof_.Get();
}
inline void MsgConnectionOpenAck::_internal_set_host_consensus_state_proof(const std::string& value) {
  ;


  _impl_.host_consensus_state_proof_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::_internal_mutable_host_consensus_state_proof() {
  ;
  return _impl_.host_consensus_state_proof_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenAck::release_host_consensus_state_proof() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenAck.host_consensus_state_proof)
  return _impl_.host_consensus_state_proof_.Release();
}
inline void MsgConnectionOpenAck::set_allocated_host_consensus_state_proof(std::string* value) {
  _impl_.host_consensus_state_proof_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_consensus_state_proof_.IsDefault()) {
          _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenAck.host_consensus_state_proof)
}

// -------------------------------------------------------------------

// MsgConnectionOpenAckResponse

// -------------------------------------------------------------------

// MsgConnectionOpenConfirm

// string connection_id = 1 [json_name = "connectionId"];
inline void MsgConnectionOpenConfirm::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenConfirm::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenConfirm::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
}
inline std::string* MsgConnectionOpenConfirm::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
  return _s;
}
inline const std::string& MsgConnectionOpenConfirm::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void MsgConnectionOpenConfirm::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
  return _impl_.connection_id_.Release();
}
inline void MsgConnectionOpenConfirm::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id)
}

// bytes proof_ack = 2 [json_name = "proofAck"];
inline void MsgConnectionOpenConfirm::clear_proof_ack() {
  _impl_.proof_ack_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenConfirm::proof_ack() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
  return _internal_proof_ack();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenConfirm::set_proof_ack(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proof_ack_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
}
inline std::string* MsgConnectionOpenConfirm::mutable_proof_ack() {
  std::string* _s = _internal_mutable_proof_ack();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
  return _s;
}
inline const std::string& MsgConnectionOpenConfirm::_internal_proof_ack() const {
  return _impl_.proof_ack_.Get();
}
inline void MsgConnectionOpenConfirm::_internal_set_proof_ack(const std::string& value) {
  ;


  _impl_.proof_ack_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::_internal_mutable_proof_ack() {
  ;
  return _impl_.proof_ack_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::release_proof_ack() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
  return _impl_.proof_ack_.Release();
}
inline void MsgConnectionOpenConfirm::set_allocated_proof_ack(std::string* value) {
  _impl_.proof_ack_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proof_ack_.IsDefault()) {
          _impl_.proof_ack_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_ack)
}

// .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
inline bool MsgConnectionOpenConfirm::has_proof_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_height_ != nullptr);
  return value;
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenConfirm::_internal_proof_height() const {
  const ::ibc::core::client::v1::Height* p = _impl_.proof_height_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::client::v1::Height&>(
      ::ibc::core::client::v1::_Height_default_instance_);
}
inline const ::ibc::core::client::v1::Height& MsgConnectionOpenConfirm::proof_height() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
  return _internal_proof_height();
}
inline void MsgConnectionOpenConfirm::unsafe_arena_set_allocated_proof_height(
    ::ibc::core::client::v1::Height* proof_height) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  _impl_.proof_height_ = proof_height;
  if (proof_height) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenConfirm::release_proof_height() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenConfirm::unsafe_arena_release_proof_height() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::client::v1::Height* temp = _impl_.proof_height_;
  _impl_.proof_height_ = nullptr;
  return temp;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenConfirm::_internal_mutable_proof_height() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_height_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::client::v1::Height>(GetArenaForAllocation());
    _impl_.proof_height_ = p;
  }
  return _impl_.proof_height_;
}
inline ::ibc::core::client::v1::Height* MsgConnectionOpenConfirm::mutable_proof_height() {
  ::ibc::core::client::v1::Height* _msg = _internal_mutable_proof_height();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
  return _msg;
}
inline void MsgConnectionOpenConfirm::set_allocated_proof_height(::ibc::core::client::v1::Height* proof_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_height_);
  }
  if (proof_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof_height));
    if (message_arena != submessage_arena) {
      proof_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof_height, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_height_ = proof_height;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenConfirm.proof_height)
}

// string signer = 4 [json_name = "signer"];
inline void MsgConnectionOpenConfirm::clear_signer() {
  _impl_.signer_.ClearToEmpty();
}
inline const std::string& MsgConnectionOpenConfirm::signer() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
  return _internal_signer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgConnectionOpenConfirm::set_signer(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
}
inline std::string* MsgConnectionOpenConfirm::mutable_signer() {
  std::string* _s = _internal_mutable_signer();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
  return _s;
}
inline const std::string& MsgConnectionOpenConfirm::_internal_signer() const {
  return _impl_.signer_.Get();
}
inline void MsgConnectionOpenConfirm::_internal_set_signer(const std::string& value) {
  ;


  _impl_.signer_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::_internal_mutable_signer() {
  ;
  return _impl_.signer_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgConnectionOpenConfirm::release_signer() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
  return _impl_.signer_.Release();
}
inline void MsgConnectionOpenConfirm::set_allocated_signer(std::string* value) {
  _impl_.signer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signer_.IsDefault()) {
          _impl_.signer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgConnectionOpenConfirm.signer)
}

// -------------------------------------------------------------------

// MsgConnectionOpenConfirmResponse

// -------------------------------------------------------------------

// MsgUpdateParams

// string authority = 1 [json_name = "authority"];
inline void MsgUpdateParams::clear_authority() {
  _impl_.authority_.ClearToEmpty();
}
inline const std::string& MsgUpdateParams::authority() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgUpdateParams.authority)
  return _internal_authority();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgUpdateParams::set_authority(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authority_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.MsgUpdateParams.authority)
}
inline std::string* MsgUpdateParams::mutable_authority() {
  std::string* _s = _internal_mutable_authority();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgUpdateParams.authority)
  return _s;
}
inline const std::string& MsgUpdateParams::_internal_authority() const {
  return _impl_.authority_.Get();
}
inline void MsgUpdateParams::_internal_set_authority(const std::string& value) {
  ;


  _impl_.authority_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::_internal_mutable_authority() {
  ;
  return _impl_.authority_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgUpdateParams::release_authority() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgUpdateParams.authority)
  return _impl_.authority_.Release();
}
inline void MsgUpdateParams::set_allocated_authority(std::string* value) {
  _impl_.authority_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authority_.IsDefault()) {
          _impl_.authority_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgUpdateParams.authority)
}

// .ibc.core.connection.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
inline bool MsgUpdateParams::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::ibc::core::connection::v1::Params& MsgUpdateParams::_internal_params() const {
  const ::ibc::core::connection::v1::Params* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Params&>(
      ::ibc::core::connection::v1::_Params_default_instance_);
}
inline const ::ibc::core::connection::v1::Params& MsgUpdateParams::params() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.MsgUpdateParams.params)
  return _internal_params();
}
inline void MsgUpdateParams::unsafe_arena_set_allocated_params(
    ::ibc::core::connection::v1::Params* params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = params;
  if (params) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.MsgUpdateParams.params)
}
inline ::ibc::core::connection::v1::Params* MsgUpdateParams::release_params() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Params* MsgUpdateParams::unsafe_arena_release_params() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.MsgUpdateParams.params)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Params* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Params* MsgUpdateParams::_internal_mutable_params() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Params>(GetArenaForAllocation());
    _impl_.params_ = p;
  }
  return _impl_.params_;
}
inline ::ibc::core::connection::v1::Params* MsgUpdateParams::mutable_params() {
  ::ibc::core::connection::v1::Params* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.MsgUpdateParams.params)
  return _msg;
}
inline void MsgUpdateParams::set_allocated_params(::ibc::core::connection::v1::Params* params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.params_);
  }
  if (params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(params));
    if (message_arena != submessage_arena) {
      params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, params, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.params_ = params;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.MsgUpdateParams.params)
}

// -------------------------------------------------------------------

// MsgUpdateParamsResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_2epb_2eh

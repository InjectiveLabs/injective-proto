// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/connection/v1/tx.proto

#include "ibc/core/connection/v1/tx.pb.h"
#include "ibc/core/connection/v1/tx.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace core {
namespace connection {
namespace v1 {

static const char* Msg_method_names[] = {
  "/ibc.core.connection.v1.Msg/ConnectionOpenInit",
  "/ibc.core.connection.v1.Msg/ConnectionOpenTry",
  "/ibc.core.connection.v1.Msg/ConnectionOpenAck",
  "/ibc.core.connection.v1.Msg/ConnectionOpenConfirm",
  "/ibc.core.connection.v1.Msg/UpdateConnectionParams",
};

std::unique_ptr< Msg::Stub> Msg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Msg::Stub> stub(new Msg::Stub(channel, options));
  return stub;
}

Msg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ConnectionOpenInit_(Msg_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionOpenTry_(Msg_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionOpenAck_(Msg_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionOpenConfirm_(Msg_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateConnectionParams_(Msg_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Msg::Stub::ConnectionOpenInit(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit& request, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenInit, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionOpenInit_, context, request, response);
}

void Msg::Stub::async::ConnectionOpenInit(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit* request, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenInit, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenInit_, context, request, response, std::move(f));
}

void Msg::Stub::async::ConnectionOpenInit(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit* request, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenInit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenInitResponse>* Msg::Stub::PrepareAsyncConnectionOpenInitRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::MsgConnectionOpenInitResponse, ::ibc::core::connection::v1::MsgConnectionOpenInit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionOpenInit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenInitResponse>* Msg::Stub::AsyncConnectionOpenInitRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionOpenInitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ConnectionOpenTry(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry& request, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenTry, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionOpenTry_, context, request, response);
}

void Msg::Stub::async::ConnectionOpenTry(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry* request, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenTry, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenTry_, context, request, response, std::move(f));
}

void Msg::Stub::async::ConnectionOpenTry(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry* request, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenTry_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenTryResponse>* Msg::Stub::PrepareAsyncConnectionOpenTryRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::MsgConnectionOpenTryResponse, ::ibc::core::connection::v1::MsgConnectionOpenTry, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionOpenTry_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenTryResponse>* Msg::Stub::AsyncConnectionOpenTryRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionOpenTryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ConnectionOpenAck(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck& request, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenAck, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionOpenAck_, context, request, response);
}

void Msg::Stub::async::ConnectionOpenAck(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck* request, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenAck, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenAck_, context, request, response, std::move(f));
}

void Msg::Stub::async::ConnectionOpenAck(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck* request, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenAck_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenAckResponse>* Msg::Stub::PrepareAsyncConnectionOpenAckRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::MsgConnectionOpenAckResponse, ::ibc::core::connection::v1::MsgConnectionOpenAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionOpenAck_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenAckResponse>* Msg::Stub::AsyncConnectionOpenAckRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionOpenAckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::ConnectionOpenConfirm(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm& request, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenConfirm, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionOpenConfirm_, context, request, response);
}

void Msg::Stub::async::ConnectionOpenConfirm(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm* request, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::MsgConnectionOpenConfirm, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenConfirm_, context, request, response, std::move(f));
}

void Msg::Stub::async::ConnectionOpenConfirm(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm* request, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionOpenConfirm_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse>* Msg::Stub::PrepareAsyncConnectionOpenConfirmRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse, ::ibc::core::connection::v1::MsgConnectionOpenConfirm, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionOpenConfirm_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse>* Msg::Stub::AsyncConnectionOpenConfirmRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionOpenConfirmRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Msg::Stub::UpdateConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgUpdateParams& request, ::ibc::core::connection::v1::MsgUpdateParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::MsgUpdateParams, ::ibc::core::connection::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateConnectionParams_, context, request, response);
}

void Msg::Stub::async::UpdateConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgUpdateParams* request, ::ibc::core::connection::v1::MsgUpdateParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::MsgUpdateParams, ::ibc::core::connection::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConnectionParams_, context, request, response, std::move(f));
}

void Msg::Stub::async::UpdateConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgUpdateParams* request, ::ibc::core::connection::v1::MsgUpdateParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateConnectionParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgUpdateParamsResponse>* Msg::Stub::PrepareAsyncUpdateConnectionParamsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::MsgUpdateParamsResponse, ::ibc::core::connection::v1::MsgUpdateParams, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateConnectionParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::MsgUpdateParamsResponse>* Msg::Stub::AsyncUpdateConnectionParamsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::MsgUpdateParams& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateConnectionParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Msg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::connection::v1::MsgConnectionOpenInit, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::MsgConnectionOpenInit* req,
             ::ibc::core::connection::v1::MsgConnectionOpenInitResponse* resp) {
               return service->ConnectionOpenInit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::connection::v1::MsgConnectionOpenTry, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::MsgConnectionOpenTry* req,
             ::ibc::core::connection::v1::MsgConnectionOpenTryResponse* resp) {
               return service->ConnectionOpenTry(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::connection::v1::MsgConnectionOpenAck, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::MsgConnectionOpenAck* req,
             ::ibc::core::connection::v1::MsgConnectionOpenAckResponse* resp) {
               return service->ConnectionOpenAck(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::connection::v1::MsgConnectionOpenConfirm, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::MsgConnectionOpenConfirm* req,
             ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* resp) {
               return service->ConnectionOpenConfirm(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Msg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Msg::Service, ::ibc::core::connection::v1::MsgUpdateParams, ::ibc::core::connection::v1::MsgUpdateParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Msg::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::MsgUpdateParams* req,
             ::ibc::core::connection::v1::MsgUpdateParamsResponse* resp) {
               return service->UpdateConnectionParams(ctx, req, resp);
             }, this)));
}

Msg::Service::~Service() {
}

::grpc::Status Msg::Service::ConnectionOpenInit(::grpc::ServerContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenInit* request, ::ibc::core::connection::v1::MsgConnectionOpenInitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ConnectionOpenTry(::grpc::ServerContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenTry* request, ::ibc::core::connection::v1::MsgConnectionOpenTryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ConnectionOpenAck(::grpc::ServerContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenAck* request, ::ibc::core::connection::v1::MsgConnectionOpenAckResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::ConnectionOpenConfirm(::grpc::ServerContext* context, const ::ibc::core::connection::v1::MsgConnectionOpenConfirm* request, ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Msg::Service::UpdateConnectionParams(::grpc::ServerContext* context, const ::ibc::core::connection::v1::MsgUpdateParams* request, ::ibc::core::connection::v1::MsgUpdateParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace core
}  // namespace connection
}  // namespace v1


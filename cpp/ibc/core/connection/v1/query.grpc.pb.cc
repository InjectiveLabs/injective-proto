// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ibc/core/connection/v1/query.proto

#include "ibc/core/connection/v1/query.pb.h"
#include "ibc/core/connection/v1/query.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace ibc {
namespace core {
namespace connection {
namespace v1 {

static const char* Query_method_names[] = {
  "/ibc.core.connection.v1.Query/Connection",
  "/ibc.core.connection.v1.Query/Connections",
  "/ibc.core.connection.v1.Query/ClientConnections",
  "/ibc.core.connection.v1.Query/ConnectionClientState",
  "/ibc.core.connection.v1.Query/ConnectionConsensusState",
  "/ibc.core.connection.v1.Query/ConnectionParams",
};

std::unique_ptr< Query::Stub> Query::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Query::Stub> stub(new Query::Stub(channel, options));
  return stub;
}

Query::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Connection_(Query_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connections_(Query_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientConnections_(Query_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionClientState_(Query_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionConsensusState_(Query_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectionParams_(Query_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Query::Stub::Connection(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest& request, ::ibc::core::connection::v1::QueryConnectionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryConnectionRequest, ::ibc::core::connection::v1::QueryConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connection_, context, request, response);
}

void Query::Stub::async::Connection(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest* request, ::ibc::core::connection::v1::QueryConnectionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryConnectionRequest, ::ibc::core::connection::v1::QueryConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connection_, context, request, response, std::move(f));
}

void Query::Stub::async::Connection(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest* request, ::ibc::core::connection::v1::QueryConnectionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connection_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionResponse>* Query::Stub::PrepareAsyncConnectionRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryConnectionResponse, ::ibc::core::connection::v1::QueryConnectionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connection_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionResponse>* Query::Stub::AsyncConnectionRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::Connections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest& request, ::ibc::core::connection::v1::QueryConnectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryConnectionsRequest, ::ibc::core::connection::v1::QueryConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Connections_, context, request, response);
}

void Query::Stub::async::Connections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest* request, ::ibc::core::connection::v1::QueryConnectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryConnectionsRequest, ::ibc::core::connection::v1::QueryConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connections_, context, request, response, std::move(f));
}

void Query::Stub::async::Connections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest* request, ::ibc::core::connection::v1::QueryConnectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Connections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionsResponse>* Query::Stub::PrepareAsyncConnectionsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryConnectionsResponse, ::ibc::core::connection::v1::QueryConnectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Connections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionsResponse>* Query::Stub::AsyncConnectionsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ClientConnections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest& request, ::ibc::core::connection::v1::QueryClientConnectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryClientConnectionsRequest, ::ibc::core::connection::v1::QueryClientConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClientConnections_, context, request, response);
}

void Query::Stub::async::ClientConnections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest* request, ::ibc::core::connection::v1::QueryClientConnectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryClientConnectionsRequest, ::ibc::core::connection::v1::QueryClientConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientConnections_, context, request, response, std::move(f));
}

void Query::Stub::async::ClientConnections(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest* request, ::ibc::core::connection::v1::QueryClientConnectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClientConnections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryClientConnectionsResponse>* Query::Stub::PrepareAsyncClientConnectionsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryClientConnectionsResponse, ::ibc::core::connection::v1::QueryClientConnectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClientConnections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryClientConnectionsResponse>* Query::Stub::AsyncClientConnectionsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClientConnectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConnectionClientState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest& request, ::ibc::core::connection::v1::QueryConnectionClientStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryConnectionClientStateRequest, ::ibc::core::connection::v1::QueryConnectionClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionClientState_, context, request, response);
}

void Query::Stub::async::ConnectionClientState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest* request, ::ibc::core::connection::v1::QueryConnectionClientStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryConnectionClientStateRequest, ::ibc::core::connection::v1::QueryConnectionClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionClientState_, context, request, response, std::move(f));
}

void Query::Stub::async::ConnectionClientState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest* request, ::ibc::core::connection::v1::QueryConnectionClientStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionClientState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionClientStateResponse>* Query::Stub::PrepareAsyncConnectionClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryConnectionClientStateResponse, ::ibc::core::connection::v1::QueryConnectionClientStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionClientState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionClientStateResponse>* Query::Stub::AsyncConnectionClientStateRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionClientStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConnectionConsensusState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest& request, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionConsensusState_, context, request, response);
}

void Query::Stub::async::ConnectionConsensusState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest* request, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionConsensusState_, context, request, response, std::move(f));
}

void Query::Stub::async::ConnectionConsensusState(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest* request, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionConsensusState_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse>* Query::Stub::PrepareAsyncConnectionConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse, ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionConsensusState_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse>* Query::Stub::AsyncConnectionConsensusStateRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionConsensusStateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Query::Stub::ConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest& request, ::ibc::core::connection::v1::QueryConnectionParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ibc::core::connection::v1::QueryConnectionParamsRequest, ::ibc::core::connection::v1::QueryConnectionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ConnectionParams_, context, request, response);
}

void Query::Stub::async::ConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest* request, ::ibc::core::connection::v1::QueryConnectionParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ibc::core::connection::v1::QueryConnectionParamsRequest, ::ibc::core::connection::v1::QueryConnectionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionParams_, context, request, response, std::move(f));
}

void Query::Stub::async::ConnectionParams(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest* request, ::ibc::core::connection::v1::QueryConnectionParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ConnectionParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionParamsResponse>* Query::Stub::PrepareAsyncConnectionParamsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ibc::core::connection::v1::QueryConnectionParamsResponse, ::ibc::core::connection::v1::QueryConnectionParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ConnectionParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ibc::core::connection::v1::QueryConnectionParamsResponse>* Query::Stub::AsyncConnectionParamsRaw(::grpc::ClientContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConnectionParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Query::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryConnectionRequest, ::ibc::core::connection::v1::QueryConnectionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryConnectionRequest* req,
             ::ibc::core::connection::v1::QueryConnectionResponse* resp) {
               return service->Connection(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryConnectionsRequest, ::ibc::core::connection::v1::QueryConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryConnectionsRequest* req,
             ::ibc::core::connection::v1::QueryConnectionsResponse* resp) {
               return service->Connections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryClientConnectionsRequest, ::ibc::core::connection::v1::QueryClientConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryClientConnectionsRequest* req,
             ::ibc::core::connection::v1::QueryClientConnectionsResponse* resp) {
               return service->ClientConnections(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryConnectionClientStateRequest, ::ibc::core::connection::v1::QueryConnectionClientStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryConnectionClientStateRequest* req,
             ::ibc::core::connection::v1::QueryConnectionClientStateResponse* resp) {
               return service->ConnectionClientState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest* req,
             ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse* resp) {
               return service->ConnectionConsensusState(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Query_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Query::Service, ::ibc::core::connection::v1::QueryConnectionParamsRequest, ::ibc::core::connection::v1::QueryConnectionParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Query::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ibc::core::connection::v1::QueryConnectionParamsRequest* req,
             ::ibc::core::connection::v1::QueryConnectionParamsResponse* resp) {
               return service->ConnectionParams(ctx, req, resp);
             }, this)));
}

Query::Service::~Service() {
}

::grpc::Status Query::Service::Connection(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryConnectionRequest* request, ::ibc::core::connection::v1::QueryConnectionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::Connections(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryConnectionsRequest* request, ::ibc::core::connection::v1::QueryConnectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ClientConnections(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryClientConnectionsRequest* request, ::ibc::core::connection::v1::QueryClientConnectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConnectionClientState(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryConnectionClientStateRequest* request, ::ibc::core::connection::v1::QueryConnectionClientStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConnectionConsensusState(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryConnectionConsensusStateRequest* request, ::ibc::core::connection::v1::QueryConnectionConsensusStateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Query::Service::ConnectionParams(::grpc::ServerContext* context, const ::ibc::core::connection::v1::QueryConnectionParamsRequest* request, ::ibc::core::connection::v1::QueryConnectionParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace ibc
}  // namespace core
}  // namespace connection
}  // namespace v1


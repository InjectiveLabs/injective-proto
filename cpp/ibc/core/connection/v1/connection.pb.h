// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/connection/v1/connection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "ibc/core/commitment/v1/commitment.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
class ClientPaths;
struct ClientPathsDefaultTypeInternal;
extern ClientPathsDefaultTypeInternal _ClientPaths_default_instance_;
class ConnectionEnd;
struct ConnectionEndDefaultTypeInternal;
extern ConnectionEndDefaultTypeInternal _ConnectionEnd_default_instance_;
class ConnectionPaths;
struct ConnectionPathsDefaultTypeInternal;
extern ConnectionPathsDefaultTypeInternal _ConnectionPaths_default_instance_;
class Counterparty;
struct CounterpartyDefaultTypeInternal;
extern CounterpartyDefaultTypeInternal _Counterparty_default_instance_;
class IdentifiedConnection;
struct IdentifiedConnectionDefaultTypeInternal;
extern IdentifiedConnectionDefaultTypeInternal _IdentifiedConnection_default_instance_;
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template <>
::ibc::core::connection::v1::ClientPaths* Arena::CreateMaybeMessage<::ibc::core::connection::v1::ClientPaths>(Arena*);
template <>
::ibc::core::connection::v1::ConnectionEnd* Arena::CreateMaybeMessage<::ibc::core::connection::v1::ConnectionEnd>(Arena*);
template <>
::ibc::core::connection::v1::ConnectionPaths* Arena::CreateMaybeMessage<::ibc::core::connection::v1::ConnectionPaths>(Arena*);
template <>
::ibc::core::connection::v1::Counterparty* Arena::CreateMaybeMessage<::ibc::core::connection::v1::Counterparty>(Arena*);
template <>
::ibc::core::connection::v1::IdentifiedConnection* Arena::CreateMaybeMessage<::ibc::core::connection::v1::IdentifiedConnection>(Arena*);
template <>
::ibc::core::connection::v1::Params* Arena::CreateMaybeMessage<::ibc::core::connection::v1::Params>(Arena*);
template <>
::ibc::core::connection::v1::Version* Arena::CreateMaybeMessage<::ibc::core::connection::v1::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace ibc {
namespace core {
namespace connection {
namespace v1 {
enum State : int {
  STATE_UNINITIALIZED_UNSPECIFIED = 0,
  STATE_INIT = 1,
  STATE_TRYOPEN = 2,
  STATE_OPEN = 3,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool State_IsValid(int value);
constexpr State State_MIN = static_cast<State>(0);
constexpr State State_MAX = static_cast<State>(3);
constexpr int State_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
State_descriptor();
template <typename T>
const std::string& State_Name(T value) {
  static_assert(std::is_same<T, State>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to State_Name().");
  return State_Name(static_cast<State>(value));
}
template <>
inline const std::string& State_Name(State value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<State_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool State_Parse(absl::string_view name, State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State>(
      State_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ConnectionEnd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.ConnectionEnd) */ {
 public:
  inline ConnectionEnd() : ConnectionEnd(nullptr) {}
  ~ConnectionEnd() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionEnd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionEnd(const ConnectionEnd& from);
  ConnectionEnd(ConnectionEnd&& from) noexcept
    : ConnectionEnd() {
    *this = ::std::move(from);
  }

  inline ConnectionEnd& operator=(const ConnectionEnd& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionEnd& operator=(ConnectionEnd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionEnd& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionEnd* internal_default_instance() {
    return reinterpret_cast<const ConnectionEnd*>(
               &_ConnectionEnd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionEnd& a, ConnectionEnd& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionEnd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionEnd* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionEnd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionEnd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionEnd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionEnd& from) {
    ConnectionEnd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionEnd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.ConnectionEnd";
  }
  protected:
  explicit ConnectionEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 2,
    kClientIdFieldNumber = 1,
    kCounterpartyFieldNumber = 4,
    kDelayPeriodFieldNumber = 5,
    kStateFieldNumber = 3,
  };
  // repeated .ibc.core.connection.v1.Version versions = 2 [json_name = "versions"];
  int versions_size() const;
  private:
  int _internal_versions_size() const;

  public:
  void clear_versions() ;
  ::ibc::core::connection::v1::Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
      mutable_versions();
  private:
  const ::ibc::core::connection::v1::Version& _internal_versions(int index) const;
  ::ibc::core::connection::v1::Version* _internal_add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>& _internal_versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>* _internal_mutable_versions();
  public:
  const ::ibc::core::connection::v1::Version& versions(int index) const;
  ::ibc::core::connection::v1::Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
      versions() const;
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::connection::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Counterparty* release_counterparty();
  ::ibc::core::connection::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty);
  private:
  const ::ibc::core::connection::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::connection::v1::Counterparty* _internal_mutable_counterparty();
  public:
  void unsafe_arena_set_allocated_counterparty(
      ::ibc::core::connection::v1::Counterparty* counterparty);
  ::ibc::core::connection::v1::Counterparty* unsafe_arena_release_counterparty();
  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  void clear_delay_period() ;
  ::uint64_t delay_period() const;
  void set_delay_period(::uint64_t value);

  private:
  ::uint64_t _internal_delay_period() const;
  void _internal_set_delay_period(::uint64_t value);

  public:
  // .ibc.core.connection.v1.State state = 3 [json_name = "state"];
  void clear_state() ;
  ::ibc::core::connection::v1::State state() const;
  void set_state(::ibc::core::connection::v1::State value);

  private:
  ::ibc::core::connection::v1::State _internal_state() const;
  void _internal_set_state(::ibc::core::connection::v1::State value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.ConnectionEnd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version > versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::ibc::core::connection::v1::Counterparty* counterparty_;
    ::uint64_t delay_period_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class IdentifiedConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.IdentifiedConnection) */ {
 public:
  inline IdentifiedConnection() : IdentifiedConnection(nullptr) {}
  ~IdentifiedConnection() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IdentifiedConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IdentifiedConnection(const IdentifiedConnection& from);
  IdentifiedConnection(IdentifiedConnection&& from) noexcept
    : IdentifiedConnection() {
    *this = ::std::move(from);
  }

  inline IdentifiedConnection& operator=(const IdentifiedConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentifiedConnection& operator=(IdentifiedConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IdentifiedConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const IdentifiedConnection* internal_default_instance() {
    return reinterpret_cast<const IdentifiedConnection*>(
               &_IdentifiedConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IdentifiedConnection& a, IdentifiedConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentifiedConnection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentifiedConnection* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IdentifiedConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IdentifiedConnection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IdentifiedConnection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IdentifiedConnection& from) {
    IdentifiedConnection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentifiedConnection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.IdentifiedConnection";
  }
  protected:
  explicit IdentifiedConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionsFieldNumber = 3,
    kIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kCounterpartyFieldNumber = 5,
    kDelayPeriodFieldNumber = 6,
    kStateFieldNumber = 4,
  };
  // repeated .ibc.core.connection.v1.Version versions = 3 [json_name = "versions"];
  int versions_size() const;
  private:
  int _internal_versions_size() const;

  public:
  void clear_versions() ;
  ::ibc::core::connection::v1::Version* mutable_versions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
      mutable_versions();
  private:
  const ::ibc::core::connection::v1::Version& _internal_versions(int index) const;
  ::ibc::core::connection::v1::Version* _internal_add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>& _internal_versions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>* _internal_mutable_versions();
  public:
  const ::ibc::core::connection::v1::Version& versions(int index) const;
  ::ibc::core::connection::v1::Version* add_versions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
      versions() const;
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* ptr);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string client_id = 2 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // .ibc.core.connection.v1.Counterparty counterparty = 5 [json_name = "counterparty", (.gogoproto.nullable) = false];
  bool has_counterparty() const;
  void clear_counterparty() ;
  const ::ibc::core::connection::v1::Counterparty& counterparty() const;
  PROTOBUF_NODISCARD ::ibc::core::connection::v1::Counterparty* release_counterparty();
  ::ibc::core::connection::v1::Counterparty* mutable_counterparty();
  void set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty);
  private:
  const ::ibc::core::connection::v1::Counterparty& _internal_counterparty() const;
  ::ibc::core::connection::v1::Counterparty* _internal_mutable_counterparty();
  public:
  void unsafe_arena_set_allocated_counterparty(
      ::ibc::core::connection::v1::Counterparty* counterparty);
  ::ibc::core::connection::v1::Counterparty* unsafe_arena_release_counterparty();
  // uint64 delay_period = 6 [json_name = "delayPeriod"];
  void clear_delay_period() ;
  ::uint64_t delay_period() const;
  void set_delay_period(::uint64_t value);

  private:
  ::uint64_t _internal_delay_period() const;
  void _internal_set_delay_period(::uint64_t value);

  public:
  // .ibc.core.connection.v1.State state = 4 [json_name = "state"];
  void clear_state() ;
  ::ibc::core::connection::v1::State state() const;
  void set_state(::ibc::core::connection::v1::State value);

  private:
  ::ibc::core::connection::v1::State _internal_state() const;
  void _internal_set_state(::ibc::core::connection::v1::State value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.IdentifiedConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version > versions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::ibc::core::connection::v1::Counterparty* counterparty_;
    ::uint64_t delay_period_;
    int state_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class Counterparty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.Counterparty) */ {
 public:
  inline Counterparty() : Counterparty(nullptr) {}
  ~Counterparty() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Counterparty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Counterparty(const Counterparty& from);
  Counterparty(Counterparty&& from) noexcept
    : Counterparty() {
    *this = ::std::move(from);
  }

  inline Counterparty& operator=(const Counterparty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Counterparty& operator=(Counterparty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Counterparty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Counterparty* internal_default_instance() {
    return reinterpret_cast<const Counterparty*>(
               &_Counterparty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Counterparty& a, Counterparty& b) {
    a.Swap(&b);
  }
  inline void Swap(Counterparty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Counterparty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Counterparty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Counterparty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Counterparty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Counterparty& from) {
    Counterparty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Counterparty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.Counterparty";
  }
  protected:
  explicit Counterparty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
    kConnectionIdFieldNumber = 2,
    kPrefixFieldNumber = 3,
  };
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string connection_id = 2 [json_name = "connectionId"];
  void clear_connection_id() ;
  const std::string& connection_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_id(Arg_&& arg, Args_... args);
  std::string* mutable_connection_id();
  PROTOBUF_NODISCARD std::string* release_connection_id();
  void set_allocated_connection_id(std::string* ptr);

  private:
  const std::string& _internal_connection_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_connection_id(
      const std::string& value);
  std::string* _internal_mutable_connection_id();

  public:
  // .ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];
  bool has_prefix() const;
  void clear_prefix() ;
  const ::ibc::core::commitment::v1::MerklePrefix& prefix() const;
  PROTOBUF_NODISCARD ::ibc::core::commitment::v1::MerklePrefix* release_prefix();
  ::ibc::core::commitment::v1::MerklePrefix* mutable_prefix();
  void set_allocated_prefix(::ibc::core::commitment::v1::MerklePrefix* prefix);
  private:
  const ::ibc::core::commitment::v1::MerklePrefix& _internal_prefix() const;
  ::ibc::core::commitment::v1::MerklePrefix* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::ibc::core::commitment::v1::MerklePrefix* prefix);
  ::ibc::core::commitment::v1::MerklePrefix* unsafe_arena_release_prefix();
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.Counterparty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_id_;
    ::ibc::core::commitment::v1::MerklePrefix* prefix_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class ClientPaths final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.ClientPaths) */ {
 public:
  inline ClientPaths() : ClientPaths(nullptr) {}
  ~ClientPaths() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientPaths(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientPaths(const ClientPaths& from);
  ClientPaths(ClientPaths&& from) noexcept
    : ClientPaths() {
    *this = ::std::move(from);
  }

  inline ClientPaths& operator=(const ClientPaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPaths& operator=(ClientPaths&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientPaths& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientPaths* internal_default_instance() {
    return reinterpret_cast<const ClientPaths*>(
               &_ClientPaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClientPaths& a, ClientPaths& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPaths* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPaths* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientPaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientPaths>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientPaths& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientPaths& from) {
    ClientPaths::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPaths* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.ClientPaths";
  }
  protected:
  explicit ClientPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 1,
  };
  // repeated string paths = 1 [json_name = "paths"];
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, std::size_t size);
  void set_paths(int index, absl::string_view value);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const char* value, std::size_t size);
  void add_paths(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_paths();

  private:
  const std::string& _internal_paths(int index) const;
  std::string* _internal_add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_paths();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.ClientPaths)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> paths_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class ConnectionPaths final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.ConnectionPaths) */ {
 public:
  inline ConnectionPaths() : ConnectionPaths(nullptr) {}
  ~ConnectionPaths() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConnectionPaths(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionPaths(const ConnectionPaths& from);
  ConnectionPaths(ConnectionPaths&& from) noexcept
    : ConnectionPaths() {
    *this = ::std::move(from);
  }

  inline ConnectionPaths& operator=(const ConnectionPaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionPaths& operator=(ConnectionPaths&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionPaths& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionPaths* internal_default_instance() {
    return reinterpret_cast<const ConnectionPaths*>(
               &_ConnectionPaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ConnectionPaths& a, ConnectionPaths& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionPaths* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionPaths* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionPaths* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionPaths>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionPaths& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConnectionPaths& from) {
    ConnectionPaths::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionPaths* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.ConnectionPaths";
  }
  protected:
  explicit ConnectionPaths(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kClientIdFieldNumber = 1,
  };
  // repeated string paths = 2 [json_name = "paths"];
  int paths_size() const;
  private:
  int _internal_paths_size() const;

  public:
  void clear_paths() ;
  const std::string& paths(int index) const;
  std::string* mutable_paths(int index);
  void set_paths(int index, const std::string& value);
  void set_paths(int index, std::string&& value);
  void set_paths(int index, const char* value);
  void set_paths(int index, const char* value, std::size_t size);
  void set_paths(int index, absl::string_view value);
  std::string* add_paths();
  void add_paths(const std::string& value);
  void add_paths(std::string&& value);
  void add_paths(const char* value);
  void add_paths(const char* value, std::size_t size);
  void add_paths(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_paths();

  private:
  const std::string& _internal_paths(int index) const;
  std::string* _internal_add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_paths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_paths();

  public:
  // string client_id = 1 [json_name = "clientId"];
  void clear_client_id() ;
  const std::string& client_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* ptr);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.ConnectionPaths)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> paths_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Version& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Version& from) {
    Version::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 2,
    kIdentifierFieldNumber = 1,
  };
  // repeated string features = 2 [json_name = "features"];
  int features_size() const;
  private:
  int _internal_features_size() const;

  public:
  void clear_features() ;
  const std::string& features(int index) const;
  std::string* mutable_features(int index);
  void set_features(int index, const std::string& value);
  void set_features(int index, std::string&& value);
  void set_features(int index, const char* value);
  void set_features(int index, const char* value, std::size_t size);
  void set_features(int index, absl::string_view value);
  std::string* add_features();
  void add_features(const std::string& value);
  void add_features(std::string&& value);
  void add_features(const char* value);
  void add_features(const char* value, std::size_t size);
  void add_features(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_features();

  private:
  const std::string& _internal_features(int index) const;
  std::string* _internal_add_features();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_features();

  public:
  // string identifier = 1 [json_name = "identifier"];
  void clear_identifier() ;
  const std::string& identifier() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identifier(Arg_&& arg, Args_... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* ptr);

  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(
      const std::string& value);
  std::string* _internal_mutable_identifier();

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> features_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};// -------------------------------------------------------------------

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ibc.core.connection.v1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Params& from) {
    Params::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ibc.core.connection.v1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxExpectedTimePerBlockFieldNumber = 1,
  };
  // uint64 max_expected_time_per_block = 1 [json_name = "maxExpectedTimePerBlock"];
  void clear_max_expected_time_per_block() ;
  ::uint64_t max_expected_time_per_block() const;
  void set_max_expected_time_per_block(::uint64_t value);

  private:
  ::uint64_t _internal_max_expected_time_per_block() const;
  void _internal_set_max_expected_time_per_block(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:ibc.core.connection.v1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t max_expected_time_per_block_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConnectionEnd

// string client_id = 1 [json_name = "clientId"];
inline void ConnectionEnd::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ConnectionEnd::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionEnd.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectionEnd::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionEnd.client_id)
}
inline std::string* ConnectionEnd::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ConnectionEnd.client_id)
  return _s;
}
inline const std::string& ConnectionEnd::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void ConnectionEnd::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionEnd::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ConnectionEnd::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.ConnectionEnd.client_id)
  return _impl_.client_id_.Release();
}
inline void ConnectionEnd::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.ConnectionEnd.client_id)
}

// repeated .ibc.core.connection.v1.Version versions = 2 [json_name = "versions"];
inline int ConnectionEnd::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int ConnectionEnd::versions_size() const {
  return _internal_versions_size();
}
inline void ConnectionEnd::clear_versions() {
  _internal_mutable_versions()->Clear();
}
inline ::ibc::core::connection::v1::Version* ConnectionEnd::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ConnectionEnd.versions)
  return _internal_mutable_versions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
ConnectionEnd::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.ConnectionEnd.versions)
  return _internal_mutable_versions();
}
inline const ::ibc::core::connection::v1::Version& ConnectionEnd::_internal_versions(int index) const {
  return _internal_versions().Get(index);
}
inline const ::ibc::core::connection::v1::Version& ConnectionEnd::versions(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionEnd.versions)
  return _internal_versions(index);
}
inline ::ibc::core::connection::v1::Version* ConnectionEnd::_internal_add_versions() {
  return _internal_mutable_versions()->Add();
}
inline ::ibc::core::connection::v1::Version* ConnectionEnd::add_versions() {
  ::ibc::core::connection::v1::Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.ConnectionEnd.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
ConnectionEnd::versions() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.ConnectionEnd.versions)
  return _internal_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>&
ConnectionEnd::_internal_versions() const {
  return _impl_.versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>*
ConnectionEnd::_internal_mutable_versions() {
  return &_impl_.versions_;
}

// .ibc.core.connection.v1.State state = 3 [json_name = "state"];
inline void ConnectionEnd::clear_state() {
  _impl_.state_ = 0;
}
inline ::ibc::core::connection::v1::State ConnectionEnd::state() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionEnd.state)
  return _internal_state();
}
inline void ConnectionEnd::set_state(::ibc::core::connection::v1::State value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionEnd.state)
}
inline ::ibc::core::connection::v1::State ConnectionEnd::_internal_state() const {
  return static_cast<::ibc::core::connection::v1::State>(_impl_.state_);
}
inline void ConnectionEnd::_internal_set_state(::ibc::core::connection::v1::State value) {
  ;
  _impl_.state_ = value;
}

// .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool ConnectionEnd::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline void ConnectionEnd::clear_counterparty() {
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::core::connection::v1::Counterparty& ConnectionEnd::_internal_counterparty() const {
  const ::ibc::core::connection::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Counterparty&>(
      ::ibc::core::connection::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::connection::v1::Counterparty& ConnectionEnd::counterparty() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionEnd.counterparty)
  return _internal_counterparty();
}
inline void ConnectionEnd::unsafe_arena_set_allocated_counterparty(
    ::ibc::core::connection::v1::Counterparty* counterparty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = counterparty;
  if (counterparty) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.ConnectionEnd.counterparty)
}
inline ::ibc::core::connection::v1::Counterparty* ConnectionEnd::release_counterparty() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* ConnectionEnd::unsafe_arena_release_counterparty() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.ConnectionEnd.counterparty)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* ConnectionEnd::_internal_mutable_counterparty() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.counterparty_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Counterparty>(GetArenaForAllocation());
    _impl_.counterparty_ = p;
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::connection::v1::Counterparty* ConnectionEnd::mutable_counterparty() {
  ::ibc::core::connection::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ConnectionEnd.counterparty)
  return _msg;
}
inline void ConnectionEnd::set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.counterparty_;
  }
  if (counterparty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counterparty);
    if (message_arena != submessage_arena) {
      counterparty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counterparty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.counterparty_ = counterparty;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.ConnectionEnd.counterparty)
}

// uint64 delay_period = 5 [json_name = "delayPeriod"];
inline void ConnectionEnd::clear_delay_period() {
  _impl_.delay_period_ = ::uint64_t{0u};
}
inline ::uint64_t ConnectionEnd::delay_period() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionEnd.delay_period)
  return _internal_delay_period();
}
inline void ConnectionEnd::set_delay_period(::uint64_t value) {
  _internal_set_delay_period(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionEnd.delay_period)
}
inline ::uint64_t ConnectionEnd::_internal_delay_period() const {
  return _impl_.delay_period_;
}
inline void ConnectionEnd::_internal_set_delay_period(::uint64_t value) {
  ;
  _impl_.delay_period_ = value;
}

// -------------------------------------------------------------------

// IdentifiedConnection

// string id = 1 [json_name = "id"];
inline void IdentifiedConnection::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& IdentifiedConnection::id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedConnection::set_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.IdentifiedConnection.id)
}
inline std::string* IdentifiedConnection::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.IdentifiedConnection.id)
  return _s;
}
inline const std::string& IdentifiedConnection::_internal_id() const {
  return _impl_.id_.Get();
}
inline void IdentifiedConnection::_internal_set_id(const std::string& value) {
  ;


  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* IdentifiedConnection::_internal_mutable_id() {
  ;
  return _impl_.id_.Mutable( GetArenaForAllocation());
}
inline std::string* IdentifiedConnection::release_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.IdentifiedConnection.id)
  return _impl_.id_.Release();
}
inline void IdentifiedConnection::set_allocated_id(std::string* value) {
  _impl_.id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.IdentifiedConnection.id)
}

// string client_id = 2 [json_name = "clientId"];
inline void IdentifiedConnection::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& IdentifiedConnection::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IdentifiedConnection::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.IdentifiedConnection.client_id)
}
inline std::string* IdentifiedConnection::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.IdentifiedConnection.client_id)
  return _s;
}
inline const std::string& IdentifiedConnection::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void IdentifiedConnection::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IdentifiedConnection::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* IdentifiedConnection::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.IdentifiedConnection.client_id)
  return _impl_.client_id_.Release();
}
inline void IdentifiedConnection::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.IdentifiedConnection.client_id)
}

// repeated .ibc.core.connection.v1.Version versions = 3 [json_name = "versions"];
inline int IdentifiedConnection::_internal_versions_size() const {
  return _impl_.versions_.size();
}
inline int IdentifiedConnection::versions_size() const {
  return _internal_versions_size();
}
inline void IdentifiedConnection::clear_versions() {
  _internal_mutable_versions()->Clear();
}
inline ::ibc::core::connection::v1::Version* IdentifiedConnection::mutable_versions(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.IdentifiedConnection.versions)
  return _internal_mutable_versions()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >*
IdentifiedConnection::mutable_versions() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.IdentifiedConnection.versions)
  return _internal_mutable_versions();
}
inline const ::ibc::core::connection::v1::Version& IdentifiedConnection::_internal_versions(int index) const {
  return _internal_versions().Get(index);
}
inline const ::ibc::core::connection::v1::Version& IdentifiedConnection::versions(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.versions)
  return _internal_versions(index);
}
inline ::ibc::core::connection::v1::Version* IdentifiedConnection::_internal_add_versions() {
  return _internal_mutable_versions()->Add();
}
inline ::ibc::core::connection::v1::Version* IdentifiedConnection::add_versions() {
  ::ibc::core::connection::v1::Version* _add = _internal_add_versions();
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.IdentifiedConnection.versions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ibc::core::connection::v1::Version >&
IdentifiedConnection::versions() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.IdentifiedConnection.versions)
  return _internal_versions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>&
IdentifiedConnection::_internal_versions() const {
  return _impl_.versions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::ibc::core::connection::v1::Version>*
IdentifiedConnection::_internal_mutable_versions() {
  return &_impl_.versions_;
}

// .ibc.core.connection.v1.State state = 4 [json_name = "state"];
inline void IdentifiedConnection::clear_state() {
  _impl_.state_ = 0;
}
inline ::ibc::core::connection::v1::State IdentifiedConnection::state() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.state)
  return _internal_state();
}
inline void IdentifiedConnection::set_state(::ibc::core::connection::v1::State value) {
   _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.IdentifiedConnection.state)
}
inline ::ibc::core::connection::v1::State IdentifiedConnection::_internal_state() const {
  return static_cast<::ibc::core::connection::v1::State>(_impl_.state_);
}
inline void IdentifiedConnection::_internal_set_state(::ibc::core::connection::v1::State value) {
  ;
  _impl_.state_ = value;
}

// .ibc.core.connection.v1.Counterparty counterparty = 5 [json_name = "counterparty", (.gogoproto.nullable) = false];
inline bool IdentifiedConnection::has_counterparty() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.counterparty_ != nullptr);
  return value;
}
inline void IdentifiedConnection::clear_counterparty() {
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::ibc::core::connection::v1::Counterparty& IdentifiedConnection::_internal_counterparty() const {
  const ::ibc::core::connection::v1::Counterparty* p = _impl_.counterparty_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::connection::v1::Counterparty&>(
      ::ibc::core::connection::v1::_Counterparty_default_instance_);
}
inline const ::ibc::core::connection::v1::Counterparty& IdentifiedConnection::counterparty() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.counterparty)
  return _internal_counterparty();
}
inline void IdentifiedConnection::unsafe_arena_set_allocated_counterparty(
    ::ibc::core::connection::v1::Counterparty* counterparty) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.counterparty_);
  }
  _impl_.counterparty_ = counterparty;
  if (counterparty) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.IdentifiedConnection.counterparty)
}
inline ::ibc::core::connection::v1::Counterparty* IdentifiedConnection::release_counterparty() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* IdentifiedConnection::unsafe_arena_release_counterparty() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.IdentifiedConnection.counterparty)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::connection::v1::Counterparty* temp = _impl_.counterparty_;
  _impl_.counterparty_ = nullptr;
  return temp;
}
inline ::ibc::core::connection::v1::Counterparty* IdentifiedConnection::_internal_mutable_counterparty() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.counterparty_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::connection::v1::Counterparty>(GetArenaForAllocation());
    _impl_.counterparty_ = p;
  }
  return _impl_.counterparty_;
}
inline ::ibc::core::connection::v1::Counterparty* IdentifiedConnection::mutable_counterparty() {
  ::ibc::core::connection::v1::Counterparty* _msg = _internal_mutable_counterparty();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.IdentifiedConnection.counterparty)
  return _msg;
}
inline void IdentifiedConnection::set_allocated_counterparty(::ibc::core::connection::v1::Counterparty* counterparty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.counterparty_;
  }
  if (counterparty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(counterparty);
    if (message_arena != submessage_arena) {
      counterparty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, counterparty, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.counterparty_ = counterparty;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.IdentifiedConnection.counterparty)
}

// uint64 delay_period = 6 [json_name = "delayPeriod"];
inline void IdentifiedConnection::clear_delay_period() {
  _impl_.delay_period_ = ::uint64_t{0u};
}
inline ::uint64_t IdentifiedConnection::delay_period() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.IdentifiedConnection.delay_period)
  return _internal_delay_period();
}
inline void IdentifiedConnection::set_delay_period(::uint64_t value) {
  _internal_set_delay_period(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.IdentifiedConnection.delay_period)
}
inline ::uint64_t IdentifiedConnection::_internal_delay_period() const {
  return _impl_.delay_period_;
}
inline void IdentifiedConnection::_internal_set_delay_period(::uint64_t value) {
  ;
  _impl_.delay_period_ = value;
}

// -------------------------------------------------------------------

// Counterparty

// string client_id = 1 [json_name = "clientId"];
inline void Counterparty::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& Counterparty::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Counterparty.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Counterparty::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Counterparty.client_id)
}
inline std::string* Counterparty::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.Counterparty.client_id)
  return _s;
}
inline const std::string& Counterparty::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void Counterparty::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Counterparty::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Counterparty::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.Counterparty.client_id)
  return _impl_.client_id_.Release();
}
inline void Counterparty::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.Counterparty.client_id)
}

// string connection_id = 2 [json_name = "connectionId"];
inline void Counterparty::clear_connection_id() {
  _impl_.connection_id_.ClearToEmpty();
}
inline const std::string& Counterparty::connection_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Counterparty.connection_id)
  return _internal_connection_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Counterparty::set_connection_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.connection_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Counterparty.connection_id)
}
inline std::string* Counterparty::mutable_connection_id() {
  std::string* _s = _internal_mutable_connection_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.Counterparty.connection_id)
  return _s;
}
inline const std::string& Counterparty::_internal_connection_id() const {
  return _impl_.connection_id_.Get();
}
inline void Counterparty::_internal_set_connection_id(const std::string& value) {
  ;


  _impl_.connection_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Counterparty::_internal_mutable_connection_id() {
  ;
  return _impl_.connection_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Counterparty::release_connection_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.Counterparty.connection_id)
  return _impl_.connection_id_.Release();
}
inline void Counterparty::set_allocated_connection_id(std::string* value) {
  _impl_.connection_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.connection_id_.IsDefault()) {
          _impl_.connection_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.Counterparty.connection_id)
}

// .ibc.core.commitment.v1.MerklePrefix prefix = 3 [json_name = "prefix", (.gogoproto.nullable) = false];
inline bool Counterparty::has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prefix_ != nullptr);
  return value;
}
inline const ::ibc::core::commitment::v1::MerklePrefix& Counterparty::_internal_prefix() const {
  const ::ibc::core::commitment::v1::MerklePrefix* p = _impl_.prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::ibc::core::commitment::v1::MerklePrefix&>(
      ::ibc::core::commitment::v1::_MerklePrefix_default_instance_);
}
inline const ::ibc::core::commitment::v1::MerklePrefix& Counterparty::prefix() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Counterparty.prefix)
  return _internal_prefix();
}
inline void Counterparty::unsafe_arena_set_allocated_prefix(
    ::ibc::core::commitment::v1::MerklePrefix* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prefix_);
  }
  _impl_.prefix_ = prefix;
  if (prefix) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ibc.core.connection.v1.Counterparty.prefix)
}
inline ::ibc::core::commitment::v1::MerklePrefix* Counterparty::release_prefix() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::commitment::v1::MerklePrefix* temp = _impl_.prefix_;
  _impl_.prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ibc::core::commitment::v1::MerklePrefix* Counterparty::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.Counterparty.prefix)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::ibc::core::commitment::v1::MerklePrefix* temp = _impl_.prefix_;
  _impl_.prefix_ = nullptr;
  return temp;
}
inline ::ibc::core::commitment::v1::MerklePrefix* Counterparty::_internal_mutable_prefix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::ibc::core::commitment::v1::MerklePrefix>(GetArenaForAllocation());
    _impl_.prefix_ = p;
  }
  return _impl_.prefix_;
}
inline ::ibc::core::commitment::v1::MerklePrefix* Counterparty::mutable_prefix() {
  ::ibc::core::commitment::v1::MerklePrefix* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.Counterparty.prefix)
  return _msg;
}
inline void Counterparty::set_allocated_prefix(::ibc::core::commitment::v1::MerklePrefix* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prefix_);
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix));
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.Counterparty.prefix)
}

// -------------------------------------------------------------------

// ClientPaths

// repeated string paths = 1 [json_name = "paths"];
inline int ClientPaths::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int ClientPaths::paths_size() const {
  return _internal_paths_size();
}
inline void ClientPaths::clear_paths() {
  _internal_mutable_paths()->Clear();
}
inline std::string* ClientPaths::add_paths() {
  std::string* _s = _internal_add_paths();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.connection.v1.ClientPaths.paths)
  return _s;
}
inline const std::string& ClientPaths::paths(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ClientPaths.paths)
  return _internal_paths(index);
}
inline std::string* ClientPaths::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ClientPaths.paths)
  return _internal_mutable_paths()->Mutable(index);
}
inline void ClientPaths::set_paths(int index, const std::string& value) {
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::set_paths(int index, std::string&& value) {
  _internal_mutable_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::set_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::set_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::set_paths(int index, absl::string_view value) {
  _internal_mutable_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::add_paths(const std::string& value) {
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::add_paths(std::string&& value) {
  _internal_mutable_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::add_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::add_paths(const char* value, std::size_t size) {
  _internal_mutable_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.core.connection.v1.ClientPaths.paths)
}
inline void ClientPaths::add_paths(absl::string_view value) {
  _internal_mutable_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.core.connection.v1.ClientPaths.paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientPaths::paths() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.ClientPaths.paths)
  return _internal_paths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ClientPaths::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.ClientPaths.paths)
  return _internal_mutable_paths();
}
inline const std::string& ClientPaths::_internal_paths(int index) const {
  return _internal_paths().Get(index);
}
inline std::string* ClientPaths::_internal_add_paths() {
  return _internal_mutable_paths()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ClientPaths::_internal_paths() const {
  return _impl_.paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ClientPaths::_internal_mutable_paths() {
  return &_impl_.paths_;
}

// -------------------------------------------------------------------

// ConnectionPaths

// string client_id = 1 [json_name = "clientId"];
inline void ConnectionPaths::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& ConnectionPaths::client_id() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionPaths.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConnectionPaths::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionPaths.client_id)
}
inline std::string* ConnectionPaths::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ConnectionPaths.client_id)
  return _s;
}
inline const std::string& ConnectionPaths::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void ConnectionPaths::_internal_set_client_id(const std::string& value) {
  ;


  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ConnectionPaths::_internal_mutable_client_id() {
  ;
  return _impl_.client_id_.Mutable( GetArenaForAllocation());
}
inline std::string* ConnectionPaths::release_client_id() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.ConnectionPaths.client_id)
  return _impl_.client_id_.Release();
}
inline void ConnectionPaths::set_allocated_client_id(std::string* value) {
  _impl_.client_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.ConnectionPaths.client_id)
}

// repeated string paths = 2 [json_name = "paths"];
inline int ConnectionPaths::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int ConnectionPaths::paths_size() const {
  return _internal_paths_size();
}
inline void ConnectionPaths::clear_paths() {
  _internal_mutable_paths()->Clear();
}
inline std::string* ConnectionPaths::add_paths() {
  std::string* _s = _internal_add_paths();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.connection.v1.ConnectionPaths.paths)
  return _s;
}
inline const std::string& ConnectionPaths::paths(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.ConnectionPaths.paths)
  return _internal_paths(index);
}
inline std::string* ConnectionPaths::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.ConnectionPaths.paths)
  return _internal_mutable_paths()->Mutable(index);
}
inline void ConnectionPaths::set_paths(int index, const std::string& value) {
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::set_paths(int index, std::string&& value) {
  _internal_mutable_paths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::set_paths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::set_paths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_paths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::set_paths(int index, absl::string_view value) {
  _internal_mutable_paths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::add_paths(const std::string& value) {
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::add_paths(std::string&& value) {
  _internal_mutable_paths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::add_paths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_paths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::add_paths(const char* value, std::size_t size) {
  _internal_mutable_paths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline void ConnectionPaths::add_paths(absl::string_view value) {
  _internal_mutable_paths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.core.connection.v1.ConnectionPaths.paths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnectionPaths::paths() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.ConnectionPaths.paths)
  return _internal_paths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ConnectionPaths::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.ConnectionPaths.paths)
  return _internal_mutable_paths();
}
inline const std::string& ConnectionPaths::_internal_paths(int index) const {
  return _internal_paths().Get(index);
}
inline std::string* ConnectionPaths::_internal_add_paths() {
  return _internal_mutable_paths()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnectionPaths::_internal_paths() const {
  return _impl_.paths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnectionPaths::_internal_mutable_paths() {
  return &_impl_.paths_;
}

// -------------------------------------------------------------------

// Version

// string identifier = 1 [json_name = "identifier"];
inline void Version::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& Version::identifier() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Version.identifier)
  return _internal_identifier();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Version::set_identifier(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.identifier_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Version.identifier)
}
inline std::string* Version::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.Version.identifier)
  return _s;
}
inline const std::string& Version::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void Version::_internal_set_identifier(const std::string& value) {
  ;


  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* Version::_internal_mutable_identifier() {
  ;
  return _impl_.identifier_.Mutable( GetArenaForAllocation());
}
inline std::string* Version::release_identifier() {
  // @@protoc_insertion_point(field_release:ibc.core.connection.v1.Version.identifier)
  return _impl_.identifier_.Release();
}
inline void Version::set_allocated_identifier(std::string* value) {
  _impl_.identifier_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.identifier_.IsDefault()) {
          _impl_.identifier_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ibc.core.connection.v1.Version.identifier)
}

// repeated string features = 2 [json_name = "features"];
inline int Version::_internal_features_size() const {
  return _impl_.features_.size();
}
inline int Version::features_size() const {
  return _internal_features_size();
}
inline void Version::clear_features() {
  _internal_mutable_features()->Clear();
}
inline std::string* Version::add_features() {
  std::string* _s = _internal_add_features();
  // @@protoc_insertion_point(field_add_mutable:ibc.core.connection.v1.Version.features)
  return _s;
}
inline const std::string& Version::features(int index) const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Version.features)
  return _internal_features(index);
}
inline std::string* Version::mutable_features(int index) {
  // @@protoc_insertion_point(field_mutable:ibc.core.connection.v1.Version.features)
  return _internal_mutable_features()->Mutable(index);
}
inline void Version::set_features(int index, const std::string& value) {
  _internal_mutable_features()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Version.features)
}
inline void Version::set_features(int index, std::string&& value) {
  _internal_mutable_features()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Version.features)
}
inline void Version::set_features(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_features()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ibc.core.connection.v1.Version.features)
}
inline void Version::set_features(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_features()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ibc.core.connection.v1.Version.features)
}
inline void Version::set_features(int index, absl::string_view value) {
  _internal_mutable_features()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:ibc.core.connection.v1.Version.features)
}
inline void Version::add_features(const std::string& value) {
  _internal_mutable_features()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.Version.features)
}
inline void Version::add_features(std::string&& value) {
  _internal_mutable_features()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:ibc.core.connection.v1.Version.features)
}
inline void Version::add_features(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_features()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ibc.core.connection.v1.Version.features)
}
inline void Version::add_features(const char* value, std::size_t size) {
  _internal_mutable_features()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ibc.core.connection.v1.Version.features)
}
inline void Version::add_features(absl::string_view value) {
  _internal_mutable_features()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:ibc.core.connection.v1.Version.features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Version::features() const {
  // @@protoc_insertion_point(field_list:ibc.core.connection.v1.Version.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Version::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:ibc.core.connection.v1.Version.features)
  return _internal_mutable_features();
}
inline const std::string& Version::_internal_features(int index) const {
  return _internal_features().Get(index);
}
inline std::string* Version::_internal_add_features() {
  return _internal_mutable_features()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Version::_internal_features() const {
  return _impl_.features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Version::_internal_mutable_features() {
  return &_impl_.features_;
}

// -------------------------------------------------------------------

// Params

// uint64 max_expected_time_per_block = 1 [json_name = "maxExpectedTimePerBlock"];
inline void Params::clear_max_expected_time_per_block() {
  _impl_.max_expected_time_per_block_ = ::uint64_t{0u};
}
inline ::uint64_t Params::max_expected_time_per_block() const {
  // @@protoc_insertion_point(field_get:ibc.core.connection.v1.Params.max_expected_time_per_block)
  return _internal_max_expected_time_per_block();
}
inline void Params::set_max_expected_time_per_block(::uint64_t value) {
  _internal_set_max_expected_time_per_block(value);
  // @@protoc_insertion_point(field_set:ibc.core.connection.v1.Params.max_expected_time_per_block)
}
inline ::uint64_t Params::_internal_max_expected_time_per_block() const {
  return _impl_.max_expected_time_per_block_;
}
inline void Params::_internal_set_max_expected_time_per_block(::uint64_t value) {
  ;
  _impl_.max_expected_time_per_block_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::ibc::core::connection::v1::State> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::ibc::core::connection::v1::State>() {
  return ::ibc::core::connection::v1::State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto_2epb_2eh

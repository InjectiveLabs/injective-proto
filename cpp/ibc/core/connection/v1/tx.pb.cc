// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ibc/core/connection/v1/tx.proto

#include "ibc/core/connection/v1/tx.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenInit::MsgConnectionOpenInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.delay_period_)*/ ::uint64_t{0u}
} {}
struct MsgConnectionOpenInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenInitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenInitDefaultTypeInternal() {}
  union {
    MsgConnectionOpenInit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenInitDefaultTypeInternal _MsgConnectionOpenInit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenInitResponse::MsgConnectionOpenInitResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgConnectionOpenInitResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenInitResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenInitResponseDefaultTypeInternal() {}
  union {
    MsgConnectionOpenInitResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenInitResponseDefaultTypeInternal _MsgConnectionOpenInitResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenTry::MsgConnectionOpenTry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.counterparty_versions_)*/{}
  , /*decltype(_impl_.client_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.previous_connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_init_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_client_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_consensus_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.host_consensus_state_proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.client_state_)*/nullptr
  , /*decltype(_impl_.counterparty_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.consensus_height_)*/nullptr
  , /*decltype(_impl_.delay_period_)*/ ::uint64_t{0u}
} {}
struct MsgConnectionOpenTryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenTryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenTryDefaultTypeInternal() {}
  union {
    MsgConnectionOpenTry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenTryDefaultTypeInternal _MsgConnectionOpenTry_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenTryResponse::MsgConnectionOpenTryResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgConnectionOpenTryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenTryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenTryResponseDefaultTypeInternal() {}
  union {
    MsgConnectionOpenTryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenTryResponseDefaultTypeInternal _MsgConnectionOpenTryResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenAck::MsgConnectionOpenAck(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.counterparty_connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_try_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_client_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_consensus_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.host_consensus_state_proof_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.client_state_)*/nullptr
  , /*decltype(_impl_.proof_height_)*/nullptr
  , /*decltype(_impl_.consensus_height_)*/nullptr} {}
struct MsgConnectionOpenAckDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenAckDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenAckDefaultTypeInternal() {}
  union {
    MsgConnectionOpenAck _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenAckDefaultTypeInternal _MsgConnectionOpenAck_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenAckResponse::MsgConnectionOpenAckResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgConnectionOpenAckResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenAckResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenAckResponseDefaultTypeInternal() {}
  union {
    MsgConnectionOpenAckResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenAckResponseDefaultTypeInternal _MsgConnectionOpenAckResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenConfirm::MsgConnectionOpenConfirm(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.connection_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_ack_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signer_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_height_)*/nullptr} {}
struct MsgConnectionOpenConfirmDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenConfirmDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenConfirmDefaultTypeInternal() {}
  union {
    MsgConnectionOpenConfirm _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenConfirmDefaultTypeInternal _MsgConnectionOpenConfirm_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgConnectionOpenConfirmResponse::MsgConnectionOpenConfirmResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgConnectionOpenConfirmResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgConnectionOpenConfirmResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgConnectionOpenConfirmResponseDefaultTypeInternal() {}
  union {
    MsgConnectionOpenConfirmResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgConnectionOpenConfirmResponseDefaultTypeInternal _MsgConnectionOpenConfirmResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateParams::MsgUpdateParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.authority_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.params_)*/nullptr} {}
struct MsgUpdateParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateParamsDefaultTypeInternal() {}
  union {
    MsgUpdateParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateParamsDefaultTypeInternal _MsgUpdateParams_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR MsgUpdateParamsResponse::MsgUpdateParamsResponse(
    ::_pbi::ConstantInitialized) {}
struct MsgUpdateParamsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUpdateParamsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUpdateParamsResponseDefaultTypeInternal() {}
  union {
    MsgUpdateParamsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUpdateParamsResponseDefaultTypeInternal _MsgUpdateParamsResponse_default_instance_;
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
static ::_pb::Metadata file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto = nullptr;
const ::uint32_t TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_.delay_period_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInit, _impl_.signer_),
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenInitResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.previous_connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.client_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.counterparty_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.delay_period_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.counterparty_versions_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.proof_init_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.proof_client_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.proof_consensus_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.consensus_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.signer_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTry, _impl_.host_consensus_state_proof_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    2,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenTryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.counterparty_connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.client_state_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.proof_try_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.proof_client_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.proof_consensus_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.consensus_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.signer_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAck, _impl_.host_consensus_state_proof_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    3,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenAckResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _impl_.connection_id_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _impl_.proof_ack_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _impl_.proof_height_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirm, _impl_.signer_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgUpdateParams, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgUpdateParams, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgUpdateParams, _impl_.authority_),
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgUpdateParams, _impl_.params_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::ibc::core::connection::v1::MsgUpdateParamsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 13, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenInit)},
        { 18, -1, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenInitResponse)},
        { 26, 47, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenTry)},
        { 60, -1, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenTryResponse)},
        { 68, 87, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenAck)},
        { 98, -1, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenAckResponse)},
        { 106, 118, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenConfirm)},
        { 122, -1, -1, sizeof(::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse)},
        { 130, 140, -1, sizeof(::ibc::core::connection::v1::MsgUpdateParams)},
        { 142, -1, -1, sizeof(::ibc::core::connection::v1::MsgUpdateParamsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::ibc::core::connection::v1::_MsgConnectionOpenInit_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenInitResponse_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenTry_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenTryResponse_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenAck_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenAckResponse_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenConfirm_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgConnectionOpenConfirmResponse_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgUpdateParams_default_instance_._instance,
    &::ibc::core::connection::v1::_MsgUpdateParamsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037ibc/core/connection/v1/tx.proto\022\026ibc.c"
    "ore.connection.v1\032\024gogoproto/gogo.proto\032"
    "\027cosmos/msg/v1/msg.proto\032\031google/protobu"
    "f/any.proto\032\037ibc/core/client/v1/client.p"
    "roto\032\'ibc/core/connection/v1/connection."
    "proto\"\213\002\n\025MsgConnectionOpenInit\022\033\n\tclien"
    "t_id\030\001 \001(\tR\010clientId\022N\n\014counterparty\030\002 \001"
    "(\0132$.ibc.core.connection.v1.Counterparty"
    "B\004\310\336\037\000R\014counterparty\0229\n\007version\030\003 \001(\0132\037."
    "ibc.core.connection.v1.VersionR\007version\022"
    "!\n\014delay_period\030\004 \001(\004R\013delayPeriod\022\026\n\006si"
    "gner\030\005 \001(\tR\006signer:\017\210\240\037\000\202\347\260*\006signer\"\037\n\035M"
    "sgConnectionOpenInitResponse\"\322\005\n\024MsgConn"
    "ectionOpenTry\022\033\n\tclient_id\030\001 \001(\tR\010client"
    "Id\0228\n\026previous_connection_id\030\002 \001(\tB\002\030\001R\024"
    "previousConnectionId\0227\n\014client_state\030\003 \001"
    "(\0132\024.google.protobuf.AnyR\013clientState\022N\n"
    "\014counterparty\030\004 \001(\0132$.ibc.core.connectio"
    "n.v1.CounterpartyB\004\310\336\037\000R\014counterparty\022!\n"
    "\014delay_period\030\005 \001(\004R\013delayPeriod\022T\n\025coun"
    "terparty_versions\030\006 \003(\0132\037.ibc.core.conne"
    "ction.v1.VersionR\024counterpartyVersions\022C"
    "\n\014proof_height\030\007 \001(\0132\032.ibc.core.client.v"
    "1.HeightB\004\310\336\037\000R\013proofHeight\022\035\n\nproof_ini"
    "t\030\010 \001(\014R\tproofInit\022!\n\014proof_client\030\t \001(\014"
    "R\013proofClient\022\'\n\017proof_consensus\030\n \001(\014R\016"
    "proofConsensus\022K\n\020consensus_height\030\013 \001(\013"
    "2\032.ibc.core.client.v1.HeightB\004\310\336\037\000R\017cons"
    "ensusHeight\022\026\n\006signer\030\014 \001(\tR\006signer\022;\n\032h"
    "ost_consensus_state_proof\030\r \001(\014R\027hostCon"
    "sensusStateProof:\017\210\240\037\000\202\347\260*\006signer\"\036\n\034Msg"
    "ConnectionOpenTryResponse\"\316\004\n\024MsgConnect"
    "ionOpenAck\022#\n\rconnection_id\030\001 \001(\tR\014conne"
    "ctionId\022<\n\032counterparty_connection_id\030\002 "
    "\001(\tR\030counterpartyConnectionId\0229\n\007version"
    "\030\003 \001(\0132\037.ibc.core.connection.v1.VersionR"
    "\007version\0227\n\014client_state\030\004 \001(\0132\024.google."
    "protobuf.AnyR\013clientState\022C\n\014proof_heigh"
    "t\030\005 \001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037"
    "\000R\013proofHeight\022\033\n\tproof_try\030\006 \001(\014R\010proof"
    "Try\022!\n\014proof_client\030\007 \001(\014R\013proofClient\022\'"
    "\n\017proof_consensus\030\010 \001(\014R\016proofConsensus\022"
    "K\n\020consensus_height\030\t \001(\0132\032.ibc.core.cli"
    "ent.v1.HeightB\004\310\336\037\000R\017consensusHeight\022\026\n\006"
    "signer\030\n \001(\tR\006signer\022;\n\032host_consensus_s"
    "tate_proof\030\013 \001(\014R\027hostConsensusStateProo"
    "f:\017\210\240\037\000\202\347\260*\006signer\"\036\n\034MsgConnectionOpenA"
    "ckResponse\"\312\001\n\030MsgConnectionOpenConfirm\022"
    "#\n\rconnection_id\030\001 \001(\tR\014connectionId\022\033\n\t"
    "proof_ack\030\002 \001(\014R\010proofAck\022C\n\014proof_heigh"
    "t\030\003 \001(\0132\032.ibc.core.client.v1.HeightB\004\310\336\037"
    "\000R\013proofHeight\022\026\n\006signer\030\004 \001(\tR\006signer:\017"
    "\210\240\037\000\202\347\260*\006signer\"\"\n MsgConnectionOpenConf"
    "irmResponse\"\201\001\n\017MsgUpdateParams\022\034\n\tautho"
    "rity\030\001 \001(\tR\tauthority\022<\n\006params\030\002 \001(\0132\036."
    "ibc.core.connection.v1.ParamsB\004\310\336\037\000R\006par"
    "ams:\022\210\240\037\000\202\347\260*\tauthority\"\031\n\027MsgUpdatePara"
    "msResponse2\364\004\n\003Msg\022z\n\022ConnectionOpenInit"
    "\022-.ibc.core.connection.v1.MsgConnectionO"
    "penInit\0325.ibc.core.connection.v1.MsgConn"
    "ectionOpenInitResponse\022w\n\021ConnectionOpen"
    "Try\022,.ibc.core.connection.v1.MsgConnecti"
    "onOpenTry\0324.ibc.core.connection.v1.MsgCo"
    "nnectionOpenTryResponse\022w\n\021ConnectionOpe"
    "nAck\022,.ibc.core.connection.v1.MsgConnect"
    "ionOpenAck\0324.ibc.core.connection.v1.MsgC"
    "onnectionOpenAckResponse\022\203\001\n\025ConnectionO"
    "penConfirm\0220.ibc.core.connection.v1.MsgC"
    "onnectionOpenConfirm\0328.ibc.core.connecti"
    "on.v1.MsgConnectionOpenConfirmResponse\022r"
    "\n\026UpdateConnectionParams\022\'.ibc.core.conn"
    "ection.v1.MsgUpdateParams\032/.ibc.core.con"
    "nection.v1.MsgUpdateParamsResponse\032\005\200\347\260*"
    "\001B\336\001\n\032com.ibc.core.connection.v1B\007TxProt"
    "oP\001Z<github.com/cosmos/ibc-go/v7/modules"
    "/core/03-connection/types\242\002\003ICC\252\002\026Ibc.Co"
    "re.Connection.V1\312\002\026Ibc\\Core\\Connection\\V"
    "1\342\002\"Ibc\\Core\\Connection\\V1\\GPBMetadata\352\002"
    "\031Ibc::Core::Connection::V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_deps[5] =
    {
        &::descriptor_table_cosmos_2fmsg_2fv1_2fmsg_2eproto,
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fany_2eproto,
        &::descriptor_table_ibc_2fcore_2fclient_2fv1_2fclient_2eproto,
        &::descriptor_table_ibc_2fcore_2fconnection_2fv1_2fconnection_2eproto,
};
static ::absl::once_flag descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto = {
    false,
    false,
    3154,
    descriptor_table_protodef_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto,
    "ibc/core/connection/v1/tx.proto",
    &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
    descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_deps,
    5,
    10,
    schemas,
    file_default_instances,
    TableStruct_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto::offsets,
    file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto,
    file_level_enum_descriptors_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto,
    file_level_service_descriptors_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter() {
  return &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto(&descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto);
namespace ibc {
namespace core {
namespace connection {
namespace v1 {
// ===================================================================

class MsgConnectionOpenInit::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgConnectionOpenInit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgConnectionOpenInit, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::Counterparty& counterparty(const MsgConnectionOpenInit* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::connection::v1::Version& version(const MsgConnectionOpenInit* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ibc::core::connection::v1::Counterparty&
MsgConnectionOpenInit::_Internal::counterparty(const MsgConnectionOpenInit* msg) {
  return *msg->_impl_.counterparty_;
}
const ::ibc::core::connection::v1::Version&
MsgConnectionOpenInit::_Internal::version(const MsgConnectionOpenInit* msg) {
  return *msg->_impl_.version_;
}
void MsgConnectionOpenInit::clear_counterparty() {
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgConnectionOpenInit::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MsgConnectionOpenInit::MsgConnectionOpenInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenInit)
}
MsgConnectionOpenInit::MsgConnectionOpenInit(const MsgConnectionOpenInit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgConnectionOpenInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.delay_period_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::connection::v1::Counterparty(*from._impl_.counterparty_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.version_ = new ::ibc::core::connection::v1::Version(*from._impl_.version_);
  }
  _this->_impl_.delay_period_ = from._impl_.delay_period_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenInit)
}

inline void MsgConnectionOpenInit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.delay_period_) { ::uint64_t{0u} }

  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgConnectionOpenInit::~MsgConnectionOpenInit() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.MsgConnectionOpenInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgConnectionOpenInit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.client_id_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.counterparty_;
  if (this != internal_default_instance()) delete _impl_.version_;
}

void MsgConnectionOpenInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgConnectionOpenInit::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.MsgConnectionOpenInit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.counterparty_ != nullptr);
      _impl_.counterparty_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
  }
  _impl_.delay_period_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgConnectionOpenInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenInit.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Counterparty counterparty = 2 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 delay_period = 4 [json_name = "delayPeriod"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.delay_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 5 [json_name = "signer"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenInit.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgConnectionOpenInit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.MsgConnectionOpenInit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenInit.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.Counterparty counterparty = 2 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // uint64 delay_period = 4 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_delay_period(), target);
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenInit.signer");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.MsgConnectionOpenInit)
  return target;
}

::size_t MsgConnectionOpenInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.MsgConnectionOpenInit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string signer = 5 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .ibc.core.connection.v1.Counterparty counterparty = 2 [json_name = "counterparty", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counterparty_);
    }

    // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

  }
  // uint64 delay_period = 4 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_delay_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenInit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgConnectionOpenInit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenInit::GetClassData() const { return &_class_data_; }


void MsgConnectionOpenInit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgConnectionOpenInit*>(&to_msg);
  auto& from = static_cast<const MsgConnectionOpenInit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.MsgConnectionOpenInit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_counterparty()->::ibc::core::connection::v1::Counterparty::MergeFrom(
          from._internal_counterparty());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_version()->::ibc::core::connection::v1::Version::MergeFrom(
          from._internal_version());
    }
  }
  if (from._internal_delay_period() != 0) {
    _this->_internal_set_delay_period(from._internal_delay_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgConnectionOpenInit::CopyFrom(const MsgConnectionOpenInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.MsgConnectionOpenInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConnectionOpenInit::IsInitialized() const {
  return true;
}

void MsgConnectionOpenInit::InternalSwap(MsgConnectionOpenInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgConnectionOpenInit, _impl_.delay_period_)
      + sizeof(MsgConnectionOpenInit::_impl_.delay_period_)
      - PROTOBUF_FIELD_OFFSET(MsgConnectionOpenInit, _impl_.counterparty_)>(
          reinterpret_cast<char*>(&_impl_.counterparty_),
          reinterpret_cast<char*>(&other->_impl_.counterparty_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenInit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[0]);
}
// ===================================================================

class MsgConnectionOpenInitResponse::_Internal {
 public:
};

MsgConnectionOpenInitResponse::MsgConnectionOpenInitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenInitResponse)
}
MsgConnectionOpenInitResponse::MsgConnectionOpenInitResponse(const MsgConnectionOpenInitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgConnectionOpenInitResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenInitResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenInitResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenInitResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenInitResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[1]);
}
// ===================================================================

class MsgConnectionOpenTry::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgConnectionOpenTry>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgConnectionOpenTry, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Any& client_state(const MsgConnectionOpenTry* msg);
  static void set_has_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ibc::core::connection::v1::Counterparty& counterparty(const MsgConnectionOpenTry* msg);
  static void set_has_counterparty(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgConnectionOpenTry* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ibc::core::client::v1::Height& consensus_height(const MsgConnectionOpenTry* msg);
  static void set_has_consensus_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Any&
MsgConnectionOpenTry::_Internal::client_state(const MsgConnectionOpenTry* msg) {
  return *msg->_impl_.client_state_;
}
const ::ibc::core::connection::v1::Counterparty&
MsgConnectionOpenTry::_Internal::counterparty(const MsgConnectionOpenTry* msg) {
  return *msg->_impl_.counterparty_;
}
const ::ibc::core::client::v1::Height&
MsgConnectionOpenTry::_Internal::proof_height(const MsgConnectionOpenTry* msg) {
  return *msg->_impl_.proof_height_;
}
const ::ibc::core::client::v1::Height&
MsgConnectionOpenTry::_Internal::consensus_height(const MsgConnectionOpenTry* msg) {
  return *msg->_impl_.consensus_height_;
}
void MsgConnectionOpenTry::clear_client_state() {
  if (_impl_.client_state_ != nullptr) _impl_.client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgConnectionOpenTry::clear_counterparty() {
  if (_impl_.counterparty_ != nullptr) _impl_.counterparty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MsgConnectionOpenTry::clear_counterparty_versions() {
  _internal_mutable_counterparty_versions()->Clear();
}
void MsgConnectionOpenTry::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MsgConnectionOpenTry::clear_consensus_height() {
  if (_impl_.consensus_height_ != nullptr) _impl_.consensus_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
MsgConnectionOpenTry::MsgConnectionOpenTry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenTry)
}
MsgConnectionOpenTry::MsgConnectionOpenTry(const MsgConnectionOpenTry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgConnectionOpenTry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counterparty_versions_){from._impl_.counterparty_versions_}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.previous_connection_id_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.proof_client_) {}

    , decltype(_impl_.proof_consensus_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.host_consensus_state_proof_) {}

    , decltype(_impl_.client_state_){nullptr}
    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.consensus_height_){nullptr}
    , decltype(_impl_.delay_period_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_client_id().empty()) {
    _this->_impl_.client_id_.Set(from._internal_client_id(), _this->GetArenaForAllocation());
  }
  _impl_.previous_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_previous_connection_id().empty()) {
    _this->_impl_.previous_connection_id_.Set(from._internal_previous_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_init().empty()) {
    _this->_impl_.proof_init_.Set(from._internal_proof_init(), _this->GetArenaForAllocation());
  }
  _impl_.proof_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_client_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_client().empty()) {
    _this->_impl_.proof_client_.Set(from._internal_proof_client(), _this->GetArenaForAllocation());
  }
  _impl_.proof_consensus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_consensus_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_consensus().empty()) {
    _this->_impl_.proof_consensus_.Set(from._internal_proof_consensus(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  _impl_.host_consensus_state_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_consensus_state_proof().empty()) {
    _this->_impl_.host_consensus_state_proof_.Set(from._internal_host_consensus_state_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.client_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.counterparty_ = new ::ibc::core::connection::v1::Counterparty(*from._impl_.counterparty_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.consensus_height_ = new ::ibc::core::client::v1::Height(*from._impl_.consensus_height_);
  }
  _this->_impl_.delay_period_ = from._impl_.delay_period_;
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenTry)
}

inline void MsgConnectionOpenTry::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.counterparty_versions_){arena}
    , decltype(_impl_.client_id_) {}

    , decltype(_impl_.previous_connection_id_) {}

    , decltype(_impl_.proof_init_) {}

    , decltype(_impl_.proof_client_) {}

    , decltype(_impl_.proof_consensus_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.host_consensus_state_proof_) {}

    , decltype(_impl_.client_state_){nullptr}
    , decltype(_impl_.counterparty_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.consensus_height_){nullptr}
    , decltype(_impl_.delay_period_) { ::uint64_t{0u} }

  };
  _impl_.client_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.client_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.previous_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_init_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_init_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_client_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_consensus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_consensus_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_consensus_state_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgConnectionOpenTry::~MsgConnectionOpenTry() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.MsgConnectionOpenTry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgConnectionOpenTry::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_counterparty_versions()->~RepeatedPtrField();
  _impl_.client_id_.Destroy();
  _impl_.previous_connection_id_.Destroy();
  _impl_.proof_init_.Destroy();
  _impl_.proof_client_.Destroy();
  _impl_.proof_consensus_.Destroy();
  _impl_.signer_.Destroy();
  _impl_.host_consensus_state_proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.client_state_;
  if (this != internal_default_instance()) delete _impl_.counterparty_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
  if (this != internal_default_instance()) delete _impl_.consensus_height_;
}

void MsgConnectionOpenTry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgConnectionOpenTry::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.MsgConnectionOpenTry)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_counterparty_versions()->Clear();
  _impl_.client_id_.ClearToEmpty();
  _impl_.previous_connection_id_.ClearToEmpty();
  _impl_.proof_init_.ClearToEmpty();
  _impl_.proof_client_.ClearToEmpty();
  _impl_.proof_consensus_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  _impl_.host_consensus_state_proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.client_state_ != nullptr);
      _impl_.client_state_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.counterparty_ != nullptr);
      _impl_.counterparty_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.consensus_height_ != nullptr);
      _impl_.consensus_height_->Clear();
    }
  }
  _impl_.delay_period_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgConnectionOpenTry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string client_id = 1 [json_name = "clientId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenTry.client_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string previous_connection_id = 2 [json_name = "previousConnectionId", deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_previous_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any client_state = 3 [json_name = "clientState"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_counterparty(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 delay_period = 5 [json_name = "delayPeriod"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.delay_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .ibc.core.connection.v1.Version counterparty_versions = 6 [json_name = "counterpartyVersions"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_counterparty_versions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 7 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_init = 8 [json_name = "proofInit"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_proof_init();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_client = 9 [json_name = "proofClient"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_proof_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_consensus = 10 [json_name = "proofConsensus"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_proof_consensus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height consensus_height = 11 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 12 [json_name = "signer"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenTry.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes host_consensus_state_proof = 13 [json_name = "hostConsensusStateProof"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_host_consensus_state_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgConnectionOpenTry::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.MsgConnectionOpenTry)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenTry.client_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string previous_connection_id = 2 [json_name = "previousConnectionId", deprecated = true];
  if (!this->_internal_previous_connection_id().empty()) {
    const std::string& _s = this->_internal_previous_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenTry.previous_connection_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Any client_state = 3 [json_name = "clientState"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client_state(this),
        _Internal::client_state(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::counterparty(this),
        _Internal::counterparty(this).GetCachedSize(), target, stream);
  }

  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_delay_period(), target);
  }

  // repeated .ibc.core.connection.v1.Version counterparty_versions = 6 [json_name = "counterpartyVersions"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_counterparty_versions_size()); i < n; i++) {
    const auto& repfield = this->_internal_counterparty_versions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height proof_height = 7 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // bytes proof_init = 8 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    const std::string& _s = this->_internal_proof_init();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes proof_client = 9 [json_name = "proofClient"];
  if (!this->_internal_proof_client().empty()) {
    const std::string& _s = this->_internal_proof_client();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bytes proof_consensus = 10 [json_name = "proofConsensus"];
  if (!this->_internal_proof_consensus().empty()) {
    const std::string& _s = this->_internal_proof_consensus();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // .ibc.core.client.v1.Height consensus_height = 11 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::consensus_height(this),
        _Internal::consensus_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 12 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenTry.signer");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // bytes host_consensus_state_proof = 13 [json_name = "hostConsensusStateProof"];
  if (!this->_internal_host_consensus_state_proof().empty()) {
    const std::string& _s = this->_internal_host_consensus_state_proof();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.MsgConnectionOpenTry)
  return target;
}

::size_t MsgConnectionOpenTry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.MsgConnectionOpenTry)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ibc.core.connection.v1.Version counterparty_versions = 6 [json_name = "counterpartyVersions"];
  total_size += 1UL * this->_internal_counterparty_versions_size();
  for (const auto& msg : this->_internal_counterparty_versions()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 1 [json_name = "clientId"];
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string previous_connection_id = 2 [json_name = "previousConnectionId", deprecated = true];
  if (!this->_internal_previous_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_previous_connection_id());
  }

  // bytes proof_init = 8 [json_name = "proofInit"];
  if (!this->_internal_proof_init().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_init());
  }

  // bytes proof_client = 9 [json_name = "proofClient"];
  if (!this->_internal_proof_client().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_client());
  }

  // bytes proof_consensus = 10 [json_name = "proofConsensus"];
  if (!this->_internal_proof_consensus().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_consensus());
  }

  // string signer = 12 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // bytes host_consensus_state_proof = 13 [json_name = "hostConsensusStateProof"];
  if (!this->_internal_host_consensus_state_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_host_consensus_state_proof());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .google.protobuf.Any client_state = 3 [json_name = "clientState"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.client_state_);
    }

    // .ibc.core.connection.v1.Counterparty counterparty = 4 [json_name = "counterparty", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.counterparty_);
    }

    // .ibc.core.client.v1.Height proof_height = 7 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

    // .ibc.core.client.v1.Height consensus_height = 11 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consensus_height_);
    }

  }
  // uint64 delay_period = 5 [json_name = "delayPeriod"];
  if (this->_internal_delay_period() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_delay_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenTry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgConnectionOpenTry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenTry::GetClassData() const { return &_class_data_; }


void MsgConnectionOpenTry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgConnectionOpenTry*>(&to_msg);
  auto& from = static_cast<const MsgConnectionOpenTry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.MsgConnectionOpenTry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_counterparty_versions()->MergeFrom(from._internal_counterparty_versions());
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_previous_connection_id().empty()) {
    _this->_internal_set_previous_connection_id(from._internal_previous_connection_id());
  }
  if (!from._internal_proof_init().empty()) {
    _this->_internal_set_proof_init(from._internal_proof_init());
  }
  if (!from._internal_proof_client().empty()) {
    _this->_internal_set_proof_client(from._internal_proof_client());
  }
  if (!from._internal_proof_consensus().empty()) {
    _this->_internal_set_proof_consensus(from._internal_proof_consensus());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (!from._internal_host_consensus_state_proof().empty()) {
    _this->_internal_set_host_consensus_state_proof(from._internal_host_consensus_state_proof());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_client_state());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_counterparty()->::ibc::core::connection::v1::Counterparty::MergeFrom(
          from._internal_counterparty());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_consensus_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_consensus_height());
    }
  }
  if (from._internal_delay_period() != 0) {
    _this->_internal_set_delay_period(from._internal_delay_period());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgConnectionOpenTry::CopyFrom(const MsgConnectionOpenTry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.MsgConnectionOpenTry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConnectionOpenTry::IsInitialized() const {
  return true;
}

void MsgConnectionOpenTry::InternalSwap(MsgConnectionOpenTry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_counterparty_versions()->InternalSwap(other->_internal_mutable_counterparty_versions());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, lhs_arena,
                                       &other->_impl_.client_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.previous_connection_id_, lhs_arena,
                                       &other->_impl_.previous_connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_init_, lhs_arena,
                                       &other->_impl_.proof_init_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_client_, lhs_arena,
                                       &other->_impl_.proof_client_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_consensus_, lhs_arena,
                                       &other->_impl_.proof_consensus_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_consensus_state_proof_, lhs_arena,
                                       &other->_impl_.host_consensus_state_proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgConnectionOpenTry, _impl_.delay_period_)
      + sizeof(MsgConnectionOpenTry::_impl_.delay_period_)
      - PROTOBUF_FIELD_OFFSET(MsgConnectionOpenTry, _impl_.client_state_)>(
          reinterpret_cast<char*>(&_impl_.client_state_),
          reinterpret_cast<char*>(&other->_impl_.client_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenTry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[2]);
}
// ===================================================================

class MsgConnectionOpenTryResponse::_Internal {
 public:
};

MsgConnectionOpenTryResponse::MsgConnectionOpenTryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenTryResponse)
}
MsgConnectionOpenTryResponse::MsgConnectionOpenTryResponse(const MsgConnectionOpenTryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgConnectionOpenTryResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenTryResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenTryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenTryResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenTryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[3]);
}
// ===================================================================

class MsgConnectionOpenAck::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgConnectionOpenAck>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgConnectionOpenAck, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::Version& version(const MsgConnectionOpenAck* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Any& client_state(const MsgConnectionOpenAck* msg);
  static void set_has_client_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ibc::core::client::v1::Height& proof_height(const MsgConnectionOpenAck* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ibc::core::client::v1::Height& consensus_height(const MsgConnectionOpenAck* msg);
  static void set_has_consensus_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ibc::core::connection::v1::Version&
MsgConnectionOpenAck::_Internal::version(const MsgConnectionOpenAck* msg) {
  return *msg->_impl_.version_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
MsgConnectionOpenAck::_Internal::client_state(const MsgConnectionOpenAck* msg) {
  return *msg->_impl_.client_state_;
}
const ::ibc::core::client::v1::Height&
MsgConnectionOpenAck::_Internal::proof_height(const MsgConnectionOpenAck* msg) {
  return *msg->_impl_.proof_height_;
}
const ::ibc::core::client::v1::Height&
MsgConnectionOpenAck::_Internal::consensus_height(const MsgConnectionOpenAck* msg) {
  return *msg->_impl_.consensus_height_;
}
void MsgConnectionOpenAck::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MsgConnectionOpenAck::clear_client_state() {
  if (_impl_.client_state_ != nullptr) _impl_.client_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MsgConnectionOpenAck::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MsgConnectionOpenAck::clear_consensus_height() {
  if (_impl_.consensus_height_ != nullptr) _impl_.consensus_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
MsgConnectionOpenAck::MsgConnectionOpenAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenAck)
}
MsgConnectionOpenAck::MsgConnectionOpenAck(const MsgConnectionOpenAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgConnectionOpenAck* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.counterparty_connection_id_) {}

    , decltype(_impl_.proof_try_) {}

    , decltype(_impl_.proof_client_) {}

    , decltype(_impl_.proof_consensus_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.host_consensus_state_proof_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.client_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.consensus_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.counterparty_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_counterparty_connection_id().empty()) {
    _this->_impl_.counterparty_connection_id_.Set(from._internal_counterparty_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_try_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_try_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_try().empty()) {
    _this->_impl_.proof_try_.Set(from._internal_proof_try(), _this->GetArenaForAllocation());
  }
  _impl_.proof_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_client_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_client().empty()) {
    _this->_impl_.proof_client_.Set(from._internal_proof_client(), _this->GetArenaForAllocation());
  }
  _impl_.proof_consensus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_consensus_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_consensus().empty()) {
    _this->_impl_.proof_consensus_.Set(from._internal_proof_consensus(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  _impl_.host_consensus_state_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_consensus_state_proof().empty()) {
    _this->_impl_.host_consensus_state_proof_.Set(from._internal_host_consensus_state_proof(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.version_ = new ::ibc::core::connection::v1::Version(*from._impl_.version_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.client_state_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.client_state_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.consensus_height_ = new ::ibc::core::client::v1::Height(*from._impl_.consensus_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenAck)
}

inline void MsgConnectionOpenAck::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.counterparty_connection_id_) {}

    , decltype(_impl_.proof_try_) {}

    , decltype(_impl_.proof_client_) {}

    , decltype(_impl_.proof_consensus_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.host_consensus_state_proof_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.client_state_){nullptr}
    , decltype(_impl_.proof_height_){nullptr}
    , decltype(_impl_.consensus_height_){nullptr}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.counterparty_connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.counterparty_connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_try_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_try_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_client_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_client_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_consensus_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_consensus_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_consensus_state_proof_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.host_consensus_state_proof_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgConnectionOpenAck::~MsgConnectionOpenAck() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.MsgConnectionOpenAck)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgConnectionOpenAck::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.counterparty_connection_id_.Destroy();
  _impl_.proof_try_.Destroy();
  _impl_.proof_client_.Destroy();
  _impl_.proof_consensus_.Destroy();
  _impl_.signer_.Destroy();
  _impl_.host_consensus_state_proof_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.client_state_;
  if (this != internal_default_instance()) delete _impl_.proof_height_;
  if (this != internal_default_instance()) delete _impl_.consensus_height_;
}

void MsgConnectionOpenAck::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgConnectionOpenAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.MsgConnectionOpenAck)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.counterparty_connection_id_.ClearToEmpty();
  _impl_.proof_try_.ClearToEmpty();
  _impl_.proof_client_.ClearToEmpty();
  _impl_.proof_consensus_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  _impl_.host_consensus_state_proof_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.client_state_ != nullptr);
      _impl_.client_state_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.proof_height_ != nullptr);
      _impl_.proof_height_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.consensus_height_ != nullptr);
      _impl_.consensus_height_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgConnectionOpenAck::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1 [json_name = "connectionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenAck.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string counterparty_connection_id = 2 [json_name = "counterpartyConnectionId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_counterparty_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Any client_state = 4 [json_name = "clientState"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 5 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_try = 6 [json_name = "proofTry"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_proof_try();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_client = 7 [json_name = "proofClient"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_proof_client();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_consensus = 8 [json_name = "proofConsensus"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_proof_consensus();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height consensus_height = 9 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_consensus_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 10 [json_name = "signer"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenAck.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes host_consensus_state_proof = 11 [json_name = "hostConsensusStateProof"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_host_consensus_state_proof();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgConnectionOpenAck::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.MsgConnectionOpenAck)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenAck.connection_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string counterparty_connection_id = 2 [json_name = "counterpartyConnectionId"];
  if (!this->_internal_counterparty_connection_id().empty()) {
    const std::string& _s = this->_internal_counterparty_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenAck.counterparty_connection_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any client_state = 4 [json_name = "clientState"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::client_state(this),
        _Internal::client_state(this).GetCachedSize(), target, stream);
  }

  // .ibc.core.client.v1.Height proof_height = 5 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // bytes proof_try = 6 [json_name = "proofTry"];
  if (!this->_internal_proof_try().empty()) {
    const std::string& _s = this->_internal_proof_try();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes proof_client = 7 [json_name = "proofClient"];
  if (!this->_internal_proof_client().empty()) {
    const std::string& _s = this->_internal_proof_client();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes proof_consensus = 8 [json_name = "proofConsensus"];
  if (!this->_internal_proof_consensus().empty()) {
    const std::string& _s = this->_internal_proof_consensus();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // .ibc.core.client.v1.Height consensus_height = 9 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::consensus_height(this),
        _Internal::consensus_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 10 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenAck.signer");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // bytes host_consensus_state_proof = 11 [json_name = "hostConsensusStateProof"];
  if (!this->_internal_host_consensus_state_proof().empty()) {
    const std::string& _s = this->_internal_host_consensus_state_proof();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.MsgConnectionOpenAck)
  return target;
}

::size_t MsgConnectionOpenAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.MsgConnectionOpenAck)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // string counterparty_connection_id = 2 [json_name = "counterpartyConnectionId"];
  if (!this->_internal_counterparty_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_counterparty_connection_id());
  }

  // bytes proof_try = 6 [json_name = "proofTry"];
  if (!this->_internal_proof_try().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_try());
  }

  // bytes proof_client = 7 [json_name = "proofClient"];
  if (!this->_internal_proof_client().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_client());
  }

  // bytes proof_consensus = 8 [json_name = "proofConsensus"];
  if (!this->_internal_proof_consensus().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_consensus());
  }

  // string signer = 10 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // bytes host_consensus_state_proof = 11 [json_name = "hostConsensusStateProof"];
  if (!this->_internal_host_consensus_state_proof().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_host_consensus_state_proof());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .ibc.core.connection.v1.Version version = 3 [json_name = "version"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // .google.protobuf.Any client_state = 4 [json_name = "clientState"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.client_state_);
    }

    // .ibc.core.client.v1.Height proof_height = 5 [json_name = "proofHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proof_height_);
    }

    // .ibc.core.client.v1.Height consensus_height = 9 [json_name = "consensusHeight", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.consensus_height_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenAck::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgConnectionOpenAck::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenAck::GetClassData() const { return &_class_data_; }


void MsgConnectionOpenAck::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgConnectionOpenAck*>(&to_msg);
  auto& from = static_cast<const MsgConnectionOpenAck&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.MsgConnectionOpenAck)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_counterparty_connection_id().empty()) {
    _this->_internal_set_counterparty_connection_id(from._internal_counterparty_connection_id());
  }
  if (!from._internal_proof_try().empty()) {
    _this->_internal_set_proof_try(from._internal_proof_try());
  }
  if (!from._internal_proof_client().empty()) {
    _this->_internal_set_proof_client(from._internal_proof_client());
  }
  if (!from._internal_proof_consensus().empty()) {
    _this->_internal_set_proof_consensus(from._internal_proof_consensus());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if (!from._internal_host_consensus_state_proof().empty()) {
    _this->_internal_set_host_consensus_state_proof(from._internal_host_consensus_state_proof());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::ibc::core::connection::v1::Version::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_client_state()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_client_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_proof_height());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_consensus_height()->::ibc::core::client::v1::Height::MergeFrom(
          from._internal_consensus_height());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgConnectionOpenAck::CopyFrom(const MsgConnectionOpenAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.MsgConnectionOpenAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConnectionOpenAck::IsInitialized() const {
  return true;
}

void MsgConnectionOpenAck::InternalSwap(MsgConnectionOpenAck* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.counterparty_connection_id_, lhs_arena,
                                       &other->_impl_.counterparty_connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_try_, lhs_arena,
                                       &other->_impl_.proof_try_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_client_, lhs_arena,
                                       &other->_impl_.proof_client_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_consensus_, lhs_arena,
                                       &other->_impl_.proof_consensus_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.host_consensus_state_proof_, lhs_arena,
                                       &other->_impl_.host_consensus_state_proof_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgConnectionOpenAck, _impl_.consensus_height_)
      + sizeof(MsgConnectionOpenAck::_impl_.consensus_height_)
      - PROTOBUF_FIELD_OFFSET(MsgConnectionOpenAck, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenAck::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[4]);
}
// ===================================================================

class MsgConnectionOpenAckResponse::_Internal {
 public:
};

MsgConnectionOpenAckResponse::MsgConnectionOpenAckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenAckResponse)
}
MsgConnectionOpenAckResponse::MsgConnectionOpenAckResponse(const MsgConnectionOpenAckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgConnectionOpenAckResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenAckResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenAckResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenAckResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenAckResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[5]);
}
// ===================================================================

class MsgConnectionOpenConfirm::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgConnectionOpenConfirm>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgConnectionOpenConfirm, _impl_._has_bits_);
  static const ::ibc::core::client::v1::Height& proof_height(const MsgConnectionOpenConfirm* msg);
  static void set_has_proof_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::client::v1::Height&
MsgConnectionOpenConfirm::_Internal::proof_height(const MsgConnectionOpenConfirm* msg) {
  return *msg->_impl_.proof_height_;
}
void MsgConnectionOpenConfirm::clear_proof_height() {
  if (_impl_.proof_height_ != nullptr) _impl_.proof_height_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgConnectionOpenConfirm::MsgConnectionOpenConfirm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenConfirm)
}
MsgConnectionOpenConfirm::MsgConnectionOpenConfirm(const MsgConnectionOpenConfirm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgConnectionOpenConfirm* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.proof_ack_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_id().empty()) {
    _this->_impl_.connection_id_.Set(from._internal_connection_id(), _this->GetArenaForAllocation());
  }
  _impl_.proof_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proof_ack().empty()) {
    _this->_impl_.proof_ack_.Set(from._internal_proof_ack(), _this->GetArenaForAllocation());
  }
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signer().empty()) {
    _this->_impl_.signer_.Set(from._internal_signer(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_height_ = new ::ibc::core::client::v1::Height(*from._impl_.proof_height_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenConfirm)
}

inline void MsgConnectionOpenConfirm::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.connection_id_) {}

    , decltype(_impl_.proof_ack_) {}

    , decltype(_impl_.signer_) {}

    , decltype(_impl_.proof_height_){nullptr}
  };
  _impl_.connection_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proof_ack_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proof_ack_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgConnectionOpenConfirm::~MsgConnectionOpenConfirm() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgConnectionOpenConfirm::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.connection_id_.Destroy();
  _impl_.proof_ack_.Destroy();
  _impl_.signer_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_height_;
}

void MsgConnectionOpenConfirm::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgConnectionOpenConfirm::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_.ClearToEmpty();
  _impl_.proof_ack_.ClearToEmpty();
  _impl_.signer_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_height_ != nullptr);
    _impl_.proof_height_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgConnectionOpenConfirm::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string connection_id = 1 [json_name = "connectionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_connection_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proof_ack = 2 [json_name = "proofAck"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_proof_ack();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string signer = 4 [json_name = "signer"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgConnectionOpenConfirm.signer"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgConnectionOpenConfirm::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    const std::string& _s = this->_internal_connection_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenConfirm.connection_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes proof_ack = 2 [json_name = "proofAck"];
  if (!this->_internal_proof_ack().empty()) {
    const std::string& _s = this->_internal_proof_ack();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof_height(this),
        _Internal::proof_height(this).GetCachedSize(), target, stream);
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    const std::string& _s = this->_internal_signer();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgConnectionOpenConfirm.signer");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  return target;
}

::size_t MsgConnectionOpenConfirm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_id = 1 [json_name = "connectionId"];
  if (!this->_internal_connection_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_connection_id());
  }

  // bytes proof_ack = 2 [json_name = "proofAck"];
  if (!this->_internal_proof_ack().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proof_ack());
  }

  // string signer = 4 [json_name = "signer"];
  if (!this->_internal_signer().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_signer());
  }

  // .ibc.core.client.v1.Height proof_height = 3 [json_name = "proofHeight", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_height_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenConfirm::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgConnectionOpenConfirm::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenConfirm::GetClassData() const { return &_class_data_; }


void MsgConnectionOpenConfirm::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgConnectionOpenConfirm*>(&to_msg);
  auto& from = static_cast<const MsgConnectionOpenConfirm&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_connection_id().empty()) {
    _this->_internal_set_connection_id(from._internal_connection_id());
  }
  if (!from._internal_proof_ack().empty()) {
    _this->_internal_set_proof_ack(from._internal_proof_ack());
  }
  if (!from._internal_signer().empty()) {
    _this->_internal_set_signer(from._internal_signer());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof_height()->::ibc::core::client::v1::Height::MergeFrom(
        from._internal_proof_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgConnectionOpenConfirm::CopyFrom(const MsgConnectionOpenConfirm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.MsgConnectionOpenConfirm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgConnectionOpenConfirm::IsInitialized() const {
  return true;
}

void MsgConnectionOpenConfirm::InternalSwap(MsgConnectionOpenConfirm* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_id_, lhs_arena,
                                       &other->_impl_.connection_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proof_ack_, lhs_arena,
                                       &other->_impl_.proof_ack_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signer_, lhs_arena,
                                       &other->_impl_.signer_, rhs_arena);
  swap(_impl_.proof_height_, other->_impl_.proof_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenConfirm::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[6]);
}
// ===================================================================

class MsgConnectionOpenConfirmResponse::_Internal {
 public:
};

MsgConnectionOpenConfirmResponse::MsgConnectionOpenConfirmResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
}
MsgConnectionOpenConfirmResponse::MsgConnectionOpenConfirmResponse(const MsgConnectionOpenConfirmResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgConnectionOpenConfirmResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgConnectionOpenConfirmResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgConnectionOpenConfirmResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgConnectionOpenConfirmResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgConnectionOpenConfirmResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[7]);
}
// ===================================================================

class MsgUpdateParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgUpdateParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgUpdateParams, _impl_._has_bits_);
  static const ::ibc::core::connection::v1::Params& params(const MsgUpdateParams* msg);
  static void set_has_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ibc::core::connection::v1::Params&
MsgUpdateParams::_Internal::params(const MsgUpdateParams* msg) {
  return *msg->_impl_.params_;
}
void MsgUpdateParams::clear_params() {
  if (_impl_.params_ != nullptr) _impl_.params_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgUpdateParams::MsgUpdateParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgUpdateParams)
}
MsgUpdateParams::MsgUpdateParams(const MsgUpdateParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUpdateParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.params_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authority().empty()) {
    _this->_impl_.authority_.Set(from._internal_authority(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.params_ = new ::ibc::core::connection::v1::Params(*from._impl_.params_);
  }
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgUpdateParams)
}

inline void MsgUpdateParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.authority_) {}

    , decltype(_impl_.params_){nullptr}
  };
  _impl_.authority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authority_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgUpdateParams::~MsgUpdateParams() {
  // @@protoc_insertion_point(destructor:ibc.core.connection.v1.MsgUpdateParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUpdateParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authority_.Destroy();
  if (this != internal_default_instance()) delete _impl_.params_;
}

void MsgUpdateParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUpdateParams::Clear() {
// @@protoc_insertion_point(message_clear_start:ibc.core.connection.v1.MsgUpdateParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authority_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.params_ != nullptr);
    _impl_.params_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUpdateParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string authority = 1 [json_name = "authority"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_authority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ibc.core.connection.v1.MsgUpdateParams.authority"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .ibc.core.connection.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_params(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgUpdateParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ibc.core.connection.v1.MsgUpdateParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string authority = 1 [json_name = "authority"];
  if (!this->_internal_authority().empty()) {
    const std::string& _s = this->_internal_authority();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "ibc.core.connection.v1.MsgUpdateParams.authority");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .ibc.core.connection.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::params(this),
        _Internal::params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ibc.core.connection.v1.MsgUpdateParams)
  return target;
}

::size_t MsgUpdateParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ibc.core.connection.v1.MsgUpdateParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string authority = 1 [json_name = "authority"];
  if (!this->_internal_authority().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authority());
  }

  // .ibc.core.connection.v1.Params params = 2 [json_name = "params", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.params_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUpdateParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateParams::GetClassData() const { return &_class_data_; }


void MsgUpdateParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUpdateParams*>(&to_msg);
  auto& from = static_cast<const MsgUpdateParams&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ibc.core.connection.v1.MsgUpdateParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_authority().empty()) {
    _this->_internal_set_authority(from._internal_authority());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_params()->::ibc::core::connection::v1::Params::MergeFrom(
        from._internal_params());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUpdateParams::CopyFrom(const MsgUpdateParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ibc.core.connection.v1.MsgUpdateParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUpdateParams::IsInitialized() const {
  return true;
}

void MsgUpdateParams::InternalSwap(MsgUpdateParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authority_, lhs_arena,
                                       &other->_impl_.authority_, rhs_arena);
  swap(_impl_.params_, other->_impl_.params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateParams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[8]);
}
// ===================================================================

class MsgUpdateParamsResponse::_Internal {
 public:
};

MsgUpdateParamsResponse::MsgUpdateParamsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:ibc.core.connection.v1.MsgUpdateParamsResponse)
}
MsgUpdateParamsResponse::MsgUpdateParamsResponse(const MsgUpdateParamsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgUpdateParamsResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ibc.core.connection.v1.MsgUpdateParamsResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUpdateParamsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUpdateParamsResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgUpdateParamsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_getter, &descriptor_table_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto_once,
      file_level_metadata_ibc_2fcore_2fconnection_2fv1_2ftx_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace connection
}  // namespace core
}  // namespace ibc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenInit*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenInit >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenInitResponse*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenInitResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenTry*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenTry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenTry >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenTryResponse*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenTryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenTryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenAck*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenAck >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenAckResponse*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenAckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenAckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenConfirm*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenConfirm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenConfirm >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgConnectionOpenConfirmResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgUpdateParams*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgUpdateParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgUpdateParams >(arena);
}
template<> PROTOBUF_NOINLINE ::ibc::core::connection::v1::MsgUpdateParamsResponse*
Arena::CreateMaybeMessage< ::ibc::core::connection::v1::MsgUpdateParamsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ibc::core::connection::v1::MsgUpdateParamsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

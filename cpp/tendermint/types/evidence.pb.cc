// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/evidence.proto

#include "tendermint/types/evidence.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace types {
template <typename>
PROTOBUF_CONSTEXPR Evidence::Evidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvidenceDefaultTypeInternal() {}
  union {
    Evidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvidenceDefaultTypeInternal _Evidence_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DuplicateVoteEvidence::DuplicateVoteEvidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vote_a_)*/nullptr
  , /*decltype(_impl_.vote_b_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.total_voting_power_)*/ ::int64_t{0}

  , /*decltype(_impl_.validator_power_)*/ ::int64_t{0}
} {}
struct DuplicateVoteEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DuplicateVoteEvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DuplicateVoteEvidenceDefaultTypeInternal() {}
  union {
    DuplicateVoteEvidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DuplicateVoteEvidenceDefaultTypeInternal _DuplicateVoteEvidence_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LightClientAttackEvidence::LightClientAttackEvidence(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.byzantine_validators_)*/{}
  , /*decltype(_impl_.conflicting_block_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.common_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.total_voting_power_)*/ ::int64_t{0}
} {}
struct LightClientAttackEvidenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightClientAttackEvidenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightClientAttackEvidenceDefaultTypeInternal() {}
  union {
    LightClientAttackEvidence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightClientAttackEvidenceDefaultTypeInternal _LightClientAttackEvidence_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EvidenceList::EvidenceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.evidence_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EvidenceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EvidenceListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EvidenceListDefaultTypeInternal() {}
  union {
    EvidenceList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EvidenceListDefaultTypeInternal _EvidenceList_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2ftypes_2fevidence_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2ftypes_2fevidence_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2fevidence_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2ftypes_2fevidence_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_.sum_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.vote_a_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.vote_b_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.total_voting_power_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.validator_power_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::DuplicateVoteEvidence, _impl_.timestamp_),
    0,
    1,
    ~0u,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.conflicting_block_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.common_height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.byzantine_validators_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.total_voting_power_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightClientAttackEvidence, _impl_.timestamp_),
    0,
    ~0u,
    ~0u,
    ~0u,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::EvidenceList, _impl_.evidence_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::types::Evidence)},
        { 11, 24, -1, sizeof(::tendermint::types::DuplicateVoteEvidence)},
        { 29, 42, -1, sizeof(::tendermint::types::LightClientAttackEvidence)},
        { 47, -1, -1, sizeof(::tendermint::types::EvidenceList)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_Evidence_default_instance_._instance,
    &::tendermint::types::_DuplicateVoteEvidence_default_instance_._instance,
    &::tendermint::types::_LightClientAttackEvidence_default_instance_._instance,
    &::tendermint::types::_EvidenceList_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2fevidence_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\037tendermint/types/evidence.proto\022\020tende"
    "rmint.types\032\024gogoproto/gogo.proto\032\037googl"
    "e/protobuf/timestamp.proto\032\034tendermint/t"
    "ypes/types.proto\032 tendermint/types/valid"
    "ator.proto\"\344\001\n\010Evidence\022a\n\027duplicate_vot"
    "e_evidence\030\001 \001(\0132\'.tendermint.types.Dupl"
    "icateVoteEvidenceH\000R\025duplicateVoteEviden"
    "ce\022n\n\034light_client_attack_evidence\030\002 \001(\013"
    "2+.tendermint.types.LightClientAttackEvi"
    "denceH\000R\031lightClientAttackEvidenceB\005\n\003su"
    "m\"\220\002\n\025DuplicateVoteEvidence\022-\n\006vote_a\030\001 "
    "\001(\0132\026.tendermint.types.VoteR\005voteA\022-\n\006vo"
    "te_b\030\002 \001(\0132\026.tendermint.types.VoteR\005vote"
    "B\022,\n\022total_voting_power\030\003 \001(\003R\020totalVoti"
    "ngPower\022\'\n\017validator_power\030\004 \001(\003R\016valida"
    "torPower\022B\n\ttimestamp\030\005 \001(\0132\032.google.pro"
    "tobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttimestamp\"\315\002\n"
    "\031LightClientAttackEvidence\022I\n\021conflictin"
    "g_block\030\001 \001(\0132\034.tendermint.types.LightBl"
    "ockR\020conflictingBlock\022#\n\rcommon_height\030\002"
    " \001(\003R\014commonHeight\022N\n\024byzantine_validato"
    "rs\030\003 \003(\0132\033.tendermint.types.ValidatorR\023b"
    "yzantineValidators\022,\n\022total_voting_power"
    "\030\004 \001(\003R\020totalVotingPower\022B\n\ttimestamp\030\005 "
    "\001(\0132\032.google.protobuf.TimestampB\010\310\336\037\000\220\337\037"
    "\001R\ttimestamp\"L\n\014EvidenceList\022<\n\010evidence"
    "\030\001 \003(\0132\032.tendermint.types.EvidenceB\004\310\336\037\000"
    "R\010evidenceB\273\001\n\024com.tendermint.typesB\rEvi"
    "denceProtoP\001Z3github.com/cometbft/cometb"
    "ft/proto/tendermint/types\242\002\003TTX\252\002\020Tender"
    "mint.Types\312\002\020Tendermint\\Types\342\002\034Tendermi"
    "nt\\Types\\GPBMetadata\352\002\021Tendermint::Types"
    "b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fevidence_2eproto_deps[4] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fevidence_2eproto = {
    false,
    false,
    1288,
    descriptor_table_protodef_tendermint_2ftypes_2fevidence_2eproto,
    "tendermint/types/evidence.proto",
    &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
    descriptor_table_tendermint_2ftypes_2fevidence_2eproto_deps,
    4,
    4,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2fevidence_2eproto::offsets,
    file_level_metadata_tendermint_2ftypes_2fevidence_2eproto,
    file_level_enum_descriptors_tendermint_2ftypes_2fevidence_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fevidence_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2ftypes_2fevidence_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fevidence_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fevidence_2eproto(&descriptor_table_tendermint_2ftypes_2fevidence_2eproto);
namespace tendermint {
namespace types {
// ===================================================================

class Evidence::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Evidence, _impl_._oneof_case_);
  static const ::tendermint::types::DuplicateVoteEvidence& duplicate_vote_evidence(const Evidence* msg);
  static const ::tendermint::types::LightClientAttackEvidence& light_client_attack_evidence(const Evidence* msg);
};

const ::tendermint::types::DuplicateVoteEvidence&
Evidence::_Internal::duplicate_vote_evidence(const Evidence* msg) {
  return *msg->_impl_.sum_.duplicate_vote_evidence_;
}
const ::tendermint::types::LightClientAttackEvidence&
Evidence::_Internal::light_client_attack_evidence(const Evidence* msg) {
  return *msg->_impl_.sum_.light_client_attack_evidence_;
}
void Evidence::set_allocated_duplicate_vote_evidence(::tendermint::types::DuplicateVoteEvidence* duplicate_vote_evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (duplicate_vote_evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(duplicate_vote_evidence);
    if (message_arena != submessage_arena) {
      duplicate_vote_evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duplicate_vote_evidence, submessage_arena);
    }
    set_has_duplicate_vote_evidence();
    _impl_.sum_.duplicate_vote_evidence_ = duplicate_vote_evidence;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Evidence.duplicate_vote_evidence)
}
void Evidence::set_allocated_light_client_attack_evidence(::tendermint::types::LightClientAttackEvidence* light_client_attack_evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (light_client_attack_evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(light_client_attack_evidence);
    if (message_arena != submessage_arena) {
      light_client_attack_evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light_client_attack_evidence, submessage_arena);
    }
    set_has_light_client_attack_evidence();
    _impl_.sum_.light_client_attack_evidence_ = light_client_attack_evidence;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Evidence.light_client_attack_evidence)
}
Evidence::Evidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Evidence)
}
Evidence::Evidence(const Evidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Evidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kDuplicateVoteEvidence: {
      _this->_internal_mutable_duplicate_vote_evidence()->::tendermint::types::DuplicateVoteEvidence::MergeFrom(
          from._internal_duplicate_vote_evidence());
      break;
    }
    case kLightClientAttackEvidence: {
      _this->_internal_mutable_light_client_attack_evidence()->::tendermint::types::LightClientAttackEvidence::MergeFrom(
          from._internal_light_client_attack_evidence());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Evidence)
}

inline void Evidence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Evidence::~Evidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.Evidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Evidence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Evidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Evidence::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.types.Evidence)
  switch (sum_case()) {
    case kDuplicateVoteEvidence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.duplicate_vote_evidence_;
      }
      break;
    }
    case kLightClientAttackEvidence: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.light_client_attack_evidence_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Evidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Evidence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Evidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duplicate_vote_evidence(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_light_client_attack_evidence(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Evidence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Evidence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kDuplicateVoteEvidence: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::duplicate_vote_evidence(this),
          _Internal::duplicate_vote_evidence(this).GetCachedSize(), target, stream);
      break;
    }
    case kLightClientAttackEvidence: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::light_client_attack_evidence(this),
          _Internal::light_client_attack_evidence(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Evidence)
  return target;
}

::size_t Evidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Evidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.types.DuplicateVoteEvidence duplicate_vote_evidence = 1 [json_name = "duplicateVoteEvidence"];
    case kDuplicateVoteEvidence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.duplicate_vote_evidence_);
      break;
    }
    // .tendermint.types.LightClientAttackEvidence light_client_attack_evidence = 2 [json_name = "lightClientAttackEvidence"];
    case kLightClientAttackEvidence: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.light_client_attack_evidence_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Evidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Evidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Evidence::GetClassData() const { return &_class_data_; }


void Evidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Evidence*>(&to_msg);
  auto& from = static_cast<const Evidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Evidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kDuplicateVoteEvidence: {
      _this->_internal_mutable_duplicate_vote_evidence()->::tendermint::types::DuplicateVoteEvidence::MergeFrom(
          from._internal_duplicate_vote_evidence());
      break;
    }
    case kLightClientAttackEvidence: {
      _this->_internal_mutable_light_client_attack_evidence()->::tendermint::types::LightClientAttackEvidence::MergeFrom(
          from._internal_light_client_attack_evidence());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Evidence::CopyFrom(const Evidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Evidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Evidence::IsInitialized() const {
  return true;
}

void Evidence::InternalSwap(Evidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Evidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fevidence_2eproto[0]);
}
// ===================================================================

class DuplicateVoteEvidence::_Internal {
 public:
  using HasBits = decltype(std::declval<DuplicateVoteEvidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_._has_bits_);
  static const ::tendermint::types::Vote& vote_a(const DuplicateVoteEvidence* msg);
  static void set_has_vote_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::Vote& vote_b(const DuplicateVoteEvidence* msg);
  static void set_has_vote_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const DuplicateVoteEvidence* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tendermint::types::Vote&
DuplicateVoteEvidence::_Internal::vote_a(const DuplicateVoteEvidence* msg) {
  return *msg->_impl_.vote_a_;
}
const ::tendermint::types::Vote&
DuplicateVoteEvidence::_Internal::vote_b(const DuplicateVoteEvidence* msg) {
  return *msg->_impl_.vote_b_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
DuplicateVoteEvidence::_Internal::timestamp(const DuplicateVoteEvidence* msg) {
  return *msg->_impl_.timestamp_;
}
void DuplicateVoteEvidence::clear_vote_a() {
  if (_impl_.vote_a_ != nullptr) _impl_.vote_a_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void DuplicateVoteEvidence::clear_vote_b() {
  if (_impl_.vote_b_ != nullptr) _impl_.vote_b_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void DuplicateVoteEvidence::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
DuplicateVoteEvidence::DuplicateVoteEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.DuplicateVoteEvidence)
}
DuplicateVoteEvidence::DuplicateVoteEvidence(const DuplicateVoteEvidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DuplicateVoteEvidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_a_){nullptr}
    , decltype(_impl_.vote_b_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.total_voting_power_) {}

    , decltype(_impl_.validator_power_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_a_ = new ::tendermint::types::Vote(*from._impl_.vote_a_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.vote_b_ = new ::tendermint::types::Vote(*from._impl_.vote_b_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.total_voting_power_, &from._impl_.total_voting_power_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.validator_power_) -
    reinterpret_cast<char*>(&_impl_.total_voting_power_)) + sizeof(_impl_.validator_power_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.DuplicateVoteEvidence)
}

inline void DuplicateVoteEvidence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_a_){nullptr}
    , decltype(_impl_.vote_b_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.total_voting_power_) { ::int64_t{0} }

    , decltype(_impl_.validator_power_) { ::int64_t{0} }

  };
}

DuplicateVoteEvidence::~DuplicateVoteEvidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.DuplicateVoteEvidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DuplicateVoteEvidence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_a_;
  if (this != internal_default_instance()) delete _impl_.vote_b_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void DuplicateVoteEvidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DuplicateVoteEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.DuplicateVoteEvidence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.vote_a_ != nullptr);
      _impl_.vote_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.vote_b_ != nullptr);
      _impl_.vote_b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.total_voting_power_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.validator_power_) -
      reinterpret_cast<char*>(&_impl_.total_voting_power_)) + sizeof(_impl_.validator_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DuplicateVoteEvidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_a(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_b(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 validator_power = 4 [json_name = "validatorPower"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.validator_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DuplicateVoteEvidence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.DuplicateVoteEvidence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote_a(this),
        _Internal::vote_a(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vote_b(this),
        _Internal::vote_b(this).GetCachedSize(), target, stream);
  }

  // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_total_voting_power(), target);
  }

  // int64 validator_power = 4 [json_name = "validatorPower"];
  if (this->_internal_validator_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_validator_power(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.DuplicateVoteEvidence)
  return target;
}

::size_t DuplicateVoteEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.DuplicateVoteEvidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tendermint.types.Vote vote_a = 1 [json_name = "voteA"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vote_a_);
    }

    // .tendermint.types.Vote vote_b = 2 [json_name = "voteB"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vote_b_);
    }

    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_voting_power());
  }

  // int64 validator_power = 4 [json_name = "validatorPower"];
  if (this->_internal_validator_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_validator_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DuplicateVoteEvidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DuplicateVoteEvidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DuplicateVoteEvidence::GetClassData() const { return &_class_data_; }


void DuplicateVoteEvidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DuplicateVoteEvidence*>(&to_msg);
  auto& from = static_cast<const DuplicateVoteEvidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.DuplicateVoteEvidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vote_a()->::tendermint::types::Vote::MergeFrom(
          from._internal_vote_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vote_b()->::tendermint::types::Vote::MergeFrom(
          from._internal_vote_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_internal_set_total_voting_power(from._internal_total_voting_power());
  }
  if (from._internal_validator_power() != 0) {
    _this->_internal_set_validator_power(from._internal_validator_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DuplicateVoteEvidence::CopyFrom(const DuplicateVoteEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.DuplicateVoteEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuplicateVoteEvidence::IsInitialized() const {
  return true;
}

void DuplicateVoteEvidence::InternalSwap(DuplicateVoteEvidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.validator_power_)
      + sizeof(DuplicateVoteEvidence::_impl_.validator_power_)
      - PROTOBUF_FIELD_OFFSET(DuplicateVoteEvidence, _impl_.vote_a_)>(
          reinterpret_cast<char*>(&_impl_.vote_a_),
          reinterpret_cast<char*>(&other->_impl_.vote_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DuplicateVoteEvidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fevidence_2eproto[1]);
}
// ===================================================================

class LightClientAttackEvidence::_Internal {
 public:
  using HasBits = decltype(std::declval<LightClientAttackEvidence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_._has_bits_);
  static const ::tendermint::types::LightBlock& conflicting_block(const LightClientAttackEvidence* msg);
  static void set_has_conflicting_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LightClientAttackEvidence* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::LightBlock&
LightClientAttackEvidence::_Internal::conflicting_block(const LightClientAttackEvidence* msg) {
  return *msg->_impl_.conflicting_block_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
LightClientAttackEvidence::_Internal::timestamp(const LightClientAttackEvidence* msg) {
  return *msg->_impl_.timestamp_;
}
void LightClientAttackEvidence::clear_conflicting_block() {
  if (_impl_.conflicting_block_ != nullptr) _impl_.conflicting_block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LightClientAttackEvidence::clear_byzantine_validators() {
  _internal_mutable_byzantine_validators()->Clear();
}
void LightClientAttackEvidence::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LightClientAttackEvidence::LightClientAttackEvidence(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.LightClientAttackEvidence)
}
LightClientAttackEvidence::LightClientAttackEvidence(const LightClientAttackEvidence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightClientAttackEvidence* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.byzantine_validators_){from._impl_.byzantine_validators_}
    , decltype(_impl_.conflicting_block_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.common_height_) {}

    , decltype(_impl_.total_voting_power_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.conflicting_block_ = new ::tendermint::types::LightBlock(*from._impl_.conflicting_block_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.common_height_, &from._impl_.common_height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.total_voting_power_) -
    reinterpret_cast<char*>(&_impl_.common_height_)) + sizeof(_impl_.total_voting_power_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.LightClientAttackEvidence)
}

inline void LightClientAttackEvidence::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.byzantine_validators_){arena}
    , decltype(_impl_.conflicting_block_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.common_height_) { ::int64_t{0} }

    , decltype(_impl_.total_voting_power_) { ::int64_t{0} }

  };
}

LightClientAttackEvidence::~LightClientAttackEvidence() {
  // @@protoc_insertion_point(destructor:tendermint.types.LightClientAttackEvidence)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightClientAttackEvidence::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_byzantine_validators()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.conflicting_block_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void LightClientAttackEvidence::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightClientAttackEvidence::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.LightClientAttackEvidence)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_byzantine_validators()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.conflicting_block_ != nullptr);
      _impl_.conflicting_block_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.common_height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_voting_power_) -
      reinterpret_cast<char*>(&_impl_.common_height_)) + sizeof(_impl_.total_voting_power_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightClientAttackEvidence::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_conflicting_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 common_height = 2 [json_name = "commonHeight"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.common_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_byzantine_validators(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.total_voting_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LightClientAttackEvidence::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.LightClientAttackEvidence)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::conflicting_block(this),
        _Internal::conflicting_block(this).GetCachedSize(), target, stream);
  }

  // int64 common_height = 2 [json_name = "commonHeight"];
  if (this->_internal_common_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_common_height(), target);
  }

  // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_byzantine_validators_size()); i < n; i++) {
    const auto& repfield = this->_internal_byzantine_validators(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
  if (this->_internal_total_voting_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_total_voting_power(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.LightClientAttackEvidence)
  return target;
}

::size_t LightClientAttackEvidence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.LightClientAttackEvidence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.Validator byzantine_validators = 3 [json_name = "byzantineValidators"];
  total_size += 1UL * this->_internal_byzantine_validators_size();
  for (const auto& msg : this->_internal_byzantine_validators()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.LightBlock conflicting_block = 1 [json_name = "conflictingBlock"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conflicting_block_);
    }

    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // int64 common_height = 2 [json_name = "commonHeight"];
  if (this->_internal_common_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_common_height());
  }

  // int64 total_voting_power = 4 [json_name = "totalVotingPower"];
  if (this->_internal_total_voting_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total_voting_power());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightClientAttackEvidence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightClientAttackEvidence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightClientAttackEvidence::GetClassData() const { return &_class_data_; }


void LightClientAttackEvidence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightClientAttackEvidence*>(&to_msg);
  auto& from = static_cast<const LightClientAttackEvidence&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.LightClientAttackEvidence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_byzantine_validators()->MergeFrom(from._internal_byzantine_validators());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_conflicting_block()->::tendermint::types::LightBlock::MergeFrom(
          from._internal_conflicting_block());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_common_height() != 0) {
    _this->_internal_set_common_height(from._internal_common_height());
  }
  if (from._internal_total_voting_power() != 0) {
    _this->_internal_set_total_voting_power(from._internal_total_voting_power());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightClientAttackEvidence::CopyFrom(const LightClientAttackEvidence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.LightClientAttackEvidence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightClientAttackEvidence::IsInitialized() const {
  return true;
}

void LightClientAttackEvidence::InternalSwap(LightClientAttackEvidence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_byzantine_validators()->InternalSwap(other->_internal_mutable_byzantine_validators());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.total_voting_power_)
      + sizeof(LightClientAttackEvidence::_impl_.total_voting_power_)
      - PROTOBUF_FIELD_OFFSET(LightClientAttackEvidence, _impl_.conflicting_block_)>(
          reinterpret_cast<char*>(&_impl_.conflicting_block_),
          reinterpret_cast<char*>(&other->_impl_.conflicting_block_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LightClientAttackEvidence::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fevidence_2eproto[2]);
}
// ===================================================================

class EvidenceList::_Internal {
 public:
};

EvidenceList::EvidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.EvidenceList)
}
EvidenceList::EvidenceList(const EvidenceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EvidenceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.evidence_){from._impl_.evidence_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.types.EvidenceList)
}

inline void EvidenceList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.evidence_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EvidenceList::~EvidenceList() {
  // @@protoc_insertion_point(destructor:tendermint.types.EvidenceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EvidenceList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_evidence()->~RepeatedPtrField();
}

void EvidenceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EvidenceList::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.EvidenceList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_evidence()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EvidenceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_evidence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EvidenceList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.EvidenceList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_evidence_size()); i < n; i++) {
    const auto& repfield = this->_internal_evidence(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.EvidenceList)
  return target;
}

::size_t EvidenceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.EvidenceList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.Evidence evidence = 1 [json_name = "evidence", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_evidence_size();
  for (const auto& msg : this->_internal_evidence()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EvidenceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EvidenceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EvidenceList::GetClassData() const { return &_class_data_; }


void EvidenceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EvidenceList*>(&to_msg);
  auto& from = static_cast<const EvidenceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.EvidenceList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_evidence()->MergeFrom(from._internal_evidence());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EvidenceList::CopyFrom(const EvidenceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.EvidenceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvidenceList::IsInitialized() const {
  return true;
}

void EvidenceList::InternalSwap(EvidenceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_evidence()->InternalSwap(other->_internal_mutable_evidence());
}

::PROTOBUF_NAMESPACE_ID::Metadata EvidenceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fevidence_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fevidence_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::Evidence*
Arena::CreateMaybeMessage< ::tendermint::types::Evidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Evidence >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::DuplicateVoteEvidence*
Arena::CreateMaybeMessage< ::tendermint::types::DuplicateVoteEvidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::DuplicateVoteEvidence >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::LightClientAttackEvidence*
Arena::CreateMaybeMessage< ::tendermint::types::LightClientAttackEvidence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::LightClientAttackEvidence >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::EvidenceList*
Arena::CreateMaybeMessage< ::tendermint::types::EvidenceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::EvidenceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

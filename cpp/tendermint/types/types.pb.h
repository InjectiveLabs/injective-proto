// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/timestamp.pb.h"
#include "tendermint/crypto/proof.pb.h"
#include "tendermint/version/types.pb.h"
#include "tendermint/types/validator.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2ftypes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2ftypes_2eproto;
namespace tendermint {
namespace types {
class BlockID;
struct BlockIDDefaultTypeInternal;
extern BlockIDDefaultTypeInternal _BlockID_default_instance_;
class BlockMeta;
struct BlockMetaDefaultTypeInternal;
extern BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;
class Commit;
struct CommitDefaultTypeInternal;
extern CommitDefaultTypeInternal _Commit_default_instance_;
class CommitSig;
struct CommitSigDefaultTypeInternal;
extern CommitSigDefaultTypeInternal _CommitSig_default_instance_;
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class LightBlock;
struct LightBlockDefaultTypeInternal;
extern LightBlockDefaultTypeInternal _LightBlock_default_instance_;
class Part;
struct PartDefaultTypeInternal;
extern PartDefaultTypeInternal _Part_default_instance_;
class PartSetHeader;
struct PartSetHeaderDefaultTypeInternal;
extern PartSetHeaderDefaultTypeInternal _PartSetHeader_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class SignedHeader;
struct SignedHeaderDefaultTypeInternal;
extern SignedHeaderDefaultTypeInternal _SignedHeader_default_instance_;
class TxProof;
struct TxProofDefaultTypeInternal;
extern TxProofDefaultTypeInternal _TxProof_default_instance_;
class Vote;
struct VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::types::BlockID* Arena::CreateMaybeMessage<::tendermint::types::BlockID>(Arena*);
template <>
::tendermint::types::BlockMeta* Arena::CreateMaybeMessage<::tendermint::types::BlockMeta>(Arena*);
template <>
::tendermint::types::Commit* Arena::CreateMaybeMessage<::tendermint::types::Commit>(Arena*);
template <>
::tendermint::types::CommitSig* Arena::CreateMaybeMessage<::tendermint::types::CommitSig>(Arena*);
template <>
::tendermint::types::Data* Arena::CreateMaybeMessage<::tendermint::types::Data>(Arena*);
template <>
::tendermint::types::Header* Arena::CreateMaybeMessage<::tendermint::types::Header>(Arena*);
template <>
::tendermint::types::LightBlock* Arena::CreateMaybeMessage<::tendermint::types::LightBlock>(Arena*);
template <>
::tendermint::types::Part* Arena::CreateMaybeMessage<::tendermint::types::Part>(Arena*);
template <>
::tendermint::types::PartSetHeader* Arena::CreateMaybeMessage<::tendermint::types::PartSetHeader>(Arena*);
template <>
::tendermint::types::Proposal* Arena::CreateMaybeMessage<::tendermint::types::Proposal>(Arena*);
template <>
::tendermint::types::SignedHeader* Arena::CreateMaybeMessage<::tendermint::types::SignedHeader>(Arena*);
template <>
::tendermint::types::TxProof* Arena::CreateMaybeMessage<::tendermint::types::TxProof>(Arena*);
template <>
::tendermint::types::Vote* Arena::CreateMaybeMessage<::tendermint::types::Vote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace types {
enum BlockIDFlag : int {
  BLOCK_ID_FLAG_UNKNOWN = 0,
  BLOCK_ID_FLAG_ABSENT = 1,
  BLOCK_ID_FLAG_COMMIT = 2,
  BLOCK_ID_FLAG_NIL = 3,
  BlockIDFlag_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  BlockIDFlag_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool BlockIDFlag_IsValid(int value);
constexpr BlockIDFlag BlockIDFlag_MIN = static_cast<BlockIDFlag>(0);
constexpr BlockIDFlag BlockIDFlag_MAX = static_cast<BlockIDFlag>(3);
constexpr int BlockIDFlag_ARRAYSIZE = 3 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
BlockIDFlag_descriptor();
template <typename T>
const std::string& BlockIDFlag_Name(T value) {
  static_assert(std::is_same<T, BlockIDFlag>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to BlockIDFlag_Name().");
  return BlockIDFlag_Name(static_cast<BlockIDFlag>(value));
}
template <>
inline const std::string& BlockIDFlag_Name(BlockIDFlag value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BlockIDFlag_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool BlockIDFlag_Parse(absl::string_view name, BlockIDFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlockIDFlag>(
      BlockIDFlag_descriptor(), name, value);
}
enum SignedMsgType : int {
  SIGNED_MSG_TYPE_UNKNOWN = 0,
  SIGNED_MSG_TYPE_PREVOTE = 1,
  SIGNED_MSG_TYPE_PRECOMMIT = 2,
  SIGNED_MSG_TYPE_PROPOSAL = 32,
  SignedMsgType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignedMsgType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignedMsgType_IsValid(int value);
constexpr SignedMsgType SignedMsgType_MIN = static_cast<SignedMsgType>(0);
constexpr SignedMsgType SignedMsgType_MAX = static_cast<SignedMsgType>(32);
constexpr int SignedMsgType_ARRAYSIZE = 32 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
SignedMsgType_descriptor();
template <typename T>
const std::string& SignedMsgType_Name(T value) {
  static_assert(std::is_same<T, SignedMsgType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignedMsgType_Name().");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(SignedMsgType_descriptor(), value);
}
inline bool SignedMsgType_Parse(absl::string_view name, SignedMsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignedMsgType>(
      SignedMsgType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PartSetHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.PartSetHeader) */ {
 public:
  inline PartSetHeader() : PartSetHeader(nullptr) {}
  ~PartSetHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PartSetHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartSetHeader(const PartSetHeader& from);
  PartSetHeader(PartSetHeader&& from) noexcept
    : PartSetHeader() {
    *this = ::std::move(from);
  }

  inline PartSetHeader& operator=(const PartSetHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartSetHeader& operator=(PartSetHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartSetHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartSetHeader* internal_default_instance() {
    return reinterpret_cast<const PartSetHeader*>(
               &_PartSetHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PartSetHeader& a, PartSetHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(PartSetHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartSetHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartSetHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartSetHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PartSetHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PartSetHeader& from) {
    PartSetHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartSetHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.PartSetHeader";
  }
  protected:
  explicit PartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kTotalFieldNumber = 1,
  };
  // bytes hash = 2 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // uint32 total = 1 [json_name = "total"];
  void clear_total() ;
  ::uint32_t total() const;
  void set_total(::uint32_t value);

  private:
  ::uint32_t _internal_total() const;
  void _internal_set_total(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.PartSetHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::uint32_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Part final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Part) */ {
 public:
  inline Part() : Part(nullptr) {}
  ~Part() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Part(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Part(const Part& from);
  Part(Part&& from) noexcept
    : Part() {
    *this = ::std::move(from);
  }

  inline Part& operator=(const Part& from) {
    CopyFrom(from);
    return *this;
  }
  inline Part& operator=(Part&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Part& default_instance() {
    return *internal_default_instance();
  }
  static inline const Part* internal_default_instance() {
    return reinterpret_cast<const Part*>(
               &_Part_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Part& a, Part& b) {
    a.Swap(&b);
  }
  inline void Swap(Part* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Part* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Part* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Part>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Part& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Part& from) {
    Part::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Part* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Part";
  }
  protected:
  explicit Part(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 2,
    kProofFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // bytes bytes = 2 [json_name = "bytes"];
  void clear_bytes() ;
  const std::string& bytes() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_bytes();
  PROTOBUF_NODISCARD std::string* release_bytes();
  void set_allocated_bytes(std::string* ptr);

  private:
  const std::string& _internal_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bytes(
      const std::string& value);
  std::string* _internal_mutable_bytes();

  public:
  // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
  bool has_proof() const;
  void clear_proof() ;
  const ::tendermint::crypto::Proof& proof() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::Proof* release_proof();
  ::tendermint::crypto::Proof* mutable_proof();
  void set_allocated_proof(::tendermint::crypto::Proof* proof);
  private:
  const ::tendermint::crypto::Proof& _internal_proof() const;
  ::tendermint::crypto::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::tendermint::crypto::Proof* proof);
  ::tendermint::crypto::Proof* unsafe_arena_release_proof();
  // uint32 index = 1 [json_name = "index"];
  void clear_index() ;
  ::uint32_t index() const;
  void set_index(::uint32_t value);

  private:
  ::uint32_t _internal_index() const;
  void _internal_set_index(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Part)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
    ::tendermint::crypto::Proof* proof_;
    ::uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class BlockID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.BlockID) */ {
 public:
  inline BlockID() : BlockID(nullptr) {}
  ~BlockID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockID(const BlockID& from);
  BlockID(BlockID&& from) noexcept
    : BlockID() {
    *this = ::std::move(from);
  }

  inline BlockID& operator=(const BlockID& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockID& operator=(BlockID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockID& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockID* internal_default_instance() {
    return reinterpret_cast<const BlockID*>(
               &_BlockID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockID& a, BlockID& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockID& from) {
    BlockID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.BlockID";
  }
  protected:
  explicit BlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPartSetHeaderFieldNumber = 2,
  };
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  bool has_part_set_header() const;
  void clear_part_set_header() ;
  const ::tendermint::types::PartSetHeader& part_set_header() const;
  PROTOBUF_NODISCARD ::tendermint::types::PartSetHeader* release_part_set_header();
  ::tendermint::types::PartSetHeader* mutable_part_set_header();
  void set_allocated_part_set_header(::tendermint::types::PartSetHeader* part_set_header);
  private:
  const ::tendermint::types::PartSetHeader& _internal_part_set_header() const;
  ::tendermint::types::PartSetHeader* _internal_mutable_part_set_header();
  public:
  void unsafe_arena_set_allocated_part_set_header(
      ::tendermint::types::PartSetHeader* part_set_header);
  ::tendermint::types::PartSetHeader* unsafe_arena_release_part_set_header();
  // @@protoc_insertion_point(class_scope:tendermint.types.BlockID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::tendermint::types::PartSetHeader* part_set_header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Header& from) {
    Header::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 2,
    kLastCommitHashFieldNumber = 6,
    kDataHashFieldNumber = 7,
    kValidatorsHashFieldNumber = 8,
    kNextValidatorsHashFieldNumber = 9,
    kConsensusHashFieldNumber = 10,
    kAppHashFieldNumber = 11,
    kLastResultsHashFieldNumber = 12,
    kEvidenceHashFieldNumber = 13,
    kProposerAddressFieldNumber = 14,
    kVersionFieldNumber = 1,
    kTimeFieldNumber = 4,
    kLastBlockIdFieldNumber = 5,
    kHeightFieldNumber = 3,
  };
  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  void clear_last_commit_hash() ;
  const std::string& last_commit_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_commit_hash(Arg_&& arg, Args_... args);
  std::string* mutable_last_commit_hash();
  PROTOBUF_NODISCARD std::string* release_last_commit_hash();
  void set_allocated_last_commit_hash(std::string* ptr);

  private:
  const std::string& _internal_last_commit_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_commit_hash(
      const std::string& value);
  std::string* _internal_mutable_last_commit_hash();

  public:
  // bytes data_hash = 7 [json_name = "dataHash"];
  void clear_data_hash() ;
  const std::string& data_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data_hash(Arg_&& arg, Args_... args);
  std::string* mutable_data_hash();
  PROTOBUF_NODISCARD std::string* release_data_hash();
  void set_allocated_data_hash(std::string* ptr);

  private:
  const std::string& _internal_data_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_hash(
      const std::string& value);
  std::string* _internal_mutable_data_hash();

  public:
  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  void clear_validators_hash() ;
  const std::string& validators_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_validators_hash();
  PROTOBUF_NODISCARD std::string* release_validators_hash();
  void set_allocated_validators_hash(std::string* ptr);

  private:
  const std::string& _internal_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_validators_hash();

  public:
  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  void clear_next_validators_hash() ;
  const std::string& next_validators_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_validators_hash(Arg_&& arg, Args_... args);
  std::string* mutable_next_validators_hash();
  PROTOBUF_NODISCARD std::string* release_next_validators_hash();
  void set_allocated_next_validators_hash(std::string* ptr);

  private:
  const std::string& _internal_next_validators_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_validators_hash(
      const std::string& value);
  std::string* _internal_mutable_next_validators_hash();

  public:
  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  void clear_consensus_hash() ;
  const std::string& consensus_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_consensus_hash(Arg_&& arg, Args_... args);
  std::string* mutable_consensus_hash();
  PROTOBUF_NODISCARD std::string* release_consensus_hash();
  void set_allocated_consensus_hash(std::string* ptr);

  private:
  const std::string& _internal_consensus_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consensus_hash(
      const std::string& value);
  std::string* _internal_mutable_consensus_hash();

  public:
  // bytes app_hash = 11 [json_name = "appHash"];
  void clear_app_hash() ;
  const std::string& app_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_hash(Arg_&& arg, Args_... args);
  std::string* mutable_app_hash();
  PROTOBUF_NODISCARD std::string* release_app_hash();
  void set_allocated_app_hash(std::string* ptr);

  private:
  const std::string& _internal_app_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_hash(
      const std::string& value);
  std::string* _internal_mutable_app_hash();

  public:
  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  void clear_last_results_hash() ;
  const std::string& last_results_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_results_hash(Arg_&& arg, Args_... args);
  std::string* mutable_last_results_hash();
  PROTOBUF_NODISCARD std::string* release_last_results_hash();
  void set_allocated_last_results_hash(std::string* ptr);

  private:
  const std::string& _internal_last_results_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_results_hash(
      const std::string& value);
  std::string* _internal_mutable_last_results_hash();

  public:
  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  void clear_evidence_hash() ;
  const std::string& evidence_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_evidence_hash(Arg_&& arg, Args_... args);
  std::string* mutable_evidence_hash();
  PROTOBUF_NODISCARD std::string* release_evidence_hash();
  void set_allocated_evidence_hash(std::string* ptr);

  private:
  const std::string& _internal_evidence_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_evidence_hash(
      const std::string& value);
  std::string* _internal_mutable_evidence_hash();

  public:
  // bytes proposer_address = 14 [json_name = "proposerAddress"];
  void clear_proposer_address() ;
  const std::string& proposer_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_proposer_address(Arg_&& arg, Args_... args);
  std::string* mutable_proposer_address();
  PROTOBUF_NODISCARD std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* ptr);

  private:
  const std::string& _internal_proposer_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proposer_address(
      const std::string& value);
  std::string* _internal_mutable_proposer_address();

  public:
  // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
  bool has_version() const;
  void clear_version() ;
  const ::tendermint::version::Consensus& version() const;
  PROTOBUF_NODISCARD ::tendermint::version::Consensus* release_version();
  ::tendermint::version::Consensus* mutable_version();
  void set_allocated_version(::tendermint::version::Consensus* version);
  private:
  const ::tendermint::version::Consensus& _internal_version() const;
  ::tendermint::version::Consensus* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tendermint::version::Consensus* version);
  ::tendermint::version::Consensus* unsafe_arena_release_version();
  // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
  bool has_last_block_id() const;
  void clear_last_block_id() ;
  const ::tendermint::types::BlockID& last_block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_last_block_id();
  ::tendermint::types::BlockID* mutable_last_block_id();
  void set_allocated_last_block_id(::tendermint::types::BlockID* last_block_id);
  private:
  const ::tendermint::types::BlockID& _internal_last_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_last_block_id();
  public:
  void unsafe_arena_set_allocated_last_block_id(
      ::tendermint::types::BlockID* last_block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_last_block_id();
  // int64 height = 3 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_commit_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validators_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_validators_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consensus_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_results_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evidence_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_address_;
    ::tendermint::version::Consensus* version_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::tendermint::types::BlockID* last_block_id_;
    ::int64_t height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Data& from) {
    Data::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated bytes txs = 1 [json_name = "txs"];
  int txs_size() const;
  private:
  int _internal_txs_size() const;

  public:
  void clear_txs() ;
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const void* value, std::size_t size);
  void set_txs(int index, absl::string_view value);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const void* value, std::size_t size);
  void add_txs(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();

  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_txs();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Vote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  ~Vote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Vote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vote& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vote& from) {
    Vote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorAddressFieldNumber = 6,
    kSignatureFieldNumber = 8,
    kBlockIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kHeightFieldNumber = 2,
    kTypeFieldNumber = 1,
    kRoundFieldNumber = 3,
    kValidatorIndexFieldNumber = 7,
  };
  // bytes validator_address = 6 [json_name = "validatorAddress"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // bytes signature = 8 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // int64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  void clear_type() ;
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);

  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);

  public:
  // int32 round = 3 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // int32 validator_index = 7 [json_name = "validatorIndex"];
  void clear_validator_index() ;
  ::int32_t validator_index() const;
  void set_validator_index(::int32_t value);

  private:
  ::int32_t _internal_validator_index() const;
  void _internal_set_validator_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Vote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::tendermint::types::BlockID* block_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::int64_t height_;
    int type_;
    ::int32_t round_;
    ::int32_t validator_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Commit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Commit) */ {
 public:
  inline Commit() : Commit(nullptr) {}
  ~Commit() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Commit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Commit(const Commit& from);
  Commit(Commit&& from) noexcept
    : Commit() {
    *this = ::std::move(from);
  }

  inline Commit& operator=(const Commit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commit& operator=(Commit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Commit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Commit* internal_default_instance() {
    return reinterpret_cast<const Commit*>(
               &_Commit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Commit& a, Commit& b) {
    a.Swap(&b);
  }
  inline void Swap(Commit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Commit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Commit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Commit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Commit& from) {
    Commit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Commit";
  }
  protected:
  explicit Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignaturesFieldNumber = 4,
    kBlockIdFieldNumber = 3,
    kHeightFieldNumber = 1,
    kRoundFieldNumber = 2,
  };
  // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
  int signatures_size() const;
  private:
  int _internal_signatures_size() const;

  public:
  void clear_signatures() ;
  ::tendermint::types::CommitSig* mutable_signatures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::CommitSig >*
      mutable_signatures();
  private:
  const ::tendermint::types::CommitSig& _internal_signatures(int index) const;
  ::tendermint::types::CommitSig* _internal_add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::CommitSig>& _internal_signatures() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::CommitSig>* _internal_mutable_signatures();
  public:
  const ::tendermint::types::CommitSig& signatures(int index) const;
  ::tendermint::types::CommitSig* add_signatures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::CommitSig >&
      signatures() const;
  // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int32 round = 2 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Commit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::CommitSig > signatures_;
    ::tendermint::types::BlockID* block_id_;
    ::int64_t height_;
    ::int32_t round_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class CommitSig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.CommitSig) */ {
 public:
  inline CommitSig() : CommitSig(nullptr) {}
  ~CommitSig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CommitSig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommitSig(const CommitSig& from);
  CommitSig(CommitSig&& from) noexcept
    : CommitSig() {
    *this = ::std::move(from);
  }

  inline CommitSig& operator=(const CommitSig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommitSig& operator=(CommitSig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommitSig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommitSig* internal_default_instance() {
    return reinterpret_cast<const CommitSig*>(
               &_CommitSig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CommitSig& a, CommitSig& b) {
    a.Swap(&b);
  }
  inline void Swap(CommitSig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommitSig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommitSig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommitSig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommitSig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommitSig& from) {
    CommitSig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommitSig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.CommitSig";
  }
  protected:
  explicit CommitSig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorAddressFieldNumber = 2,
    kSignatureFieldNumber = 4,
    kTimestampFieldNumber = 3,
    kBlockIdFlagFieldNumber = 1,
  };
  // bytes validator_address = 2 [json_name = "validatorAddress"];
  void clear_validator_address() ;
  const std::string& validator_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_validator_address(Arg_&& arg, Args_... args);
  std::string* mutable_validator_address();
  PROTOBUF_NODISCARD std::string* release_validator_address();
  void set_allocated_validator_address(std::string* ptr);

  private:
  const std::string& _internal_validator_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validator_address(
      const std::string& value);
  std::string* _internal_mutable_validator_address();

  public:
  // bytes signature = 4 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
  void clear_block_id_flag() ;
  ::tendermint::types::BlockIDFlag block_id_flag() const;
  void set_block_id_flag(::tendermint::types::BlockIDFlag value);

  private:
  ::tendermint::types::BlockIDFlag _internal_block_id_flag() const;
  void _internal_set_block_id_flag(::tendermint::types::BlockIDFlag value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.CommitSig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validator_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    int block_id_flag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Proposal& from) {
    Proposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 7,
    kBlockIdFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kHeightFieldNumber = 2,
    kTypeFieldNumber = 1,
    kRoundFieldNumber = 3,
    kPolRoundFieldNumber = 4,
  };
  // bytes signature = 7 [json_name = "signature"];
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // int64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  void clear_type() ;
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);

  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);

  public:
  // int32 round = 3 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // int32 pol_round = 4 [json_name = "polRound"];
  void clear_pol_round() ;
  ::int32_t pol_round() const;
  void set_pol_round(::int32_t value);

  private:
  ::int32_t _internal_pol_round() const;
  void _internal_set_pol_round(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Proposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    ::tendermint::types::BlockID* block_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::int64_t height_;
    int type_;
    ::int32_t round_;
    ::int32_t pol_round_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class SignedHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.SignedHeader) */ {
 public:
  inline SignedHeader() : SignedHeader(nullptr) {}
  ~SignedHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SignedHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SignedHeader(const SignedHeader& from);
  SignedHeader(SignedHeader&& from) noexcept
    : SignedHeader() {
    *this = ::std::move(from);
  }

  inline SignedHeader& operator=(const SignedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignedHeader& operator=(SignedHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SignedHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const SignedHeader* internal_default_instance() {
    return reinterpret_cast<const SignedHeader*>(
               &_SignedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SignedHeader& a, SignedHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(SignedHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SignedHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SignedHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SignedHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SignedHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SignedHeader& from) {
    SignedHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignedHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.SignedHeader";
  }
  protected:
  explicit SignedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kCommitFieldNumber = 2,
  };
  // .tendermint.types.Header header = 1 [json_name = "header"];
  bool has_header() const;
  void clear_header() ;
  const ::tendermint::types::Header& header() const;
  PROTOBUF_NODISCARD ::tendermint::types::Header* release_header();
  ::tendermint::types::Header* mutable_header();
  void set_allocated_header(::tendermint::types::Header* header);
  private:
  const ::tendermint::types::Header& _internal_header() const;
  ::tendermint::types::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tendermint::types::Header* header);
  ::tendermint::types::Header* unsafe_arena_release_header();
  // .tendermint.types.Commit commit = 2 [json_name = "commit"];
  bool has_commit() const;
  void clear_commit() ;
  const ::tendermint::types::Commit& commit() const;
  PROTOBUF_NODISCARD ::tendermint::types::Commit* release_commit();
  ::tendermint::types::Commit* mutable_commit();
  void set_allocated_commit(::tendermint::types::Commit* commit);
  private:
  const ::tendermint::types::Commit& _internal_commit() const;
  ::tendermint::types::Commit* _internal_mutable_commit();
  public:
  void unsafe_arena_set_allocated_commit(
      ::tendermint::types::Commit* commit);
  ::tendermint::types::Commit* unsafe_arena_release_commit();
  // @@protoc_insertion_point(class_scope:tendermint.types.SignedHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::Header* header_;
    ::tendermint::types::Commit* commit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class LightBlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.LightBlock) */ {
 public:
  inline LightBlock() : LightBlock(nullptr) {}
  ~LightBlock() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LightBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LightBlock(const LightBlock& from);
  LightBlock(LightBlock&& from) noexcept
    : LightBlock() {
    *this = ::std::move(from);
  }

  inline LightBlock& operator=(const LightBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightBlock& operator=(LightBlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LightBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const LightBlock* internal_default_instance() {
    return reinterpret_cast<const LightBlock*>(
               &_LightBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LightBlock& a, LightBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(LightBlock* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LightBlock* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LightBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LightBlock>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LightBlock& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LightBlock& from) {
    LightBlock::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightBlock* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.LightBlock";
  }
  protected:
  explicit LightBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedHeaderFieldNumber = 1,
    kValidatorSetFieldNumber = 2,
  };
  // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
  bool has_signed_header() const;
  void clear_signed_header() ;
  const ::tendermint::types::SignedHeader& signed_header() const;
  PROTOBUF_NODISCARD ::tendermint::types::SignedHeader* release_signed_header();
  ::tendermint::types::SignedHeader* mutable_signed_header();
  void set_allocated_signed_header(::tendermint::types::SignedHeader* signed_header);
  private:
  const ::tendermint::types::SignedHeader& _internal_signed_header() const;
  ::tendermint::types::SignedHeader* _internal_mutable_signed_header();
  public:
  void unsafe_arena_set_allocated_signed_header(
      ::tendermint::types::SignedHeader* signed_header);
  ::tendermint::types::SignedHeader* unsafe_arena_release_signed_header();
  // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
  bool has_validator_set() const;
  void clear_validator_set() ;
  const ::tendermint::types::ValidatorSet& validator_set() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorSet* release_validator_set();
  ::tendermint::types::ValidatorSet* mutable_validator_set();
  void set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set);
  private:
  const ::tendermint::types::ValidatorSet& _internal_validator_set() const;
  ::tendermint::types::ValidatorSet* _internal_mutable_validator_set();
  public:
  void unsafe_arena_set_allocated_validator_set(
      ::tendermint::types::ValidatorSet* validator_set);
  ::tendermint::types::ValidatorSet* unsafe_arena_release_validator_set();
  // @@protoc_insertion_point(class_scope:tendermint.types.LightBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::SignedHeader* signed_header_;
    ::tendermint::types::ValidatorSet* validator_set_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class BlockMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.BlockMeta) */ {
 public:
  inline BlockMeta() : BlockMeta(nullptr) {}
  ~BlockMeta() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMeta(const BlockMeta& from);
  BlockMeta(BlockMeta&& from) noexcept
    : BlockMeta() {
    *this = ::std::move(from);
  }

  inline BlockMeta& operator=(const BlockMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMeta& operator=(BlockMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMeta* internal_default_instance() {
    return reinterpret_cast<const BlockMeta*>(
               &_BlockMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BlockMeta& a, BlockMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMeta* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockMeta& from) {
    BlockMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.BlockMeta";
  }
  protected:
  explicit BlockMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
    kHeaderFieldNumber = 3,
    kBlockSizeFieldNumber = 2,
    kNumTxsFieldNumber = 4,
  };
  // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::BlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockID* release_block_id();
  ::tendermint::types::BlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::BlockID* block_id);
  private:
  const ::tendermint::types::BlockID& _internal_block_id() const;
  ::tendermint::types::BlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::BlockID* block_id);
  ::tendermint::types::BlockID* unsafe_arena_release_block_id();
  // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
  bool has_header() const;
  void clear_header() ;
  const ::tendermint::types::Header& header() const;
  PROTOBUF_NODISCARD ::tendermint::types::Header* release_header();
  ::tendermint::types::Header* mutable_header();
  void set_allocated_header(::tendermint::types::Header* header);
  private:
  const ::tendermint::types::Header& _internal_header() const;
  ::tendermint::types::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::tendermint::types::Header* header);
  ::tendermint::types::Header* unsafe_arena_release_header();
  // int64 block_size = 2 [json_name = "blockSize"];
  void clear_block_size() ;
  ::int64_t block_size() const;
  void set_block_size(::int64_t value);

  private:
  ::int64_t _internal_block_size() const;
  void _internal_set_block_size(::int64_t value);

  public:
  // int64 num_txs = 4 [json_name = "numTxs"];
  void clear_num_txs() ;
  ::int64_t num_txs() const;
  void set_num_txs(::int64_t value);

  private:
  ::int64_t _internal_num_txs() const;
  void _internal_set_num_txs(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.BlockMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::BlockID* block_id_;
    ::tendermint::types::Header* header_;
    ::int64_t block_size_;
    ::int64_t num_txs_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};// -------------------------------------------------------------------

class TxProof final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.TxProof) */ {
 public:
  inline TxProof() : TxProof(nullptr) {}
  ~TxProof() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TxProof(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TxProof(const TxProof& from);
  TxProof(TxProof&& from) noexcept
    : TxProof() {
    *this = ::std::move(from);
  }

  inline TxProof& operator=(const TxProof& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxProof& operator=(TxProof&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TxProof& default_instance() {
    return *internal_default_instance();
  }
  static inline const TxProof* internal_default_instance() {
    return reinterpret_cast<const TxProof*>(
               &_TxProof_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TxProof& a, TxProof& b) {
    a.Swap(&b);
  }
  inline void Swap(TxProof* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxProof* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TxProof* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TxProof>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TxProof& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TxProof& from) {
    TxProof::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxProof* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.TxProof";
  }
  protected:
  explicit TxProof(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootHashFieldNumber = 1,
    kDataFieldNumber = 2,
    kProofFieldNumber = 3,
  };
  // bytes root_hash = 1 [json_name = "rootHash"];
  void clear_root_hash() ;
  const std::string& root_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_root_hash(Arg_&& arg, Args_... args);
  std::string* mutable_root_hash();
  PROTOBUF_NODISCARD std::string* release_root_hash();
  void set_allocated_root_hash(std::string* ptr);

  private:
  const std::string& _internal_root_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_hash(
      const std::string& value);
  std::string* _internal_mutable_root_hash();

  public:
  // bytes data = 2 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
  bool has_proof() const;
  void clear_proof() ;
  const ::tendermint::crypto::Proof& proof() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::Proof* release_proof();
  ::tendermint::crypto::Proof* mutable_proof();
  void set_allocated_proof(::tendermint::crypto::Proof* proof);
  private:
  const ::tendermint::crypto::Proof& _internal_proof() const;
  ::tendermint::crypto::Proof* _internal_mutable_proof();
  public:
  void unsafe_arena_set_allocated_proof(
      ::tendermint::crypto::Proof* proof);
  ::tendermint::crypto::Proof* unsafe_arena_release_proof();
  // @@protoc_insertion_point(class_scope:tendermint.types.TxProof)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::tendermint::crypto::Proof* proof_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PartSetHeader

// uint32 total = 1 [json_name = "total"];
inline void PartSetHeader::clear_total() {
  _impl_.total_ = 0u;
}
inline ::uint32_t PartSetHeader::total() const {
  // @@protoc_insertion_point(field_get:tendermint.types.PartSetHeader.total)
  return _internal_total();
}
inline void PartSetHeader::set_total(::uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:tendermint.types.PartSetHeader.total)
}
inline ::uint32_t PartSetHeader::_internal_total() const {
  return _impl_.total_;
}
inline void PartSetHeader::_internal_set_total(::uint32_t value) {
  ;
  _impl_.total_ = value;
}

// bytes hash = 2 [json_name = "hash"];
inline void PartSetHeader::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& PartSetHeader::hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.PartSetHeader.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PartSetHeader::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.PartSetHeader.hash)
}
inline std::string* PartSetHeader::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.PartSetHeader.hash)
  return _s;
}
inline const std::string& PartSetHeader::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void PartSetHeader::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* PartSetHeader::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* PartSetHeader::release_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.PartSetHeader.hash)
  return _impl_.hash_.Release();
}
inline void PartSetHeader::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.PartSetHeader.hash)
}

// -------------------------------------------------------------------

// Part

// uint32 index = 1 [json_name = "index"];
inline void Part::clear_index() {
  _impl_.index_ = 0u;
}
inline ::uint32_t Part::index() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Part.index)
  return _internal_index();
}
inline void Part::set_index(::uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Part.index)
}
inline ::uint32_t Part::_internal_index() const {
  return _impl_.index_;
}
inline void Part::_internal_set_index(::uint32_t value) {
  ;
  _impl_.index_ = value;
}

// bytes bytes = 2 [json_name = "bytes"];
inline void Part::clear_bytes() {
  _impl_.bytes_.ClearToEmpty();
}
inline const std::string& Part::bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Part.bytes)
  return _internal_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Part::set_bytes(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Part.bytes)
}
inline std::string* Part::mutable_bytes() {
  std::string* _s = _internal_mutable_bytes();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Part.bytes)
  return _s;
}
inline const std::string& Part::_internal_bytes() const {
  return _impl_.bytes_.Get();
}
inline void Part::_internal_set_bytes(const std::string& value) {
  ;


  _impl_.bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* Part::_internal_mutable_bytes() {
  ;
  return _impl_.bytes_.Mutable( GetArenaForAllocation());
}
inline std::string* Part::release_bytes() {
  // @@protoc_insertion_point(field_release:tendermint.types.Part.bytes)
  return _impl_.bytes_.Release();
}
inline void Part::set_allocated_bytes(std::string* value) {
  _impl_.bytes_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bytes_.IsDefault()) {
          _impl_.bytes_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Part.bytes)
}

// .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
inline bool Part::has_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::Proof& Part::_internal_proof() const {
  const ::tendermint::crypto::Proof* p = _impl_.proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::Proof&>(
      ::tendermint::crypto::_Proof_default_instance_);
}
inline const ::tendermint::crypto::Proof& Part::proof() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Part.proof)
  return _internal_proof();
}
inline void Part::unsafe_arena_set_allocated_proof(
    ::tendermint::crypto::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_);
  }
  _impl_.proof_ = proof;
  if (proof) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Part.proof)
}
inline ::tendermint::crypto::Proof* Part::release_proof() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::Proof* Part::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:tendermint.types.Part.proof)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::Proof* Part::_internal_mutable_proof() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::Proof>(GetArenaForAllocation());
    _impl_.proof_ = p;
  }
  return _impl_.proof_;
}
inline ::tendermint::crypto::Proof* Part::mutable_proof() {
  ::tendermint::crypto::Proof* _msg = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Part.proof)
  return _msg;
}
inline void Part::set_allocated_proof(::tendermint::crypto::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_);
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof));
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Part.proof)
}

// -------------------------------------------------------------------

// BlockID

// bytes hash = 1 [json_name = "hash"];
inline void BlockID::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& BlockID::hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockID.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BlockID::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.BlockID.hash)
}
inline std::string* BlockID::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.BlockID.hash)
  return _s;
}
inline const std::string& BlockID::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void BlockID::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* BlockID::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* BlockID::release_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.BlockID.hash)
  return _impl_.hash_.Release();
}
inline void BlockID::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.BlockID.hash)
}

// .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
inline bool BlockID::has_part_set_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.part_set_header_ != nullptr);
  return value;
}
inline void BlockID::clear_part_set_header() {
  if (_impl_.part_set_header_ != nullptr) _impl_.part_set_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::PartSetHeader& BlockID::_internal_part_set_header() const {
  const ::tendermint::types::PartSetHeader* p = _impl_.part_set_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::PartSetHeader&>(
      ::tendermint::types::_PartSetHeader_default_instance_);
}
inline const ::tendermint::types::PartSetHeader& BlockID::part_set_header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockID.part_set_header)
  return _internal_part_set_header();
}
inline void BlockID::unsafe_arena_set_allocated_part_set_header(
    ::tendermint::types::PartSetHeader* part_set_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.part_set_header_);
  }
  _impl_.part_set_header_ = part_set_header;
  if (part_set_header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.BlockID.part_set_header)
}
inline ::tendermint::types::PartSetHeader* BlockID::release_part_set_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::PartSetHeader* temp = _impl_.part_set_header_;
  _impl_.part_set_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::PartSetHeader* BlockID::unsafe_arena_release_part_set_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.BlockID.part_set_header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::PartSetHeader* temp = _impl_.part_set_header_;
  _impl_.part_set_header_ = nullptr;
  return temp;
}
inline ::tendermint::types::PartSetHeader* BlockID::_internal_mutable_part_set_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.part_set_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::PartSetHeader>(GetArenaForAllocation());
    _impl_.part_set_header_ = p;
  }
  return _impl_.part_set_header_;
}
inline ::tendermint::types::PartSetHeader* BlockID::mutable_part_set_header() {
  ::tendermint::types::PartSetHeader* _msg = _internal_mutable_part_set_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.BlockID.part_set_header)
  return _msg;
}
inline void BlockID::set_allocated_part_set_header(::tendermint::types::PartSetHeader* part_set_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.part_set_header_;
  }
  if (part_set_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(part_set_header);
    if (message_arena != submessage_arena) {
      part_set_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part_set_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.part_set_header_ = part_set_header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.BlockID.part_set_header)
}

// -------------------------------------------------------------------

// Header

// .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
inline bool Header::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline const ::tendermint::version::Consensus& Header::_internal_version() const {
  const ::tendermint::version::Consensus* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::version::Consensus&>(
      ::tendermint::version::_Consensus_default_instance_);
}
inline const ::tendermint::version::Consensus& Header::version() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.version)
  return _internal_version();
}
inline void Header::unsafe_arena_set_allocated_version(
    ::tendermint::version::Consensus* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Header.version)
}
inline ::tendermint::version::Consensus* Header::release_version() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::version::Consensus* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::version::Consensus* Header::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.version)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::version::Consensus* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::tendermint::version::Consensus* Header::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::version::Consensus>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::tendermint::version::Consensus* Header::mutable_version() {
  ::tendermint::version::Consensus* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.version)
  return _msg;
}
inline void Header::set_allocated_version(::tendermint::version::Consensus* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.version)
}

// string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
inline void Header::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& Header::chain_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.chain_id)
}
inline std::string* Header::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.chain_id)
  return _s;
}
inline const std::string& Header::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void Header::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_chain_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.chain_id)
  return _impl_.chain_id_.Release();
}
inline void Header::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.chain_id)
}

// int64 height = 3 [json_name = "height"];
inline void Header::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Header::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.height)
  return _internal_height();
}
inline void Header::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Header.height)
}
inline ::int64_t Header::_internal_height() const {
  return _impl_.height_;
}
inline void Header::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Header::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Header::time() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.time)
  return _internal_time();
}
inline void Header::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Header.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::release_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Header::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.time)
  return _msg;
}
inline void Header::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.time)
}

// .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
inline bool Header::has_last_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_block_id_ != nullptr);
  return value;
}
inline void Header::clear_last_block_id() {
  if (_impl_.last_block_id_ != nullptr) _impl_.last_block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tendermint::types::BlockID& Header::_internal_last_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.last_block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& Header::last_block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.last_block_id)
  return _internal_last_block_id();
}
inline void Header::unsafe_arena_set_allocated_last_block_id(
    ::tendermint::types::BlockID* last_block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_block_id_);
  }
  _impl_.last_block_id_ = last_block_id;
  if (last_block_id) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Header.last_block_id)
}
inline ::tendermint::types::BlockID* Header::release_last_block_id() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::BlockID* temp = _impl_.last_block_id_;
  _impl_.last_block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* Header::unsafe_arena_release_last_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.last_block_id)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::BlockID* temp = _impl_.last_block_id_;
  _impl_.last_block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* Header::_internal_mutable_last_block_id() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.last_block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.last_block_id_ = p;
  }
  return _impl_.last_block_id_;
}
inline ::tendermint::types::BlockID* Header::mutable_last_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_last_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.last_block_id)
  return _msg;
}
inline void Header::set_allocated_last_block_id(::tendermint::types::BlockID* last_block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.last_block_id_;
  }
  if (last_block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(last_block_id);
    if (message_arena != submessage_arena) {
      last_block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.last_block_id_ = last_block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.last_block_id)
}

// bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
inline void Header::clear_last_commit_hash() {
  _impl_.last_commit_hash_.ClearToEmpty();
}
inline const std::string& Header::last_commit_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.last_commit_hash)
  return _internal_last_commit_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_last_commit_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.last_commit_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.last_commit_hash)
}
inline std::string* Header::mutable_last_commit_hash() {
  std::string* _s = _internal_mutable_last_commit_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.last_commit_hash)
  return _s;
}
inline const std::string& Header::_internal_last_commit_hash() const {
  return _impl_.last_commit_hash_.Get();
}
inline void Header::_internal_set_last_commit_hash(const std::string& value) {
  ;


  _impl_.last_commit_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_last_commit_hash() {
  ;
  return _impl_.last_commit_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_last_commit_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.last_commit_hash)
  return _impl_.last_commit_hash_.Release();
}
inline void Header::set_allocated_last_commit_hash(std::string* value) {
  _impl_.last_commit_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_commit_hash_.IsDefault()) {
          _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.last_commit_hash)
}

// bytes data_hash = 7 [json_name = "dataHash"];
inline void Header::clear_data_hash() {
  _impl_.data_hash_.ClearToEmpty();
}
inline const std::string& Header::data_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.data_hash)
  return _internal_data_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_data_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.data_hash)
}
inline std::string* Header::mutable_data_hash() {
  std::string* _s = _internal_mutable_data_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.data_hash)
  return _s;
}
inline const std::string& Header::_internal_data_hash() const {
  return _impl_.data_hash_.Get();
}
inline void Header::_internal_set_data_hash(const std::string& value) {
  ;


  _impl_.data_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_data_hash() {
  ;
  return _impl_.data_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_data_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.data_hash)
  return _impl_.data_hash_.Release();
}
inline void Header::set_allocated_data_hash(std::string* value) {
  _impl_.data_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_hash_.IsDefault()) {
          _impl_.data_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.data_hash)
}

// bytes validators_hash = 8 [json_name = "validatorsHash"];
inline void Header::clear_validators_hash() {
  _impl_.validators_hash_.ClearToEmpty();
}
inline const std::string& Header::validators_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.validators_hash)
  return _internal_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.validators_hash)
}
inline std::string* Header::mutable_validators_hash() {
  std::string* _s = _internal_mutable_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.validators_hash)
  return _s;
}
inline const std::string& Header::_internal_validators_hash() const {
  return _impl_.validators_hash_.Get();
}
inline void Header::_internal_set_validators_hash(const std::string& value) {
  ;


  _impl_.validators_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_validators_hash() {
  ;
  return _impl_.validators_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_validators_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.validators_hash)
  return _impl_.validators_hash_.Release();
}
inline void Header::set_allocated_validators_hash(std::string* value) {
  _impl_.validators_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validators_hash_.IsDefault()) {
          _impl_.validators_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.validators_hash)
}

// bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
inline void Header::clear_next_validators_hash() {
  _impl_.next_validators_hash_.ClearToEmpty();
}
inline const std::string& Header::next_validators_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.next_validators_hash)
  return _internal_next_validators_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_next_validators_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.next_validators_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.next_validators_hash)
}
inline std::string* Header::mutable_next_validators_hash() {
  std::string* _s = _internal_mutable_next_validators_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.next_validators_hash)
  return _s;
}
inline const std::string& Header::_internal_next_validators_hash() const {
  return _impl_.next_validators_hash_.Get();
}
inline void Header::_internal_set_next_validators_hash(const std::string& value) {
  ;


  _impl_.next_validators_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_next_validators_hash() {
  ;
  return _impl_.next_validators_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_next_validators_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.next_validators_hash)
  return _impl_.next_validators_hash_.Release();
}
inline void Header::set_allocated_next_validators_hash(std::string* value) {
  _impl_.next_validators_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_validators_hash_.IsDefault()) {
          _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.next_validators_hash)
}

// bytes consensus_hash = 10 [json_name = "consensusHash"];
inline void Header::clear_consensus_hash() {
  _impl_.consensus_hash_.ClearToEmpty();
}
inline const std::string& Header::consensus_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.consensus_hash)
  return _internal_consensus_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_consensus_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.consensus_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.consensus_hash)
}
inline std::string* Header::mutable_consensus_hash() {
  std::string* _s = _internal_mutable_consensus_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.consensus_hash)
  return _s;
}
inline const std::string& Header::_internal_consensus_hash() const {
  return _impl_.consensus_hash_.Get();
}
inline void Header::_internal_set_consensus_hash(const std::string& value) {
  ;


  _impl_.consensus_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_consensus_hash() {
  ;
  return _impl_.consensus_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_consensus_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.consensus_hash)
  return _impl_.consensus_hash_.Release();
}
inline void Header::set_allocated_consensus_hash(std::string* value) {
  _impl_.consensus_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.consensus_hash_.IsDefault()) {
          _impl_.consensus_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.consensus_hash)
}

// bytes app_hash = 11 [json_name = "appHash"];
inline void Header::clear_app_hash() {
  _impl_.app_hash_.ClearToEmpty();
}
inline const std::string& Header::app_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.app_hash)
  return _internal_app_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_app_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.app_hash)
}
inline std::string* Header::mutable_app_hash() {
  std::string* _s = _internal_mutable_app_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.app_hash)
  return _s;
}
inline const std::string& Header::_internal_app_hash() const {
  return _impl_.app_hash_.Get();
}
inline void Header::_internal_set_app_hash(const std::string& value) {
  ;


  _impl_.app_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_app_hash() {
  ;
  return _impl_.app_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_app_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.app_hash)
  return _impl_.app_hash_.Release();
}
inline void Header::set_allocated_app_hash(std::string* value) {
  _impl_.app_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_hash_.IsDefault()) {
          _impl_.app_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.app_hash)
}

// bytes last_results_hash = 12 [json_name = "lastResultsHash"];
inline void Header::clear_last_results_hash() {
  _impl_.last_results_hash_.ClearToEmpty();
}
inline const std::string& Header::last_results_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.last_results_hash)
  return _internal_last_results_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_last_results_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.last_results_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.last_results_hash)
}
inline std::string* Header::mutable_last_results_hash() {
  std::string* _s = _internal_mutable_last_results_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.last_results_hash)
  return _s;
}
inline const std::string& Header::_internal_last_results_hash() const {
  return _impl_.last_results_hash_.Get();
}
inline void Header::_internal_set_last_results_hash(const std::string& value) {
  ;


  _impl_.last_results_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_last_results_hash() {
  ;
  return _impl_.last_results_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_last_results_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.last_results_hash)
  return _impl_.last_results_hash_.Release();
}
inline void Header::set_allocated_last_results_hash(std::string* value) {
  _impl_.last_results_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_results_hash_.IsDefault()) {
          _impl_.last_results_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.last_results_hash)
}

// bytes evidence_hash = 13 [json_name = "evidenceHash"];
inline void Header::clear_evidence_hash() {
  _impl_.evidence_hash_.ClearToEmpty();
}
inline const std::string& Header::evidence_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.evidence_hash)
  return _internal_evidence_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_evidence_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.evidence_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.evidence_hash)
}
inline std::string* Header::mutable_evidence_hash() {
  std::string* _s = _internal_mutable_evidence_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.evidence_hash)
  return _s;
}
inline const std::string& Header::_internal_evidence_hash() const {
  return _impl_.evidence_hash_.Get();
}
inline void Header::_internal_set_evidence_hash(const std::string& value) {
  ;


  _impl_.evidence_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_evidence_hash() {
  ;
  return _impl_.evidence_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_evidence_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.evidence_hash)
  return _impl_.evidence_hash_.Release();
}
inline void Header::set_allocated_evidence_hash(std::string* value) {
  _impl_.evidence_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.evidence_hash_.IsDefault()) {
          _impl_.evidence_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.evidence_hash)
}

// bytes proposer_address = 14 [json_name = "proposerAddress"];
inline void Header::clear_proposer_address() {
  _impl_.proposer_address_.ClearToEmpty();
}
inline const std::string& Header::proposer_address() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Header.proposer_address)
  return _internal_proposer_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_proposer_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.proposer_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Header.proposer_address)
}
inline std::string* Header::mutable_proposer_address() {
  std::string* _s = _internal_mutable_proposer_address();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Header.proposer_address)
  return _s;
}
inline const std::string& Header::_internal_proposer_address() const {
  return _impl_.proposer_address_.Get();
}
inline void Header::_internal_set_proposer_address(const std::string& value) {
  ;


  _impl_.proposer_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_proposer_address() {
  ;
  return _impl_.proposer_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_proposer_address() {
  // @@protoc_insertion_point(field_release:tendermint.types.Header.proposer_address)
  return _impl_.proposer_address_.Release();
}
inline void Header::set_allocated_proposer_address(std::string* value) {
  _impl_.proposer_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.proposer_address_.IsDefault()) {
          _impl_.proposer_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Header.proposer_address)
}

// -------------------------------------------------------------------

// Data

// repeated bytes txs = 1 [json_name = "txs"];
inline int Data::_internal_txs_size() const {
  return _impl_.txs_.size();
}
inline int Data::txs_size() const {
  return _internal_txs_size();
}
inline void Data::clear_txs() {
  _internal_mutable_txs()->Clear();
}
inline std::string* Data::add_txs() {
  std::string* _s = _internal_add_txs();
  // @@protoc_insertion_point(field_add_mutable:tendermint.types.Data.txs)
  return _s;
}
inline const std::string& Data::txs(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.Data.txs)
  return _internal_txs(index);
}
inline std::string* Data::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.Data.txs)
  return _internal_mutable_txs()->Mutable(index);
}
inline void Data::set_txs(int index, const std::string& value) {
  _internal_mutable_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Data.txs)
}
inline void Data::set_txs(int index, std::string&& value) {
  _internal_mutable_txs()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tendermint.types.Data.txs)
}
inline void Data::set_txs(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_txs()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tendermint.types.Data.txs)
}
inline void Data::set_txs(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_txs()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tendermint.types.Data.txs)
}
inline void Data::set_txs(int index, absl::string_view value) {
  _internal_mutable_txs()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tendermint.types.Data.txs)
}
inline void Data::add_txs(const std::string& value) {
  _internal_mutable_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tendermint.types.Data.txs)
}
inline void Data::add_txs(std::string&& value) {
  _internal_mutable_txs()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tendermint.types.Data.txs)
}
inline void Data::add_txs(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_txs()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tendermint.types.Data.txs)
}
inline void Data::add_txs(const void* value, std::size_t size) {
  _internal_mutable_txs()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tendermint.types.Data.txs)
}
inline void Data::add_txs(absl::string_view value) {
  _internal_mutable_txs()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tendermint.types.Data.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Data::txs() const {
  // @@protoc_insertion_point(field_list:tendermint.types.Data.txs)
  return _internal_txs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Data::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.Data.txs)
  return _internal_mutable_txs();
}
inline const std::string& Data::_internal_txs(int index) const {
  return _internal_txs().Get(index);
}
inline std::string* Data::_internal_add_txs() {
  return _internal_mutable_txs()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Data::_internal_txs() const {
  return _impl_.txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Data::_internal_mutable_txs() {
  return &_impl_.txs_;
}

// -------------------------------------------------------------------

// Vote

// .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
inline void Vote::clear_type() {
  _impl_.type_ = 0;
}
inline ::tendermint::types::SignedMsgType Vote::type() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.type)
  return _internal_type();
}
inline void Vote::set_type(::tendermint::types::SignedMsgType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.type)
}
inline ::tendermint::types::SignedMsgType Vote::_internal_type() const {
  return static_cast<::tendermint::types::SignedMsgType>(_impl_.type_);
}
inline void Vote::_internal_set_type(::tendermint::types::SignedMsgType value) {
  ;
  _impl_.type_ = value;
}

// int64 height = 2 [json_name = "height"];
inline void Vote::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Vote::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.height)
  return _internal_height();
}
inline void Vote::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.height)
}
inline ::int64_t Vote::_internal_height() const {
  return _impl_.height_;
}
inline void Vote::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int32 round = 3 [json_name = "round"];
inline void Vote::clear_round() {
  _impl_.round_ = 0;
}
inline ::int32_t Vote::round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.round)
  return _internal_round();
}
inline void Vote::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.round)
}
inline ::int32_t Vote::_internal_round() const {
  return _impl_.round_;
}
inline void Vote::_internal_set_round(::int32_t value) {
  ;
  _impl_.round_ = value;
}

// .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool Vote::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void Vote::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::BlockID& Vote::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& Vote::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.block_id)
  return _internal_block_id();
}
inline void Vote::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Vote.block_id)
}
inline ::tendermint::types::BlockID* Vote::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* Vote::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.Vote.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* Vote::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* Vote::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Vote.block_id)
  return _msg;
}
inline void Vote::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Vote.block_id)
}

// .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Vote::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Vote::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Vote::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.timestamp)
  return _internal_timestamp();
}
inline void Vote::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Vote.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Vote::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Vote::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.Vote.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Vote::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Vote::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Vote.timestamp)
  return _msg;
}
inline void Vote::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Vote.timestamp)
}

// bytes validator_address = 6 [json_name = "validatorAddress"];
inline void Vote::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& Vote::validator_address() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.validator_address)
}
inline std::string* Vote::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Vote.validator_address)
  return _s;
}
inline const std::string& Vote::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void Vote::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_validator_address() {
  // @@protoc_insertion_point(field_release:tendermint.types.Vote.validator_address)
  return _impl_.validator_address_.Release();
}
inline void Vote::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Vote.validator_address)
}

// int32 validator_index = 7 [json_name = "validatorIndex"];
inline void Vote::clear_validator_index() {
  _impl_.validator_index_ = 0;
}
inline ::int32_t Vote::validator_index() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.validator_index)
  return _internal_validator_index();
}
inline void Vote::set_validator_index(::int32_t value) {
  _internal_set_validator_index(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.validator_index)
}
inline ::int32_t Vote::_internal_validator_index() const {
  return _impl_.validator_index_;
}
inline void Vote::_internal_set_validator_index(::int32_t value) {
  ;
  _impl_.validator_index_ = value;
}

// bytes signature = 8 [json_name = "signature"];
inline void Vote::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Vote::signature() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Vote.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vote::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Vote.signature)
}
inline std::string* Vote::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Vote.signature)
  return _s;
}
inline const std::string& Vote::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Vote::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Vote::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Vote::release_signature() {
  // @@protoc_insertion_point(field_release:tendermint.types.Vote.signature)
  return _impl_.signature_.Release();
}
inline void Vote::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Vote.signature)
}

// -------------------------------------------------------------------

// Commit

// int64 height = 1 [json_name = "height"];
inline void Commit::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Commit::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Commit.height)
  return _internal_height();
}
inline void Commit::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Commit.height)
}
inline ::int64_t Commit::_internal_height() const {
  return _impl_.height_;
}
inline void Commit::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int32 round = 2 [json_name = "round"];
inline void Commit::clear_round() {
  _impl_.round_ = 0;
}
inline ::int32_t Commit::round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Commit.round)
  return _internal_round();
}
inline void Commit::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Commit.round)
}
inline ::int32_t Commit::_internal_round() const {
  return _impl_.round_;
}
inline void Commit::_internal_set_round(::int32_t value) {
  ;
  _impl_.round_ = value;
}

// .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool Commit::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void Commit::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::BlockID& Commit::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& Commit::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Commit.block_id)
  return _internal_block_id();
}
inline void Commit::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Commit.block_id)
}
inline ::tendermint::types::BlockID* Commit::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* Commit::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.Commit.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* Commit::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* Commit::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Commit.block_id)
  return _msg;
}
inline void Commit::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Commit.block_id)
}

// repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
inline int Commit::_internal_signatures_size() const {
  return _impl_.signatures_.size();
}
inline int Commit::signatures_size() const {
  return _internal_signatures_size();
}
inline void Commit::clear_signatures() {
  _internal_mutable_signatures()->Clear();
}
inline ::tendermint::types::CommitSig* Commit::mutable_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.Commit.signatures)
  return _internal_mutable_signatures()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::CommitSig >*
Commit::mutable_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.Commit.signatures)
  return _internal_mutable_signatures();
}
inline const ::tendermint::types::CommitSig& Commit::_internal_signatures(int index) const {
  return _internal_signatures().Get(index);
}
inline const ::tendermint::types::CommitSig& Commit::signatures(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.Commit.signatures)
  return _internal_signatures(index);
}
inline ::tendermint::types::CommitSig* Commit::_internal_add_signatures() {
  return _internal_mutable_signatures()->Add();
}
inline ::tendermint::types::CommitSig* Commit::add_signatures() {
  ::tendermint::types::CommitSig* _add = _internal_add_signatures();
  // @@protoc_insertion_point(field_add:tendermint.types.Commit.signatures)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::CommitSig >&
Commit::signatures() const {
  // @@protoc_insertion_point(field_list:tendermint.types.Commit.signatures)
  return _internal_signatures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::CommitSig>&
Commit::_internal_signatures() const {
  return _impl_.signatures_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::CommitSig>*
Commit::_internal_mutable_signatures() {
  return &_impl_.signatures_;
}

// -------------------------------------------------------------------

// CommitSig

// .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
inline void CommitSig::clear_block_id_flag() {
  _impl_.block_id_flag_ = 0;
}
inline ::tendermint::types::BlockIDFlag CommitSig::block_id_flag() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CommitSig.block_id_flag)
  return _internal_block_id_flag();
}
inline void CommitSig::set_block_id_flag(::tendermint::types::BlockIDFlag value) {
   _internal_set_block_id_flag(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CommitSig.block_id_flag)
}
inline ::tendermint::types::BlockIDFlag CommitSig::_internal_block_id_flag() const {
  return static_cast<::tendermint::types::BlockIDFlag>(_impl_.block_id_flag_);
}
inline void CommitSig::_internal_set_block_id_flag(::tendermint::types::BlockIDFlag value) {
  ;
  _impl_.block_id_flag_ = value;
}

// bytes validator_address = 2 [json_name = "validatorAddress"];
inline void CommitSig::clear_validator_address() {
  _impl_.validator_address_.ClearToEmpty();
}
inline const std::string& CommitSig::validator_address() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CommitSig.validator_address)
  return _internal_validator_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitSig::set_validator_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.validator_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CommitSig.validator_address)
}
inline std::string* CommitSig::mutable_validator_address() {
  std::string* _s = _internal_mutable_validator_address();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CommitSig.validator_address)
  return _s;
}
inline const std::string& CommitSig::_internal_validator_address() const {
  return _impl_.validator_address_.Get();
}
inline void CommitSig::_internal_set_validator_address(const std::string& value) {
  ;


  _impl_.validator_address_.Set(value, GetArenaForAllocation());
}
inline std::string* CommitSig::_internal_mutable_validator_address() {
  ;
  return _impl_.validator_address_.Mutable( GetArenaForAllocation());
}
inline std::string* CommitSig::release_validator_address() {
  // @@protoc_insertion_point(field_release:tendermint.types.CommitSig.validator_address)
  return _impl_.validator_address_.Release();
}
inline void CommitSig::set_allocated_validator_address(std::string* value) {
  _impl_.validator_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.validator_address_.IsDefault()) {
          _impl_.validator_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CommitSig.validator_address)
}

// .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool CommitSig::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CommitSig::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CommitSig::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CommitSig.timestamp)
  return _internal_timestamp();
}
inline void CommitSig::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CommitSig.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommitSig::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommitSig::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.CommitSig.timestamp)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommitSig::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommitSig::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CommitSig.timestamp)
  return _msg;
}
inline void CommitSig::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CommitSig.timestamp)
}

// bytes signature = 4 [json_name = "signature"];
inline void CommitSig::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& CommitSig::signature() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CommitSig.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommitSig::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CommitSig.signature)
}
inline std::string* CommitSig::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CommitSig.signature)
  return _s;
}
inline const std::string& CommitSig::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void CommitSig::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* CommitSig::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* CommitSig::release_signature() {
  // @@protoc_insertion_point(field_release:tendermint.types.CommitSig.signature)
  return _impl_.signature_.Release();
}
inline void CommitSig::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CommitSig.signature)
}

// -------------------------------------------------------------------

// Proposal

// .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
inline void Proposal::clear_type() {
  _impl_.type_ = 0;
}
inline ::tendermint::types::SignedMsgType Proposal::type() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.type)
  return _internal_type();
}
inline void Proposal::set_type(::tendermint::types::SignedMsgType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Proposal.type)
}
inline ::tendermint::types::SignedMsgType Proposal::_internal_type() const {
  return static_cast<::tendermint::types::SignedMsgType>(_impl_.type_);
}
inline void Proposal::_internal_set_type(::tendermint::types::SignedMsgType value) {
  ;
  _impl_.type_ = value;
}

// int64 height = 2 [json_name = "height"];
inline void Proposal::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t Proposal::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.height)
  return _internal_height();
}
inline void Proposal::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Proposal.height)
}
inline ::int64_t Proposal::_internal_height() const {
  return _impl_.height_;
}
inline void Proposal::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int32 round = 3 [json_name = "round"];
inline void Proposal::clear_round() {
  _impl_.round_ = 0;
}
inline ::int32_t Proposal::round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.round)
  return _internal_round();
}
inline void Proposal::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Proposal.round)
}
inline ::int32_t Proposal::_internal_round() const {
  return _impl_.round_;
}
inline void Proposal::_internal_set_round(::int32_t value) {
  ;
  _impl_.round_ = value;
}

// int32 pol_round = 4 [json_name = "polRound"];
inline void Proposal::clear_pol_round() {
  _impl_.pol_round_ = 0;
}
inline ::int32_t Proposal::pol_round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.pol_round)
  return _internal_pol_round();
}
inline void Proposal::set_pol_round(::int32_t value) {
  _internal_set_pol_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Proposal.pol_round)
}
inline ::int32_t Proposal::_internal_pol_round() const {
  return _impl_.pol_round_;
}
inline void Proposal::_internal_set_pol_round(::int32_t value) {
  ;
  _impl_.pol_round_ = value;
}

// .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool Proposal::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void Proposal::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::BlockID& Proposal::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& Proposal::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.block_id)
  return _internal_block_id();
}
inline void Proposal::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Proposal.block_id)
}
inline ::tendermint::types::BlockID* Proposal::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* Proposal::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.Proposal.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* Proposal::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* Proposal::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Proposal.block_id)
  return _msg;
}
inline void Proposal::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Proposal.block_id)
}

// .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool Proposal::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Proposal::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.timestamp)
  return _internal_timestamp();
}
inline void Proposal::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Proposal.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.Proposal.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Proposal::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Proposal.timestamp)
  return _msg;
}
inline void Proposal::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Proposal.timestamp)
}

// bytes signature = 7 [json_name = "signature"];
inline void Proposal::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& Proposal::signature() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Proposal.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Proposal::set_signature(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Proposal.signature)
}
inline std::string* Proposal::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Proposal.signature)
  return _s;
}
inline const std::string& Proposal::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void Proposal::_internal_set_signature(const std::string& value) {
  ;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_signature() {
  ;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* Proposal::release_signature() {
  // @@protoc_insertion_point(field_release:tendermint.types.Proposal.signature)
  return _impl_.signature_.Release();
}
inline void Proposal::set_allocated_signature(std::string* value) {
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Proposal.signature)
}

// -------------------------------------------------------------------

// SignedHeader

// .tendermint.types.Header header = 1 [json_name = "header"];
inline bool SignedHeader::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void SignedHeader::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::Header& SignedHeader::_internal_header() const {
  const ::tendermint::types::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Header&>(
      ::tendermint::types::_Header_default_instance_);
}
inline const ::tendermint::types::Header& SignedHeader::header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.SignedHeader.header)
  return _internal_header();
}
inline void SignedHeader::unsafe_arena_set_allocated_header(
    ::tendermint::types::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.SignedHeader.header)
}
inline ::tendermint::types::Header* SignedHeader::release_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Header* SignedHeader::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.SignedHeader.header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::tendermint::types::Header* SignedHeader::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::tendermint::types::Header* SignedHeader::mutable_header() {
  ::tendermint::types::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.SignedHeader.header)
  return _msg;
}
inline void SignedHeader::set_allocated_header(::tendermint::types::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.SignedHeader.header)
}

// .tendermint.types.Commit commit = 2 [json_name = "commit"];
inline bool SignedHeader::has_commit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.commit_ != nullptr);
  return value;
}
inline void SignedHeader::clear_commit() {
  if (_impl_.commit_ != nullptr) _impl_.commit_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::types::Commit& SignedHeader::_internal_commit() const {
  const ::tendermint::types::Commit* p = _impl_.commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Commit&>(
      ::tendermint::types::_Commit_default_instance_);
}
inline const ::tendermint::types::Commit& SignedHeader::commit() const {
  // @@protoc_insertion_point(field_get:tendermint.types.SignedHeader.commit)
  return _internal_commit();
}
inline void SignedHeader::unsafe_arena_set_allocated_commit(
    ::tendermint::types::Commit* commit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.commit_);
  }
  _impl_.commit_ = commit;
  if (commit) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.SignedHeader.commit)
}
inline ::tendermint::types::Commit* SignedHeader::release_commit() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Commit* temp = _impl_.commit_;
  _impl_.commit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Commit* SignedHeader::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_release:tendermint.types.SignedHeader.commit)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Commit* temp = _impl_.commit_;
  _impl_.commit_ = nullptr;
  return temp;
}
inline ::tendermint::types::Commit* SignedHeader::_internal_mutable_commit() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Commit>(GetArenaForAllocation());
    _impl_.commit_ = p;
  }
  return _impl_.commit_;
}
inline ::tendermint::types::Commit* SignedHeader::mutable_commit() {
  ::tendermint::types::Commit* _msg = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:tendermint.types.SignedHeader.commit)
  return _msg;
}
inline void SignedHeader::set_allocated_commit(::tendermint::types::Commit* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.SignedHeader.commit)
}

// -------------------------------------------------------------------

// LightBlock

// .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
inline bool LightBlock::has_signed_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signed_header_ != nullptr);
  return value;
}
inline void LightBlock::clear_signed_header() {
  if (_impl_.signed_header_ != nullptr) _impl_.signed_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::SignedHeader& LightBlock::_internal_signed_header() const {
  const ::tendermint::types::SignedHeader* p = _impl_.signed_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::SignedHeader&>(
      ::tendermint::types::_SignedHeader_default_instance_);
}
inline const ::tendermint::types::SignedHeader& LightBlock::signed_header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightBlock.signed_header)
  return _internal_signed_header();
}
inline void LightBlock::unsafe_arena_set_allocated_signed_header(
    ::tendermint::types::SignedHeader* signed_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signed_header_);
  }
  _impl_.signed_header_ = signed_header;
  if (signed_header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightBlock.signed_header)
}
inline ::tendermint::types::SignedHeader* LightBlock::release_signed_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::SignedHeader* temp = _impl_.signed_header_;
  _impl_.signed_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::SignedHeader* LightBlock::unsafe_arena_release_signed_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.LightBlock.signed_header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::SignedHeader* temp = _impl_.signed_header_;
  _impl_.signed_header_ = nullptr;
  return temp;
}
inline ::tendermint::types::SignedHeader* LightBlock::_internal_mutable_signed_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signed_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::SignedHeader>(GetArenaForAllocation());
    _impl_.signed_header_ = p;
  }
  return _impl_.signed_header_;
}
inline ::tendermint::types::SignedHeader* LightBlock::mutable_signed_header() {
  ::tendermint::types::SignedHeader* _msg = _internal_mutable_signed_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightBlock.signed_header)
  return _msg;
}
inline void LightBlock::set_allocated_signed_header(::tendermint::types::SignedHeader* signed_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signed_header_;
  }
  if (signed_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signed_header);
    if (message_arena != submessage_arena) {
      signed_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signed_header_ = signed_header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightBlock.signed_header)
}

// .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
inline bool LightBlock::has_validator_set() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_set_ != nullptr);
  return value;
}
inline const ::tendermint::types::ValidatorSet& LightBlock::_internal_validator_set() const {
  const ::tendermint::types::ValidatorSet* p = _impl_.validator_set_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorSet&>(
      ::tendermint::types::_ValidatorSet_default_instance_);
}
inline const ::tendermint::types::ValidatorSet& LightBlock::validator_set() const {
  // @@protoc_insertion_point(field_get:tendermint.types.LightBlock.validator_set)
  return _internal_validator_set();
}
inline void LightBlock::unsafe_arena_set_allocated_validator_set(
    ::tendermint::types::ValidatorSet* validator_set) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_set_);
  }
  _impl_.validator_set_ = validator_set;
  if (validator_set) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.LightBlock.validator_set)
}
inline ::tendermint::types::ValidatorSet* LightBlock::release_validator_set() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ValidatorSet* temp = _impl_.validator_set_;
  _impl_.validator_set_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorSet* LightBlock::unsafe_arena_release_validator_set() {
  // @@protoc_insertion_point(field_release:tendermint.types.LightBlock.validator_set)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::ValidatorSet* temp = _impl_.validator_set_;
  _impl_.validator_set_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorSet* LightBlock::_internal_mutable_validator_set() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.validator_set_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorSet>(GetArenaForAllocation());
    _impl_.validator_set_ = p;
  }
  return _impl_.validator_set_;
}
inline ::tendermint::types::ValidatorSet* LightBlock::mutable_validator_set() {
  ::tendermint::types::ValidatorSet* _msg = _internal_mutable_validator_set();
  // @@protoc_insertion_point(field_mutable:tendermint.types.LightBlock.validator_set)
  return _msg;
}
inline void LightBlock::set_allocated_validator_set(::tendermint::types::ValidatorSet* validator_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_set_);
  }
  if (validator_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validator_set));
    if (message_arena != submessage_arena) {
      validator_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator_set, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.validator_set_ = validator_set;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.LightBlock.validator_set)
}

// -------------------------------------------------------------------

// BlockMeta

// .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
inline bool BlockMeta::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void BlockMeta::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::BlockID& BlockMeta::_internal_block_id() const {
  const ::tendermint::types::BlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockID&>(
      ::tendermint::types::_BlockID_default_instance_);
}
inline const ::tendermint::types::BlockID& BlockMeta::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockMeta.block_id)
  return _internal_block_id();
}
inline void BlockMeta::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::BlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.BlockMeta.block_id)
}
inline ::tendermint::types::BlockID* BlockMeta::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockID* BlockMeta::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.BlockMeta.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockID* BlockMeta::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::BlockID* BlockMeta::mutable_block_id() {
  ::tendermint::types::BlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.BlockMeta.block_id)
  return _msg;
}
inline void BlockMeta::set_allocated_block_id(::tendermint::types::BlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.BlockMeta.block_id)
}

// int64 block_size = 2 [json_name = "blockSize"];
inline void BlockMeta::clear_block_size() {
  _impl_.block_size_ = ::int64_t{0};
}
inline ::int64_t BlockMeta::block_size() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockMeta.block_size)
  return _internal_block_size();
}
inline void BlockMeta::set_block_size(::int64_t value) {
  _internal_set_block_size(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockMeta.block_size)
}
inline ::int64_t BlockMeta::_internal_block_size() const {
  return _impl_.block_size_;
}
inline void BlockMeta::_internal_set_block_size(::int64_t value) {
  ;
  _impl_.block_size_ = value;
}

// .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
inline bool BlockMeta::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void BlockMeta::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::types::Header& BlockMeta::_internal_header() const {
  const ::tendermint::types::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Header&>(
      ::tendermint::types::_Header_default_instance_);
}
inline const ::tendermint::types::Header& BlockMeta::header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockMeta.header)
  return _internal_header();
}
inline void BlockMeta::unsafe_arena_set_allocated_header(
    ::tendermint::types::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.BlockMeta.header)
}
inline ::tendermint::types::Header* BlockMeta::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Header* BlockMeta::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.BlockMeta.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::tendermint::types::Header* BlockMeta::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::tendermint::types::Header* BlockMeta::mutable_header() {
  ::tendermint::types::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.BlockMeta.header)
  return _msg;
}
inline void BlockMeta::set_allocated_header(::tendermint::types::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.BlockMeta.header)
}

// int64 num_txs = 4 [json_name = "numTxs"];
inline void BlockMeta::clear_num_txs() {
  _impl_.num_txs_ = ::int64_t{0};
}
inline ::int64_t BlockMeta::num_txs() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockMeta.num_txs)
  return _internal_num_txs();
}
inline void BlockMeta::set_num_txs(::int64_t value) {
  _internal_set_num_txs(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockMeta.num_txs)
}
inline ::int64_t BlockMeta::_internal_num_txs() const {
  return _impl_.num_txs_;
}
inline void BlockMeta::_internal_set_num_txs(::int64_t value) {
  ;
  _impl_.num_txs_ = value;
}

// -------------------------------------------------------------------

// TxProof

// bytes root_hash = 1 [json_name = "rootHash"];
inline void TxProof::clear_root_hash() {
  _impl_.root_hash_.ClearToEmpty();
}
inline const std::string& TxProof::root_hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.TxProof.root_hash)
  return _internal_root_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxProof::set_root_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.root_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.TxProof.root_hash)
}
inline std::string* TxProof::mutable_root_hash() {
  std::string* _s = _internal_mutable_root_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.TxProof.root_hash)
  return _s;
}
inline const std::string& TxProof::_internal_root_hash() const {
  return _impl_.root_hash_.Get();
}
inline void TxProof::_internal_set_root_hash(const std::string& value) {
  ;


  _impl_.root_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* TxProof::_internal_mutable_root_hash() {
  ;
  return _impl_.root_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* TxProof::release_root_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.TxProof.root_hash)
  return _impl_.root_hash_.Release();
}
inline void TxProof::set_allocated_root_hash(std::string* value) {
  _impl_.root_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.root_hash_.IsDefault()) {
          _impl_.root_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.TxProof.root_hash)
}

// bytes data = 2 [json_name = "data"];
inline void TxProof::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& TxProof::data() const {
  // @@protoc_insertion_point(field_get:tendermint.types.TxProof.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TxProof::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.TxProof.data)
}
inline std::string* TxProof::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.types.TxProof.data)
  return _s;
}
inline const std::string& TxProof::_internal_data() const {
  return _impl_.data_.Get();
}
inline void TxProof::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* TxProof::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* TxProof::release_data() {
  // @@protoc_insertion_point(field_release:tendermint.types.TxProof.data)
  return _impl_.data_.Release();
}
inline void TxProof::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.TxProof.data)
}

// .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
inline bool TxProof::has_proof() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proof_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::Proof& TxProof::_internal_proof() const {
  const ::tendermint::crypto::Proof* p = _impl_.proof_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::Proof&>(
      ::tendermint::crypto::_Proof_default_instance_);
}
inline const ::tendermint::crypto::Proof& TxProof::proof() const {
  // @@protoc_insertion_point(field_get:tendermint.types.TxProof.proof)
  return _internal_proof();
}
inline void TxProof::unsafe_arena_set_allocated_proof(
    ::tendermint::crypto::Proof* proof) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_);
  }
  _impl_.proof_ = proof;
  if (proof) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.TxProof.proof)
}
inline ::tendermint::crypto::Proof* TxProof::release_proof() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::Proof* TxProof::unsafe_arena_release_proof() {
  // @@protoc_insertion_point(field_release:tendermint.types.TxProof.proof)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::Proof* temp = _impl_.proof_;
  _impl_.proof_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::Proof* TxProof::_internal_mutable_proof() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proof_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::Proof>(GetArenaForAllocation());
    _impl_.proof_ = p;
  }
  return _impl_.proof_;
}
inline ::tendermint::crypto::Proof* TxProof::mutable_proof() {
  ::tendermint::crypto::Proof* _msg = _internal_mutable_proof();
  // @@protoc_insertion_point(field_mutable:tendermint.types.TxProof.proof)
  return _msg;
}
inline void TxProof::set_allocated_proof(::tendermint::crypto::Proof* proof) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proof_);
  }
  if (proof) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proof));
    if (message_arena != submessage_arena) {
      proof = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proof, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proof_ = proof;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.TxProof.proof)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::tendermint::types::BlockIDFlag> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::types::BlockIDFlag>() {
  return ::tendermint::types::BlockIDFlag_descriptor();
}
template <>
struct is_proto_enum<::tendermint::types::SignedMsgType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tendermint::types::SignedMsgType>() {
  return ::tendermint::types::SignedMsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2ftypes_2eproto_2epb_2eh

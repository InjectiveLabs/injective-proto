// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/validator.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/crypto/keys.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fvalidator_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fvalidator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fvalidator_2eproto;
namespace tendermint {
namespace types {
class SimpleValidator;
struct SimpleValidatorDefaultTypeInternal;
extern SimpleValidatorDefaultTypeInternal _SimpleValidator_default_instance_;
class Validator;
struct ValidatorDefaultTypeInternal;
extern ValidatorDefaultTypeInternal _Validator_default_instance_;
class ValidatorSet;
struct ValidatorSetDefaultTypeInternal;
extern ValidatorSetDefaultTypeInternal _ValidatorSet_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::types::SimpleValidator* Arena::CreateMaybeMessage<::tendermint::types::SimpleValidator>(Arena*);
template <>
::tendermint::types::Validator* Arena::CreateMaybeMessage<::tendermint::types::Validator>(Arena*);
template <>
::tendermint::types::ValidatorSet* Arena::CreateMaybeMessage<::tendermint::types::ValidatorSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace types {

// ===================================================================


// -------------------------------------------------------------------

class ValidatorSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.ValidatorSet) */ {
 public:
  inline ValidatorSet() : ValidatorSet(nullptr) {}
  ~ValidatorSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorSet(const ValidatorSet& from);
  ValidatorSet(ValidatorSet&& from) noexcept
    : ValidatorSet() {
    *this = ::std::move(from);
  }

  inline ValidatorSet& operator=(const ValidatorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorSet& operator=(ValidatorSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorSet* internal_default_instance() {
    return reinterpret_cast<const ValidatorSet*>(
               &_ValidatorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValidatorSet& a, ValidatorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidatorSet& from) {
    ValidatorSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.ValidatorSet";
  }
  protected:
  explicit ValidatorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValidatorsFieldNumber = 1,
    kProposerFieldNumber = 2,
    kTotalVotingPowerFieldNumber = 3,
  };
  // repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
  int validators_size() const;
  private:
  int _internal_validators_size() const;

  public:
  void clear_validators() ;
  ::tendermint::types::Validator* mutable_validators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >*
      mutable_validators();
  private:
  const ::tendermint::types::Validator& _internal_validators(int index) const;
  ::tendermint::types::Validator* _internal_add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::Validator>& _internal_validators() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::Validator>* _internal_mutable_validators();
  public:
  const ::tendermint::types::Validator& validators(int index) const;
  ::tendermint::types::Validator* add_validators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >&
      validators() const;
  // .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
  bool has_proposer() const;
  void clear_proposer() ;
  const ::tendermint::types::Validator& proposer() const;
  PROTOBUF_NODISCARD ::tendermint::types::Validator* release_proposer();
  ::tendermint::types::Validator* mutable_proposer();
  void set_allocated_proposer(::tendermint::types::Validator* proposer);
  private:
  const ::tendermint::types::Validator& _internal_proposer() const;
  ::tendermint::types::Validator* _internal_mutable_proposer();
  public:
  void unsafe_arena_set_allocated_proposer(
      ::tendermint::types::Validator* proposer);
  ::tendermint::types::Validator* unsafe_arena_release_proposer();
  // int64 total_voting_power = 3 [json_name = "totalVotingPower"];
  void clear_total_voting_power() ;
  ::int64_t total_voting_power() const;
  void set_total_voting_power(::int64_t value);

  private:
  ::int64_t _internal_total_voting_power() const;
  void _internal_set_total_voting_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.ValidatorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator > validators_;
    ::tendermint::types::Validator* proposer_;
    ::int64_t total_voting_power_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};// -------------------------------------------------------------------

class Validator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.Validator) */ {
 public:
  inline Validator() : Validator(nullptr) {}
  ~Validator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Validator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Validator(const Validator& from);
  Validator(Validator&& from) noexcept
    : Validator() {
    *this = ::std::move(from);
  }

  inline Validator& operator=(const Validator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Validator& operator=(Validator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Validator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Validator* internal_default_instance() {
    return reinterpret_cast<const Validator*>(
               &_Validator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Validator& a, Validator& b) {
    a.Swap(&b);
  }
  inline void Swap(Validator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Validator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Validator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Validator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Validator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Validator& from) {
    Validator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Validator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.Validator";
  }
  protected:
  explicit Validator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPubKeyFieldNumber = 2,
    kVotingPowerFieldNumber = 3,
    kProposerPriorityFieldNumber = 4,
  };
  // bytes address = 1 [json_name = "address"];
  void clear_address() ;
  const std::string& address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* ptr);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key);
  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::tendermint::crypto::PublicKey* pub_key);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();
  // int64 voting_power = 3 [json_name = "votingPower"];
  void clear_voting_power() ;
  ::int64_t voting_power() const;
  void set_voting_power(::int64_t value);

  private:
  ::int64_t _internal_voting_power() const;
  void _internal_set_voting_power(::int64_t value);

  public:
  // int64 proposer_priority = 4 [json_name = "proposerPriority"];
  void clear_proposer_priority() ;
  ::int64_t proposer_priority() const;
  void set_proposer_priority(::int64_t value);

  private:
  ::int64_t _internal_proposer_priority() const;
  void _internal_set_proposer_priority(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.Validator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    ::tendermint::crypto::PublicKey* pub_key_;
    ::int64_t voting_power_;
    ::int64_t proposer_priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};// -------------------------------------------------------------------

class SimpleValidator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.SimpleValidator) */ {
 public:
  inline SimpleValidator() : SimpleValidator(nullptr) {}
  ~SimpleValidator() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleValidator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleValidator(const SimpleValidator& from);
  SimpleValidator(SimpleValidator&& from) noexcept
    : SimpleValidator() {
    *this = ::std::move(from);
  }

  inline SimpleValidator& operator=(const SimpleValidator& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleValidator& operator=(SimpleValidator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleValidator& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleValidator* internal_default_instance() {
    return reinterpret_cast<const SimpleValidator*>(
               &_SimpleValidator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SimpleValidator& a, SimpleValidator& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleValidator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleValidator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleValidator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleValidator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleValidator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleValidator& from) {
    SimpleValidator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleValidator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.SimpleValidator";
  }
  protected:
  explicit SimpleValidator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kVotingPowerFieldNumber = 2,
  };
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key);
  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::tendermint::crypto::PublicKey* pub_key);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();
  // int64 voting_power = 2 [json_name = "votingPower"];
  void clear_voting_power() ;
  ::int64_t voting_power() const;
  void set_voting_power(::int64_t value);

  private:
  ::int64_t _internal_voting_power() const;
  void _internal_set_voting_power(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.SimpleValidator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::crypto::PublicKey* pub_key_;
    ::int64_t voting_power_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fvalidator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ValidatorSet

// repeated .tendermint.types.Validator validators = 1 [json_name = "validators"];
inline int ValidatorSet::_internal_validators_size() const {
  return _impl_.validators_.size();
}
inline int ValidatorSet::validators_size() const {
  return _internal_validators_size();
}
inline void ValidatorSet::clear_validators() {
  _internal_mutable_validators()->Clear();
}
inline ::tendermint::types::Validator* ValidatorSet::mutable_validators(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorSet.validators)
  return _internal_mutable_validators()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >*
ValidatorSet::mutable_validators() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.ValidatorSet.validators)
  return _internal_mutable_validators();
}
inline const ::tendermint::types::Validator& ValidatorSet::_internal_validators(int index) const {
  return _internal_validators().Get(index);
}
inline const ::tendermint::types::Validator& ValidatorSet::validators(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.validators)
  return _internal_validators(index);
}
inline ::tendermint::types::Validator* ValidatorSet::_internal_add_validators() {
  return _internal_mutable_validators()->Add();
}
inline ::tendermint::types::Validator* ValidatorSet::add_validators() {
  ::tendermint::types::Validator* _add = _internal_add_validators();
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorSet.validators)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tendermint::types::Validator >&
ValidatorSet::validators() const {
  // @@protoc_insertion_point(field_list:tendermint.types.ValidatorSet.validators)
  return _internal_validators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::Validator>&
ValidatorSet::_internal_validators() const {
  return _impl_.validators_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::tendermint::types::Validator>*
ValidatorSet::_internal_mutable_validators() {
  return &_impl_.validators_;
}

// .tendermint.types.Validator proposer = 2 [json_name = "proposer"];
inline bool ValidatorSet::has_proposer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.proposer_ != nullptr);
  return value;
}
inline void ValidatorSet::clear_proposer() {
  if (_impl_.proposer_ != nullptr) _impl_.proposer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::Validator& ValidatorSet::_internal_proposer() const {
  const ::tendermint::types::Validator* p = _impl_.proposer_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Validator&>(
      ::tendermint::types::_Validator_default_instance_);
}
inline const ::tendermint::types::Validator& ValidatorSet::proposer() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.proposer)
  return _internal_proposer();
}
inline void ValidatorSet::unsafe_arena_set_allocated_proposer(
    ::tendermint::types::Validator* proposer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.proposer_);
  }
  _impl_.proposer_ = proposer;
  if (proposer) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ValidatorSet.proposer)
}
inline ::tendermint::types::Validator* ValidatorSet::release_proposer() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Validator* temp = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Validator* ValidatorSet::unsafe_arena_release_proposer() {
  // @@protoc_insertion_point(field_release:tendermint.types.ValidatorSet.proposer)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Validator* temp = _impl_.proposer_;
  _impl_.proposer_ = nullptr;
  return temp;
}
inline ::tendermint::types::Validator* ValidatorSet::_internal_mutable_proposer() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.proposer_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Validator>(GetArenaForAllocation());
    _impl_.proposer_ = p;
  }
  return _impl_.proposer_;
}
inline ::tendermint::types::Validator* ValidatorSet::mutable_proposer() {
  ::tendermint::types::Validator* _msg = _internal_mutable_proposer();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorSet.proposer)
  return _msg;
}
inline void ValidatorSet::set_allocated_proposer(::tendermint::types::Validator* proposer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.proposer_;
  }
  if (proposer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proposer);
    if (message_arena != submessage_arena) {
      proposer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.proposer_ = proposer;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ValidatorSet.proposer)
}

// int64 total_voting_power = 3 [json_name = "totalVotingPower"];
inline void ValidatorSet::clear_total_voting_power() {
  _impl_.total_voting_power_ = ::int64_t{0};
}
inline ::int64_t ValidatorSet::total_voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorSet.total_voting_power)
  return _internal_total_voting_power();
}
inline void ValidatorSet::set_total_voting_power(::int64_t value) {
  _internal_set_total_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorSet.total_voting_power)
}
inline ::int64_t ValidatorSet::_internal_total_voting_power() const {
  return _impl_.total_voting_power_;
}
inline void ValidatorSet::_internal_set_total_voting_power(::int64_t value) {
  ;
  _impl_.total_voting_power_ = value;
}

// -------------------------------------------------------------------

// Validator

// bytes address = 1 [json_name = "address"];
inline void Validator::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Validator::address() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Validator::set_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.address)
}
inline std::string* Validator::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Validator.address)
  return _s;
}
inline const std::string& Validator::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Validator::_internal_set_address(const std::string& value) {
  ;


  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Validator::_internal_mutable_address() {
  ;
  return _impl_.address_.Mutable( GetArenaForAllocation());
}
inline std::string* Validator::release_address() {
  // @@protoc_insertion_point(field_release:tendermint.types.Validator.address)
  return _impl_.address_.Release();
}
inline void Validator::set_allocated_address(std::string* value) {
  _impl_.address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.address_.IsDefault()) {
          _impl_.address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Validator.address)
}

// .tendermint.crypto.PublicKey pub_key = 2 [json_name = "pubKey", (.gogoproto.nullable) = false];
inline bool Validator::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& Validator::_internal_pub_key() const {
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(
      ::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& Validator::pub_key() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.pub_key)
  return _internal_pub_key();
}
inline void Validator::unsafe_arena_set_allocated_pub_key(
    ::tendermint::crypto::PublicKey* pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = pub_key;
  if (pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.Validator.pub_key)
}
inline ::tendermint::crypto::PublicKey* Validator::release_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::PublicKey* Validator::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:tendermint.types.Validator.pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* Validator::_internal_mutable_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::PublicKey>(GetArenaForAllocation());
    _impl_.pub_key_ = p;
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* Validator::mutable_pub_key() {
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.types.Validator.pub_key)
  return _msg;
}
inline void Validator::set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key));
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.Validator.pub_key)
}

// int64 voting_power = 3 [json_name = "votingPower"];
inline void Validator::clear_voting_power() {
  _impl_.voting_power_ = ::int64_t{0};
}
inline ::int64_t Validator::voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.voting_power)
  return _internal_voting_power();
}
inline void Validator::set_voting_power(::int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.voting_power)
}
inline ::int64_t Validator::_internal_voting_power() const {
  return _impl_.voting_power_;
}
inline void Validator::_internal_set_voting_power(::int64_t value) {
  ;
  _impl_.voting_power_ = value;
}

// int64 proposer_priority = 4 [json_name = "proposerPriority"];
inline void Validator::clear_proposer_priority() {
  _impl_.proposer_priority_ = ::int64_t{0};
}
inline ::int64_t Validator::proposer_priority() const {
  // @@protoc_insertion_point(field_get:tendermint.types.Validator.proposer_priority)
  return _internal_proposer_priority();
}
inline void Validator::set_proposer_priority(::int64_t value) {
  _internal_set_proposer_priority(value);
  // @@protoc_insertion_point(field_set:tendermint.types.Validator.proposer_priority)
}
inline ::int64_t Validator::_internal_proposer_priority() const {
  return _impl_.proposer_priority_;
}
inline void Validator::_internal_set_proposer_priority(::int64_t value) {
  ;
  _impl_.proposer_priority_ = value;
}

// -------------------------------------------------------------------

// SimpleValidator

// .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey"];
inline bool SimpleValidator::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& SimpleValidator::_internal_pub_key() const {
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(
      ::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& SimpleValidator::pub_key() const {
  // @@protoc_insertion_point(field_get:tendermint.types.SimpleValidator.pub_key)
  return _internal_pub_key();
}
inline void SimpleValidator::unsafe_arena_set_allocated_pub_key(
    ::tendermint::crypto::PublicKey* pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = pub_key;
  if (pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.SimpleValidator.pub_key)
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::release_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:tendermint.types.SimpleValidator.pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::_internal_mutable_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::PublicKey>(GetArenaForAllocation());
    _impl_.pub_key_ = p;
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* SimpleValidator::mutable_pub_key() {
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.types.SimpleValidator.pub_key)
  return _msg;
}
inline void SimpleValidator::set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key));
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.SimpleValidator.pub_key)
}

// int64 voting_power = 2 [json_name = "votingPower"];
inline void SimpleValidator::clear_voting_power() {
  _impl_.voting_power_ = ::int64_t{0};
}
inline ::int64_t SimpleValidator::voting_power() const {
  // @@protoc_insertion_point(field_get:tendermint.types.SimpleValidator.voting_power)
  return _internal_voting_power();
}
inline void SimpleValidator::set_voting_power(::int64_t value) {
  _internal_set_voting_power(value);
  // @@protoc_insertion_point(field_set:tendermint.types.SimpleValidator.voting_power)
}
inline ::int64_t SimpleValidator::_internal_voting_power() const {
  return _impl_.voting_power_;
}
inline void SimpleValidator::_internal_set_voting_power(::int64_t value) {
  ;
  _impl_.voting_power_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fvalidator_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/canonical.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fcanonical_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fcanonical_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/types/types.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fcanonical_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fcanonical_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fcanonical_2eproto;
namespace tendermint {
namespace types {
class CanonicalBlockID;
struct CanonicalBlockIDDefaultTypeInternal;
extern CanonicalBlockIDDefaultTypeInternal _CanonicalBlockID_default_instance_;
class CanonicalPartSetHeader;
struct CanonicalPartSetHeaderDefaultTypeInternal;
extern CanonicalPartSetHeaderDefaultTypeInternal _CanonicalPartSetHeader_default_instance_;
class CanonicalProposal;
struct CanonicalProposalDefaultTypeInternal;
extern CanonicalProposalDefaultTypeInternal _CanonicalProposal_default_instance_;
class CanonicalVote;
struct CanonicalVoteDefaultTypeInternal;
extern CanonicalVoteDefaultTypeInternal _CanonicalVote_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::types::CanonicalBlockID* Arena::CreateMaybeMessage<::tendermint::types::CanonicalBlockID>(Arena*);
template <>
::tendermint::types::CanonicalPartSetHeader* Arena::CreateMaybeMessage<::tendermint::types::CanonicalPartSetHeader>(Arena*);
template <>
::tendermint::types::CanonicalProposal* Arena::CreateMaybeMessage<::tendermint::types::CanonicalProposal>(Arena*);
template <>
::tendermint::types::CanonicalVote* Arena::CreateMaybeMessage<::tendermint::types::CanonicalVote>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace types {

// ===================================================================


// -------------------------------------------------------------------

class CanonicalBlockID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.CanonicalBlockID) */ {
 public:
  inline CanonicalBlockID() : CanonicalBlockID(nullptr) {}
  ~CanonicalBlockID() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CanonicalBlockID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanonicalBlockID(const CanonicalBlockID& from);
  CanonicalBlockID(CanonicalBlockID&& from) noexcept
    : CanonicalBlockID() {
    *this = ::std::move(from);
  }

  inline CanonicalBlockID& operator=(const CanonicalBlockID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanonicalBlockID& operator=(CanonicalBlockID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanonicalBlockID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanonicalBlockID* internal_default_instance() {
    return reinterpret_cast<const CanonicalBlockID*>(
               &_CanonicalBlockID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CanonicalBlockID& a, CanonicalBlockID& b) {
    a.Swap(&b);
  }
  inline void Swap(CanonicalBlockID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanonicalBlockID* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanonicalBlockID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanonicalBlockID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanonicalBlockID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanonicalBlockID& from) {
    CanonicalBlockID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanonicalBlockID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.CanonicalBlockID";
  }
  protected:
  explicit CanonicalBlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kPartSetHeaderFieldNumber = 2,
  };
  // bytes hash = 1 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  bool has_part_set_header() const;
  void clear_part_set_header() ;
  const ::tendermint::types::CanonicalPartSetHeader& part_set_header() const;
  PROTOBUF_NODISCARD ::tendermint::types::CanonicalPartSetHeader* release_part_set_header();
  ::tendermint::types::CanonicalPartSetHeader* mutable_part_set_header();
  void set_allocated_part_set_header(::tendermint::types::CanonicalPartSetHeader* part_set_header);
  private:
  const ::tendermint::types::CanonicalPartSetHeader& _internal_part_set_header() const;
  ::tendermint::types::CanonicalPartSetHeader* _internal_mutable_part_set_header();
  public:
  void unsafe_arena_set_allocated_part_set_header(
      ::tendermint::types::CanonicalPartSetHeader* part_set_header);
  ::tendermint::types::CanonicalPartSetHeader* unsafe_arena_release_part_set_header();
  // @@protoc_insertion_point(class_scope:tendermint.types.CanonicalBlockID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::tendermint::types::CanonicalPartSetHeader* part_set_header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fcanonical_2eproto;
};// -------------------------------------------------------------------

class CanonicalPartSetHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.CanonicalPartSetHeader) */ {
 public:
  inline CanonicalPartSetHeader() : CanonicalPartSetHeader(nullptr) {}
  ~CanonicalPartSetHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CanonicalPartSetHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanonicalPartSetHeader(const CanonicalPartSetHeader& from);
  CanonicalPartSetHeader(CanonicalPartSetHeader&& from) noexcept
    : CanonicalPartSetHeader() {
    *this = ::std::move(from);
  }

  inline CanonicalPartSetHeader& operator=(const CanonicalPartSetHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanonicalPartSetHeader& operator=(CanonicalPartSetHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanonicalPartSetHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanonicalPartSetHeader* internal_default_instance() {
    return reinterpret_cast<const CanonicalPartSetHeader*>(
               &_CanonicalPartSetHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CanonicalPartSetHeader& a, CanonicalPartSetHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CanonicalPartSetHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanonicalPartSetHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanonicalPartSetHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanonicalPartSetHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanonicalPartSetHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanonicalPartSetHeader& from) {
    CanonicalPartSetHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanonicalPartSetHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.CanonicalPartSetHeader";
  }
  protected:
  explicit CanonicalPartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 2,
    kTotalFieldNumber = 1,
  };
  // bytes hash = 2 [json_name = "hash"];
  void clear_hash() ;
  const std::string& hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash(Arg_&& arg, Args_... args);
  std::string* mutable_hash();
  PROTOBUF_NODISCARD std::string* release_hash();
  void set_allocated_hash(std::string* ptr);

  private:
  const std::string& _internal_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash(
      const std::string& value);
  std::string* _internal_mutable_hash();

  public:
  // uint32 total = 1 [json_name = "total"];
  void clear_total() ;
  ::uint32_t total() const;
  void set_total(::uint32_t value);

  private:
  ::uint32_t _internal_total() const;
  void _internal_set_total(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.CanonicalPartSetHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
    ::uint32_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fcanonical_2eproto;
};// -------------------------------------------------------------------

class CanonicalProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.CanonicalProposal) */ {
 public:
  inline CanonicalProposal() : CanonicalProposal(nullptr) {}
  ~CanonicalProposal() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CanonicalProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanonicalProposal(const CanonicalProposal& from);
  CanonicalProposal(CanonicalProposal&& from) noexcept
    : CanonicalProposal() {
    *this = ::std::move(from);
  }

  inline CanonicalProposal& operator=(const CanonicalProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanonicalProposal& operator=(CanonicalProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanonicalProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanonicalProposal* internal_default_instance() {
    return reinterpret_cast<const CanonicalProposal*>(
               &_CanonicalProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CanonicalProposal& a, CanonicalProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(CanonicalProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanonicalProposal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanonicalProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanonicalProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanonicalProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanonicalProposal& from) {
    CanonicalProposal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanonicalProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.CanonicalProposal";
  }
  protected:
  explicit CanonicalProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 7,
    kBlockIdFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kHeightFieldNumber = 2,
    kRoundFieldNumber = 3,
    kPolRoundFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string chain_id = 7 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // .tendermint.types.CanonicalBlockID block_id = 5 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::CanonicalBlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::CanonicalBlockID* release_block_id();
  ::tendermint::types::CanonicalBlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::CanonicalBlockID* block_id);
  private:
  const ::tendermint::types::CanonicalBlockID& _internal_block_id() const;
  ::tendermint::types::CanonicalBlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::CanonicalBlockID* block_id);
  ::tendermint::types::CanonicalBlockID* unsafe_arena_release_block_id();
  // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // sfixed64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // sfixed64 round = 3 [json_name = "round"];
  void clear_round() ;
  ::int64_t round() const;
  void set_round(::int64_t value);

  private:
  ::int64_t _internal_round() const;
  void _internal_set_round(::int64_t value);

  public:
  // int64 pol_round = 4 [json_name = "polRound", (.gogoproto.customname) = "POLRound"];
  void clear_pol_round() ;
  ::int64_t pol_round() const;
  void set_pol_round(::int64_t value);

  private:
  ::int64_t _internal_pol_round() const;
  void _internal_set_pol_round(::int64_t value);

  public:
  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  void clear_type() ;
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);

  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.CanonicalProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::tendermint::types::CanonicalBlockID* block_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::int64_t height_;
    ::int64_t round_;
    ::int64_t pol_round_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fcanonical_2eproto;
};// -------------------------------------------------------------------

class CanonicalVote final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.CanonicalVote) */ {
 public:
  inline CanonicalVote() : CanonicalVote(nullptr) {}
  ~CanonicalVote() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CanonicalVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanonicalVote(const CanonicalVote& from);
  CanonicalVote(CanonicalVote&& from) noexcept
    : CanonicalVote() {
    *this = ::std::move(from);
  }

  inline CanonicalVote& operator=(const CanonicalVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanonicalVote& operator=(CanonicalVote&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CanonicalVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanonicalVote* internal_default_instance() {
    return reinterpret_cast<const CanonicalVote*>(
               &_CanonicalVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CanonicalVote& a, CanonicalVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CanonicalVote* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanonicalVote* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanonicalVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanonicalVote>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CanonicalVote& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CanonicalVote& from) {
    CanonicalVote::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanonicalVote* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.CanonicalVote";
  }
  protected:
  explicit CanonicalVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIdFieldNumber = 6,
    kBlockIdFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kHeightFieldNumber = 2,
    kRoundFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string chain_id = 6 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  void clear_chain_id() ;
  const std::string& chain_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chain_id(Arg_&& arg, Args_... args);
  std::string* mutable_chain_id();
  PROTOBUF_NODISCARD std::string* release_chain_id();
  void set_allocated_chain_id(std::string* ptr);

  private:
  const std::string& _internal_chain_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chain_id(
      const std::string& value);
  std::string* _internal_mutable_chain_id();

  public:
  // .tendermint.types.CanonicalBlockID block_id = 4 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
  bool has_block_id() const;
  void clear_block_id() ;
  const ::tendermint::types::CanonicalBlockID& block_id() const;
  PROTOBUF_NODISCARD ::tendermint::types::CanonicalBlockID* release_block_id();
  ::tendermint::types::CanonicalBlockID* mutable_block_id();
  void set_allocated_block_id(::tendermint::types::CanonicalBlockID* block_id);
  private:
  const ::tendermint::types::CanonicalBlockID& _internal_block_id() const;
  ::tendermint::types::CanonicalBlockID* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::tendermint::types::CanonicalBlockID* block_id);
  ::tendermint::types::CanonicalBlockID* unsafe_arena_release_block_id();
  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();
  // sfixed64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // sfixed64 round = 3 [json_name = "round"];
  void clear_round() ;
  ::int64_t round() const;
  void set_round(::int64_t value);

  private:
  ::int64_t _internal_round() const;
  void _internal_set_round(::int64_t value);

  public:
  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  void clear_type() ;
  ::tendermint::types::SignedMsgType type() const;
  void set_type(::tendermint::types::SignedMsgType value);

  private:
  ::tendermint::types::SignedMsgType _internal_type() const;
  void _internal_set_type(::tendermint::types::SignedMsgType value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.CanonicalVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_id_;
    ::tendermint::types::CanonicalBlockID* block_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
    ::int64_t height_;
    ::int64_t round_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fcanonical_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CanonicalBlockID

// bytes hash = 1 [json_name = "hash"];
inline void CanonicalBlockID::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CanonicalBlockID::hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalBlockID.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CanonicalBlockID::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalBlockID.hash)
}
inline std::string* CanonicalBlockID::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalBlockID.hash)
  return _s;
}
inline const std::string& CanonicalBlockID::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void CanonicalBlockID::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CanonicalBlockID::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* CanonicalBlockID::release_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalBlockID.hash)
  return _impl_.hash_.Release();
}
inline void CanonicalBlockID::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalBlockID.hash)
}

// .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
inline bool CanonicalBlockID::has_part_set_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.part_set_header_ != nullptr);
  return value;
}
inline void CanonicalBlockID::clear_part_set_header() {
  if (_impl_.part_set_header_ != nullptr) _impl_.part_set_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::CanonicalPartSetHeader& CanonicalBlockID::_internal_part_set_header() const {
  const ::tendermint::types::CanonicalPartSetHeader* p = _impl_.part_set_header_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::CanonicalPartSetHeader&>(
      ::tendermint::types::_CanonicalPartSetHeader_default_instance_);
}
inline const ::tendermint::types::CanonicalPartSetHeader& CanonicalBlockID::part_set_header() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalBlockID.part_set_header)
  return _internal_part_set_header();
}
inline void CanonicalBlockID::unsafe_arena_set_allocated_part_set_header(
    ::tendermint::types::CanonicalPartSetHeader* part_set_header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.part_set_header_);
  }
  _impl_.part_set_header_ = part_set_header;
  if (part_set_header) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CanonicalBlockID.part_set_header)
}
inline ::tendermint::types::CanonicalPartSetHeader* CanonicalBlockID::release_part_set_header() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalPartSetHeader* temp = _impl_.part_set_header_;
  _impl_.part_set_header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::CanonicalPartSetHeader* CanonicalBlockID::unsafe_arena_release_part_set_header() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalBlockID.part_set_header)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalPartSetHeader* temp = _impl_.part_set_header_;
  _impl_.part_set_header_ = nullptr;
  return temp;
}
inline ::tendermint::types::CanonicalPartSetHeader* CanonicalBlockID::_internal_mutable_part_set_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.part_set_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::CanonicalPartSetHeader>(GetArenaForAllocation());
    _impl_.part_set_header_ = p;
  }
  return _impl_.part_set_header_;
}
inline ::tendermint::types::CanonicalPartSetHeader* CanonicalBlockID::mutable_part_set_header() {
  ::tendermint::types::CanonicalPartSetHeader* _msg = _internal_mutable_part_set_header();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalBlockID.part_set_header)
  return _msg;
}
inline void CanonicalBlockID::set_allocated_part_set_header(::tendermint::types::CanonicalPartSetHeader* part_set_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.part_set_header_;
  }
  if (part_set_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(part_set_header);
    if (message_arena != submessage_arena) {
      part_set_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, part_set_header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.part_set_header_ = part_set_header;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalBlockID.part_set_header)
}

// -------------------------------------------------------------------

// CanonicalPartSetHeader

// uint32 total = 1 [json_name = "total"];
inline void CanonicalPartSetHeader::clear_total() {
  _impl_.total_ = 0u;
}
inline ::uint32_t CanonicalPartSetHeader::total() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalPartSetHeader.total)
  return _internal_total();
}
inline void CanonicalPartSetHeader::set_total(::uint32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalPartSetHeader.total)
}
inline ::uint32_t CanonicalPartSetHeader::_internal_total() const {
  return _impl_.total_;
}
inline void CanonicalPartSetHeader::_internal_set_total(::uint32_t value) {
  ;
  _impl_.total_ = value;
}

// bytes hash = 2 [json_name = "hash"];
inline void CanonicalPartSetHeader::clear_hash() {
  _impl_.hash_.ClearToEmpty();
}
inline const std::string& CanonicalPartSetHeader::hash() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalPartSetHeader.hash)
  return _internal_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CanonicalPartSetHeader::set_hash(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalPartSetHeader.hash)
}
inline std::string* CanonicalPartSetHeader::mutable_hash() {
  std::string* _s = _internal_mutable_hash();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalPartSetHeader.hash)
  return _s;
}
inline const std::string& CanonicalPartSetHeader::_internal_hash() const {
  return _impl_.hash_.Get();
}
inline void CanonicalPartSetHeader::_internal_set_hash(const std::string& value) {
  ;


  _impl_.hash_.Set(value, GetArenaForAllocation());
}
inline std::string* CanonicalPartSetHeader::_internal_mutable_hash() {
  ;
  return _impl_.hash_.Mutable( GetArenaForAllocation());
}
inline std::string* CanonicalPartSetHeader::release_hash() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalPartSetHeader.hash)
  return _impl_.hash_.Release();
}
inline void CanonicalPartSetHeader::set_allocated_hash(std::string* value) {
  _impl_.hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_.IsDefault()) {
          _impl_.hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalPartSetHeader.hash)
}

// -------------------------------------------------------------------

// CanonicalProposal

// .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
inline void CanonicalProposal::clear_type() {
  _impl_.type_ = 0;
}
inline ::tendermint::types::SignedMsgType CanonicalProposal::type() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.type)
  return _internal_type();
}
inline void CanonicalProposal::set_type(::tendermint::types::SignedMsgType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalProposal.type)
}
inline ::tendermint::types::SignedMsgType CanonicalProposal::_internal_type() const {
  return static_cast<::tendermint::types::SignedMsgType>(_impl_.type_);
}
inline void CanonicalProposal::_internal_set_type(::tendermint::types::SignedMsgType value) {
  ;
  _impl_.type_ = value;
}

// sfixed64 height = 2 [json_name = "height"];
inline void CanonicalProposal::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t CanonicalProposal::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.height)
  return _internal_height();
}
inline void CanonicalProposal::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalProposal.height)
}
inline ::int64_t CanonicalProposal::_internal_height() const {
  return _impl_.height_;
}
inline void CanonicalProposal::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// sfixed64 round = 3 [json_name = "round"];
inline void CanonicalProposal::clear_round() {
  _impl_.round_ = ::int64_t{0};
}
inline ::int64_t CanonicalProposal::round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.round)
  return _internal_round();
}
inline void CanonicalProposal::set_round(::int64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalProposal.round)
}
inline ::int64_t CanonicalProposal::_internal_round() const {
  return _impl_.round_;
}
inline void CanonicalProposal::_internal_set_round(::int64_t value) {
  ;
  _impl_.round_ = value;
}

// int64 pol_round = 4 [json_name = "polRound", (.gogoproto.customname) = "POLRound"];
inline void CanonicalProposal::clear_pol_round() {
  _impl_.pol_round_ = ::int64_t{0};
}
inline ::int64_t CanonicalProposal::pol_round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.pol_round)
  return _internal_pol_round();
}
inline void CanonicalProposal::set_pol_round(::int64_t value) {
  _internal_set_pol_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalProposal.pol_round)
}
inline ::int64_t CanonicalProposal::_internal_pol_round() const {
  return _impl_.pol_round_;
}
inline void CanonicalProposal::_internal_set_pol_round(::int64_t value) {
  ;
  _impl_.pol_round_ = value;
}

// .tendermint.types.CanonicalBlockID block_id = 5 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
inline bool CanonicalProposal::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void CanonicalProposal::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::CanonicalBlockID& CanonicalProposal::_internal_block_id() const {
  const ::tendermint::types::CanonicalBlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::CanonicalBlockID&>(
      ::tendermint::types::_CanonicalBlockID_default_instance_);
}
inline const ::tendermint::types::CanonicalBlockID& CanonicalProposal::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.block_id)
  return _internal_block_id();
}
inline void CanonicalProposal::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::CanonicalBlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CanonicalProposal.block_id)
}
inline ::tendermint::types::CanonicalBlockID* CanonicalProposal::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalBlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalProposal::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalProposal.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalBlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalProposal::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::CanonicalBlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalProposal::mutable_block_id() {
  ::tendermint::types::CanonicalBlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalProposal.block_id)
  return _msg;
}
inline void CanonicalProposal::set_allocated_block_id(::tendermint::types::CanonicalBlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalProposal.block_id)
}

// .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool CanonicalProposal::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CanonicalProposal::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CanonicalProposal::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.timestamp)
  return _internal_timestamp();
}
inline void CanonicalProposal::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CanonicalProposal.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalProposal::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalProposal::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalProposal.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalProposal::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalProposal::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalProposal.timestamp)
  return _msg;
}
inline void CanonicalProposal::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalProposal.timestamp)
}

// string chain_id = 7 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
inline void CanonicalProposal::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& CanonicalProposal::chain_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalProposal.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CanonicalProposal::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalProposal.chain_id)
}
inline std::string* CanonicalProposal::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalProposal.chain_id)
  return _s;
}
inline const std::string& CanonicalProposal::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void CanonicalProposal::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CanonicalProposal::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CanonicalProposal::release_chain_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalProposal.chain_id)
  return _impl_.chain_id_.Release();
}
inline void CanonicalProposal::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalProposal.chain_id)
}

// -------------------------------------------------------------------

// CanonicalVote

// .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
inline void CanonicalVote::clear_type() {
  _impl_.type_ = 0;
}
inline ::tendermint::types::SignedMsgType CanonicalVote::type() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.type)
  return _internal_type();
}
inline void CanonicalVote::set_type(::tendermint::types::SignedMsgType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalVote.type)
}
inline ::tendermint::types::SignedMsgType CanonicalVote::_internal_type() const {
  return static_cast<::tendermint::types::SignedMsgType>(_impl_.type_);
}
inline void CanonicalVote::_internal_set_type(::tendermint::types::SignedMsgType value) {
  ;
  _impl_.type_ = value;
}

// sfixed64 height = 2 [json_name = "height"];
inline void CanonicalVote::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t CanonicalVote::height() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.height)
  return _internal_height();
}
inline void CanonicalVote::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalVote.height)
}
inline ::int64_t CanonicalVote::_internal_height() const {
  return _impl_.height_;
}
inline void CanonicalVote::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// sfixed64 round = 3 [json_name = "round"];
inline void CanonicalVote::clear_round() {
  _impl_.round_ = ::int64_t{0};
}
inline ::int64_t CanonicalVote::round() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.round)
  return _internal_round();
}
inline void CanonicalVote::set_round(::int64_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalVote.round)
}
inline ::int64_t CanonicalVote::_internal_round() const {
  return _impl_.round_;
}
inline void CanonicalVote::_internal_set_round(::int64_t value) {
  ;
  _impl_.round_ = value;
}

// .tendermint.types.CanonicalBlockID block_id = 4 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
inline bool CanonicalVote::has_block_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_id_ != nullptr);
  return value;
}
inline void CanonicalVote::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::CanonicalBlockID& CanonicalVote::_internal_block_id() const {
  const ::tendermint::types::CanonicalBlockID* p = _impl_.block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::CanonicalBlockID&>(
      ::tendermint::types::_CanonicalBlockID_default_instance_);
}
inline const ::tendermint::types::CanonicalBlockID& CanonicalVote::block_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.block_id)
  return _internal_block_id();
}
inline void CanonicalVote::unsafe_arena_set_allocated_block_id(
    ::tendermint::types::CanonicalBlockID* block_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_id_);
  }
  _impl_.block_id_ = block_id;
  if (block_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CanonicalVote.block_id)
}
inline ::tendermint::types::CanonicalBlockID* CanonicalVote::release_block_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalBlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalVote::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalVote.block_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::CanonicalBlockID* temp = _impl_.block_id_;
  _impl_.block_id_ = nullptr;
  return temp;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalVote::_internal_mutable_block_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::CanonicalBlockID>(GetArenaForAllocation());
    _impl_.block_id_ = p;
  }
  return _impl_.block_id_;
}
inline ::tendermint::types::CanonicalBlockID* CanonicalVote::mutable_block_id() {
  ::tendermint::types::CanonicalBlockID* _msg = _internal_mutable_block_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalVote.block_id)
  return _msg;
}
inline void CanonicalVote::set_allocated_block_id(::tendermint::types::CanonicalBlockID* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalVote.block_id)
}

// .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool CanonicalVote::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CanonicalVote::_internal_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CanonicalVote::timestamp() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.timestamp)
  return _internal_timestamp();
}
inline void CanonicalVote::unsafe_arena_set_allocated_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = timestamp;
  if (timestamp) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.CanonicalVote.timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalVote::release_timestamp() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalVote::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalVote.timestamp)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalVote::_internal_mutable_timestamp() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.timestamp_ = p;
  }
  return _impl_.timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CanonicalVote::mutable_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalVote.timestamp)
  return _msg;
}
inline void CanonicalVote::set_allocated_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalVote.timestamp)
}

// string chain_id = 6 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
inline void CanonicalVote::clear_chain_id() {
  _impl_.chain_id_.ClearToEmpty();
}
inline const std::string& CanonicalVote::chain_id() const {
  // @@protoc_insertion_point(field_get:tendermint.types.CanonicalVote.chain_id)
  return _internal_chain_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CanonicalVote::set_chain_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.chain_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.types.CanonicalVote.chain_id)
}
inline std::string* CanonicalVote::mutable_chain_id() {
  std::string* _s = _internal_mutable_chain_id();
  // @@protoc_insertion_point(field_mutable:tendermint.types.CanonicalVote.chain_id)
  return _s;
}
inline const std::string& CanonicalVote::_internal_chain_id() const {
  return _impl_.chain_id_.Get();
}
inline void CanonicalVote::_internal_set_chain_id(const std::string& value) {
  ;


  _impl_.chain_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CanonicalVote::_internal_mutable_chain_id() {
  ;
  return _impl_.chain_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CanonicalVote::release_chain_id() {
  // @@protoc_insertion_point(field_release:tendermint.types.CanonicalVote.chain_id)
  return _impl_.chain_id_.Release();
}
inline void CanonicalVote::set_allocated_chain_id(std::string* value) {
  _impl_.chain_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chain_id_.IsDefault()) {
          _impl_.chain_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.CanonicalVote.chain_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fcanonical_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/types.proto

#include "tendermint/types/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace types {
template <typename>
PROTOBUF_CONSTEXPR PartSetHeader::PartSetHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartSetHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartSetHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartSetHeaderDefaultTypeInternal() {}
  union {
    PartSetHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartSetHeaderDefaultTypeInternal _PartSetHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Part::Part(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bytes_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/nullptr
  , /*decltype(_impl_.index_)*/ 0u
} {}
struct PartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartDefaultTypeInternal() {}
  union {
    Part _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartDefaultTypeInternal _Part_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockID::BlockID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.part_set_header_)*/nullptr} {}
struct BlockIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockIDDefaultTypeInternal() {}
  union {
    BlockID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockIDDefaultTypeInternal _BlockID_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_commit_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.validators_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_validators_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.consensus_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.last_results_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.evidence_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposer_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_block_id_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}
} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vote::Vote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.validator_index_)*/ 0
} {}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Commit::Commit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signatures_)*/{}
  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0
} {}
struct CommitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitDefaultTypeInternal() {}
  union {
    Commit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitDefaultTypeInternal _Commit_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommitSig::CommitSig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.validator_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.block_id_flag_)*/ 0
} {}
struct CommitSigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitSigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitSigDefaultTypeInternal() {}
  union {
    CommitSig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitSigDefaultTypeInternal _CommitSig_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Proposal::Proposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.pol_round_)*/ 0
} {}
struct ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalDefaultTypeInternal _Proposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignedHeader::SignedHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.commit_)*/nullptr} {}
struct SignedHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedHeaderDefaultTypeInternal() {}
  union {
    SignedHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedHeaderDefaultTypeInternal _SignedHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR LightBlock::LightBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.signed_header_)*/nullptr
  , /*decltype(_impl_.validator_set_)*/nullptr} {}
struct LightBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LightBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LightBlockDefaultTypeInternal() {}
  union {
    LightBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LightBlockDefaultTypeInternal _LightBlock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockMeta::BlockMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_.block_size_)*/ ::int64_t{0}

  , /*decltype(_impl_.num_txs_)*/ ::int64_t{0}
} {}
struct BlockMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockMetaDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockMetaDefaultTypeInternal() {}
  union {
    BlockMeta _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockMetaDefaultTypeInternal _BlockMeta_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TxProof::TxProof(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.root_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/nullptr} {}
struct TxProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxProofDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxProofDefaultTypeInternal() {}
  union {
    TxProof _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxProofDefaultTypeInternal _TxProof_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::PartSetHeader, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.bytes_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Part, _impl_.proof_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockID, _impl_.part_set_header_),
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_commit_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.data_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.validators_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.next_validators_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.consensus_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.app_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.last_results_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.evidence_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Header, _impl_.proposer_address_),
    0,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Data, _impl_.txs_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.validator_index_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Vote, _impl_.signature_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Commit, _impl_.signatures_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.block_id_flag_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.validator_address_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CommitSig, _impl_.signature_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.pol_round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::Proposal, _impl_.signature_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::SignedHeader, _impl_.commit_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_.signed_header_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::LightBlock, _impl_.validator_set_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.block_size_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.header_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::BlockMeta, _impl_.num_txs_),
    0,
    ~0u,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.root_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.data_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::TxProof, _impl_.proof_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::types::PartSetHeader)},
        { 10, 21, -1, sizeof(::tendermint::types::Part)},
        { 24, 34, -1, sizeof(::tendermint::types::BlockID)},
        { 36, 58, -1, sizeof(::tendermint::types::Header)},
        { 72, -1, -1, sizeof(::tendermint::types::Data)},
        { 81, 97, -1, sizeof(::tendermint::types::Vote)},
        { 105, 117, -1, sizeof(::tendermint::types::Commit)},
        { 121, 133, -1, sizeof(::tendermint::types::CommitSig)},
        { 137, 152, -1, sizeof(::tendermint::types::Proposal)},
        { 159, 169, -1, sizeof(::tendermint::types::SignedHeader)},
        { 171, 181, -1, sizeof(::tendermint::types::LightBlock)},
        { 183, 195, -1, sizeof(::tendermint::types::BlockMeta)},
        { 199, 210, -1, sizeof(::tendermint::types::TxProof)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_PartSetHeader_default_instance_._instance,
    &::tendermint::types::_Part_default_instance_._instance,
    &::tendermint::types::_BlockID_default_instance_._instance,
    &::tendermint::types::_Header_default_instance_._instance,
    &::tendermint::types::_Data_default_instance_._instance,
    &::tendermint::types::_Vote_default_instance_._instance,
    &::tendermint::types::_Commit_default_instance_._instance,
    &::tendermint::types::_CommitSig_default_instance_._instance,
    &::tendermint::types::_Proposal_default_instance_._instance,
    &::tendermint::types::_SignedHeader_default_instance_._instance,
    &::tendermint::types::_LightBlock_default_instance_._instance,
    &::tendermint::types::_BlockMeta_default_instance_._instance,
    &::tendermint::types::_TxProof_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034tendermint/types/types.proto\022\020tendermi"
    "nt.types\032\024gogoproto/gogo.proto\032\037google/p"
    "rotobuf/timestamp.proto\032\035tendermint/cryp"
    "to/proof.proto\032\036tendermint/version/types"
    ".proto\032 tendermint/types/validator.proto"
    "\"9\n\rPartSetHeader\022\024\n\005total\030\001 \001(\rR\005total\022"
    "\022\n\004hash\030\002 \001(\014R\004hash\"h\n\004Part\022\024\n\005index\030\001 \001"
    "(\rR\005index\022\024\n\005bytes\030\002 \001(\014R\005bytes\0224\n\005proof"
    "\030\003 \001(\0132\030.tendermint.crypto.ProofB\004\310\336\037\000R\005"
    "proof\"l\n\007BlockID\022\022\n\004hash\030\001 \001(\014R\004hash\022M\n\017"
    "part_set_header\030\002 \001(\0132\037.tendermint.types"
    ".PartSetHeaderB\004\310\336\037\000R\rpartSetHeader\"\346\004\n\006"
    "Header\022=\n\007version\030\001 \001(\0132\035.tendermint.ver"
    "sion.ConsensusB\004\310\336\037\000R\007version\022&\n\010chain_i"
    "d\030\002 \001(\tB\013\342\336\037\007ChainIDR\007chainId\022\026\n\006height\030"
    "\003 \001(\003R\006height\0228\n\004time\030\004 \001(\0132\032.google.pro"
    "tobuf.TimestampB\010\310\336\037\000\220\337\037\001R\004time\022C\n\rlast_"
    "block_id\030\005 \001(\0132\031.tendermint.types.BlockI"
    "DB\004\310\336\037\000R\013lastBlockId\022(\n\020last_commit_hash"
    "\030\006 \001(\014R\016lastCommitHash\022\033\n\tdata_hash\030\007 \001("
    "\014R\010dataHash\022\'\n\017validators_hash\030\010 \001(\014R\016va"
    "lidatorsHash\0220\n\024next_validators_hash\030\t \001"
    "(\014R\022nextValidatorsHash\022%\n\016consensus_hash"
    "\030\n \001(\014R\rconsensusHash\022\031\n\010app_hash\030\013 \001(\014R"
    "\007appHash\022*\n\021last_results_hash\030\014 \001(\014R\017las"
    "tResultsHash\022#\n\revidence_hash\030\r \001(\014R\014evi"
    "denceHash\022)\n\020proposer_address\030\016 \001(\014R\017pro"
    "poserAddress\"\030\n\004Data\022\020\n\003txs\030\001 \003(\014R\003txs\"\350"
    "\002\n\004Vote\0223\n\004type\030\001 \001(\0162\037.tendermint.types"
    ".SignedMsgTypeR\004type\022\026\n\006height\030\002 \001(\003R\006he"
    "ight\022\024\n\005round\030\003 \001(\005R\005round\022E\n\010block_id\030\004"
    " \001(\0132\031.tendermint.types.BlockIDB\017\310\336\037\000\342\336\037"
    "\007BlockIDR\007blockId\022B\n\ttimestamp\030\005 \001(\0132\032.g"
    "oogle.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttime"
    "stamp\022+\n\021validator_address\030\006 \001(\014R\020valida"
    "torAddress\022\'\n\017validator_index\030\007 \001(\005R\016val"
    "idatorIndex\022\034\n\tsignature\030\010 \001(\014R\tsignatur"
    "e\"\300\001\n\006Commit\022\026\n\006height\030\001 \001(\003R\006height\022\024\n\005"
    "round\030\002 \001(\005R\005round\022E\n\010block_id\030\003 \001(\0132\031.t"
    "endermint.types.BlockIDB\017\310\336\037\000\342\336\037\007BlockID"
    "R\007blockId\022A\n\nsignatures\030\004 \003(\0132\033.tendermi"
    "nt.types.CommitSigB\004\310\336\037\000R\nsignatures\"\335\001\n"
    "\tCommitSig\022A\n\rblock_id_flag\030\001 \001(\0162\035.tend"
    "ermint.types.BlockIDFlagR\013blockIdFlag\022+\n"
    "\021validator_address\030\002 \001(\014R\020validatorAddre"
    "ss\022B\n\ttimestamp\030\003 \001(\0132\032.google.protobuf."
    "TimestampB\010\310\336\037\000\220\337\037\001R\ttimestamp\022\034\n\tsignat"
    "ure\030\004 \001(\014R\tsignature\"\263\002\n\010Proposal\0223\n\004typ"
    "e\030\001 \001(\0162\037.tendermint.types.SignedMsgType"
    "R\004type\022\026\n\006height\030\002 \001(\003R\006height\022\024\n\005round\030"
    "\003 \001(\005R\005round\022\033\n\tpol_round\030\004 \001(\005R\010polRoun"
    "d\022E\n\010block_id\030\005 \001(\0132\031.tendermint.types.B"
    "lockIDB\017\310\336\037\000\342\336\037\007BlockIDR\007blockId\022B\n\ttime"
    "stamp\030\006 \001(\0132\032.google.protobuf.TimestampB"
    "\010\310\336\037\000\220\337\037\001R\ttimestamp\022\034\n\tsignature\030\007 \001(\014R"
    "\tsignature\"r\n\014SignedHeader\0220\n\006header\030\001 \001"
    "(\0132\030.tendermint.types.HeaderR\006header\0220\n\006"
    "commit\030\002 \001(\0132\030.tendermint.types.CommitR\006"
    "commit\"\226\001\n\nLightBlock\022C\n\rsigned_header\030\001"
    " \001(\0132\036.tendermint.types.SignedHeaderR\014si"
    "gnedHeader\022C\n\rvalidator_set\030\002 \001(\0132\036.tend"
    "ermint.types.ValidatorSetR\014validatorSet\""
    "\302\001\n\tBlockMeta\022E\n\010block_id\030\001 \001(\0132\031.tender"
    "mint.types.BlockIDB\017\310\336\037\000\342\336\037\007BlockIDR\007blo"
    "ckId\022\035\n\nblock_size\030\002 \001(\003R\tblockSize\0226\n\006h"
    "eader\030\003 \001(\0132\030.tendermint.types.HeaderB\004\310"
    "\336\037\000R\006header\022\027\n\007num_txs\030\004 \001(\003R\006numTxs\"j\n\007"
    "TxProof\022\033\n\troot_hash\030\001 \001(\014R\010rootHash\022\022\n\004"
    "data\030\002 \001(\014R\004data\022.\n\005proof\030\003 \001(\0132\030.tender"
    "mint.crypto.ProofR\005proof*\327\001\n\013BlockIDFlag"
    "\0221\n\025BLOCK_ID_FLAG_UNKNOWN\020\000\032\026\212\235 \022BlockID"
    "FlagUnknown\022/\n\024BLOCK_ID_FLAG_ABSENT\020\001\032\025\212"
    "\235 \021BlockIDFlagAbsent\022/\n\024BLOCK_ID_FLAG_CO"
    "MMIT\020\002\032\025\212\235 \021BlockIDFlagCommit\022)\n\021BLOCK_I"
    "D_FLAG_NIL\020\003\032\022\212\235 \016BlockIDFlagNil\032\010\210\243\036\000\250\244"
    "\036\001*\327\001\n\rSignedMsgType\022,\n\027SIGNED_MSG_TYPE_"
    "UNKNOWN\020\000\032\017\212\235 \013UnknownType\022,\n\027SIGNED_MSG"
    "_TYPE_PREVOTE\020\001\032\017\212\235 \013PrevoteType\0220\n\031SIGN"
    "ED_MSG_TYPE_PRECOMMIT\020\002\032\021\212\235 \rPrecommitTy"
    "pe\022.\n\030SIGNED_MSG_TYPE_PROPOSAL\020 \032\020\212\235 \014Pr"
    "oposalType\032\010\210\243\036\000\250\244\036\001B\270\001\n\024com.tendermint."
    "typesB\nTypesProtoP\001Z3github.com/cometbft"
    "/cometbft/proto/tendermint/types\242\002\003TTX\252\002"
    "\020Tendermint.Types\312\002\020Tendermint\\Types\342\002\034T"
    "endermint\\Types\\GPBMetadata\352\002\021Tendermint"
    "::Typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps[5] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2fcrypto_2fproof_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fvalidator_2eproto,
        &::descriptor_table_tendermint_2fversion_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2ftypes_2eproto = {
    false,
    false,
    3415,
    descriptor_table_protodef_tendermint_2ftypes_2ftypes_2eproto,
    "tendermint/types/types.proto",
    &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
    descriptor_table_tendermint_2ftypes_2ftypes_2eproto_deps,
    5,
    13,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2ftypes_2ftypes_2eproto,
    file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2ftypes_2eproto(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
namespace tendermint {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockIDFlag_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[0];
}
bool BlockIDFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignedMsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2ftypes_2ftypes_2eproto[1];
}
bool SignedMsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 32:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class PartSetHeader::_Internal {
 public:
};

PartSetHeader::PartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.PartSetHeader)
}
PartSetHeader::PartSetHeader(const PartSetHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartSetHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.total_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.PartSetHeader)
}

inline void PartSetHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.total_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartSetHeader::~PartSetHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.PartSetHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartSetHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void PartSetHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.PartSetHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.total_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartSetHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 2 [json_name = "hash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PartSetHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.PartSetHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_total(), target);
  }

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.PartSetHeader)
  return target;
}

::size_t PartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.PartSetHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // uint32 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartSetHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartSetHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartSetHeader::GetClassData() const { return &_class_data_; }


void PartSetHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartSetHeader*>(&to_msg);
  auto& from = static_cast<const PartSetHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.PartSetHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartSetHeader::CopyFrom(const PartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.PartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartSetHeader::IsInitialized() const {
  return true;
}

void PartSetHeader::InternalSwap(PartSetHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);

  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartSetHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[0]);
}
// ===================================================================

class Part::_Internal {
 public:
  using HasBits = decltype(std::declval<Part>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Part, _impl_._has_bits_);
  static const ::tendermint::crypto::Proof& proof(const Part* msg);
  static void set_has_proof(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::crypto::Proof&
Part::_Internal::proof(const Part* msg) {
  return *msg->_impl_.proof_;
}
void Part::clear_proof() {
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Part::Part(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Part)
}
Part::Part(const Part& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Part* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytes_) {}

    , decltype(_impl_.proof_){nullptr}
    , decltype(_impl_.index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bytes().empty()) {
    _this->_impl_.bytes_.Set(from._internal_bytes(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_ = new ::tendermint::crypto::Proof(*from._impl_.proof_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Part)
}

inline void Part::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bytes_) {}

    , decltype(_impl_.proof_){nullptr}
    , decltype(_impl_.index_) { 0u }

  };
  _impl_.bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Part::~Part() {
  // @@protoc_insertion_point(destructor:tendermint.types.Part)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Part::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_;
}

void Part::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Part::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Part)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bytes_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_ != nullptr);
    _impl_.proof_->Clear();
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Part::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bytes = 2 [json_name = "bytes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Part::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Part)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_index(), target);
  }

  // bytes bytes = 2 [json_name = "bytes"];
  if (!this->_internal_bytes().empty()) {
    const std::string& _s = this->_internal_bytes();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof(this),
        _Internal::proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Part)
  return target;
}

::size_t Part::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Part)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes bytes = 2 [json_name = "bytes"];
  if (!this->_internal_bytes().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bytes());
  }

  // .tendermint.crypto.Proof proof = 3 [json_name = "proof", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_);
  }

  // uint32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Part::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Part::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Part::GetClassData() const { return &_class_data_; }


void Part::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Part*>(&to_msg);
  auto& from = static_cast<const Part&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Part)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bytes().empty()) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof()->::tendermint::crypto::Proof::MergeFrom(
        from._internal_proof());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Part::CopyFrom(const Part& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Part)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Part::IsInitialized() const {
  return true;
}

void Part::InternalSwap(Part* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bytes_, lhs_arena,
                                       &other->_impl_.bytes_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Part, _impl_.index_)
      + sizeof(Part::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Part, _impl_.proof_)>(
          reinterpret_cast<char*>(&_impl_.proof_),
          reinterpret_cast<char*>(&other->_impl_.proof_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Part::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[1]);
}
// ===================================================================

class BlockID::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockID>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockID, _impl_._has_bits_);
  static const ::tendermint::types::PartSetHeader& part_set_header(const BlockID* msg);
  static void set_has_part_set_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::PartSetHeader&
BlockID::_Internal::part_set_header(const BlockID* msg) {
  return *msg->_impl_.part_set_header_;
}
BlockID::BlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockID)
}
BlockID::BlockID(const BlockID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.part_set_header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.part_set_header_ = new ::tendermint::types::PartSetHeader(*from._impl_.part_set_header_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockID)
}

inline void BlockID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.part_set_header_){nullptr}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlockID::~BlockID() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.part_set_header_;
}

void BlockID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.part_set_header_ != nullptr);
    _impl_.part_set_header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_part_set_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockID::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockID)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::part_set_header(this),
        _Internal::part_set_header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockID)
  return target;
}

::size_t BlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // .tendermint.types.PartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.part_set_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockID::GetClassData() const { return &_class_data_; }


void BlockID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockID*>(&to_msg);
  auto& from = static_cast<const BlockID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_part_set_header()->::tendermint::types::PartSetHeader::MergeFrom(
        from._internal_part_set_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockID::CopyFrom(const BlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockID::IsInitialized() const {
  return true;
}

void BlockID::InternalSwap(BlockID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  swap(_impl_.part_set_header_, other->_impl_.part_set_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[2]);
}
// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static const ::tendermint::version::Consensus& version(const Header* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Header* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tendermint::types::BlockID& last_block_id(const Header* msg);
  static void set_has_last_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::tendermint::version::Consensus&
Header::_Internal::version(const Header* msg) {
  return *msg->_impl_.version_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Header::_Internal::time(const Header* msg) {
  return *msg->_impl_.time_;
}
const ::tendermint::types::BlockID&
Header::_Internal::last_block_id(const Header* msg) {
  return *msg->_impl_.last_block_id_;
}
void Header::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Header::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.last_commit_hash_) {}

    , decltype(_impl_.data_hash_) {}

    , decltype(_impl_.validators_hash_) {}

    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.consensus_hash_) {}

    , decltype(_impl_.app_hash_) {}

    , decltype(_impl_.last_results_hash_) {}

    , decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.proposer_address_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_commit_hash().empty()) {
    _this->_impl_.last_commit_hash_.Set(from._internal_last_commit_hash(), _this->GetArenaForAllocation());
  }
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_hash().empty()) {
    _this->_impl_.data_hash_.Set(from._internal_data_hash(), _this->GetArenaForAllocation());
  }
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validators_hash().empty()) {
    _this->_impl_.validators_hash_.Set(from._internal_validators_hash(), _this->GetArenaForAllocation());
  }
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_validators_hash().empty()) {
    _this->_impl_.next_validators_hash_.Set(from._internal_next_validators_hash(), _this->GetArenaForAllocation());
  }
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_consensus_hash().empty()) {
    _this->_impl_.consensus_hash_.Set(from._internal_consensus_hash(), _this->GetArenaForAllocation());
  }
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_hash().empty()) {
    _this->_impl_.app_hash_.Set(from._internal_app_hash(), _this->GetArenaForAllocation());
  }
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_results_hash().empty()) {
    _this->_impl_.last_results_hash_.Set(from._internal_last_results_hash(), _this->GetArenaForAllocation());
  }
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_evidence_hash().empty()) {
    _this->_impl_.evidence_hash_.Set(from._internal_evidence_hash(), _this->GetArenaForAllocation());
  }
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proposer_address().empty()) {
    _this->_impl_.proposer_address_.Set(from._internal_proposer_address(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.version_ = new ::tendermint::version::Consensus(*from._impl_.version_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.last_block_id_ = new ::tendermint::types::BlockID(*from._impl_.last_block_id_);
  }
  _this->_impl_.height_ = from._impl_.height_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.last_commit_hash_) {}

    , decltype(_impl_.data_hash_) {}

    , decltype(_impl_.validators_hash_) {}

    , decltype(_impl_.next_validators_hash_) {}

    , decltype(_impl_.consensus_hash_) {}

    , decltype(_impl_.app_hash_) {}

    , decltype(_impl_.last_results_hash_) {}

    , decltype(_impl_.evidence_hash_) {}

    , decltype(_impl_.proposer_address_) {}

    , decltype(_impl_.version_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_block_id_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_commit_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_commit_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_validators_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_validators_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.consensus_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.consensus_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_results_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.last_results_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.evidence_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.evidence_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proposer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.proposer_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:tendermint.types.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  _impl_.last_commit_hash_.Destroy();
  _impl_.data_hash_.Destroy();
  _impl_.validators_hash_.Destroy();
  _impl_.next_validators_hash_.Destroy();
  _impl_.consensus_hash_.Destroy();
  _impl_.app_hash_.Destroy();
  _impl_.last_results_hash_.Destroy();
  _impl_.evidence_hash_.Destroy();
  _impl_.proposer_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.version_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.last_block_id_;
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _impl_.last_commit_hash_.ClearToEmpty();
  _impl_.data_hash_.ClearToEmpty();
  _impl_.validators_hash_.ClearToEmpty();
  _impl_.next_validators_hash_.ClearToEmpty();
  _impl_.consensus_hash_.ClearToEmpty();
  _impl_.app_hash_.ClearToEmpty();
  _impl_.last_results_hash_.ClearToEmpty();
  _impl_.evidence_hash_.ClearToEmpty();
  _impl_.proposer_address_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.version_ != nullptr);
      _impl_.version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_block_id_ != nullptr);
      _impl_.last_block_id_->Clear();
    }
  }
  _impl_.height_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.types.Header.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_last_commit_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data_hash = 7 [json_name = "dataHash"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes validators_hash = 8 [json_name = "validatorsHash"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_next_validators_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes consensus_hash = 10 [json_name = "consensusHash"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_consensus_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes app_hash = 11 [json_name = "appHash"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_app_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_last_results_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes evidence_hash = 13 [json_name = "evidenceHash"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_evidence_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes proposer_address = 14 [json_name = "proposerAddress"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_proposer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::version(this),
        _Internal::version(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.types.Header.chain_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_height(), target);
  }

  // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_block_id(this),
        _Internal::last_block_id(this).GetCachedSize(), target, stream);
  }

  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  if (!this->_internal_last_commit_hash().empty()) {
    const std::string& _s = this->_internal_last_commit_hash();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes data_hash = 7 [json_name = "dataHash"];
  if (!this->_internal_data_hash().empty()) {
    const std::string& _s = this->_internal_data_hash();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  if (!this->_internal_validators_hash().empty()) {
    const std::string& _s = this->_internal_validators_hash();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  if (!this->_internal_next_validators_hash().empty()) {
    const std::string& _s = this->_internal_next_validators_hash();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  if (!this->_internal_consensus_hash().empty()) {
    const std::string& _s = this->_internal_consensus_hash();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // bytes app_hash = 11 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    const std::string& _s = this->_internal_app_hash();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  if (!this->_internal_last_results_hash().empty()) {
    const std::string& _s = this->_internal_last_results_hash();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  if (!this->_internal_evidence_hash().empty()) {
    const std::string& _s = this->_internal_evidence_hash();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // bytes proposer_address = 14 [json_name = "proposerAddress"];
  if (!this->_internal_proposer_address().empty()) {
    const std::string& _s = this->_internal_proposer_address();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Header)
  return target;
}

::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Header)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  // bytes last_commit_hash = 6 [json_name = "lastCommitHash"];
  if (!this->_internal_last_commit_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_last_commit_hash());
  }

  // bytes data_hash = 7 [json_name = "dataHash"];
  if (!this->_internal_data_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data_hash());
  }

  // bytes validators_hash = 8 [json_name = "validatorsHash"];
  if (!this->_internal_validators_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_validators_hash());
  }

  // bytes next_validators_hash = 9 [json_name = "nextValidatorsHash"];
  if (!this->_internal_next_validators_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_next_validators_hash());
  }

  // bytes consensus_hash = 10 [json_name = "consensusHash"];
  if (!this->_internal_consensus_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_consensus_hash());
  }

  // bytes app_hash = 11 [json_name = "appHash"];
  if (!this->_internal_app_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_app_hash());
  }

  // bytes last_results_hash = 12 [json_name = "lastResultsHash"];
  if (!this->_internal_last_results_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_last_results_hash());
  }

  // bytes evidence_hash = 13 [json_name = "evidenceHash"];
  if (!this->_internal_evidence_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_evidence_hash());
  }

  // bytes proposer_address = 14 [json_name = "proposerAddress"];
  if (!this->_internal_proposer_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_proposer_address());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .tendermint.version.Consensus version = 1 [json_name = "version", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.version_);
    }

    // .google.protobuf.Timestamp time = 4 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // .tendermint.types.BlockID last_block_id = 5 [json_name = "lastBlockId", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_block_id_);
    }

  }
  // int64 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }


void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Header*>(&to_msg);
  auto& from = static_cast<const Header&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_last_commit_hash().empty()) {
    _this->_internal_set_last_commit_hash(from._internal_last_commit_hash());
  }
  if (!from._internal_data_hash().empty()) {
    _this->_internal_set_data_hash(from._internal_data_hash());
  }
  if (!from._internal_validators_hash().empty()) {
    _this->_internal_set_validators_hash(from._internal_validators_hash());
  }
  if (!from._internal_next_validators_hash().empty()) {
    _this->_internal_set_next_validators_hash(from._internal_next_validators_hash());
  }
  if (!from._internal_consensus_hash().empty()) {
    _this->_internal_set_consensus_hash(from._internal_consensus_hash());
  }
  if (!from._internal_app_hash().empty()) {
    _this->_internal_set_app_hash(from._internal_app_hash());
  }
  if (!from._internal_last_results_hash().empty()) {
    _this->_internal_set_last_results_hash(from._internal_last_results_hash());
  }
  if (!from._internal_evidence_hash().empty()) {
    _this->_internal_set_evidence_hash(from._internal_evidence_hash());
  }
  if (!from._internal_proposer_address().empty()) {
    _this->_internal_set_proposer_address(from._internal_proposer_address());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_version()->::tendermint::version::Consensus::MergeFrom(
          from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_last_block_id());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_commit_hash_, lhs_arena,
                                       &other->_impl_.last_commit_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_hash_, lhs_arena,
                                       &other->_impl_.data_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validators_hash_, lhs_arena,
                                       &other->_impl_.validators_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_validators_hash_, lhs_arena,
                                       &other->_impl_.next_validators_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.consensus_hash_, lhs_arena,
                                       &other->_impl_.consensus_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_hash_, lhs_arena,
                                       &other->_impl_.app_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_results_hash_, lhs_arena,
                                       &other->_impl_.last_results_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.evidence_hash_, lhs_arena,
                                       &other->_impl_.evidence_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.proposer_address_, lhs_arena,
                                       &other->_impl_.proposer_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.height_)
      + sizeof(Header::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[3]);
}
// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Data)
}

inline void Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:tendermint.types.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes txs = 1 [json_name = "txs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Data::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Data)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes txs = 1 [json_name = "txs"];
  for (int i = 0, n = this->_internal_txs_size(); i < n; ++i) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Data)
  return target;
}

::size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 1 [json_name = "txs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_txs().size());
  for (int i = 0, n = _internal_txs().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_txs().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }


void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Data*>(&to_msg);
  auto& from = static_cast<const Data&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(
      other->_internal_mutable_txs());
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[4]);
}
// ===================================================================

class Vote::_Internal {
 public:
  using HasBits = decltype(std::declval<Vote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vote, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const Vote* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Vote* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::BlockID&
Vote::_Internal::block_id(const Vote* msg) {
  return *msg->_impl_.block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Vote::_Internal::timestamp(const Vote* msg) {
  return *msg->_impl_.timestamp_;
}
void Vote::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.validator_index_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.validator_index_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.validator_index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Vote)
}

inline void Vote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.validator_index_) { 0 }

  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:tendermint.types.Vote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void Vote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Vote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.validator_index_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.validator_index_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes validator_address = 6 [json_name = "validatorAddress"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 validator_index = 7 [json_name = "validatorIndex"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.validator_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 8 [json_name = "signature"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Vote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_height(), target);
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // bytes validator_address = 6 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // int32 validator_index = 7 [json_name = "validatorIndex"];
  if (this->_internal_validator_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_validator_index(), target);
  }

  // bytes signature = 8 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Vote)
  return target;
}

::size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Vote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes validator_address = 6 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_validator_address());
  }

  // bytes signature = 8 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // int32 validator_index = 7 [json_name = "validatorIndex"];
  if (this->_internal_validator_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_validator_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }


void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Vote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_validator_index() != 0) {
    _this->_internal_set_validator_index(from._internal_validator_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vote, _impl_.validator_index_)
      + sizeof(Vote::_impl_.validator_index_)
      - PROTOBUF_FIELD_OFFSET(Vote, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[5]);
}
// ===================================================================

class Commit::_Internal {
 public:
  using HasBits = decltype(std::declval<Commit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Commit, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const Commit* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::BlockID&
Commit::_Internal::block_id(const Commit* msg) {
  return *msg->_impl_.block_id_;
}
Commit::Commit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Commit)
}
Commit::Commit(const Commit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Commit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){from._impl_.signatures_}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.round_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Commit)
}

inline void Commit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signatures_){arena}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

  };
}

Commit::~Commit() {
  // @@protoc_insertion_point(destructor:tendermint.types.Commit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Commit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_signatures()->~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.block_id_;
}

void Commit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Commit::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Commit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_signatures()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_id_ != nullptr);
    _impl_.block_id_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Commit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Commit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Commit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_signatures_size()); i < n; i++) {
    const auto& repfield = this->_internal_signatures(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Commit)
  return target;
}

::size_t Commit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Commit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.types.CommitSig signatures = 4 [json_name = "signatures", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->_internal_signatures()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tendermint.types.BlockID block_id = 3 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_id_);
  }

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Commit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Commit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Commit::GetClassData() const { return &_class_data_; }


void Commit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Commit*>(&to_msg);
  auto& from = static_cast<const Commit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Commit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_signatures()->MergeFrom(from._internal_signatures());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
        from._internal_block_id());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Commit::CopyFrom(const Commit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Commit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Commit::IsInitialized() const {
  return true;
}

void Commit::InternalSwap(Commit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_signatures()->InternalSwap(other->_internal_mutable_signatures());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Commit, _impl_.round_)
      + sizeof(Commit::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(Commit, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Commit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[6]);
}
// ===================================================================

class CommitSig::_Internal {
 public:
  using HasBits = decltype(std::declval<CommitSig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CommitSig, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CommitSig* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CommitSig::_Internal::timestamp(const CommitSig* msg) {
  return *msg->_impl_.timestamp_;
}
void CommitSig::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommitSig::CommitSig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CommitSig)
}
CommitSig::CommitSig(const CommitSig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitSig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.block_id_flag_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_validator_address().empty()) {
    _this->_impl_.validator_address_.Set(from._internal_validator_address(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  _this->_impl_.block_id_flag_ = from._impl_.block_id_flag_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CommitSig)
}

inline void CommitSig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.validator_address_) {}

    , decltype(_impl_.signature_) {}

    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.block_id_flag_) { 0 }

  };
  _impl_.validator_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.validator_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommitSig::~CommitSig() {
  // @@protoc_insertion_point(destructor:tendermint.types.CommitSig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitSig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.validator_address_.Destroy();
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void CommitSig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitSig::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CommitSig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validator_address_.ClearToEmpty();
  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_.block_id_flag_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitSig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_block_id_flag(static_cast<::tendermint::types::BlockIDFlag>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes validator_address = 2 [json_name = "validatorAddress"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_validator_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 4 [json_name = "signature"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommitSig::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CommitSig)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
  if (this->_internal_block_id_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_block_id_flag(), target);
  }

  // bytes validator_address = 2 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    const std::string& _s = this->_internal_validator_address();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // bytes signature = 4 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CommitSig)
  return target;
}

::size_t CommitSig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CommitSig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes validator_address = 2 [json_name = "validatorAddress"];
  if (!this->_internal_validator_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_validator_address());
  }

  // bytes signature = 4 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  // .google.protobuf.Timestamp timestamp = 3 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timestamp_);
  }

  // .tendermint.types.BlockIDFlag block_id_flag = 1 [json_name = "blockIdFlag"];
  if (this->_internal_block_id_flag() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_block_id_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitSig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitSig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitSig::GetClassData() const { return &_class_data_; }


void CommitSig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitSig*>(&to_msg);
  auto& from = static_cast<const CommitSig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CommitSig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_validator_address().empty()) {
    _this->_internal_set_validator_address(from._internal_validator_address());
  }
  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_block_id_flag() != 0) {
    _this->_internal_set_block_id_flag(from._internal_block_id_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitSig::CopyFrom(const CommitSig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CommitSig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitSig::IsInitialized() const {
  return true;
}

void CommitSig::InternalSwap(CommitSig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.validator_address_, lhs_arena,
                                       &other->_impl_.validator_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.block_id_flag_)
      + sizeof(CommitSig::_impl_.block_id_flag_)
      - PROTOBUF_FIELD_OFFSET(CommitSig, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitSig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[7]);
}
// ===================================================================

class Proposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Proposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const Proposal* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Proposal* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::BlockID&
Proposal::_Internal::block_id(const Proposal* msg) {
  return *msg->_impl_.block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Proposal::_Internal::timestamp(const Proposal* msg) {
  return *msg->_impl_.timestamp_;
}
void Proposal::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.pol_round_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_signature().empty()) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.pol_round_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.pol_round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.Proposal)
}

inline void Proposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signature_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.pol_round_) { 0 }

  };
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:tendermint.types.Proposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.signature_.Destroy();
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void Proposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.Proposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.signature_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.pol_round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.pol_round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 pol_round = 4 [json_name = "polRound"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes signature = 7 [json_name = "signature"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.Proposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_height(), target);
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_round(), target);
  }

  // int32 pol_round = 4 [json_name = "polRound"];
  if (this->_internal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_pol_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // bytes signature = 7 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.Proposal)
  return target;
}

::size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.Proposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 7 [json_name = "signature"];
  if (!this->_internal_signature().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.BlockID block_id = 5 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // int32 pol_round = 4 [json_name = "polRound"];
  if (this->_internal_pol_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_pol_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }


void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proposal*>(&to_msg);
  auto& from = static_cast<const Proposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_signature().empty()) {
    _this->_internal_set_signature(from._internal_signature());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_pol_round() != 0) {
    _this->_internal_set_pol_round(from._internal_pol_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proposal, _impl_.pol_round_)
      + sizeof(Proposal::_impl_.pol_round_)
      - PROTOBUF_FIELD_OFFSET(Proposal, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[8]);
}
// ===================================================================

class SignedHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_._has_bits_);
  static const ::tendermint::types::Header& header(const SignedHeader* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::Commit& commit(const SignedHeader* msg);
  static void set_has_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::Header&
SignedHeader::_Internal::header(const SignedHeader* msg) {
  return *msg->_impl_.header_;
}
const ::tendermint::types::Commit&
SignedHeader::_Internal::commit(const SignedHeader* msg) {
  return *msg->_impl_.commit_;
}
SignedHeader::SignedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.SignedHeader)
}
SignedHeader::SignedHeader(const SignedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignedHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.commit_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_ = new ::tendermint::types::Header(*from._impl_.header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.commit_ = new ::tendermint::types::Commit(*from._impl_.commit_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.SignedHeader)
}

inline void SignedHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.commit_){nullptr}
  };
}

SignedHeader::~SignedHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.SignedHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.header_;
  if (this != internal_default_instance()) delete _impl_.commit_;
}

void SignedHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.SignedHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.commit_ != nullptr);
      _impl_.commit_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Header header = 1 [json_name = "header"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Commit commit = 2 [json_name = "commit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignedHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.SignedHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Header header = 1 [json_name = "header"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.Commit commit = 2 [json_name = "commit"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::commit(this),
        _Internal::commit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.SignedHeader)
  return target;
}

::size_t SignedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.SignedHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.Header header = 1 [json_name = "header"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

    // .tendermint.types.Commit commit = 2 [json_name = "commit"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commit_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignedHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedHeader::GetClassData() const { return &_class_data_; }


void SignedHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignedHeader*>(&to_msg);
  auto& from = static_cast<const SignedHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.SignedHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header()->::tendermint::types::Header::MergeFrom(
          from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_commit()->::tendermint::types::Commit::MergeFrom(
          from._internal_commit());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedHeader::CopyFrom(const SignedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.SignedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedHeader::IsInitialized() const {
  return true;
}

void SignedHeader::InternalSwap(SignedHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.commit_)
      + sizeof(SignedHeader::_impl_.commit_)
      - PROTOBUF_FIELD_OFFSET(SignedHeader, _impl_.header_)>(
          reinterpret_cast<char*>(&_impl_.header_),
          reinterpret_cast<char*>(&other->_impl_.header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[9]);
}
// ===================================================================

class LightBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<LightBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LightBlock, _impl_._has_bits_);
  static const ::tendermint::types::SignedHeader& signed_header(const LightBlock* msg);
  static void set_has_signed_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::ValidatorSet& validator_set(const LightBlock* msg);
  static void set_has_validator_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::SignedHeader&
LightBlock::_Internal::signed_header(const LightBlock* msg) {
  return *msg->_impl_.signed_header_;
}
const ::tendermint::types::ValidatorSet&
LightBlock::_Internal::validator_set(const LightBlock* msg) {
  return *msg->_impl_.validator_set_;
}
void LightBlock::clear_validator_set() {
  if (_impl_.validator_set_ != nullptr) _impl_.validator_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
LightBlock::LightBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.LightBlock)
}
LightBlock::LightBlock(const LightBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LightBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signed_header_){nullptr}
    , decltype(_impl_.validator_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.signed_header_ = new ::tendermint::types::SignedHeader(*from._impl_.signed_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.validator_set_ = new ::tendermint::types::ValidatorSet(*from._impl_.validator_set_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.LightBlock)
}

inline void LightBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.signed_header_){nullptr}
    , decltype(_impl_.validator_set_){nullptr}
  };
}

LightBlock::~LightBlock() {
  // @@protoc_insertion_point(destructor:tendermint.types.LightBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LightBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.signed_header_;
  if (this != internal_default_instance()) delete _impl_.validator_set_;
}

void LightBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LightBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.LightBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.signed_header_ != nullptr);
      _impl_.signed_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.validator_set_ != nullptr);
      _impl_.validator_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LightBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validator_set(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LightBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.LightBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::signed_header(this),
        _Internal::signed_header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::validator_set(this),
        _Internal::validator_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.LightBlock)
  return target;
}

::size_t LightBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.LightBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.SignedHeader signed_header = 1 [json_name = "signedHeader"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.signed_header_);
    }

    // .tendermint.types.ValidatorSet validator_set = 2 [json_name = "validatorSet"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.validator_set_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LightBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LightBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LightBlock::GetClassData() const { return &_class_data_; }


void LightBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LightBlock*>(&to_msg);
  auto& from = static_cast<const LightBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.LightBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_signed_header()->::tendermint::types::SignedHeader::MergeFrom(
          from._internal_signed_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_validator_set()->::tendermint::types::ValidatorSet::MergeFrom(
          from._internal_validator_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LightBlock::CopyFrom(const LightBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.LightBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightBlock::IsInitialized() const {
  return true;
}

void LightBlock::InternalSwap(LightBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.validator_set_)
      + sizeof(LightBlock::_impl_.validator_set_)
      - PROTOBUF_FIELD_OFFSET(LightBlock, _impl_.signed_header_)>(
          reinterpret_cast<char*>(&_impl_.signed_header_),
          reinterpret_cast<char*>(&other->_impl_.signed_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LightBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[10]);
}
// ===================================================================

class BlockMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockMeta>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const BlockMeta* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::types::Header& header(const BlockMeta* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::BlockID&
BlockMeta::_Internal::block_id(const BlockMeta* msg) {
  return *msg->_impl_.block_id_;
}
const ::tendermint::types::Header&
BlockMeta::_Internal::header(const BlockMeta* msg) {
  return *msg->_impl_.header_;
}
BlockMeta::BlockMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.BlockMeta)
}
BlockMeta::BlockMeta(const BlockMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.block_size_) {}

    , decltype(_impl_.num_txs_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.header_ = new ::tendermint::types::Header(*from._impl_.header_);
  }
  ::memcpy(&_impl_.block_size_, &from._impl_.block_size_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_txs_) -
    reinterpret_cast<char*>(&_impl_.block_size_)) + sizeof(_impl_.num_txs_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.BlockMeta)
}

inline void BlockMeta::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.header_){nullptr}
    , decltype(_impl_.block_size_) { ::int64_t{0} }

    , decltype(_impl_.num_txs_) { ::int64_t{0} }

  };
}

BlockMeta::~BlockMeta() {
  // @@protoc_insertion_point(destructor:tendermint.types.BlockMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockMeta::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.header_;
}

void BlockMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.BlockMeta)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  ::memset(&_impl_.block_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_txs_) -
      reinterpret_cast<char*>(&_impl_.block_size_)) + sizeof(_impl_.num_txs_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 block_size = 2 [json_name = "blockSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.block_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 num_txs = 4 [json_name = "numTxs"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.num_txs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockMeta::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.BlockMeta)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // int64 block_size = 2 [json_name = "blockSize"];
  if (this->_internal_block_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_block_size(), target);
  }

  // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // int64 num_txs = 4 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_num_txs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.BlockMeta)
  return target;
}

::size_t BlockMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.BlockMeta)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.BlockID block_id = 1 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .tendermint.types.Header header = 3 [json_name = "header", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_);
    }

  }
  // int64 block_size = 2 [json_name = "blockSize"];
  if (this->_internal_block_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_block_size());
  }

  // int64 num_txs = 4 [json_name = "numTxs"];
  if (this->_internal_num_txs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_num_txs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockMeta::GetClassData() const { return &_class_data_; }


void BlockMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockMeta*>(&to_msg);
  auto& from = static_cast<const BlockMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.BlockMeta)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header()->::tendermint::types::Header::MergeFrom(
          from._internal_header());
    }
  }
  if (from._internal_block_size() != 0) {
    _this->_internal_set_block_size(from._internal_block_size());
  }
  if (from._internal_num_txs() != 0) {
    _this->_internal_set_num_txs(from._internal_num_txs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockMeta::CopyFrom(const BlockMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.BlockMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockMeta::IsInitialized() const {
  return true;
}

void BlockMeta::InternalSwap(BlockMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.num_txs_)
      + sizeof(BlockMeta::_impl_.num_txs_)
      - PROTOBUF_FIELD_OFFSET(BlockMeta, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[11]);
}
// ===================================================================

class TxProof::_Internal {
 public:
  using HasBits = decltype(std::declval<TxProof>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TxProof, _impl_._has_bits_);
  static const ::tendermint::crypto::Proof& proof(const TxProof* msg);
  static void set_has_proof(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::crypto::Proof&
TxProof::_Internal::proof(const TxProof* msg) {
  return *msg->_impl_.proof_;
}
void TxProof::clear_proof() {
  if (_impl_.proof_ != nullptr) _impl_.proof_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TxProof::TxProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.TxProof)
}
TxProof::TxProof(const TxProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxProof* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_hash_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.proof_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.root_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.root_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_root_hash().empty()) {
    _this->_impl_.root_hash_.Set(from._internal_root_hash(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_ = new ::tendermint::crypto::Proof(*from._impl_.proof_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.TxProof)
}

inline void TxProof::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_hash_) {}

    , decltype(_impl_.data_) {}

    , decltype(_impl_.proof_){nullptr}
  };
  _impl_.root_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.root_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxProof::~TxProof() {
  // @@protoc_insertion_point(destructor:tendermint.types.TxProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TxProof::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.root_hash_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_;
}

void TxProof::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxProof::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.TxProof)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.root_hash_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_ != nullptr);
    _impl_.proof_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes root_hash = 1 [json_name = "rootHash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_root_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 2 [json_name = "data"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TxProof::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.TxProof)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_hash = 1 [json_name = "rootHash"];
  if (!this->_internal_root_hash().empty()) {
    const std::string& _s = this->_internal_root_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes data = 2 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proof(this),
        _Internal::proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.TxProof)
  return target;
}

::size_t TxProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.TxProof)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes root_hash = 1 [json_name = "rootHash"];
  if (!this->_internal_root_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_root_hash());
  }

  // bytes data = 2 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // .tendermint.crypto.Proof proof = 3 [json_name = "proof"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxProof::GetClassData() const { return &_class_data_; }


void TxProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxProof*>(&to_msg);
  auto& from = static_cast<const TxProof&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.TxProof)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_root_hash().empty()) {
    _this->_internal_set_root_hash(from._internal_root_hash());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof()->::tendermint::crypto::Proof::MergeFrom(
        from._internal_proof());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxProof::CopyFrom(const TxProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.TxProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxProof::IsInitialized() const {
  return true;
}

void TxProof::InternalSwap(TxProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.root_hash_, lhs_arena,
                                       &other->_impl_.root_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  swap(_impl_.proof_, other->_impl_.proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_getter, &descriptor_table_tendermint_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2ftypes_2eproto[12]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::PartSetHeader*
Arena::CreateMaybeMessage< ::tendermint::types::PartSetHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::PartSetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Part*
Arena::CreateMaybeMessage< ::tendermint::types::Part >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Part >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockID*
Arena::CreateMaybeMessage< ::tendermint::types::BlockID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Header*
Arena::CreateMaybeMessage< ::tendermint::types::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Data*
Arena::CreateMaybeMessage< ::tendermint::types::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Data >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Vote*
Arena::CreateMaybeMessage< ::tendermint::types::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Commit*
Arena::CreateMaybeMessage< ::tendermint::types::Commit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Commit >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CommitSig*
Arena::CreateMaybeMessage< ::tendermint::types::CommitSig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CommitSig >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::Proposal*
Arena::CreateMaybeMessage< ::tendermint::types::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::SignedHeader*
Arena::CreateMaybeMessage< ::tendermint::types::SignedHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::SignedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::LightBlock*
Arena::CreateMaybeMessage< ::tendermint::types::LightBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::LightBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::BlockMeta*
Arena::CreateMaybeMessage< ::tendermint::types::BlockMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::BlockMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::TxProof*
Arena::CreateMaybeMessage< ::tendermint::types::TxProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::TxProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

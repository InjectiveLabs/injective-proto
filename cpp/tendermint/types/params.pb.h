// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/params.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "google/protobuf/duration.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2ftypes_2fparams_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2ftypes_2fparams_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2ftypes_2fparams_2eproto;
namespace tendermint {
namespace types {
class BlockParams;
struct BlockParamsDefaultTypeInternal;
extern BlockParamsDefaultTypeInternal _BlockParams_default_instance_;
class ConsensusParams;
struct ConsensusParamsDefaultTypeInternal;
extern ConsensusParamsDefaultTypeInternal _ConsensusParams_default_instance_;
class EvidenceParams;
struct EvidenceParamsDefaultTypeInternal;
extern EvidenceParamsDefaultTypeInternal _EvidenceParams_default_instance_;
class HashedParams;
struct HashedParamsDefaultTypeInternal;
extern HashedParamsDefaultTypeInternal _HashedParams_default_instance_;
class ValidatorParams;
struct ValidatorParamsDefaultTypeInternal;
extern ValidatorParamsDefaultTypeInternal _ValidatorParams_default_instance_;
class VersionParams;
struct VersionParamsDefaultTypeInternal;
extern VersionParamsDefaultTypeInternal _VersionParams_default_instance_;
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::types::BlockParams* Arena::CreateMaybeMessage<::tendermint::types::BlockParams>(Arena*);
template <>
::tendermint::types::ConsensusParams* Arena::CreateMaybeMessage<::tendermint::types::ConsensusParams>(Arena*);
template <>
::tendermint::types::EvidenceParams* Arena::CreateMaybeMessage<::tendermint::types::EvidenceParams>(Arena*);
template <>
::tendermint::types::HashedParams* Arena::CreateMaybeMessage<::tendermint::types::HashedParams>(Arena*);
template <>
::tendermint::types::ValidatorParams* Arena::CreateMaybeMessage<::tendermint::types::ValidatorParams>(Arena*);
template <>
::tendermint::types::VersionParams* Arena::CreateMaybeMessage<::tendermint::types::VersionParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace types {

// ===================================================================


// -------------------------------------------------------------------

class ConsensusParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.ConsensusParams) */ {
 public:
  inline ConsensusParams() : ConsensusParams(nullptr) {}
  ~ConsensusParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConsensusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConsensusParams(const ConsensusParams& from);
  ConsensusParams(ConsensusParams&& from) noexcept
    : ConsensusParams() {
    *this = ::std::move(from);
  }

  inline ConsensusParams& operator=(const ConsensusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConsensusParams& operator=(ConsensusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConsensusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConsensusParams* internal_default_instance() {
    return reinterpret_cast<const ConsensusParams*>(
               &_ConsensusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConsensusParams& a, ConsensusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ConsensusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConsensusParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConsensusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConsensusParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConsensusParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConsensusParams& from) {
    ConsensusParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConsensusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.ConsensusParams";
  }
  protected:
  explicit ConsensusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
    kEvidenceFieldNumber = 2,
    kValidatorFieldNumber = 3,
    kVersionFieldNumber = 4,
  };
  // .tendermint.types.BlockParams block = 1 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::BlockParams& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::BlockParams* release_block();
  ::tendermint::types::BlockParams* mutable_block();
  void set_allocated_block(::tendermint::types::BlockParams* block);
  private:
  const ::tendermint::types::BlockParams& _internal_block() const;
  ::tendermint::types::BlockParams* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::BlockParams* block);
  ::tendermint::types::BlockParams* unsafe_arena_release_block();
  // .tendermint.types.EvidenceParams evidence = 2 [json_name = "evidence"];
  bool has_evidence() const;
  void clear_evidence() ;
  const ::tendermint::types::EvidenceParams& evidence() const;
  PROTOBUF_NODISCARD ::tendermint::types::EvidenceParams* release_evidence();
  ::tendermint::types::EvidenceParams* mutable_evidence();
  void set_allocated_evidence(::tendermint::types::EvidenceParams* evidence);
  private:
  const ::tendermint::types::EvidenceParams& _internal_evidence() const;
  ::tendermint::types::EvidenceParams* _internal_mutable_evidence();
  public:
  void unsafe_arena_set_allocated_evidence(
      ::tendermint::types::EvidenceParams* evidence);
  ::tendermint::types::EvidenceParams* unsafe_arena_release_evidence();
  // .tendermint.types.ValidatorParams validator = 3 [json_name = "validator"];
  bool has_validator() const;
  void clear_validator() ;
  const ::tendermint::types::ValidatorParams& validator() const;
  PROTOBUF_NODISCARD ::tendermint::types::ValidatorParams* release_validator();
  ::tendermint::types::ValidatorParams* mutable_validator();
  void set_allocated_validator(::tendermint::types::ValidatorParams* validator);
  private:
  const ::tendermint::types::ValidatorParams& _internal_validator() const;
  ::tendermint::types::ValidatorParams* _internal_mutable_validator();
  public:
  void unsafe_arena_set_allocated_validator(
      ::tendermint::types::ValidatorParams* validator);
  ::tendermint::types::ValidatorParams* unsafe_arena_release_validator();
  // .tendermint.types.VersionParams version = 4 [json_name = "version"];
  bool has_version() const;
  void clear_version() ;
  const ::tendermint::types::VersionParams& version() const;
  PROTOBUF_NODISCARD ::tendermint::types::VersionParams* release_version();
  ::tendermint::types::VersionParams* mutable_version();
  void set_allocated_version(::tendermint::types::VersionParams* version);
  private:
  const ::tendermint::types::VersionParams& _internal_version() const;
  ::tendermint::types::VersionParams* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::tendermint::types::VersionParams* version);
  ::tendermint::types::VersionParams* unsafe_arena_release_version();
  // @@protoc_insertion_point(class_scope:tendermint.types.ConsensusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::BlockParams* block_;
    ::tendermint::types::EvidenceParams* evidence_;
    ::tendermint::types::ValidatorParams* validator_;
    ::tendermint::types::VersionParams* version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};// -------------------------------------------------------------------

class BlockParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.BlockParams) */ {
 public:
  inline BlockParams() : BlockParams(nullptr) {}
  ~BlockParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockParams(const BlockParams& from);
  BlockParams(BlockParams&& from) noexcept
    : BlockParams() {
    *this = ::std::move(from);
  }

  inline BlockParams& operator=(const BlockParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockParams& operator=(BlockParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockParams* internal_default_instance() {
    return reinterpret_cast<const BlockParams*>(
               &_BlockParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BlockParams& a, BlockParams& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockParams& from) {
    BlockParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.BlockParams";
  }
  protected:
  explicit BlockParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxBytesFieldNumber = 1,
    kMaxGasFieldNumber = 2,
  };
  // int64 max_bytes = 1 [json_name = "maxBytes"];
  void clear_max_bytes() ;
  ::int64_t max_bytes() const;
  void set_max_bytes(::int64_t value);

  private:
  ::int64_t _internal_max_bytes() const;
  void _internal_set_max_bytes(::int64_t value);

  public:
  // int64 max_gas = 2 [json_name = "maxGas"];
  void clear_max_gas() ;
  ::int64_t max_gas() const;
  void set_max_gas(::int64_t value);

  private:
  ::int64_t _internal_max_gas() const;
  void _internal_set_max_gas(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.BlockParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t max_bytes_;
    ::int64_t max_gas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};// -------------------------------------------------------------------

class EvidenceParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.EvidenceParams) */ {
 public:
  inline EvidenceParams() : EvidenceParams(nullptr) {}
  ~EvidenceParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EvidenceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvidenceParams(const EvidenceParams& from);
  EvidenceParams(EvidenceParams&& from) noexcept
    : EvidenceParams() {
    *this = ::std::move(from);
  }

  inline EvidenceParams& operator=(const EvidenceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvidenceParams& operator=(EvidenceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EvidenceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvidenceParams* internal_default_instance() {
    return reinterpret_cast<const EvidenceParams*>(
               &_EvidenceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EvidenceParams& a, EvidenceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EvidenceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvidenceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvidenceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvidenceParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EvidenceParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EvidenceParams& from) {
    EvidenceParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EvidenceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.EvidenceParams";
  }
  protected:
  explicit EvidenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAgeDurationFieldNumber = 2,
    kMaxAgeNumBlocksFieldNumber = 1,
    kMaxBytesFieldNumber = 3,
  };
  // .google.protobuf.Duration max_age_duration = 2 [json_name = "maxAgeDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_max_age_duration() const;
  void clear_max_age_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& max_age_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_max_age_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_max_age_duration();
  void set_allocated_max_age_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_max_age_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_age_duration();
  public:
  void unsafe_arena_set_allocated_max_age_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_age_duration();
  // int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
  void clear_max_age_num_blocks() ;
  ::int64_t max_age_num_blocks() const;
  void set_max_age_num_blocks(::int64_t value);

  private:
  ::int64_t _internal_max_age_num_blocks() const;
  void _internal_set_max_age_num_blocks(::int64_t value);

  public:
  // int64 max_bytes = 3 [json_name = "maxBytes"];
  void clear_max_bytes() ;
  ::int64_t max_bytes() const;
  void set_max_bytes(::int64_t value);

  private:
  ::int64_t _internal_max_bytes() const;
  void _internal_set_max_bytes(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.EvidenceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration_;
    ::int64_t max_age_num_blocks_;
    ::int64_t max_bytes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};// -------------------------------------------------------------------

class ValidatorParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.ValidatorParams) */ {
 public:
  inline ValidatorParams() : ValidatorParams(nullptr) {}
  ~ValidatorParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ValidatorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidatorParams(const ValidatorParams& from);
  ValidatorParams(ValidatorParams&& from) noexcept
    : ValidatorParams() {
    *this = ::std::move(from);
  }

  inline ValidatorParams& operator=(const ValidatorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidatorParams& operator=(ValidatorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidatorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidatorParams* internal_default_instance() {
    return reinterpret_cast<const ValidatorParams*>(
               &_ValidatorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValidatorParams& a, ValidatorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidatorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidatorParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidatorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidatorParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidatorParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ValidatorParams& from) {
    ValidatorParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidatorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.ValidatorParams";
  }
  protected:
  explicit ValidatorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyTypesFieldNumber = 1,
  };
  // repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
  int pub_key_types_size() const;
  private:
  int _internal_pub_key_types_size() const;

  public:
  void clear_pub_key_types() ;
  const std::string& pub_key_types(int index) const;
  std::string* mutable_pub_key_types(int index);
  void set_pub_key_types(int index, const std::string& value);
  void set_pub_key_types(int index, std::string&& value);
  void set_pub_key_types(int index, const char* value);
  void set_pub_key_types(int index, const char* value, std::size_t size);
  void set_pub_key_types(int index, absl::string_view value);
  std::string* add_pub_key_types();
  void add_pub_key_types(const std::string& value);
  void add_pub_key_types(std::string&& value);
  void add_pub_key_types(const char* value);
  void add_pub_key_types(const char* value, std::size_t size);
  void add_pub_key_types(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pub_key_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pub_key_types();

  private:
  const std::string& _internal_pub_key_types(int index) const;
  std::string* _internal_add_pub_key_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_pub_key_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_pub_key_types();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.ValidatorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pub_key_types_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};// -------------------------------------------------------------------

class VersionParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.VersionParams) */ {
 public:
  inline VersionParams() : VersionParams(nullptr) {}
  ~VersionParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VersionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VersionParams(const VersionParams& from);
  VersionParams(VersionParams&& from) noexcept
    : VersionParams() {
    *this = ::std::move(from);
  }

  inline VersionParams& operator=(const VersionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VersionParams& operator=(VersionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VersionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VersionParams* internal_default_instance() {
    return reinterpret_cast<const VersionParams*>(
               &_VersionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VersionParams& a, VersionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VersionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VersionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VersionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VersionParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VersionParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VersionParams& from) {
    VersionParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VersionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.VersionParams";
  }
  protected:
  explicit VersionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppFieldNumber = 1,
  };
  // uint64 app = 1 [json_name = "app"];
  void clear_app() ;
  ::uint64_t app() const;
  void set_app(::uint64_t value);

  private:
  ::uint64_t _internal_app() const;
  void _internal_set_app(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.VersionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::uint64_t app_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};// -------------------------------------------------------------------

class HashedParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.types.HashedParams) */ {
 public:
  inline HashedParams() : HashedParams(nullptr) {}
  ~HashedParams() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HashedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashedParams(const HashedParams& from);
  HashedParams(HashedParams&& from) noexcept
    : HashedParams() {
    *this = ::std::move(from);
  }

  inline HashedParams& operator=(const HashedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashedParams& operator=(HashedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HashedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashedParams* internal_default_instance() {
    return reinterpret_cast<const HashedParams*>(
               &_HashedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HashedParams& a, HashedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(HashedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashedParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HashedParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HashedParams& from) {
    HashedParams::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HashedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.types.HashedParams";
  }
  protected:
  explicit HashedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockMaxBytesFieldNumber = 1,
    kBlockMaxGasFieldNumber = 2,
  };
  // int64 block_max_bytes = 1 [json_name = "blockMaxBytes"];
  void clear_block_max_bytes() ;
  ::int64_t block_max_bytes() const;
  void set_block_max_bytes(::int64_t value);

  private:
  ::int64_t _internal_block_max_bytes() const;
  void _internal_set_block_max_bytes(::int64_t value);

  public:
  // int64 block_max_gas = 2 [json_name = "blockMaxGas"];
  void clear_block_max_gas() ;
  ::int64_t block_max_gas() const;
  void set_block_max_gas(::int64_t value);

  private:
  ::int64_t _internal_block_max_gas() const;
  void _internal_set_block_max_gas(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.types.HashedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t block_max_bytes_;
    ::int64_t block_max_gas_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2ftypes_2fparams_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ConsensusParams

// .tendermint.types.BlockParams block = 1 [json_name = "block"];
inline bool ConsensusParams::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline void ConsensusParams::clear_block() {
  if (_impl_.block_ != nullptr) _impl_.block_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tendermint::types::BlockParams& ConsensusParams::_internal_block() const {
  const ::tendermint::types::BlockParams* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::BlockParams&>(
      ::tendermint::types::_BlockParams_default_instance_);
}
inline const ::tendermint::types::BlockParams& ConsensusParams::block() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.block)
  return _internal_block();
}
inline void ConsensusParams::unsafe_arena_set_allocated_block(
    ::tendermint::types::BlockParams* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.block)
}
inline ::tendermint::types::BlockParams* ConsensusParams::release_block() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockParams* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::BlockParams* ConsensusParams::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.block)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::BlockParams* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::BlockParams* ConsensusParams::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::BlockParams>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::BlockParams* ConsensusParams::mutable_block() {
  ::tendermint::types::BlockParams* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.block)
  return _msg;
}
inline void ConsensusParams::set_allocated_block(::tendermint::types::BlockParams* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.block)
}

// .tendermint.types.EvidenceParams evidence = 2 [json_name = "evidence"];
inline bool ConsensusParams::has_evidence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evidence_ != nullptr);
  return value;
}
inline void ConsensusParams::clear_evidence() {
  if (_impl_.evidence_ != nullptr) _impl_.evidence_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::types::EvidenceParams& ConsensusParams::_internal_evidence() const {
  const ::tendermint::types::EvidenceParams* p = _impl_.evidence_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::EvidenceParams&>(
      ::tendermint::types::_EvidenceParams_default_instance_);
}
inline const ::tendermint::types::EvidenceParams& ConsensusParams::evidence() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.evidence)
  return _internal_evidence();
}
inline void ConsensusParams::unsafe_arena_set_allocated_evidence(
    ::tendermint::types::EvidenceParams* evidence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.evidence_);
  }
  _impl_.evidence_ = evidence;
  if (evidence) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.evidence)
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::release_evidence() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::EvidenceParams* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::unsafe_arena_release_evidence() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.evidence)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::types::EvidenceParams* temp = _impl_.evidence_;
  _impl_.evidence_ = nullptr;
  return temp;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::_internal_mutable_evidence() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.evidence_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::EvidenceParams>(GetArenaForAllocation());
    _impl_.evidence_ = p;
  }
  return _impl_.evidence_;
}
inline ::tendermint::types::EvidenceParams* ConsensusParams::mutable_evidence() {
  ::tendermint::types::EvidenceParams* _msg = _internal_mutable_evidence();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.evidence)
  return _msg;
}
inline void ConsensusParams::set_allocated_evidence(::tendermint::types::EvidenceParams* evidence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.evidence_;
  }
  if (evidence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(evidence);
    if (message_arena != submessage_arena) {
      evidence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, evidence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.evidence_ = evidence;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.evidence)
}

// .tendermint.types.ValidatorParams validator = 3 [json_name = "validator"];
inline bool ConsensusParams::has_validator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.validator_ != nullptr);
  return value;
}
inline void ConsensusParams::clear_validator() {
  if (_impl_.validator_ != nullptr) _impl_.validator_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tendermint::types::ValidatorParams& ConsensusParams::_internal_validator() const {
  const ::tendermint::types::ValidatorParams* p = _impl_.validator_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::ValidatorParams&>(
      ::tendermint::types::_ValidatorParams_default_instance_);
}
inline const ::tendermint::types::ValidatorParams& ConsensusParams::validator() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.validator)
  return _internal_validator();
}
inline void ConsensusParams::unsafe_arena_set_allocated_validator(
    ::tendermint::types::ValidatorParams* validator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.validator_);
  }
  _impl_.validator_ = validator;
  if (validator) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.validator)
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::release_validator() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::ValidatorParams* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::unsafe_arena_release_validator() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.validator)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tendermint::types::ValidatorParams* temp = _impl_.validator_;
  _impl_.validator_ = nullptr;
  return temp;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::_internal_mutable_validator() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.validator_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::ValidatorParams>(GetArenaForAllocation());
    _impl_.validator_ = p;
  }
  return _impl_.validator_;
}
inline ::tendermint::types::ValidatorParams* ConsensusParams::mutable_validator() {
  ::tendermint::types::ValidatorParams* _msg = _internal_mutable_validator();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.validator)
  return _msg;
}
inline void ConsensusParams::set_allocated_validator(::tendermint::types::ValidatorParams* validator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.validator_;
  }
  if (validator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(validator);
    if (message_arena != submessage_arena) {
      validator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.validator_ = validator;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.validator)
}

// .tendermint.types.VersionParams version = 4 [json_name = "version"];
inline bool ConsensusParams::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.version_ != nullptr);
  return value;
}
inline void ConsensusParams::clear_version() {
  if (_impl_.version_ != nullptr) _impl_.version_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tendermint::types::VersionParams& ConsensusParams::_internal_version() const {
  const ::tendermint::types::VersionParams* p = _impl_.version_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::VersionParams&>(
      ::tendermint::types::_VersionParams_default_instance_);
}
inline const ::tendermint::types::VersionParams& ConsensusParams::version() const {
  // @@protoc_insertion_point(field_get:tendermint.types.ConsensusParams.version)
  return _internal_version();
}
inline void ConsensusParams::unsafe_arena_set_allocated_version(
    ::tendermint::types::VersionParams* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.version_);
  }
  _impl_.version_ = version;
  if (version) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.ConsensusParams.version)
}
inline ::tendermint::types::VersionParams* ConsensusParams::release_version() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::VersionParams* temp = _impl_.version_;
  _impl_.version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::VersionParams* ConsensusParams::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:tendermint.types.ConsensusParams.version)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tendermint::types::VersionParams* temp = _impl_.version_;
  _impl_.version_ = nullptr;
  return temp;
}
inline ::tendermint::types::VersionParams* ConsensusParams::_internal_mutable_version() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.version_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::VersionParams>(GetArenaForAllocation());
    _impl_.version_ = p;
  }
  return _impl_.version_;
}
inline ::tendermint::types::VersionParams* ConsensusParams::mutable_version() {
  ::tendermint::types::VersionParams* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:tendermint.types.ConsensusParams.version)
  return _msg;
}
inline void ConsensusParams::set_allocated_version(::tendermint::types::VersionParams* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.version_ = version;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.ConsensusParams.version)
}

// -------------------------------------------------------------------

// BlockParams

// int64 max_bytes = 1 [json_name = "maxBytes"];
inline void BlockParams::clear_max_bytes() {
  _impl_.max_bytes_ = ::int64_t{0};
}
inline ::int64_t BlockParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockParams.max_bytes)
  return _internal_max_bytes();
}
inline void BlockParams::set_max_bytes(::int64_t value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockParams.max_bytes)
}
inline ::int64_t BlockParams::_internal_max_bytes() const {
  return _impl_.max_bytes_;
}
inline void BlockParams::_internal_set_max_bytes(::int64_t value) {
  ;
  _impl_.max_bytes_ = value;
}

// int64 max_gas = 2 [json_name = "maxGas"];
inline void BlockParams::clear_max_gas() {
  _impl_.max_gas_ = ::int64_t{0};
}
inline ::int64_t BlockParams::max_gas() const {
  // @@protoc_insertion_point(field_get:tendermint.types.BlockParams.max_gas)
  return _internal_max_gas();
}
inline void BlockParams::set_max_gas(::int64_t value) {
  _internal_set_max_gas(value);
  // @@protoc_insertion_point(field_set:tendermint.types.BlockParams.max_gas)
}
inline ::int64_t BlockParams::_internal_max_gas() const {
  return _impl_.max_gas_;
}
inline void BlockParams::_internal_set_max_gas(::int64_t value) {
  ;
  _impl_.max_gas_ = value;
}

// -------------------------------------------------------------------

// EvidenceParams

// int64 max_age_num_blocks = 1 [json_name = "maxAgeNumBlocks"];
inline void EvidenceParams::clear_max_age_num_blocks() {
  _impl_.max_age_num_blocks_ = ::int64_t{0};
}
inline ::int64_t EvidenceParams::max_age_num_blocks() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_age_num_blocks)
  return _internal_max_age_num_blocks();
}
inline void EvidenceParams::set_max_age_num_blocks(::int64_t value) {
  _internal_set_max_age_num_blocks(value);
  // @@protoc_insertion_point(field_set:tendermint.types.EvidenceParams.max_age_num_blocks)
}
inline ::int64_t EvidenceParams::_internal_max_age_num_blocks() const {
  return _impl_.max_age_num_blocks_;
}
inline void EvidenceParams::_internal_set_max_age_num_blocks(::int64_t value) {
  ;
  _impl_.max_age_num_blocks_ = value;
}

// .google.protobuf.Duration max_age_duration = 2 [json_name = "maxAgeDuration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool EvidenceParams::has_max_age_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.max_age_duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EvidenceParams::_internal_max_age_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.max_age_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& EvidenceParams::max_age_duration() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_age_duration)
  return _internal_max_age_duration();
}
inline void EvidenceParams::unsafe_arena_set_allocated_max_age_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_age_duration_);
  }
  _impl_.max_age_duration_ = max_age_duration;
  if (max_age_duration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.types.EvidenceParams.max_age_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::release_max_age_duration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_age_duration_;
  _impl_.max_age_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::unsafe_arena_release_max_age_duration() {
  // @@protoc_insertion_point(field_release:tendermint.types.EvidenceParams.max_age_duration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.max_age_duration_;
  _impl_.max_age_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::_internal_mutable_max_age_duration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.max_age_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.max_age_duration_ = p;
  }
  return _impl_.max_age_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* EvidenceParams::mutable_max_age_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_max_age_duration();
  // @@protoc_insertion_point(field_mutable:tendermint.types.EvidenceParams.max_age_duration)
  return _msg;
}
inline void EvidenceParams::set_allocated_max_age_duration(::PROTOBUF_NAMESPACE_ID::Duration* max_age_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.max_age_duration_);
  }
  if (max_age_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_age_duration));
    if (message_arena != submessage_arena) {
      max_age_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_age_duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.max_age_duration_ = max_age_duration;
  // @@protoc_insertion_point(field_set_allocated:tendermint.types.EvidenceParams.max_age_duration)
}

// int64 max_bytes = 3 [json_name = "maxBytes"];
inline void EvidenceParams::clear_max_bytes() {
  _impl_.max_bytes_ = ::int64_t{0};
}
inline ::int64_t EvidenceParams::max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.EvidenceParams.max_bytes)
  return _internal_max_bytes();
}
inline void EvidenceParams::set_max_bytes(::int64_t value) {
  _internal_set_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.EvidenceParams.max_bytes)
}
inline ::int64_t EvidenceParams::_internal_max_bytes() const {
  return _impl_.max_bytes_;
}
inline void EvidenceParams::_internal_set_max_bytes(::int64_t value) {
  ;
  _impl_.max_bytes_ = value;
}

// -------------------------------------------------------------------

// ValidatorParams

// repeated string pub_key_types = 1 [json_name = "pubKeyTypes"];
inline int ValidatorParams::_internal_pub_key_types_size() const {
  return _impl_.pub_key_types_.size();
}
inline int ValidatorParams::pub_key_types_size() const {
  return _internal_pub_key_types_size();
}
inline void ValidatorParams::clear_pub_key_types() {
  _internal_mutable_pub_key_types()->Clear();
}
inline std::string* ValidatorParams::add_pub_key_types() {
  std::string* _s = _internal_add_pub_key_types();
  // @@protoc_insertion_point(field_add_mutable:tendermint.types.ValidatorParams.pub_key_types)
  return _s;
}
inline const std::string& ValidatorParams::pub_key_types(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.types.ValidatorParams.pub_key_types)
  return _internal_pub_key_types(index);
}
inline std::string* ValidatorParams::mutable_pub_key_types(int index) {
  // @@protoc_insertion_point(field_mutable:tendermint.types.ValidatorParams.pub_key_types)
  return _internal_mutable_pub_key_types()->Mutable(index);
}
inline void ValidatorParams::set_pub_key_types(int index, const std::string& value) {
  _internal_mutable_pub_key_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, std::string&& value) {
  _internal_mutable_pub_key_types()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_pub_key_types()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_pub_key_types()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::set_pub_key_types(int index, absl::string_view value) {
  _internal_mutable_pub_key_types()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const std::string& value) {
  _internal_mutable_pub_key_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(std::string&& value) {
  _internal_mutable_pub_key_types()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_pub_key_types()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(const char* value, std::size_t size) {
  _internal_mutable_pub_key_types()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tendermint.types.ValidatorParams.pub_key_types)
}
inline void ValidatorParams::add_pub_key_types(absl::string_view value) {
  _internal_mutable_pub_key_types()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:tendermint.types.ValidatorParams.pub_key_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValidatorParams::pub_key_types() const {
  // @@protoc_insertion_point(field_list:tendermint.types.ValidatorParams.pub_key_types)
  return _internal_pub_key_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ValidatorParams::mutable_pub_key_types() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.types.ValidatorParams.pub_key_types)
  return _internal_mutable_pub_key_types();
}
inline const std::string& ValidatorParams::_internal_pub_key_types(int index) const {
  return _internal_pub_key_types().Get(index);
}
inline std::string* ValidatorParams::_internal_add_pub_key_types() {
  return _internal_mutable_pub_key_types()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ValidatorParams::_internal_pub_key_types() const {
  return _impl_.pub_key_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ValidatorParams::_internal_mutable_pub_key_types() {
  return &_impl_.pub_key_types_;
}

// -------------------------------------------------------------------

// VersionParams

// uint64 app = 1 [json_name = "app"];
inline void VersionParams::clear_app() {
  _impl_.app_ = ::uint64_t{0u};
}
inline ::uint64_t VersionParams::app() const {
  // @@protoc_insertion_point(field_get:tendermint.types.VersionParams.app)
  return _internal_app();
}
inline void VersionParams::set_app(::uint64_t value) {
  _internal_set_app(value);
  // @@protoc_insertion_point(field_set:tendermint.types.VersionParams.app)
}
inline ::uint64_t VersionParams::_internal_app() const {
  return _impl_.app_;
}
inline void VersionParams::_internal_set_app(::uint64_t value) {
  ;
  _impl_.app_ = value;
}

// -------------------------------------------------------------------

// HashedParams

// int64 block_max_bytes = 1 [json_name = "blockMaxBytes"];
inline void HashedParams::clear_block_max_bytes() {
  _impl_.block_max_bytes_ = ::int64_t{0};
}
inline ::int64_t HashedParams::block_max_bytes() const {
  // @@protoc_insertion_point(field_get:tendermint.types.HashedParams.block_max_bytes)
  return _internal_block_max_bytes();
}
inline void HashedParams::set_block_max_bytes(::int64_t value) {
  _internal_set_block_max_bytes(value);
  // @@protoc_insertion_point(field_set:tendermint.types.HashedParams.block_max_bytes)
}
inline ::int64_t HashedParams::_internal_block_max_bytes() const {
  return _impl_.block_max_bytes_;
}
inline void HashedParams::_internal_set_block_max_bytes(::int64_t value) {
  ;
  _impl_.block_max_bytes_ = value;
}

// int64 block_max_gas = 2 [json_name = "blockMaxGas"];
inline void HashedParams::clear_block_max_gas() {
  _impl_.block_max_gas_ = ::int64_t{0};
}
inline ::int64_t HashedParams::block_max_gas() const {
  // @@protoc_insertion_point(field_get:tendermint.types.HashedParams.block_max_gas)
  return _internal_block_max_gas();
}
inline void HashedParams::set_block_max_gas(::int64_t value) {
  _internal_set_block_max_gas(value);
  // @@protoc_insertion_point(field_set:tendermint.types.HashedParams.block_max_gas)
}
inline ::int64_t HashedParams::_internal_block_max_gas() const {
  return _impl_.block_max_gas_;
}
inline void HashedParams::_internal_set_block_max_gas(::int64_t value) {
  ;
  _impl_.block_max_gas_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2ftypes_2fparams_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/types/canonical.proto

#include "tendermint/types/canonical.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace types {
template <typename>
PROTOBUF_CONSTEXPR CanonicalBlockID::CanonicalBlockID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.part_set_header_)*/nullptr} {}
struct CanonicalBlockIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanonicalBlockIDDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanonicalBlockIDDefaultTypeInternal() {}
  union {
    CanonicalBlockID _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanonicalBlockIDDefaultTypeInternal _CanonicalBlockID_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CanonicalPartSetHeader::CanonicalPartSetHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CanonicalPartSetHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanonicalPartSetHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanonicalPartSetHeaderDefaultTypeInternal() {}
  union {
    CanonicalPartSetHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanonicalPartSetHeaderDefaultTypeInternal _CanonicalPartSetHeader_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CanonicalProposal::CanonicalProposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ ::int64_t{0}

  , /*decltype(_impl_.pol_round_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct CanonicalProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanonicalProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanonicalProposalDefaultTypeInternal() {}
  union {
    CanonicalProposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanonicalProposalDefaultTypeInternal _CanonicalProposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CanonicalVote::CanonicalVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ ::int64_t{0}

  , /*decltype(_impl_.type_)*/ 0
} {}
struct CanonicalVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanonicalVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanonicalVoteDefaultTypeInternal() {}
  union {
    CanonicalVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanonicalVoteDefaultTypeInternal _CanonicalVote_default_instance_;
}  // namespace types
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[4];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2ftypes_2fcanonical_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2ftypes_2fcanonical_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2ftypes_2fcanonical_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalBlockID, _impl_.part_set_header_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalPartSetHeader, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.pol_round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalProposal, _impl_.chain_id_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::tendermint::types::CanonicalVote, _impl_.chain_id_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::tendermint::types::CanonicalBlockID)},
        { 12, -1, -1, sizeof(::tendermint::types::CanonicalPartSetHeader)},
        { 22, 37, -1, sizeof(::tendermint::types::CanonicalProposal)},
        { 44, 58, -1, sizeof(::tendermint::types::CanonicalVote)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::types::_CanonicalBlockID_default_instance_._instance,
    &::tendermint::types::_CanonicalPartSetHeader_default_instance_._instance,
    &::tendermint::types::_CanonicalProposal_default_instance_._instance,
    &::tendermint::types::_CanonicalVote_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2ftypes_2fcanonical_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n tendermint/types/canonical.proto\022\020tend"
    "ermint.types\032\024gogoproto/gogo.proto\032\034tend"
    "ermint/types/types.proto\032\037google/protobu"
    "f/timestamp.proto\"~\n\020CanonicalBlockID\022\022\n"
    "\004hash\030\001 \001(\014R\004hash\022V\n\017part_set_header\030\002 \001"
    "(\0132(.tendermint.types.CanonicalPartSetHe"
    "aderB\004\310\336\037\000R\rpartSetHeader\"B\n\026CanonicalPa"
    "rtSetHeader\022\024\n\005total\030\001 \001(\rR\005total\022\022\n\004has"
    "h\030\002 \001(\014R\004hash\"\331\002\n\021CanonicalProposal\0223\n\004t"
    "ype\030\001 \001(\0162\037.tendermint.types.SignedMsgTy"
    "peR\004type\022\026\n\006height\030\002 \001(\020R\006height\022\024\n\005roun"
    "d\030\003 \001(\020R\005round\022)\n\tpol_round\030\004 \001(\003B\014\342\336\037\010P"
    "OLRoundR\010polRound\022J\n\010block_id\030\005 \001(\0132\".te"
    "ndermint.types.CanonicalBlockIDB\013\342\336\037\007Blo"
    "ckIDR\007blockId\022B\n\ttimestamp\030\006 \001(\0132\032.googl"
    "e.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\ttimestam"
    "p\022&\n\010chain_id\030\007 \001(\tB\013\342\336\037\007ChainIDR\007chainI"
    "d\"\252\002\n\rCanonicalVote\0223\n\004type\030\001 \001(\0162\037.tend"
    "ermint.types.SignedMsgTypeR\004type\022\026\n\006heig"
    "ht\030\002 \001(\020R\006height\022\024\n\005round\030\003 \001(\020R\005round\022J"
    "\n\010block_id\030\004 \001(\0132\".tendermint.types.Cano"
    "nicalBlockIDB\013\342\336\037\007BlockIDR\007blockId\022B\n\tti"
    "mestamp\030\005 \001(\0132\032.google.protobuf.Timestam"
    "pB\010\310\336\037\000\220\337\037\001R\ttimestamp\022&\n\010chain_id\030\006 \001(\t"
    "B\013\342\336\037\007ChainIDR\007chainIdB\274\001\n\024com.tendermin"
    "t.typesB\016CanonicalProtoP\001Z3github.com/co"
    "metbft/cometbft/proto/tendermint/types\242\002"
    "\003TTX\252\002\020Tendermint.Types\312\002\020Tendermint\\Typ"
    "es\342\002\034Tendermint\\Types\\GPBMetadata\352\002\021Tend"
    "ermint::Typesb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2ftypes_2fcanonical_2eproto = {
    false,
    false,
    1181,
    descriptor_table_protodef_tendermint_2ftypes_2fcanonical_2eproto,
    "tendermint/types/canonical.proto",
    &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
    descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_deps,
    3,
    4,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2ftypes_2fcanonical_2eproto::offsets,
    file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto,
    file_level_enum_descriptors_tendermint_2ftypes_2fcanonical_2eproto,
    file_level_service_descriptors_tendermint_2ftypes_2fcanonical_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter() {
  return &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2ftypes_2fcanonical_2eproto(&descriptor_table_tendermint_2ftypes_2fcanonical_2eproto);
namespace tendermint {
namespace types {
// ===================================================================

class CanonicalBlockID::_Internal {
 public:
  using HasBits = decltype(std::declval<CanonicalBlockID>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CanonicalBlockID, _impl_._has_bits_);
  static const ::tendermint::types::CanonicalPartSetHeader& part_set_header(const CanonicalBlockID* msg);
  static void set_has_part_set_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::CanonicalPartSetHeader&
CanonicalBlockID::_Internal::part_set_header(const CanonicalBlockID* msg) {
  return *msg->_impl_.part_set_header_;
}
CanonicalBlockID::CanonicalBlockID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalBlockID)
}
CanonicalBlockID::CanonicalBlockID(const CanonicalBlockID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanonicalBlockID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.part_set_header_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.part_set_header_ = new ::tendermint::types::CanonicalPartSetHeader(*from._impl_.part_set_header_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalBlockID)
}

inline void CanonicalBlockID::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_) {}

    , decltype(_impl_.part_set_header_){nullptr}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanonicalBlockID::~CanonicalBlockID() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalBlockID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanonicalBlockID::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  if (this != internal_default_instance()) delete _impl_.part_set_header_;
}

void CanonicalBlockID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanonicalBlockID::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalBlockID)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.part_set_header_ != nullptr);
    _impl_.part_set_header_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalBlockID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes hash = 1 [json_name = "hash"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_part_set_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanonicalBlockID::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalBlockID)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::part_set_header(this),
        _Internal::part_set_header(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalBlockID)
  return target;
}

::size_t CanonicalBlockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalBlockID)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // .tendermint.types.CanonicalPartSetHeader part_set_header = 2 [json_name = "partSetHeader", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.part_set_header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalBlockID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanonicalBlockID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalBlockID::GetClassData() const { return &_class_data_; }


void CanonicalBlockID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanonicalBlockID*>(&to_msg);
  auto& from = static_cast<const CanonicalBlockID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalBlockID)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_part_set_header()->::tendermint::types::CanonicalPartSetHeader::MergeFrom(
        from._internal_part_set_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalBlockID::CopyFrom(const CanonicalBlockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalBlockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalBlockID::IsInitialized() const {
  return true;
}

void CanonicalBlockID::InternalSwap(CanonicalBlockID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  swap(_impl_.part_set_header_, other->_impl_.part_set_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalBlockID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[0]);
}
// ===================================================================

class CanonicalPartSetHeader::_Internal {
 public:
};

CanonicalPartSetHeader::CanonicalPartSetHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalPartSetHeader)
}
CanonicalPartSetHeader::CanonicalPartSetHeader(const CanonicalPartSetHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanonicalPartSetHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.total_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.total_ = from._impl_.total_;
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalPartSetHeader)
}

inline void CanonicalPartSetHeader::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.total_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanonicalPartSetHeader::~CanonicalPartSetHeader() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalPartSetHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanonicalPartSetHeader::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
}

void CanonicalPartSetHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanonicalPartSetHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalPartSetHeader)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.total_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalPartSetHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 2 [json_name = "hash"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanonicalPartSetHeader::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalPartSetHeader)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_total(), target);
  }

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalPartSetHeader)
  return target;
}

::size_t CanonicalPartSetHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalPartSetHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // uint32 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_total());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalPartSetHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanonicalPartSetHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalPartSetHeader::GetClassData() const { return &_class_data_; }


void CanonicalPartSetHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanonicalPartSetHeader*>(&to_msg);
  auto& from = static_cast<const CanonicalPartSetHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalPartSetHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalPartSetHeader::CopyFrom(const CanonicalPartSetHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalPartSetHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalPartSetHeader::IsInitialized() const {
  return true;
}

void CanonicalPartSetHeader::InternalSwap(CanonicalPartSetHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);

  swap(_impl_.total_, other->_impl_.total_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalPartSetHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[1]);
}
// ===================================================================

class CanonicalProposal::_Internal {
 public:
  using HasBits = decltype(std::declval<CanonicalProposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CanonicalProposal, _impl_._has_bits_);
  static const ::tendermint::types::CanonicalBlockID& block_id(const CanonicalProposal* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CanonicalProposal* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::CanonicalBlockID&
CanonicalProposal::_Internal::block_id(const CanonicalProposal* msg) {
  return *msg->_impl_.block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CanonicalProposal::_Internal::timestamp(const CanonicalProposal* msg) {
  return *msg->_impl_.timestamp_;
}
void CanonicalProposal::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CanonicalProposal::CanonicalProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalProposal)
}
CanonicalProposal::CanonicalProposal(const CanonicalProposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanonicalProposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.pol_round_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::CanonicalBlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalProposal)
}

inline void CanonicalProposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { ::int64_t{0} }

    , decltype(_impl_.pol_round_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanonicalProposal::~CanonicalProposal() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalProposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanonicalProposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void CanonicalProposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanonicalProposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalProposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalProposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed64 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 pol_round = 4 [json_name = "polRound", (.gogoproto.customname) = "POLRound"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.CanonicalBlockID block_id = 5 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 7 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.types.CanonicalProposal.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanonicalProposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalProposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // sfixed64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        2, this->_internal_height(), target);
  }

  // sfixed64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        3, this->_internal_round(), target);
  }

  // int64 pol_round = 4 [json_name = "polRound", (.gogoproto.customname) = "POLRound"];
  if (this->_internal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_pol_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.CanonicalBlockID block_id = 5 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 7 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.types.CanonicalProposal.chain_id");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalProposal)
  return target;
}

::size_t CanonicalProposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalProposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 7 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.CanonicalBlockID block_id = 5 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // sfixed64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 9;
  }

  // sfixed64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += 9;
  }

  // int64 pol_round = 4 [json_name = "polRound", (.gogoproto.customname) = "POLRound"];
  if (this->_internal_pol_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_pol_round());
  }

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalProposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanonicalProposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalProposal::GetClassData() const { return &_class_data_; }


void CanonicalProposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanonicalProposal*>(&to_msg);
  auto& from = static_cast<const CanonicalProposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalProposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::CanonicalBlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_pol_round() != 0) {
    _this->_internal_set_pol_round(from._internal_pol_round());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalProposal::CopyFrom(const CanonicalProposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalProposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalProposal::IsInitialized() const {
  return true;
}

void CanonicalProposal::InternalSwap(CanonicalProposal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanonicalProposal, _impl_.type_)
      + sizeof(CanonicalProposal::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CanonicalProposal, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalProposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[2]);
}
// ===================================================================

class CanonicalVote::_Internal {
 public:
  using HasBits = decltype(std::declval<CanonicalVote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CanonicalVote, _impl_._has_bits_);
  static const ::tendermint::types::CanonicalBlockID& block_id(const CanonicalVote* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CanonicalVote* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::CanonicalBlockID&
CanonicalVote::_Internal::block_id(const CanonicalVote* msg) {
  return *msg->_impl_.block_id_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CanonicalVote::_Internal::timestamp(const CanonicalVote* msg) {
  return *msg->_impl_.timestamp_;
}
void CanonicalVote::clear_timestamp() {
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CanonicalVote::CanonicalVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.types.CanonicalVote)
}
CanonicalVote::CanonicalVote(const CanonicalVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CanonicalVote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::CanonicalBlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.timestamp_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.types.CanonicalVote)
}

inline void CanonicalVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.timestamp_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { ::int64_t{0} }

    , decltype(_impl_.type_) { 0 }

  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanonicalVote::~CanonicalVote() {
  // @@protoc_insertion_point(destructor:tendermint.types.CanonicalVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanonicalVote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.timestamp_;
}

void CanonicalVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanonicalVote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.types.CanonicalVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CanonicalVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 17)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // sfixed64 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 25)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::int64_t>(ptr);
          ptr += sizeof(::int64_t);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.CanonicalBlockID block_id = 4 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 6 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.types.CanonicalVote.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanonicalVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.types.CanonicalVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // sfixed64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        2, this->_internal_height(), target);
  }

  // sfixed64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSFixed64ToArray(
        3, this->_internal_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.CanonicalBlockID block_id = 4 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 6 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.types.CanonicalVote.chain_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.types.CanonicalVote)
  return target;
}

::size_t CanonicalVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.types.CanonicalVote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 6 [json_name = "chainId", (.gogoproto.customname) = "ChainID"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.CanonicalBlockID block_id = 4 [json_name = "blockId", (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .google.protobuf.Timestamp timestamp = 5 [json_name = "timestamp", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.timestamp_);
    }

  }
  // sfixed64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += 9;
  }

  // sfixed64 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += 9;
  }

  // .tendermint.types.SignedMsgType type = 1 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CanonicalVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CanonicalVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CanonicalVote::GetClassData() const { return &_class_data_; }


void CanonicalVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CanonicalVote*>(&to_msg);
  auto& from = static_cast<const CanonicalVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.types.CanonicalVote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::CanonicalBlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CanonicalVote::CopyFrom(const CanonicalVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.types.CanonicalVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanonicalVote::IsInitialized() const {
  return true;
}

void CanonicalVote::InternalSwap(CanonicalVote* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CanonicalVote, _impl_.type_)
      + sizeof(CanonicalVote::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(CanonicalVote, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CanonicalVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_getter, &descriptor_table_tendermint_2ftypes_2fcanonical_2eproto_once,
      file_level_metadata_tendermint_2ftypes_2fcanonical_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalBlockID*
Arena::CreateMaybeMessage< ::tendermint::types::CanonicalBlockID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalBlockID >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalPartSetHeader*
Arena::CreateMaybeMessage< ::tendermint::types::CanonicalPartSetHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalPartSetHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalProposal*
Arena::CreateMaybeMessage< ::tendermint::types::CanonicalProposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalProposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::types::CanonicalVote*
Arena::CreateMaybeMessage< ::tendermint::types::CanonicalVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::types::CanonicalVote >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

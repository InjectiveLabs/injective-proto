// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/mempool/types.proto

#include "tendermint/mempool/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace mempool {
template <typename>
PROTOBUF_CONSTEXPR Txs::Txs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.txs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxsDefaultTypeInternal() {}
  union {
    Txs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxsDefaultTypeInternal _Txs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace mempool
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fmempool_2ftypes_2eproto[2];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fmempool_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fmempool_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fmempool_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Txs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Txs, _impl_.txs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Message, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::mempool::Txs)},
        { 9, -1, -1, sizeof(::tendermint::mempool::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::mempool::_Txs_default_instance_._instance,
    &::tendermint::mempool::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fmempool_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036tendermint/mempool/types.proto\022\022tender"
    "mint.mempool\"\027\n\003Txs\022\020\n\003txs\030\001 \003(\014R\003txs\"=\n"
    "\007Message\022+\n\003txs\030\001 \001(\0132\027.tendermint.mempo"
    "ol.TxsH\000R\003txsB\005\n\003sumB\304\001\n\026com.tendermint."
    "mempoolB\nTypesProtoP\001Z5github.com/cometb"
    "ft/cometbft/proto/tendermint/mempool\242\002\003T"
    "MX\252\002\022Tendermint.Mempool\312\002\022Tendermint\\Mem"
    "pool\342\002\036Tendermint\\Mempool\\GPBMetadata\352\002\023"
    "Tendermint::Mempoolb\006proto3"
};
static ::absl::once_flag descriptor_table_tendermint_2fmempool_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fmempool_2ftypes_2eproto = {
    false,
    false,
    347,
    descriptor_table_protodef_tendermint_2fmempool_2ftypes_2eproto,
    "tendermint/mempool/types.proto",
    &descriptor_table_tendermint_2fmempool_2ftypes_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fmempool_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fmempool_2ftypes_2eproto,
    file_level_enum_descriptors_tendermint_2fmempool_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fmempool_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fmempool_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fmempool_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fmempool_2ftypes_2eproto(&descriptor_table_tendermint_2fmempool_2ftypes_2eproto);
namespace tendermint {
namespace mempool {
// ===================================================================

class Txs::_Internal {
 public:
};

Txs::Txs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.mempool.Txs)
}
Txs::Txs(const Txs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Txs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){from._impl_.txs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.mempool.Txs)
}

inline void Txs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.txs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Txs::~Txs() {
  // @@protoc_insertion_point(destructor:tendermint.mempool.Txs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Txs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_txs()->~RepeatedPtrField();
}

void Txs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Txs::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.mempool.Txs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_txs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Txs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes txs = 1 [json_name = "txs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_txs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Txs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.mempool.Txs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes txs = 1 [json_name = "txs"];
  for (int i = 0, n = this->_internal_txs_size(); i < n; ++i) {
    const auto& s = this->_internal_txs(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.mempool.Txs)
  return target;
}

::size_t Txs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.mempool.Txs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes txs = 1 [json_name = "txs"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_txs().size());
  for (int i = 0, n = _internal_txs().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_txs().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Txs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Txs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Txs::GetClassData() const { return &_class_data_; }


void Txs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Txs*>(&to_msg);
  auto& from = static_cast<const Txs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.mempool.Txs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_txs()->MergeFrom(from._internal_txs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Txs::CopyFrom(const Txs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.mempool.Txs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Txs::IsInitialized() const {
  return true;
}

void Txs::InternalSwap(Txs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_txs()->InternalSwap(
      other->_internal_mutable_txs());
}

::PROTOBUF_NAMESPACE_ID::Metadata Txs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fmempool_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fmempool_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fmempool_2ftypes_2eproto[0]);
}
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::mempool::Message, _impl_._oneof_case_);
  static const ::tendermint::mempool::Txs& txs(const Message* msg);
};

const ::tendermint::mempool::Txs&
Message::_Internal::txs(const Message* msg) {
  return *msg->_impl_.sum_.txs_;
}
void Message::set_allocated_txs(::tendermint::mempool::Txs* txs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (txs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(txs);
    if (message_arena != submessage_arena) {
      txs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, txs, submessage_arena);
    }
    set_has_txs();
    _impl_.sum_.txs_ = txs;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.mempool.Message.txs)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.mempool.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kTxs: {
      _this->_internal_mutable_txs()->::tendermint::mempool::Txs::MergeFrom(
          from._internal_txs());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.mempool.Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.mempool.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.mempool.Message)
  switch (sum_case()) {
    case kTxs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.txs_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.mempool.Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.mempool.Txs txs = 1 [json_name = "txs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_txs(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.mempool.Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tendermint.mempool.Txs txs = 1 [json_name = "txs"];
  if (sum_case() == kTxs) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::txs(this),
        _Internal::txs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.mempool.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.mempool.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.mempool.Txs txs = 1 [json_name = "txs"];
    case kTxs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.txs_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.mempool.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kTxs: {
      _this->_internal_mutable_txs()->::tendermint::mempool::Txs::MergeFrom(
          from._internal_txs());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.mempool.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fmempool_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fmempool_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fmempool_2ftypes_2eproto[1]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mempool
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::mempool::Txs*
Arena::CreateMaybeMessage< ::tendermint::mempool::Txs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::mempool::Txs >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::mempool::Message*
Arena::CreateMaybeMessage< ::tendermint::mempool::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::mempool::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tendermint/abci/types.proto

#include "tendermint/abci/types.pb.h"
#include "tendermint/abci/types.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tendermint {
namespace abci {

static const char* ABCIApplication_method_names[] = {
  "/tendermint.abci.ABCIApplication/Echo",
  "/tendermint.abci.ABCIApplication/Flush",
  "/tendermint.abci.ABCIApplication/Info",
  "/tendermint.abci.ABCIApplication/DeliverTx",
  "/tendermint.abci.ABCIApplication/CheckTx",
  "/tendermint.abci.ABCIApplication/Query",
  "/tendermint.abci.ABCIApplication/Commit",
  "/tendermint.abci.ABCIApplication/InitChain",
  "/tendermint.abci.ABCIApplication/BeginBlock",
  "/tendermint.abci.ABCIApplication/EndBlock",
  "/tendermint.abci.ABCIApplication/ListSnapshots",
  "/tendermint.abci.ABCIApplication/OfferSnapshot",
  "/tendermint.abci.ABCIApplication/LoadSnapshotChunk",
  "/tendermint.abci.ABCIApplication/ApplySnapshotChunk",
  "/tendermint.abci.ABCIApplication/PrepareProposal",
  "/tendermint.abci.ABCIApplication/ProcessProposal",
};

std::unique_ptr< ABCIApplication::Stub> ABCIApplication::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ABCIApplication::Stub> stub(new ABCIApplication::Stub(channel, options));
  return stub;
}

ABCIApplication::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Echo_(ABCIApplication_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Flush_(ABCIApplication_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Info_(ABCIApplication_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeliverTx_(ABCIApplication_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckTx_(ABCIApplication_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Query_(ABCIApplication_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(ABCIApplication_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitChain_(ABCIApplication_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BeginBlock_(ABCIApplication_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EndBlock_(ABCIApplication_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSnapshots_(ABCIApplication_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OfferSnapshot_(ABCIApplication_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSnapshotChunk_(ABCIApplication_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ApplySnapshotChunk_(ABCIApplication_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PrepareProposal_(ABCIApplication_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProcessProposal_(ABCIApplication_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ABCIApplication::Stub::Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::tendermint::abci::ResponseEcho* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Echo_, context, request, response);
}

void ABCIApplication::Stub::async::Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Echo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>* ABCIApplication::Stub::PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseEcho, ::tendermint::abci::RequestEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Echo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>* ABCIApplication::Stub::AsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEchoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::tendermint::abci::ResponseFlush* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Flush_, context, request, response);
}

void ABCIApplication::Stub::async::Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Flush_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>* ABCIApplication::Stub::PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseFlush, ::tendermint::abci::RequestFlush, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Flush_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>* ABCIApplication::Stub::AsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFlushRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::tendermint::abci::ResponseInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Info_, context, request, response);
}

void ABCIApplication::Stub::async::Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Info_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>* ABCIApplication::Stub::PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseInfo, ::tendermint::abci::RequestInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Info_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>* ABCIApplication::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::tendermint::abci::ResponseDeliverTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeliverTx_, context, request, response);
}

void ABCIApplication::Stub::async::DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeliverTx_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeliverTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>* ABCIApplication::Stub::PrepareAsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseDeliverTx, ::tendermint::abci::RequestDeliverTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeliverTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>* ABCIApplication::Stub::AsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeliverTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::tendermint::abci::ResponseCheckTx* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckTx_, context, request, response);
}

void ABCIApplication::Stub::async::CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckTx_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckTx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>* ABCIApplication::Stub::PrepareAsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseCheckTx, ::tendermint::abci::RequestCheckTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckTx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>* ABCIApplication::Stub::AsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckTxRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::tendermint::abci::ResponseQuery* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_, context, request, response);
}

void ABCIApplication::Stub::async::Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>* ABCIApplication::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseQuery, ::tendermint::abci::RequestQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>* ABCIApplication::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::tendermint::abci::ResponseCommit* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Commit_, context, request, response);
}

void ABCIApplication::Stub::async::Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Commit_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Commit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>* ABCIApplication::Stub::PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseCommit, ::tendermint::abci::RequestCommit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Commit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>* ABCIApplication::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCommitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::tendermint::abci::ResponseInitChain* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitChain_, context, request, response);
}

void ABCIApplication::Stub::async::InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitChain_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitChain_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>* ABCIApplication::Stub::PrepareAsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseInitChain, ::tendermint::abci::RequestInitChain, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitChain_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>* ABCIApplication::Stub::AsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitChainRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::tendermint::abci::ResponseBeginBlock* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BeginBlock_, context, request, response);
}

void ABCIApplication::Stub::async::BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginBlock_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BeginBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>* ABCIApplication::Stub::PrepareAsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseBeginBlock, ::tendermint::abci::RequestBeginBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BeginBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>* ABCIApplication::Stub::AsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBeginBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::tendermint::abci::ResponseEndBlock* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndBlock_, context, request, response);
}

void ABCIApplication::Stub::async::EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndBlock_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>* ABCIApplication::Stub::PrepareAsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseEndBlock, ::tendermint::abci::RequestEndBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>* ABCIApplication::Stub::AsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEndBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::tendermint::abci::ResponseListSnapshots* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSnapshots_, context, request, response);
}

void ABCIApplication::Stub::async::ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSnapshots_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>* ABCIApplication::Stub::PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseListSnapshots, ::tendermint::abci::RequestListSnapshots, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSnapshots_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>* ABCIApplication::Stub::AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSnapshotsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::tendermint::abci::ResponseOfferSnapshot* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_OfferSnapshot_, context, request, response);
}

void ABCIApplication::Stub::async::OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OfferSnapshot_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_OfferSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>* ABCIApplication::Stub::PrepareAsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseOfferSnapshot, ::tendermint::abci::RequestOfferSnapshot, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_OfferSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>* ABCIApplication::Stub::AsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOfferSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::tendermint::abci::ResponseLoadSnapshotChunk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadSnapshotChunk_, context, request, response);
}

void ABCIApplication::Stub::async::LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSnapshotChunk_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadSnapshotChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>* ABCIApplication::Stub::PrepareAsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseLoadSnapshotChunk, ::tendermint::abci::RequestLoadSnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadSnapshotChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>* ABCIApplication::Stub::AsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadSnapshotChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::tendermint::abci::ResponseApplySnapshotChunk* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplySnapshotChunk_, context, request, response);
}

void ABCIApplication::Stub::async::ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplySnapshotChunk_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplySnapshotChunk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>* ABCIApplication::Stub::PrepareAsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseApplySnapshotChunk, ::tendermint::abci::RequestApplySnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplySnapshotChunk_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>* ABCIApplication::Stub::AsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplySnapshotChunkRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::tendermint::abci::ResponsePrepareProposal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PrepareProposal_, context, request, response);
}

void ABCIApplication::Stub::async::PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposal_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PrepareProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>* ABCIApplication::Stub::PrepareAsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponsePrepareProposal, ::tendermint::abci::RequestPrepareProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PrepareProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>* ABCIApplication::Stub::AsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPrepareProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ABCIApplication::Stub::ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::tendermint::abci::ResponseProcessProposal* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProcessProposal_, context, request, response);
}

void ABCIApplication::Stub::async::ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessProposal_, context, request, response, std::move(f));
}

void ABCIApplication::Stub::async::ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProcessProposal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>* ABCIApplication::Stub::PrepareAsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tendermint::abci::ResponseProcessProposal, ::tendermint::abci::RequestProcessProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProcessProposal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>* ABCIApplication::Stub::AsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProcessProposalRaw(context, request, cq);
  result->StartCall();
  return result;
}

ABCIApplication::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestEcho* req,
             ::tendermint::abci::ResponseEcho* resp) {
               return service->Echo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestFlush* req,
             ::tendermint::abci::ResponseFlush* resp) {
               return service->Flush(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestInfo* req,
             ::tendermint::abci::ResponseInfo* resp) {
               return service->Info(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestDeliverTx* req,
             ::tendermint::abci::ResponseDeliverTx* resp) {
               return service->DeliverTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestCheckTx* req,
             ::tendermint::abci::ResponseCheckTx* resp) {
               return service->CheckTx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestQuery* req,
             ::tendermint::abci::ResponseQuery* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestCommit* req,
             ::tendermint::abci::ResponseCommit* resp) {
               return service->Commit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestInitChain* req,
             ::tendermint::abci::ResponseInitChain* resp) {
               return service->InitChain(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestBeginBlock* req,
             ::tendermint::abci::ResponseBeginBlock* resp) {
               return service->BeginBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestEndBlock* req,
             ::tendermint::abci::ResponseEndBlock* resp) {
               return service->EndBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestListSnapshots* req,
             ::tendermint::abci::ResponseListSnapshots* resp) {
               return service->ListSnapshots(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestOfferSnapshot* req,
             ::tendermint::abci::ResponseOfferSnapshot* resp) {
               return service->OfferSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestLoadSnapshotChunk* req,
             ::tendermint::abci::ResponseLoadSnapshotChunk* resp) {
               return service->LoadSnapshotChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestApplySnapshotChunk* req,
             ::tendermint::abci::ResponseApplySnapshotChunk* resp) {
               return service->ApplySnapshotChunk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestPrepareProposal* req,
             ::tendermint::abci::ResponsePrepareProposal* resp) {
               return service->PrepareProposal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ABCIApplication_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ABCIApplication::Service, ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ABCIApplication::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tendermint::abci::RequestProcessProposal* req,
             ::tendermint::abci::ResponseProcessProposal* resp) {
               return service->ProcessProposal(ctx, req, resp);
             }, this)));
}

ABCIApplication::Service::~Service() {
}

::grpc::Status ABCIApplication::Service::Echo(::grpc::ServerContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::Flush(::grpc::ServerContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::Info(::grpc::ServerContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::DeliverTx(::grpc::ServerContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::CheckTx(::grpc::ServerContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::Query(::grpc::ServerContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::Commit(::grpc::ServerContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::InitChain(::grpc::ServerContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::BeginBlock(::grpc::ServerContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::EndBlock(::grpc::ServerContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::ListSnapshots(::grpc::ServerContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::OfferSnapshot(::grpc::ServerContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::LoadSnapshotChunk(::grpc::ServerContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::ApplySnapshotChunk(::grpc::ServerContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::PrepareProposal(::grpc::ServerContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ABCIApplication::Service::ProcessProposal(::grpc::ServerContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tendermint
}  // namespace abci


// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tendermint/abci/types.proto
#ifndef GRPC_tendermint_2fabci_2ftypes_2eproto__INCLUDED
#define GRPC_tendermint_2fabci_2ftypes_2eproto__INCLUDED

#include "tendermint/abci/types.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tendermint {
namespace abci {

// ----------------------------------------
// Service Definition
//
class ABCIApplication final {
 public:
  static constexpr char const* service_full_name() {
    return "tendermint.abci.ABCIApplication";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::tendermint::abci::ResponseEcho* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>> AsyncEcho(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    virtual ::grpc::Status Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::tendermint::abci::ResponseFlush* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>> AsyncFlush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    virtual ::grpc::Status Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::tendermint::abci::ResponseInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>> AsyncInfo(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::tendermint::abci::ResponseDeliverTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>> AsyncDeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>>(AsyncDeliverTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>> PrepareAsyncDeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>>(PrepareAsyncDeliverTxRaw(context, request, cq));
    }
    virtual ::grpc::Status CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::tendermint::abci::ResponseCheckTx* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>> AsyncCheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>>(AsyncCheckTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>> PrepareAsyncCheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>>(PrepareAsyncCheckTxRaw(context, request, cq));
    }
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::tendermint::abci::ResponseQuery* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>> AsyncQuery(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::tendermint::abci::ResponseCommit* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>> AsyncCommit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    virtual ::grpc::Status InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::tendermint::abci::ResponseInitChain* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>> AsyncInitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>>(AsyncInitChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>> PrepareAsyncInitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>>(PrepareAsyncInitChainRaw(context, request, cq));
    }
    virtual ::grpc::Status BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::tendermint::abci::ResponseBeginBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>> AsyncBeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>>(AsyncBeginBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>> PrepareAsyncBeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>>(PrepareAsyncBeginBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::tendermint::abci::ResponseEndBlock* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>> AsyncEndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>>(AsyncEndBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>> PrepareAsyncEndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>>(PrepareAsyncEndBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::tendermint::abci::ResponseListSnapshots* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>> AsyncListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    virtual ::grpc::Status OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::tendermint::abci::ResponseOfferSnapshot* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>> AsyncOfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>>(AsyncOfferSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>> PrepareAsyncOfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>>(PrepareAsyncOfferSnapshotRaw(context, request, cq));
    }
    virtual ::grpc::Status LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::tendermint::abci::ResponseLoadSnapshotChunk* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>> AsyncLoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>>(AsyncLoadSnapshotChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>> PrepareAsyncLoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>>(PrepareAsyncLoadSnapshotChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::tendermint::abci::ResponseApplySnapshotChunk* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>> AsyncApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>>(AsyncApplySnapshotChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>> PrepareAsyncApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>>(PrepareAsyncApplySnapshotChunkRaw(context, request, cq));
    }
    virtual ::grpc::Status PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::tendermint::abci::ResponsePrepareProposal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>> AsyncPrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>>(AsyncPrepareProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>> PrepareAsyncPrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>>(PrepareAsyncPrepareProposalRaw(context, request, cq));
    }
    virtual ::grpc::Status ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::tendermint::abci::ResponseProcessProposal* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>> AsyncProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>>(AsyncProcessProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>> PrepareAsyncProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>>(PrepareAsyncProcessProposalRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, std::function<void(::grpc::Status)>) = 0;
      virtual void OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>* AsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEcho>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>* AsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseFlush>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInfo>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>* AsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseDeliverTx>* PrepareAsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>* AsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCheckTx>* PrepareAsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>* AsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseQuery>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>* AsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseCommit>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>* AsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseInitChain>* PrepareAsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>* AsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseBeginBlock>* PrepareAsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>* AsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseEndBlock>* PrepareAsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseListSnapshots>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>* AsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseOfferSnapshot>* PrepareAsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>* AsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseLoadSnapshotChunk>* PrepareAsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>* AsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseApplySnapshotChunk>* PrepareAsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>* AsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponsePrepareProposal>* PrepareAsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>* AsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tendermint::abci::ResponseProcessProposal>* PrepareAsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::tendermint::abci::ResponseEcho* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>> AsyncEcho(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>>(AsyncEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>> PrepareAsyncEcho(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>>(PrepareAsyncEchoRaw(context, request, cq));
    }
    ::grpc::Status Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::tendermint::abci::ResponseFlush* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>> AsyncFlush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>>(AsyncFlushRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>> PrepareAsyncFlush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>>(PrepareAsyncFlushRaw(context, request, cq));
    }
    ::grpc::Status Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::tendermint::abci::ResponseInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>> AsyncInfo(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>>(AsyncInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>> PrepareAsyncInfo(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>>(PrepareAsyncInfoRaw(context, request, cq));
    }
    ::grpc::Status DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::tendermint::abci::ResponseDeliverTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>> AsyncDeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>>(AsyncDeliverTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>> PrepareAsyncDeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>>(PrepareAsyncDeliverTxRaw(context, request, cq));
    }
    ::grpc::Status CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::tendermint::abci::ResponseCheckTx* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>> AsyncCheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>>(AsyncCheckTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>> PrepareAsyncCheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>>(PrepareAsyncCheckTxRaw(context, request, cq));
    }
    ::grpc::Status Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::tendermint::abci::ResponseQuery* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>> AsyncQuery(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::tendermint::abci::ResponseCommit* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>> AsyncCommit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    ::grpc::Status InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::tendermint::abci::ResponseInitChain* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>> AsyncInitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>>(AsyncInitChainRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>> PrepareAsyncInitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>>(PrepareAsyncInitChainRaw(context, request, cq));
    }
    ::grpc::Status BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::tendermint::abci::ResponseBeginBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>> AsyncBeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>>(AsyncBeginBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>> PrepareAsyncBeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>>(PrepareAsyncBeginBlockRaw(context, request, cq));
    }
    ::grpc::Status EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::tendermint::abci::ResponseEndBlock* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>> AsyncEndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>>(AsyncEndBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>> PrepareAsyncEndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>>(PrepareAsyncEndBlockRaw(context, request, cq));
    }
    ::grpc::Status ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::tendermint::abci::ResponseListSnapshots* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>> AsyncListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>>(AsyncListSnapshotsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>> PrepareAsyncListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>>(PrepareAsyncListSnapshotsRaw(context, request, cq));
    }
    ::grpc::Status OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::tendermint::abci::ResponseOfferSnapshot* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>> AsyncOfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>>(AsyncOfferSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>> PrepareAsyncOfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>>(PrepareAsyncOfferSnapshotRaw(context, request, cq));
    }
    ::grpc::Status LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::tendermint::abci::ResponseLoadSnapshotChunk* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>> AsyncLoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>>(AsyncLoadSnapshotChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>> PrepareAsyncLoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>>(PrepareAsyncLoadSnapshotChunkRaw(context, request, cq));
    }
    ::grpc::Status ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::tendermint::abci::ResponseApplySnapshotChunk* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>> AsyncApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>>(AsyncApplySnapshotChunkRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>> PrepareAsyncApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>>(PrepareAsyncApplySnapshotChunkRaw(context, request, cq));
    }
    ::grpc::Status PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::tendermint::abci::ResponsePrepareProposal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>> AsyncPrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>>(AsyncPrepareProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>> PrepareAsyncPrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>>(PrepareAsyncPrepareProposalRaw(context, request, cq));
    }
    ::grpc::Status ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::tendermint::abci::ResponseProcessProposal* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>> AsyncProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>>(AsyncProcessProposalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>> PrepareAsyncProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>>(PrepareAsyncProcessProposalRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, std::function<void(::grpc::Status)>) override;
      void Echo(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, std::function<void(::grpc::Status)>) override;
      void Flush(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, std::function<void(::grpc::Status)>) override;
      void Info(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, std::function<void(::grpc::Status)>) override;
      void DeliverTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, std::function<void(::grpc::Status)>) override;
      void CheckTx(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, std::function<void(::grpc::Status)>) override;
      void Commit(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, std::function<void(::grpc::Status)>) override;
      void InitChain(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response, ::grpc::ClientUnaryReactor* reactor) override;
      void BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, std::function<void(::grpc::Status)>) override;
      void BeginBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, std::function<void(::grpc::Status)>) override;
      void EndBlock(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, std::function<void(::grpc::Status)>) override;
      void ListSnapshots(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response, ::grpc::ClientUnaryReactor* reactor) override;
      void OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, std::function<void(::grpc::Status)>) override;
      void OfferSnapshot(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response, ::grpc::ClientUnaryReactor* reactor) override;
      void LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, std::function<void(::grpc::Status)>) override;
      void LoadSnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, std::function<void(::grpc::Status)>) override;
      void ApplySnapshotChunk(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, std::function<void(::grpc::Status)>) override;
      void PrepareProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, std::function<void(::grpc::Status)>) override;
      void ProcessProposal(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>* AsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEcho>* PrepareAsyncEchoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEcho& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>* AsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseFlush>* PrepareAsyncFlushRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestFlush& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>* AsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInfo>* PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>* AsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseDeliverTx>* PrepareAsyncDeliverTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestDeliverTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>* AsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCheckTx>* PrepareAsyncCheckTxRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCheckTx& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>* AsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseQuery>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>* AsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseCommit>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestCommit& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>* AsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseInitChain>* PrepareAsyncInitChainRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestInitChain& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>* AsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseBeginBlock>* PrepareAsyncBeginBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestBeginBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>* AsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseEndBlock>* PrepareAsyncEndBlockRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestEndBlock& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>* AsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseListSnapshots>* PrepareAsyncListSnapshotsRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestListSnapshots& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>* AsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseOfferSnapshot>* PrepareAsyncOfferSnapshotRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestOfferSnapshot& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>* AsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseLoadSnapshotChunk>* PrepareAsyncLoadSnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>* AsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseApplySnapshotChunk>* PrepareAsyncApplySnapshotChunkRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestApplySnapshotChunk& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>* AsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponsePrepareProposal>* PrepareAsyncPrepareProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestPrepareProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>* AsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tendermint::abci::ResponseProcessProposal>* PrepareAsyncProcessProposalRaw(::grpc::ClientContext* context, const ::tendermint::abci::RequestProcessProposal& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Echo_;
    const ::grpc::internal::RpcMethod rpcmethod_Flush_;
    const ::grpc::internal::RpcMethod rpcmethod_Info_;
    const ::grpc::internal::RpcMethod rpcmethod_DeliverTx_;
    const ::grpc::internal::RpcMethod rpcmethod_CheckTx_;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
    const ::grpc::internal::RpcMethod rpcmethod_InitChain_;
    const ::grpc::internal::RpcMethod rpcmethod_BeginBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_EndBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSnapshots_;
    const ::grpc::internal::RpcMethod rpcmethod_OfferSnapshot_;
    const ::grpc::internal::RpcMethod rpcmethod_LoadSnapshotChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_ApplySnapshotChunk_;
    const ::grpc::internal::RpcMethod rpcmethod_PrepareProposal_;
    const ::grpc::internal::RpcMethod rpcmethod_ProcessProposal_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Echo(::grpc::ServerContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response);
    virtual ::grpc::Status Flush(::grpc::ServerContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response);
    virtual ::grpc::Status Info(::grpc::ServerContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response);
    virtual ::grpc::Status DeliverTx(::grpc::ServerContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response);
    virtual ::grpc::Status CheckTx(::grpc::ServerContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response);
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response);
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response);
    virtual ::grpc::Status InitChain(::grpc::ServerContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response);
    virtual ::grpc::Status BeginBlock(::grpc::ServerContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response);
    virtual ::grpc::Status EndBlock(::grpc::ServerContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response);
    virtual ::grpc::Status ListSnapshots(::grpc::ServerContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response);
    virtual ::grpc::Status OfferSnapshot(::grpc::ServerContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response);
    virtual ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response);
    virtual ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response);
    virtual ::grpc::Status PrepareProposal(::grpc::ServerContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response);
    virtual ::grpc::Status ProcessProposal(::grpc::ServerContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Echo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::tendermint::abci::RequestEcho* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseEcho>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Flush() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlush(::grpc::ServerContext* context, ::tendermint::abci::RequestFlush* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseFlush>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Info() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::tendermint::abci::RequestInfo* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeliverTx() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeliverTx(::grpc::ServerContext* context, ::tendermint::abci::RequestDeliverTx* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseDeliverTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckTx() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckTx(::grpc::ServerContext* context, ::tendermint::abci::RequestCheckTx* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseCheckTx>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::tendermint::abci::RequestQuery* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseQuery>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::tendermint::abci::RequestCommit* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseCommit>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitChain() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitChain(::grpc::ServerContext* context, ::tendermint::abci::RequestInitChain* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseInitChain>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BeginBlock() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginBlock(::grpc::ServerContext* context, ::tendermint::abci::RequestBeginBlock* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseBeginBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndBlock() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndBlock(::grpc::ServerContext* context, ::tendermint::abci::RequestEndBlock* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseEndBlock>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnapshots(::grpc::ServerContext* context, ::tendermint::abci::RequestListSnapshots* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseListSnapshots>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferSnapshot(::grpc::ServerContext* context, ::tendermint::abci::RequestOfferSnapshot* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseOfferSnapshot>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSnapshotChunk(::grpc::ServerContext* context, ::tendermint::abci::RequestLoadSnapshotChunk* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseLoadSnapshotChunk>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplySnapshotChunk(::grpc::ServerContext* context, ::tendermint::abci::RequestApplySnapshotChunk* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseApplySnapshotChunk>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareProposal(::grpc::ServerContext* context, ::tendermint::abci::RequestPrepareProposal* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponsePrepareProposal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessProposal(::grpc::ServerContext* context, ::tendermint::abci::RequestProcessProposal* request, ::grpc::ServerAsyncResponseWriter< ::tendermint::abci::ResponseProcessProposal>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Echo<WithAsyncMethod_Flush<WithAsyncMethod_Info<WithAsyncMethod_DeliverTx<WithAsyncMethod_CheckTx<WithAsyncMethod_Query<WithAsyncMethod_Commit<WithAsyncMethod_InitChain<WithAsyncMethod_BeginBlock<WithAsyncMethod_EndBlock<WithAsyncMethod_ListSnapshots<WithAsyncMethod_OfferSnapshot<WithAsyncMethod_LoadSnapshotChunk<WithAsyncMethod_ApplySnapshotChunk<WithAsyncMethod_PrepareProposal<WithAsyncMethod_ProcessProposal<Service > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestEcho* request, ::tendermint::abci::ResponseEcho* response) { return this->Echo(context, request, response); }));}
    void SetMessageAllocatorFor_Echo(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Flush() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestFlush* request, ::tendermint::abci::ResponseFlush* response) { return this->Flush(context, request, response); }));}
    void SetMessageAllocatorFor_Flush(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Flush(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Info() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestInfo* request, ::tendermint::abci::ResponseInfo* response) { return this->Info(context, request, response); }));}
    void SetMessageAllocatorFor_Info(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeliverTx() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestDeliverTx* request, ::tendermint::abci::ResponseDeliverTx* response) { return this->DeliverTx(context, request, response); }));}
    void SetMessageAllocatorFor_DeliverTx(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeliverTx(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckTx() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestCheckTx* request, ::tendermint::abci::ResponseCheckTx* response) { return this->CheckTx(context, request, response); }));}
    void SetMessageAllocatorFor_CheckTx(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckTx(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Query() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestQuery* request, ::tendermint::abci::ResponseQuery* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Commit() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestCommit* request, ::tendermint::abci::ResponseCommit* response) { return this->Commit(context, request, response); }));}
    void SetMessageAllocatorFor_Commit(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitChain() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestInitChain* request, ::tendermint::abci::ResponseInitChain* response) { return this->InitChain(context, request, response); }));}
    void SetMessageAllocatorFor_InitChain(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitChain(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_BeginBlock() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestBeginBlock* request, ::tendermint::abci::ResponseBeginBlock* response) { return this->BeginBlock(context, request, response); }));}
    void SetMessageAllocatorFor_BeginBlock(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndBlock() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestEndBlock* request, ::tendermint::abci::ResponseEndBlock* response) { return this->EndBlock(context, request, response); }));}
    void SetMessageAllocatorFor_EndBlock(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestListSnapshots* request, ::tendermint::abci::ResponseListSnapshots* response) { return this->ListSnapshots(context, request, response); }));}
    void SetMessageAllocatorFor_ListSnapshots(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSnapshots(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestOfferSnapshot* request, ::tendermint::abci::ResponseOfferSnapshot* response) { return this->OfferSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_OfferSnapshot(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OfferSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestLoadSnapshotChunk* request, ::tendermint::abci::ResponseLoadSnapshotChunk* response) { return this->LoadSnapshotChunk(context, request, response); }));}
    void SetMessageAllocatorFor_LoadSnapshotChunk(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSnapshotChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestApplySnapshotChunk* request, ::tendermint::abci::ResponseApplySnapshotChunk* response) { return this->ApplySnapshotChunk(context, request, response); }));}
    void SetMessageAllocatorFor_ApplySnapshotChunk(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplySnapshotChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestPrepareProposal* request, ::tendermint::abci::ResponsePrepareProposal* response) { return this->PrepareProposal(context, request, response); }));}
    void SetMessageAllocatorFor_PrepareProposal(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tendermint::abci::RequestProcessProposal* request, ::tendermint::abci::ResponseProcessProposal* response) { return this->ProcessProposal(context, request, response); }));}
    void SetMessageAllocatorFor_ProcessProposal(
        ::grpc::MessageAllocator< ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Echo<WithCallbackMethod_Flush<WithCallbackMethod_Info<WithCallbackMethod_DeliverTx<WithCallbackMethod_CheckTx<WithCallbackMethod_Query<WithCallbackMethod_Commit<WithCallbackMethod_InitChain<WithCallbackMethod_BeginBlock<WithCallbackMethod_EndBlock<WithCallbackMethod_ListSnapshots<WithCallbackMethod_OfferSnapshot<WithCallbackMethod_LoadSnapshotChunk<WithCallbackMethod_ApplySnapshotChunk<WithCallbackMethod_PrepareProposal<WithCallbackMethod_ProcessProposal<Service > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Echo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Flush() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Info() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeliverTx() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckTx() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitChain() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BeginBlock() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndBlock() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Echo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEcho(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Flush() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFlush(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Info() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeliverTx() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeliverTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckTx() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Commit() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitChain() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitChain(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BeginBlock() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBeginBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndBlock() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSnapshots(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOfferSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadSnapshotChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestApplySnapshotChunk(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProcessProposal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Echo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Echo(context, request, response); }));
    }
    ~WithRawCallbackMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Echo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Flush() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Flush(context, request, response); }));
    }
    ~WithRawCallbackMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Flush(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Info() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Info(context, request, response); }));
    }
    ~WithRawCallbackMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Info(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeliverTx() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeliverTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeliverTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckTx() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckTx(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Query() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~WithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Commit() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Commit(context, request, response); }));
    }
    ~WithRawCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitChain() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitChain(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitChain(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_BeginBlock() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BeginBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* BeginBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndBlock() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSnapshots(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSnapshots(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->OfferSnapshot(context, request, response); }));
    }
    ~WithRawCallbackMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* OfferSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadSnapshotChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadSnapshotChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ApplySnapshotChunk(context, request, response); }));
    }
    ~WithRawCallbackMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ApplySnapshotChunk(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PrepareProposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PrepareProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProcessProposal(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProcessProposal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Echo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Echo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestEcho, ::tendermint::abci::ResponseEcho>* streamer) {
                       return this->StreamedEcho(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Echo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Echo(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEcho* /*request*/, ::tendermint::abci::ResponseEcho* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestEcho,::tendermint::abci::ResponseEcho>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Flush : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Flush() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestFlush, ::tendermint::abci::ResponseFlush>* streamer) {
                       return this->StreamedFlush(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Flush() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Flush(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestFlush* /*request*/, ::tendermint::abci::ResponseFlush* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFlush(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestFlush,::tendermint::abci::ResponseFlush>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Info : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Info() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestInfo, ::tendermint::abci::ResponseInfo>* streamer) {
                       return this->StreamedInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Info() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Info(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInfo* /*request*/, ::tendermint::abci::ResponseInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestInfo,::tendermint::abci::ResponseInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeliverTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeliverTx() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestDeliverTx, ::tendermint::abci::ResponseDeliverTx>* streamer) {
                       return this->StreamedDeliverTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeliverTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeliverTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestDeliverTx* /*request*/, ::tendermint::abci::ResponseDeliverTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeliverTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestDeliverTx,::tendermint::abci::ResponseDeliverTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckTx() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestCheckTx, ::tendermint::abci::ResponseCheckTx>* streamer) {
                       return this->StreamedCheckTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckTx(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCheckTx* /*request*/, ::tendermint::abci::ResponseCheckTx* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestCheckTx,::tendermint::abci::ResponseCheckTx>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestQuery, ::tendermint::abci::ResponseQuery>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestQuery* /*request*/, ::tendermint::abci::ResponseQuery* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestQuery,::tendermint::abci::ResponseQuery>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestCommit, ::tendermint::abci::ResponseCommit>* streamer) {
                       return this->StreamedCommit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestCommit* /*request*/, ::tendermint::abci::ResponseCommit* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestCommit,::tendermint::abci::ResponseCommit>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitChain : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitChain() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestInitChain, ::tendermint::abci::ResponseInitChain>* streamer) {
                       return this->StreamedInitChain(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitChain() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitChain(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestInitChain* /*request*/, ::tendermint::abci::ResponseInitChain* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitChain(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestInitChain,::tendermint::abci::ResponseInitChain>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BeginBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BeginBlock() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestBeginBlock, ::tendermint::abci::ResponseBeginBlock>* streamer) {
                       return this->StreamedBeginBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BeginBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BeginBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestBeginBlock* /*request*/, ::tendermint::abci::ResponseBeginBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBeginBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestBeginBlock,::tendermint::abci::ResponseBeginBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndBlock() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestEndBlock, ::tendermint::abci::ResponseEndBlock>* streamer) {
                       return this->StreamedEndBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndBlock(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestEndBlock* /*request*/, ::tendermint::abci::ResponseEndBlock* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestEndBlock,::tendermint::abci::ResponseEndBlock>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSnapshots : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSnapshots() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestListSnapshots, ::tendermint::abci::ResponseListSnapshots>* streamer) {
                       return this->StreamedListSnapshots(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSnapshots() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSnapshots(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestListSnapshots* /*request*/, ::tendermint::abci::ResponseListSnapshots* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSnapshots(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestListSnapshots,::tendermint::abci::ResponseListSnapshots>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_OfferSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_OfferSnapshot() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestOfferSnapshot, ::tendermint::abci::ResponseOfferSnapshot>* streamer) {
                       return this->StreamedOfferSnapshot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_OfferSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status OfferSnapshot(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestOfferSnapshot* /*request*/, ::tendermint::abci::ResponseOfferSnapshot* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOfferSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestOfferSnapshot,::tendermint::abci::ResponseOfferSnapshot>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadSnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadSnapshotChunk() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestLoadSnapshotChunk, ::tendermint::abci::ResponseLoadSnapshotChunk>* streamer) {
                       return this->StreamedLoadSnapshotChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadSnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadSnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestLoadSnapshotChunk* /*request*/, ::tendermint::abci::ResponseLoadSnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadSnapshotChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestLoadSnapshotChunk,::tendermint::abci::ResponseLoadSnapshotChunk>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ApplySnapshotChunk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ApplySnapshotChunk() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestApplySnapshotChunk, ::tendermint::abci::ResponseApplySnapshotChunk>* streamer) {
                       return this->StreamedApplySnapshotChunk(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ApplySnapshotChunk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ApplySnapshotChunk(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestApplySnapshotChunk* /*request*/, ::tendermint::abci::ResponseApplySnapshotChunk* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedApplySnapshotChunk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestApplySnapshotChunk,::tendermint::abci::ResponseApplySnapshotChunk>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrepareProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PrepareProposal() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestPrepareProposal, ::tendermint::abci::ResponsePrepareProposal>* streamer) {
                       return this->StreamedPrepareProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PrepareProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrepareProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestPrepareProposal* /*request*/, ::tendermint::abci::ResponsePrepareProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepareProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestPrepareProposal,::tendermint::abci::ResponsePrepareProposal>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProcessProposal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProcessProposal() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tendermint::abci::RequestProcessProposal, ::tendermint::abci::ResponseProcessProposal>* streamer) {
                       return this->StreamedProcessProposal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProcessProposal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProcessProposal(::grpc::ServerContext* /*context*/, const ::tendermint::abci::RequestProcessProposal* /*request*/, ::tendermint::abci::ResponseProcessProposal* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProcessProposal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tendermint::abci::RequestProcessProposal,::tendermint::abci::ResponseProcessProposal>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_DeliverTx<WithStreamedUnaryMethod_CheckTx<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_InitChain<WithStreamedUnaryMethod_BeginBlock<WithStreamedUnaryMethod_EndBlock<WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_OfferSnapshot<WithStreamedUnaryMethod_LoadSnapshotChunk<WithStreamedUnaryMethod_ApplySnapshotChunk<WithStreamedUnaryMethod_PrepareProposal<WithStreamedUnaryMethod_ProcessProposal<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Echo<WithStreamedUnaryMethod_Flush<WithStreamedUnaryMethod_Info<WithStreamedUnaryMethod_DeliverTx<WithStreamedUnaryMethod_CheckTx<WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_Commit<WithStreamedUnaryMethod_InitChain<WithStreamedUnaryMethod_BeginBlock<WithStreamedUnaryMethod_EndBlock<WithStreamedUnaryMethod_ListSnapshots<WithStreamedUnaryMethod_OfferSnapshot<WithStreamedUnaryMethod_LoadSnapshotChunk<WithStreamedUnaryMethod_ApplySnapshotChunk<WithStreamedUnaryMethod_PrepareProposal<WithStreamedUnaryMethod_ProcessProposal<Service > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace abci
}  // namespace tendermint


#endif  // GRPC_tendermint_2fabci_2ftypes_2eproto__INCLUDED

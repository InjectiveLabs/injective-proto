// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/libs/bits/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2flibs_2fbits_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2flibs_2fbits_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2flibs_2fbits_2ftypes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2flibs_2fbits_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto;
namespace tendermint {
namespace libs {
namespace bits {
class BitArray;
struct BitArrayDefaultTypeInternal;
extern BitArrayDefaultTypeInternal _BitArray_default_instance_;
}  // namespace bits
}  // namespace libs
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::libs::bits::BitArray* Arena::CreateMaybeMessage<::tendermint::libs::bits::BitArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace libs {
namespace bits {

// ===================================================================


// -------------------------------------------------------------------

class BitArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.libs.bits.BitArray) */ {
 public:
  inline BitArray() : BitArray(nullptr) {}
  ~BitArray() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BitArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BitArray(const BitArray& from);
  BitArray(BitArray&& from) noexcept
    : BitArray() {
    *this = ::std::move(from);
  }

  inline BitArray& operator=(const BitArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BitArray& operator=(BitArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BitArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const BitArray* internal_default_instance() {
    return reinterpret_cast<const BitArray*>(
               &_BitArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BitArray& a, BitArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BitArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BitArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BitArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BitArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BitArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BitArray& from) {
    BitArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BitArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.libs.bits.BitArray";
  }
  protected:
  explicit BitArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElemsFieldNumber = 2,
    kBitsFieldNumber = 1,
  };
  // repeated uint64 elems = 2 [json_name = "elems"];
  int elems_size() const;
  private:
  int _internal_elems_size() const;

  public:
  void clear_elems() ;
  ::uint64_t elems(int index) const;
  void set_elems(int index, ::uint64_t value);
  void add_elems(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& elems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* mutable_elems();

  private:
  ::uint64_t _internal_elems(int index) const;
  void _internal_add_elems(::uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& _internal_elems() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* _internal_mutable_elems();

  public:
  // int64 bits = 1 [json_name = "bits"];
  void clear_bits() ;
  ::int64_t bits() const;
  void set_bits(::int64_t value);

  private:
  ::int64_t _internal_bits() const;
  void _internal_set_bits(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.libs.bits.BitArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t> elems_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _elems_cached_byte_size_;
    ::int64_t bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2flibs_2fbits_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BitArray

// int64 bits = 1 [json_name = "bits"];
inline void BitArray::clear_bits() {
  _impl_.bits_ = ::int64_t{0};
}
inline ::int64_t BitArray::bits() const {
  // @@protoc_insertion_point(field_get:tendermint.libs.bits.BitArray.bits)
  return _internal_bits();
}
inline void BitArray::set_bits(::int64_t value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:tendermint.libs.bits.BitArray.bits)
}
inline ::int64_t BitArray::_internal_bits() const {
  return _impl_.bits_;
}
inline void BitArray::_internal_set_bits(::int64_t value) {
  ;
  _impl_.bits_ = value;
}

// repeated uint64 elems = 2 [json_name = "elems"];
inline int BitArray::_internal_elems_size() const {
  return _impl_.elems_.size();
}
inline int BitArray::elems_size() const {
  return _internal_elems_size();
}
inline void BitArray::clear_elems() {
  _internal_mutable_elems()->Clear();
}
inline ::uint64_t BitArray::elems(int index) const {
  // @@protoc_insertion_point(field_get:tendermint.libs.bits.BitArray.elems)
  return _internal_elems(index);
}
inline void BitArray::set_elems(int index, ::uint64_t value) {
  _internal_mutable_elems()->Set(index, value);
  // @@protoc_insertion_point(field_set:tendermint.libs.bits.BitArray.elems)
}
inline void BitArray::add_elems(::uint64_t value) {
  _internal_add_elems(value);
  // @@protoc_insertion_point(field_add:tendermint.libs.bits.BitArray.elems)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& BitArray::elems() const {
  // @@protoc_insertion_point(field_list:tendermint.libs.bits.BitArray.elems)
  return _internal_elems();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* BitArray::mutable_elems() {
  // @@protoc_insertion_point(field_mutable_list:tendermint.libs.bits.BitArray.elems)
  return _internal_mutable_elems();
}

inline ::uint64_t BitArray::_internal_elems(int index) const {
  return _internal_elems().Get(index);
}
inline void BitArray::_internal_add_elems(::uint64_t value) {
  _internal_mutable_elems()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>& BitArray::_internal_elems() const {
  return _impl_.elems_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint64_t>* BitArray::_internal_mutable_elems() {
  return &_impl_.elems_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bits
}  // namespace libs
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2flibs_2fbits_2ftypes_2eproto_2epb_2eh

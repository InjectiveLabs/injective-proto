// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/crypto/proof.proto

#include "tendermint/crypto/proof.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace crypto {
template <typename>
PROTOBUF_CONSTEXPR Proof::Proof(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.aunts_)*/{}
  , /*decltype(_impl_.leaf_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.total_)*/ ::int64_t{0}

  , /*decltype(_impl_.index_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProofDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProofDefaultTypeInternal() {}
  union {
    Proof _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProofDefaultTypeInternal _Proof_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ValueOp::ValueOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proof_)*/nullptr} {}
struct ValueOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueOpDefaultTypeInternal() {}
  union {
    ValueOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueOpDefaultTypeInternal _ValueOp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DominoOp::DominoOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.input_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.output_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DominoOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DominoOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DominoOpDefaultTypeInternal() {}
  union {
    DominoOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DominoOpDefaultTypeInternal _DominoOp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProofOp::ProofOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProofOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProofOpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProofOpDefaultTypeInternal() {}
  union {
    ProofOp _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProofOpDefaultTypeInternal _ProofOp_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProofOps::ProofOps(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProofOpsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProofOpsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProofOpsDefaultTypeInternal() {}
  union {
    ProofOps _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProofOpsDefaultTypeInternal _ProofOps_default_instance_;
}  // namespace crypto
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fcrypto_2fproof_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fcrypto_2fproof_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fcrypto_2fproof_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::Proof, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::Proof, _impl_.total_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::Proof, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::Proof, _impl_.leaf_hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::Proof, _impl_.aunts_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ValueOp, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ValueOp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ValueOp, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ValueOp, _impl_.proof_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::DominoOp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::DominoOp, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::DominoOp, _impl_.input_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::DominoOp, _impl_.output_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOp, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOp, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOp, _impl_.key_),
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOp, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::ProofOps, _impl_.ops_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::crypto::Proof)},
        { 12, 22, -1, sizeof(::tendermint::crypto::ValueOp)},
        { 24, -1, -1, sizeof(::tendermint::crypto::DominoOp)},
        { 35, -1, -1, sizeof(::tendermint::crypto::ProofOp)},
        { 46, -1, -1, sizeof(::tendermint::crypto::ProofOps)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::crypto::_Proof_default_instance_._instance,
    &::tendermint::crypto::_ValueOp_default_instance_._instance,
    &::tendermint::crypto::_DominoOp_default_instance_._instance,
    &::tendermint::crypto::_ProofOp_default_instance_._instance,
    &::tendermint::crypto::_ProofOps_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fcrypto_2fproof_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\035tendermint/crypto/proof.proto\022\021tenderm"
    "int.crypto\032\024gogoproto/gogo.proto\"f\n\005Proo"
    "f\022\024\n\005total\030\001 \001(\003R\005total\022\024\n\005index\030\002 \001(\003R\005"
    "index\022\033\n\tleaf_hash\030\003 \001(\014R\010leafHash\022\024\n\005au"
    "nts\030\004 \003(\014R\005aunts\"K\n\007ValueOp\022\020\n\003key\030\001 \001(\014"
    "R\003key\022.\n\005proof\030\002 \001(\0132\030.tendermint.crypto"
    ".ProofR\005proof\"J\n\010DominoOp\022\020\n\003key\030\001 \001(\tR\003"
    "key\022\024\n\005input\030\002 \001(\tR\005input\022\026\n\006output\030\003 \001("
    "\tR\006output\"C\n\007ProofOp\022\022\n\004type\030\001 \001(\tR\004type"
    "\022\020\n\003key\030\002 \001(\014R\003key\022\022\n\004data\030\003 \001(\014R\004data\">"
    "\n\010ProofOps\0222\n\003ops\030\001 \003(\0132\032.tendermint.cry"
    "pto.ProofOpB\004\310\336\037\000R\003opsB\276\001\n\025com.tendermin"
    "t.cryptoB\nProofProtoP\001Z4github.com/comet"
    "bft/cometbft/proto/tendermint/crypto\242\002\003T"
    "CX\252\002\021Tendermint.Crypto\312\002\021Tendermint\\Cryp"
    "to\342\002\035Tendermint\\Crypto\\GPBMetadata\352\002\022Ten"
    "dermint::Cryptob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fcrypto_2fproof_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fcrypto_2fproof_2eproto = {
    false,
    false,
    663,
    descriptor_table_protodef_tendermint_2fcrypto_2fproof_2eproto,
    "tendermint/crypto/proof.proto",
    &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
    descriptor_table_tendermint_2fcrypto_2fproof_2eproto_deps,
    1,
    5,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fcrypto_2fproof_2eproto::offsets,
    file_level_metadata_tendermint_2fcrypto_2fproof_2eproto,
    file_level_enum_descriptors_tendermint_2fcrypto_2fproof_2eproto,
    file_level_service_descriptors_tendermint_2fcrypto_2fproof_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter() {
  return &descriptor_table_tendermint_2fcrypto_2fproof_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fcrypto_2fproof_2eproto(&descriptor_table_tendermint_2fcrypto_2fproof_2eproto);
namespace tendermint {
namespace crypto {
// ===================================================================

class Proof::_Internal {
 public:
};

Proof::Proof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.Proof)
}
Proof::Proof(const Proof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proof* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.aunts_){from._impl_.aunts_}
    , decltype(_impl_.leaf_hash_) {}

    , decltype(_impl_.total_) {}

    , decltype(_impl_.index_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.leaf_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.leaf_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_leaf_hash().empty()) {
    _this->_impl_.leaf_hash_.Set(from._internal_leaf_hash(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.total_, &from._impl_.total_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.Proof)
}

inline void Proof::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.aunts_){arena}
    , decltype(_impl_.leaf_hash_) {}

    , decltype(_impl_.total_) { ::int64_t{0} }

    , decltype(_impl_.index_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.leaf_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.leaf_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Proof::~Proof() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.Proof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proof::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_aunts()->~RepeatedPtrField();
  _impl_.leaf_hash_.Destroy();
}

void Proof::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proof::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.Proof)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_aunts()->Clear();
  _impl_.leaf_hash_.ClearToEmpty();
  ::memset(&_impl_.total_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total = 1 [json_name = "total"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 index = 2 [json_name = "index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes leaf_hash = 3 [json_name = "leafHash"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_leaf_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes aunts = 4 [json_name = "aunts"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_aunts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proof::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.Proof)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_total(), target);
  }

  // int64 index = 2 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_index(), target);
  }

  // bytes leaf_hash = 3 [json_name = "leafHash"];
  if (!this->_internal_leaf_hash().empty()) {
    const std::string& _s = this->_internal_leaf_hash();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // repeated bytes aunts = 4 [json_name = "aunts"];
  for (int i = 0, n = this->_internal_aunts_size(); i < n; ++i) {
    const auto& s = this->_internal_aunts(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.Proof)
  return target;
}

::size_t Proof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.Proof)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes aunts = 4 [json_name = "aunts"];
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_aunts().size());
  for (int i = 0, n = _internal_aunts().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_aunts().Get(i));
  }

  // bytes leaf_hash = 3 [json_name = "leafHash"];
  if (!this->_internal_leaf_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_leaf_hash());
  }

  // int64 total = 1 [json_name = "total"];
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_total());
  }

  // int64 index = 2 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proof::GetClassData() const { return &_class_data_; }


void Proof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proof*>(&to_msg);
  auto& from = static_cast<const Proof&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.Proof)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_aunts()->MergeFrom(from._internal_aunts());
  if (!from._internal_leaf_hash().empty()) {
    _this->_internal_set_leaf_hash(from._internal_leaf_hash());
  }
  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proof::CopyFrom(const Proof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.Proof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proof::IsInitialized() const {
  return true;
}

void Proof::InternalSwap(Proof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_aunts()->InternalSwap(
      other->_internal_mutable_aunts());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.leaf_hash_, lhs_arena,
                                       &other->_impl_.leaf_hash_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Proof, _impl_.index_)
      + sizeof(Proof::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(Proof, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Proof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[0]);
}
// ===================================================================

class ValueOp::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueOp>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValueOp, _impl_._has_bits_);
  static const ::tendermint::crypto::Proof& proof(const ValueOp* msg);
  static void set_has_proof(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::crypto::Proof&
ValueOp::_Internal::proof(const ValueOp* msg) {
  return *msg->_impl_.proof_;
}
ValueOp::ValueOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.ValueOp)
}
ValueOp::ValueOp(const ValueOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValueOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.proof_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proof_ = new ::tendermint::crypto::Proof(*from._impl_.proof_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.ValueOp)
}

inline void ValueOp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_) {}

    , decltype(_impl_.proof_){nullptr}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ValueOp::~ValueOp() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.ValueOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ValueOp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proof_;
}

void ValueOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValueOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.ValueOp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proof_ != nullptr);
    _impl_.proof_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValueOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.crypto.Proof proof = 2 [json_name = "proof"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proof(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ValueOp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.ValueOp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.crypto.Proof proof = 2 [json_name = "proof"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::proof(this),
        _Internal::proof(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.ValueOp)
  return target;
}

::size_t ValueOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.ValueOp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // .tendermint.crypto.Proof proof = 2 [json_name = "proof"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proof_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValueOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValueOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValueOp::GetClassData() const { return &_class_data_; }


void ValueOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValueOp*>(&to_msg);
  auto& from = static_cast<const ValueOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.ValueOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proof()->::tendermint::crypto::Proof::MergeFrom(
        from._internal_proof());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValueOp::CopyFrom(const ValueOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.ValueOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueOp::IsInitialized() const {
  return true;
}

void ValueOp::InternalSwap(ValueOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  swap(_impl_.proof_, other->_impl_.proof_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[1]);
}
// ===================================================================

class DominoOp::_Internal {
 public:
};

DominoOp::DominoOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.DominoOp)
}
DominoOp::DominoOp(const DominoOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DominoOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.input_) {}

    , decltype(_impl_.output_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.DominoOp)
}

inline void DominoOp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.key_) {}

    , decltype(_impl_.input_) {}

    , decltype(_impl_.output_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DominoOp::~DominoOp() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.DominoOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DominoOp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.input_.Destroy();
  _impl_.output_.Destroy();
}

void DominoOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DominoOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.DominoOp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.input_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DominoOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1 [json_name = "key"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.crypto.DominoOp.key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string input = 2 [json_name = "input"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.crypto.DominoOp.input"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string output = 3 [json_name = "output"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.crypto.DominoOp.output"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DominoOp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.DominoOp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.crypto.DominoOp.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string input = 2 [json_name = "input"];
  if (!this->_internal_input().empty()) {
    const std::string& _s = this->_internal_input();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.crypto.DominoOp.input");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string output = 3 [json_name = "output"];
  if (!this->_internal_output().empty()) {
    const std::string& _s = this->_internal_output();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.crypto.DominoOp.output");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.DominoOp)
  return target;
}

::size_t DominoOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.DominoOp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string input = 2 [json_name = "input"];
  if (!this->_internal_input().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_input());
  }

  // string output = 3 [json_name = "output"];
  if (!this->_internal_output().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DominoOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DominoOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DominoOp::GetClassData() const { return &_class_data_; }


void DominoOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DominoOp*>(&to_msg);
  auto& from = static_cast<const DominoOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.DominoOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DominoOp::CopyFrom(const DominoOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.DominoOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DominoOp::IsInitialized() const {
  return true;
}

void DominoOp::InternalSwap(DominoOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_, lhs_arena,
                                       &other->_impl_.input_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_, lhs_arena,
                                       &other->_impl_.output_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DominoOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[2]);
}
// ===================================================================

class ProofOp::_Internal {
 public:
};

ProofOp::ProofOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.ProofOp)
}
ProofOp::ProofOp(const ProofOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProofOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.key_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.ProofOp)
}

inline void ProofOp::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.type_) {}

    , decltype(_impl_.key_) {}

    , decltype(_impl_.data_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProofOp::~ProofOp() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.ProofOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProofOp::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.key_.Destroy();
  _impl_.data_.Destroy();
}

void ProofOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProofOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.ProofOp)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1 [json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.crypto.ProofOp.type"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProofOp::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.ProofOp)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    const std::string& _s = this->_internal_type();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.crypto.ProofOp.type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.ProofOp)
  return target;
}

::size_t ProofOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.ProofOp)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_type());
  }

  // bytes key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProofOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProofOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProofOp::GetClassData() const { return &_class_data_; }


void ProofOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProofOp*>(&to_msg);
  auto& from = static_cast<const ProofOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.ProofOp)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProofOp::CopyFrom(const ProofOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.ProofOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOp::IsInitialized() const {
  return true;
}

void ProofOp::InternalSwap(ProofOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, lhs_arena,
                                       &other->_impl_.type_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[3]);
}
// ===================================================================

class ProofOps::_Internal {
 public:
};

ProofOps::ProofOps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.ProofOps)
}
ProofOps::ProofOps(const ProofOps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProofOps* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ops_){from._impl_.ops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.ProofOps)
}

inline void ProofOps::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.ops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProofOps::~ProofOps() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.ProofOps)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProofOps::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_ops()->~RepeatedPtrField();
}

void ProofOps::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProofOps::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.ProofOps)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_ops()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProofOps::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.crypto.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProofOps::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.ProofOps)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.crypto.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ops_size()); i < n; i++) {
    const auto& repfield = this->_internal_ops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.ProofOps)
  return target;
}

::size_t ProofOps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.ProofOps)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.crypto.ProofOp ops = 1 [json_name = "ops", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->_internal_ops()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProofOps::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProofOps::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProofOps::GetClassData() const { return &_class_data_; }


void ProofOps::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProofOps*>(&to_msg);
  auto& from = static_cast<const ProofOps&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.ProofOps)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ops()->MergeFrom(from._internal_ops());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProofOps::CopyFrom(const ProofOps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.ProofOps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProofOps::IsInitialized() const {
  return true;
}

void ProofOps::InternalSwap(ProofOps* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_ops()->InternalSwap(other->_internal_mutable_ops());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProofOps::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fproof_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fproof_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::crypto::Proof*
Arena::CreateMaybeMessage< ::tendermint::crypto::Proof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::Proof >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::crypto::ValueOp*
Arena::CreateMaybeMessage< ::tendermint::crypto::ValueOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::ValueOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::crypto::DominoOp*
Arena::CreateMaybeMessage< ::tendermint::crypto::DominoOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::DominoOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::crypto::ProofOp*
Arena::CreateMaybeMessage< ::tendermint::crypto::ProofOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::ProofOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::crypto::ProofOps*
Arena::CreateMaybeMessage< ::tendermint::crypto::ProofOps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::ProofOps >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

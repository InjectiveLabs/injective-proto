// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/crypto/keys.proto

#include "tendermint/crypto/keys.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace crypto {
template <typename>
PROTOBUF_CONSTEXPR PublicKey::PublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicKeyDefaultTypeInternal() {}
  union {
    PublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
}  // namespace crypto
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fcrypto_2fkeys_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fcrypto_2fkeys_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fcrypto_2fkeys_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fcrypto_2fkeys_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::crypto::PublicKey)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::crypto::_PublicKey_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fcrypto_2fkeys_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\034tendermint/crypto/keys.proto\022\021tendermi"
    "nt.crypto\032\024gogoproto/gogo.proto\"X\n\tPubli"
    "cKey\022\032\n\007ed25519\030\001 \001(\014H\000R\007ed25519\022\036\n\tsecp"
    "256k1\030\002 \001(\014H\000R\tsecp256k1:\010\350\240\037\001\350\241\037\001B\005\n\003su"
    "mB\275\001\n\025com.tendermint.cryptoB\tKeysProtoP\001"
    "Z4github.com/cometbft/cometbft/proto/ten"
    "dermint/crypto\242\002\003TCX\252\002\021Tendermint.Crypto"
    "\312\002\021Tendermint\\Crypto\342\002\035Tendermint\\Crypto"
    "\\GPBMetadata\352\002\022Tendermint::Cryptob\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_deps[1] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fcrypto_2fkeys_2eproto = {
    false,
    false,
    361,
    descriptor_table_protodef_tendermint_2fcrypto_2fkeys_2eproto,
    "tendermint/crypto/keys.proto",
    &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_once,
    descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fcrypto_2fkeys_2eproto::offsets,
    file_level_metadata_tendermint_2fcrypto_2fkeys_2eproto,
    file_level_enum_descriptors_tendermint_2fcrypto_2fkeys_2eproto,
    file_level_service_descriptors_tendermint_2fcrypto_2fkeys_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_getter() {
  return &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fcrypto_2fkeys_2eproto(&descriptor_table_tendermint_2fcrypto_2fkeys_2eproto);
namespace tendermint {
namespace crypto {
// ===================================================================

class PublicKey::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::crypto::PublicKey, _impl_._oneof_case_);
};

PublicKey::PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.crypto.PublicKey)
}
PublicKey::PublicKey(const PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kEd25519: {
      _this->_internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case kSecp256K1: {
      _this->_internal_set_secp256k1(from._internal_secp256k1());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.crypto.PublicKey)
}

inline void PublicKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

PublicKey::~PublicKey() {
  // @@protoc_insertion_point(destructor:tendermint.crypto.PublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void PublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicKey::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.crypto.PublicKey)
  switch (sum_case()) {
    case kEd25519: {
      _impl_.sum_.ed25519_.Destroy();
      break;
    }
    case kSecp256K1: {
      _impl_.sum_.secp256k1_.Destroy();
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.crypto.PublicKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ed25519 = 1 [json_name = "ed25519"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ed25519();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes secp256k1 = 2 [json_name = "secp256k1"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secp256k1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PublicKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.crypto.PublicKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kEd25519: {
      const std::string& _s = this->_internal_ed25519();
      target = stream->WriteBytesMaybeAliased(1, _s, target);
      break;
    }
    case kSecp256K1: {
      const std::string& _s = this->_internal_secp256k1();
      target = stream->WriteBytesMaybeAliased(2, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.crypto.PublicKey)
  return target;
}

::size_t PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.crypto.PublicKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // bytes ed25519 = 1 [json_name = "ed25519"];
    case kEd25519: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_ed25519());
      break;
    }
    // bytes secp256k1 = 2 [json_name = "secp256k1"];
    case kSecp256K1: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_secp256k1());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PublicKey::GetClassData() const { return &_class_data_; }


void PublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PublicKey*>(&to_msg);
  auto& from = static_cast<const PublicKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.crypto.PublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kEd25519: {
      _this->_internal_set_ed25519(from._internal_ed25519());
      break;
    }
    case kSecp256K1: {
      _this->_internal_set_secp256k1(from._internal_secp256k1());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PublicKey::CopyFrom(const PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.crypto.PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicKey::IsInitialized() const {
  return true;
}

void PublicKey::InternalSwap(PublicKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_getter, &descriptor_table_tendermint_2fcrypto_2fkeys_2eproto_once,
      file_level_metadata_tendermint_2fcrypto_2fkeys_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace crypto
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::crypto::PublicKey*
Arena::CreateMaybeMessage< ::tendermint::crypto::PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::crypto::PublicKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

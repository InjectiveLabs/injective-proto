// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/rpc/grpc/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2frpc_2fgrpc_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2frpc_2fgrpc_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tendermint/abci/types.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2frpc_2fgrpc_2ftypes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2frpc_2fgrpc_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2frpc_2fgrpc_2ftypes_2eproto;
namespace tendermint {
namespace rpc {
namespace grpc {
class RequestBroadcastTx;
struct RequestBroadcastTxDefaultTypeInternal;
extern RequestBroadcastTxDefaultTypeInternal _RequestBroadcastTx_default_instance_;
class RequestPing;
struct RequestPingDefaultTypeInternal;
extern RequestPingDefaultTypeInternal _RequestPing_default_instance_;
class ResponseBroadcastTx;
struct ResponseBroadcastTxDefaultTypeInternal;
extern ResponseBroadcastTxDefaultTypeInternal _ResponseBroadcastTx_default_instance_;
class ResponsePing;
struct ResponsePingDefaultTypeInternal;
extern ResponsePingDefaultTypeInternal _ResponsePing_default_instance_;
}  // namespace grpc
}  // namespace rpc
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::rpc::grpc::RequestBroadcastTx* Arena::CreateMaybeMessage<::tendermint::rpc::grpc::RequestBroadcastTx>(Arena*);
template <>
::tendermint::rpc::grpc::RequestPing* Arena::CreateMaybeMessage<::tendermint::rpc::grpc::RequestPing>(Arena*);
template <>
::tendermint::rpc::grpc::ResponseBroadcastTx* Arena::CreateMaybeMessage<::tendermint::rpc::grpc::ResponseBroadcastTx>(Arena*);
template <>
::tendermint::rpc::grpc::ResponsePing* Arena::CreateMaybeMessage<::tendermint::rpc::grpc::ResponsePing>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace rpc {
namespace grpc {

// ===================================================================


// -------------------------------------------------------------------

class RequestPing final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.rpc.grpc.RequestPing) */ {
 public:
  inline RequestPing() : RequestPing(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestPing(const RequestPing& from);
  RequestPing(RequestPing&& from) noexcept
    : RequestPing() {
    *this = ::std::move(from);
  }

  inline RequestPing& operator=(const RequestPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestPing& operator=(RequestPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestPing* internal_default_instance() {
    return reinterpret_cast<const RequestPing*>(
               &_RequestPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestPing& a, RequestPing& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestPing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const RequestPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const RequestPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.rpc.grpc.RequestPing";
  }
  protected:
  explicit RequestPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.rpc.grpc.RequestPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tendermint_2frpc_2fgrpc_2ftypes_2eproto;
};// -------------------------------------------------------------------

class RequestBroadcastTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.rpc.grpc.RequestBroadcastTx) */ {
 public:
  inline RequestBroadcastTx() : RequestBroadcastTx(nullptr) {}
  ~RequestBroadcastTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RequestBroadcastTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestBroadcastTx(const RequestBroadcastTx& from);
  RequestBroadcastTx(RequestBroadcastTx&& from) noexcept
    : RequestBroadcastTx() {
    *this = ::std::move(from);
  }

  inline RequestBroadcastTx& operator=(const RequestBroadcastTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestBroadcastTx& operator=(RequestBroadcastTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestBroadcastTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestBroadcastTx* internal_default_instance() {
    return reinterpret_cast<const RequestBroadcastTx*>(
               &_RequestBroadcastTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestBroadcastTx& a, RequestBroadcastTx& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestBroadcastTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestBroadcastTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestBroadcastTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestBroadcastTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestBroadcastTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RequestBroadcastTx& from) {
    RequestBroadcastTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestBroadcastTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.rpc.grpc.RequestBroadcastTx";
  }
  protected:
  explicit RequestBroadcastTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // bytes tx = 1 [json_name = "tx"];
  void clear_tx() ;
  const std::string& tx() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tx(Arg_&& arg, Args_... args);
  std::string* mutable_tx();
  PROTOBUF_NODISCARD std::string* release_tx();
  void set_allocated_tx(std::string* ptr);

  private:
  const std::string& _internal_tx() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tx(
      const std::string& value);
  std::string* _internal_mutable_tx();

  public:
  // @@protoc_insertion_point(class_scope:tendermint.rpc.grpc.RequestBroadcastTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2frpc_2fgrpc_2ftypes_2eproto;
};// -------------------------------------------------------------------

class ResponsePing final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.rpc.grpc.ResponsePing) */ {
 public:
  inline ResponsePing() : ResponsePing(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponsePing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponsePing(const ResponsePing& from);
  ResponsePing(ResponsePing&& from) noexcept
    : ResponsePing() {
    *this = ::std::move(from);
  }

  inline ResponsePing& operator=(const ResponsePing& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponsePing& operator=(ResponsePing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponsePing& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponsePing* internal_default_instance() {
    return reinterpret_cast<const ResponsePing*>(
               &_ResponsePing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponsePing& a, ResponsePing& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponsePing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponsePing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponsePing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponsePing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResponsePing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResponsePing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.rpc.grpc.ResponsePing";
  }
  protected:
  explicit ResponsePing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.rpc.grpc.ResponsePing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tendermint_2frpc_2fgrpc_2ftypes_2eproto;
};// -------------------------------------------------------------------

class ResponseBroadcastTx final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.rpc.grpc.ResponseBroadcastTx) */ {
 public:
  inline ResponseBroadcastTx() : ResponseBroadcastTx(nullptr) {}
  ~ResponseBroadcastTx() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ResponseBroadcastTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseBroadcastTx(const ResponseBroadcastTx& from);
  ResponseBroadcastTx(ResponseBroadcastTx&& from) noexcept
    : ResponseBroadcastTx() {
    *this = ::std::move(from);
  }

  inline ResponseBroadcastTx& operator=(const ResponseBroadcastTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseBroadcastTx& operator=(ResponseBroadcastTx&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseBroadcastTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseBroadcastTx* internal_default_instance() {
    return reinterpret_cast<const ResponseBroadcastTx*>(
               &_ResponseBroadcastTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResponseBroadcastTx& a, ResponseBroadcastTx& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseBroadcastTx* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseBroadcastTx* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseBroadcastTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseBroadcastTx>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseBroadcastTx& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResponseBroadcastTx& from) {
    ResponseBroadcastTx::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseBroadcastTx* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.rpc.grpc.ResponseBroadcastTx";
  }
  protected:
  explicit ResponseBroadcastTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCheckTxFieldNumber = 1,
    kDeliverTxFieldNumber = 2,
  };
  // .tendermint.abci.ResponseCheckTx check_tx = 1 [json_name = "checkTx"];
  bool has_check_tx() const;
  void clear_check_tx() ;
  const ::tendermint::abci::ResponseCheckTx& check_tx() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseCheckTx* release_check_tx();
  ::tendermint::abci::ResponseCheckTx* mutable_check_tx();
  void set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* check_tx);
  private:
  const ::tendermint::abci::ResponseCheckTx& _internal_check_tx() const;
  ::tendermint::abci::ResponseCheckTx* _internal_mutable_check_tx();
  public:
  void unsafe_arena_set_allocated_check_tx(
      ::tendermint::abci::ResponseCheckTx* check_tx);
  ::tendermint::abci::ResponseCheckTx* unsafe_arena_release_check_tx();
  // .tendermint.abci.ResponseDeliverTx deliver_tx = 2 [json_name = "deliverTx"];
  bool has_deliver_tx() const;
  void clear_deliver_tx() ;
  const ::tendermint::abci::ResponseDeliverTx& deliver_tx() const;
  PROTOBUF_NODISCARD ::tendermint::abci::ResponseDeliverTx* release_deliver_tx();
  ::tendermint::abci::ResponseDeliverTx* mutable_deliver_tx();
  void set_allocated_deliver_tx(::tendermint::abci::ResponseDeliverTx* deliver_tx);
  private:
  const ::tendermint::abci::ResponseDeliverTx& _internal_deliver_tx() const;
  ::tendermint::abci::ResponseDeliverTx* _internal_mutable_deliver_tx();
  public:
  void unsafe_arena_set_allocated_deliver_tx(
      ::tendermint::abci::ResponseDeliverTx* deliver_tx);
  ::tendermint::abci::ResponseDeliverTx* unsafe_arena_release_deliver_tx();
  // @@protoc_insertion_point(class_scope:tendermint.rpc.grpc.ResponseBroadcastTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::abci::ResponseCheckTx* check_tx_;
    ::tendermint::abci::ResponseDeliverTx* deliver_tx_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2frpc_2fgrpc_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RequestPing

// -------------------------------------------------------------------

// RequestBroadcastTx

// bytes tx = 1 [json_name = "tx"];
inline void RequestBroadcastTx::clear_tx() {
  _impl_.tx_.ClearToEmpty();
}
inline const std::string& RequestBroadcastTx::tx() const {
  // @@protoc_insertion_point(field_get:tendermint.rpc.grpc.RequestBroadcastTx.tx)
  return _internal_tx();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RequestBroadcastTx::set_tx(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tx_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.rpc.grpc.RequestBroadcastTx.tx)
}
inline std::string* RequestBroadcastTx::mutable_tx() {
  std::string* _s = _internal_mutable_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.rpc.grpc.RequestBroadcastTx.tx)
  return _s;
}
inline const std::string& RequestBroadcastTx::_internal_tx() const {
  return _impl_.tx_.Get();
}
inline void RequestBroadcastTx::_internal_set_tx(const std::string& value) {
  ;


  _impl_.tx_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestBroadcastTx::_internal_mutable_tx() {
  ;
  return _impl_.tx_.Mutable( GetArenaForAllocation());
}
inline std::string* RequestBroadcastTx::release_tx() {
  // @@protoc_insertion_point(field_release:tendermint.rpc.grpc.RequestBroadcastTx.tx)
  return _impl_.tx_.Release();
}
inline void RequestBroadcastTx::set_allocated_tx(std::string* value) {
  _impl_.tx_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tx_.IsDefault()) {
          _impl_.tx_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.rpc.grpc.RequestBroadcastTx.tx)
}

// -------------------------------------------------------------------

// ResponsePing

// -------------------------------------------------------------------

// ResponseBroadcastTx

// .tendermint.abci.ResponseCheckTx check_tx = 1 [json_name = "checkTx"];
inline bool ResponseBroadcastTx::has_check_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.check_tx_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseCheckTx& ResponseBroadcastTx::_internal_check_tx() const {
  const ::tendermint::abci::ResponseCheckTx* p = _impl_.check_tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseCheckTx&>(
      ::tendermint::abci::_ResponseCheckTx_default_instance_);
}
inline const ::tendermint::abci::ResponseCheckTx& ResponseBroadcastTx::check_tx() const {
  // @@protoc_insertion_point(field_get:tendermint.rpc.grpc.ResponseBroadcastTx.check_tx)
  return _internal_check_tx();
}
inline void ResponseBroadcastTx::unsafe_arena_set_allocated_check_tx(
    ::tendermint::abci::ResponseCheckTx* check_tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_tx_);
  }
  _impl_.check_tx_ = check_tx;
  if (check_tx) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.rpc.grpc.ResponseBroadcastTx.check_tx)
}
inline ::tendermint::abci::ResponseCheckTx* ResponseBroadcastTx::release_check_tx() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ResponseCheckTx* temp = _impl_.check_tx_;
  _impl_.check_tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseCheckTx* ResponseBroadcastTx::unsafe_arena_release_check_tx() {
  // @@protoc_insertion_point(field_release:tendermint.rpc.grpc.ResponseBroadcastTx.check_tx)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::abci::ResponseCheckTx* temp = _impl_.check_tx_;
  _impl_.check_tx_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseCheckTx* ResponseBroadcastTx::_internal_mutable_check_tx() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.check_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseCheckTx>(GetArenaForAllocation());
    _impl_.check_tx_ = p;
  }
  return _impl_.check_tx_;
}
inline ::tendermint::abci::ResponseCheckTx* ResponseBroadcastTx::mutable_check_tx() {
  ::tendermint::abci::ResponseCheckTx* _msg = _internal_mutable_check_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.rpc.grpc.ResponseBroadcastTx.check_tx)
  return _msg;
}
inline void ResponseBroadcastTx::set_allocated_check_tx(::tendermint::abci::ResponseCheckTx* check_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.check_tx_);
  }
  if (check_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(check_tx));
    if (message_arena != submessage_arena) {
      check_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.check_tx_ = check_tx;
  // @@protoc_insertion_point(field_set_allocated:tendermint.rpc.grpc.ResponseBroadcastTx.check_tx)
}

// .tendermint.abci.ResponseDeliverTx deliver_tx = 2 [json_name = "deliverTx"];
inline bool ResponseBroadcastTx::has_deliver_tx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deliver_tx_ != nullptr);
  return value;
}
inline const ::tendermint::abci::ResponseDeliverTx& ResponseBroadcastTx::_internal_deliver_tx() const {
  const ::tendermint::abci::ResponseDeliverTx* p = _impl_.deliver_tx_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::abci::ResponseDeliverTx&>(
      ::tendermint::abci::_ResponseDeliverTx_default_instance_);
}
inline const ::tendermint::abci::ResponseDeliverTx& ResponseBroadcastTx::deliver_tx() const {
  // @@protoc_insertion_point(field_get:tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx)
  return _internal_deliver_tx();
}
inline void ResponseBroadcastTx::unsafe_arena_set_allocated_deliver_tx(
    ::tendermint::abci::ResponseDeliverTx* deliver_tx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deliver_tx_);
  }
  _impl_.deliver_tx_ = deliver_tx;
  if (deliver_tx) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx)
}
inline ::tendermint::abci::ResponseDeliverTx* ResponseBroadcastTx::release_deliver_tx() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseDeliverTx* temp = _impl_.deliver_tx_;
  _impl_.deliver_tx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::abci::ResponseDeliverTx* ResponseBroadcastTx::unsafe_arena_release_deliver_tx() {
  // @@protoc_insertion_point(field_release:tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::abci::ResponseDeliverTx* temp = _impl_.deliver_tx_;
  _impl_.deliver_tx_ = nullptr;
  return temp;
}
inline ::tendermint::abci::ResponseDeliverTx* ResponseBroadcastTx::_internal_mutable_deliver_tx() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.deliver_tx_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::abci::ResponseDeliverTx>(GetArenaForAllocation());
    _impl_.deliver_tx_ = p;
  }
  return _impl_.deliver_tx_;
}
inline ::tendermint::abci::ResponseDeliverTx* ResponseBroadcastTx::mutable_deliver_tx() {
  ::tendermint::abci::ResponseDeliverTx* _msg = _internal_mutable_deliver_tx();
  // @@protoc_insertion_point(field_mutable:tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx)
  return _msg;
}
inline void ResponseBroadcastTx::set_allocated_deliver_tx(::tendermint::abci::ResponseDeliverTx* deliver_tx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.deliver_tx_);
  }
  if (deliver_tx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deliver_tx));
    if (message_arena != submessage_arena) {
      deliver_tx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_tx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.deliver_tx_ = deliver_tx;
  // @@protoc_insertion_point(field_set_allocated:tendermint.rpc.grpc.ResponseBroadcastTx.deliver_tx)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc
}  // namespace rpc
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2frpc_2fgrpc_2ftypes_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/types.proto

#include "tendermint/consensus/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace consensus {
template <typename>
PROTOBUF_CONSTEXPR NewRoundStep::NewRoundStep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.step_)*/ 0u

  , /*decltype(_impl_.seconds_since_start_time_)*/ ::int64_t{0}

  , /*decltype(_impl_.last_commit_round_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewRoundStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewRoundStepDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewRoundStepDefaultTypeInternal() {}
  union {
    NewRoundStep _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewRoundStepDefaultTypeInternal _NewRoundStep_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR NewValidBlock::NewValidBlock(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_part_set_header_)*/nullptr
  , /*decltype(_impl_.block_parts_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.is_commit_)*/ false
} {}
struct NewValidBlockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewValidBlockDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewValidBlockDefaultTypeInternal() {}
  union {
    NewValidBlock _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewValidBlockDefaultTypeInternal _NewValidBlock_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Proposal::Proposal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_)*/nullptr} {}
struct ProposalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalDefaultTypeInternal() {}
  union {
    Proposal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalDefaultTypeInternal _Proposal_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ProposalPOL::ProposalPOL(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_pol_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.proposal_pol_round_)*/ 0
} {}
struct ProposalPOLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProposalPOLDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProposalPOLDefaultTypeInternal() {}
  union {
    ProposalPOL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProposalPOLDefaultTypeInternal _ProposalPOL_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR BlockPart::BlockPart(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.part_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0
} {}
struct BlockPartDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlockPartDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlockPartDefaultTypeInternal() {}
  union {
    BlockPart _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlockPartDefaultTypeInternal _BlockPart_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vote::Vote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vote_)*/nullptr} {}
struct VoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteDefaultTypeInternal() {}
  union {
    Vote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteDefaultTypeInternal _Vote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR HasVote::HasVote(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.index_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HasVoteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HasVoteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HasVoteDefaultTypeInternal() {}
  union {
    HasVote _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HasVoteDefaultTypeInternal _HasVote_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VoteSetMaj23::VoteSetMaj23(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.type_)*/ 0
} {}
struct VoteSetMaj23DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteSetMaj23DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteSetMaj23DefaultTypeInternal() {}
  union {
    VoteSetMaj23 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteSetMaj23DefaultTypeInternal _VoteSetMaj23_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR VoteSetBits::VoteSetBits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.block_id_)*/nullptr
  , /*decltype(_impl_.votes_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.type_)*/ 0
} {}
struct VoteSetBitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VoteSetBitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VoteSetBitsDefaultTypeInternal() {}
  union {
    VoteSetBits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VoteSetBitsDefaultTypeInternal _VoteSetBits_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace consensus
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[10];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fconsensus_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fconsensus_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fconsensus_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _impl_.step_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _impl_.seconds_since_start_time_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewRoundStep, _impl_.last_commit_round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_.block_part_set_header_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_.block_parts_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::NewValidBlock, _impl_.is_commit_),
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Proposal, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Proposal, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Proposal, _impl_.proposal_),
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _impl_.proposal_pol_round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::ProposalPOL, _impl_.proposal_pol_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::BlockPart, _impl_.part_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Vote, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Vote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Vote, _impl_.vote_),
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::HasVote, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetMaj23, _impl_.block_id_),
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_.block_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::VoteSetBits, _impl_.votes_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::consensus::NewRoundStep)},
        { 13, 26, -1, sizeof(::tendermint::consensus::NewValidBlock)},
        { 31, 40, -1, sizeof(::tendermint::consensus::Proposal)},
        { 41, 52, -1, sizeof(::tendermint::consensus::ProposalPOL)},
        { 55, 66, -1, sizeof(::tendermint::consensus::BlockPart)},
        { 69, 78, -1, sizeof(::tendermint::consensus::Vote)},
        { 79, -1, -1, sizeof(::tendermint::consensus::HasVote)},
        { 91, 103, -1, sizeof(::tendermint::consensus::VoteSetMaj23)},
        { 107, 120, -1, sizeof(::tendermint::consensus::VoteSetBits)},
        { 125, -1, -1, sizeof(::tendermint::consensus::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::consensus::_NewRoundStep_default_instance_._instance,
    &::tendermint::consensus::_NewValidBlock_default_instance_._instance,
    &::tendermint::consensus::_Proposal_default_instance_._instance,
    &::tendermint::consensus::_ProposalPOL_default_instance_._instance,
    &::tendermint::consensus::_BlockPart_default_instance_._instance,
    &::tendermint::consensus::_Vote_default_instance_._instance,
    &::tendermint::consensus::_HasVote_default_instance_._instance,
    &::tendermint::consensus::_VoteSetMaj23_default_instance_._instance,
    &::tendermint::consensus::_VoteSetBits_default_instance_._instance,
    &::tendermint::consensus::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fconsensus_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n tendermint/consensus/types.proto\022\024tend"
    "ermint.consensus\032\024gogoproto/gogo.proto\032\034"
    "tendermint/types/types.proto\032 tendermint"
    "/libs/bits/types.proto\"\265\001\n\014NewRoundStep\022"
    "\026\n\006height\030\001 \001(\003R\006height\022\024\n\005round\030\002 \001(\005R\005"
    "round\022\022\n\004step\030\003 \001(\rR\004step\0227\n\030seconds_sin"
    "ce_start_time\030\004 \001(\003R\025secondsSinceStartTi"
    "me\022*\n\021last_commit_round\030\005 \001(\005R\017lastCommi"
    "tRound\"\365\001\n\rNewValidBlock\022\026\n\006height\030\001 \001(\003"
    "R\006height\022\024\n\005round\030\002 \001(\005R\005round\022X\n\025block_"
    "part_set_header\030\003 \001(\0132\037.tendermint.types"
    ".PartSetHeaderB\004\310\336\037\000R\022blockPartSetHeader"
    "\022\?\n\013block_parts\030\004 \001(\0132\036.tendermint.libs."
    "bits.BitArrayR\nblockParts\022\033\n\tis_commit\030\005"
    " \001(\010R\010isCommit\"H\n\010Proposal\022<\n\010proposal\030\001"
    " \001(\0132\032.tendermint.types.ProposalB\004\310\336\037\000R\010"
    "proposal\"\234\001\n\013ProposalPOL\022\026\n\006height\030\001 \001(\003"
    "R\006height\022,\n\022proposal_pol_round\030\002 \001(\005R\020pr"
    "oposalPolRound\022G\n\014proposal_pol\030\003 \001(\0132\036.t"
    "endermint.libs.bits.BitArrayB\004\310\336\037\000R\013prop"
    "osalPol\"k\n\tBlockPart\022\026\n\006height\030\001 \001(\003R\006he"
    "ight\022\024\n\005round\030\002 \001(\005R\005round\0220\n\004part\030\003 \001(\013"
    "2\026.tendermint.types.PartB\004\310\336\037\000R\004part\"2\n\004"
    "Vote\022*\n\004vote\030\001 \001(\0132\026.tendermint.types.Vo"
    "teR\004vote\"\202\001\n\007HasVote\022\026\n\006height\030\001 \001(\003R\006he"
    "ight\022\024\n\005round\030\002 \001(\005R\005round\0223\n\004type\030\003 \001(\016"
    "2\037.tendermint.types.SignedMsgTypeR\004type\022"
    "\024\n\005index\030\004 \001(\005R\005index\"\270\001\n\014VoteSetMaj23\022\026"
    "\n\006height\030\001 \001(\003R\006height\022\024\n\005round\030\002 \001(\005R\005r"
    "ound\0223\n\004type\030\003 \001(\0162\037.tendermint.types.Si"
    "gnedMsgTypeR\004type\022E\n\010block_id\030\004 \001(\0132\031.te"
    "ndermint.types.BlockIDB\017\310\336\037\000\342\336\037\007BlockIDR"
    "\007blockId\"\363\001\n\013VoteSetBits\022\026\n\006height\030\001 \001(\003"
    "R\006height\022\024\n\005round\030\002 \001(\005R\005round\0223\n\004type\030\003"
    " \001(\0162\037.tendermint.types.SignedMsgTypeR\004t"
    "ype\022E\n\010block_id\030\004 \001(\0132\031.tendermint.types"
    ".BlockIDB\017\310\336\037\000\342\336\037\007BlockIDR\007blockId\022:\n\005vo"
    "tes\030\005 \001(\0132\036.tendermint.libs.bits.BitArra"
    "yB\004\310\336\037\000R\005votes\"\366\004\n\007Message\022J\n\016new_round_"
    "step\030\001 \001(\0132\".tendermint.consensus.NewRou"
    "ndStepH\000R\014newRoundStep\022M\n\017new_valid_bloc"
    "k\030\002 \001(\0132#.tendermint.consensus.NewValidB"
    "lockH\000R\rnewValidBlock\022<\n\010proposal\030\003 \001(\0132"
    "\036.tendermint.consensus.ProposalH\000R\010propo"
    "sal\022F\n\014proposal_pol\030\004 \001(\0132!.tendermint.c"
    "onsensus.ProposalPOLH\000R\013proposalPol\022@\n\nb"
    "lock_part\030\005 \001(\0132\037.tendermint.consensus.B"
    "lockPartH\000R\tblockPart\0220\n\004vote\030\006 \001(\0132\032.te"
    "ndermint.consensus.VoteH\000R\004vote\022:\n\010has_v"
    "ote\030\007 \001(\0132\035.tendermint.consensus.HasVote"
    "H\000R\007hasVote\022J\n\016vote_set_maj23\030\010 \001(\0132\".te"
    "ndermint.consensus.VoteSetMaj23H\000R\014voteS"
    "etMaj23\022G\n\rvote_set_bits\030\t \001(\0132!.tenderm"
    "int.consensus.VoteSetBitsH\000R\013voteSetBits"
    "B\005\n\003sumB\320\001\n\030com.tendermint.consensusB\nTy"
    "pesProtoP\001Z7github.com/cometbft/cometbft"
    "/proto/tendermint/consensus\242\002\003TCX\252\002\024Tend"
    "ermint.Consensus\312\002\024Tendermint\\Consensus\342"
    "\002 Tendermint\\Consensus\\GPBMetadata\352\002\025Ten"
    "dermint::Consensusb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_tendermint_2flibs_2fbits_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fconsensus_2ftypes_2eproto = {
    false,
    false,
    2386,
    descriptor_table_protodef_tendermint_2fconsensus_2ftypes_2eproto,
    "tendermint/consensus/types.proto",
    &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
    descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fconsensus_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto,
    file_level_enum_descriptors_tendermint_2fconsensus_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fconsensus_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fconsensus_2ftypes_2eproto(&descriptor_table_tendermint_2fconsensus_2ftypes_2eproto);
namespace tendermint {
namespace consensus {
// ===================================================================

class NewRoundStep::_Internal {
 public:
};

NewRoundStep::NewRoundStep(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.NewRoundStep)
}
NewRoundStep::NewRoundStep(const NewRoundStep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.NewRoundStep)
}

inline void NewRoundStep::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.step_) { 0u }

    , decltype(_impl_.seconds_since_start_time_) { ::int64_t{0} }

    , decltype(_impl_.last_commit_round_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NewRoundStep::~NewRoundStep() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.NewRoundStep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewRoundStep::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewRoundStep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewRoundStep::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.NewRoundStep)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.last_commit_round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.last_commit_round_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewRoundStep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 step = 3 [json_name = "step"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 seconds_since_start_time = 4 [json_name = "secondsSinceStartTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.seconds_since_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_commit_round = 5 [json_name = "lastCommitRound"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.last_commit_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NewRoundStep::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.NewRoundStep)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  // uint32 step = 3 [json_name = "step"];
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_step(), target);
  }

  // int64 seconds_since_start_time = 4 [json_name = "secondsSinceStartTime"];
  if (this->_internal_seconds_since_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_seconds_since_start_time(), target);
  }

  // int32 last_commit_round = 5 [json_name = "lastCommitRound"];
  if (this->_internal_last_commit_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_last_commit_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.NewRoundStep)
  return target;
}

::size_t NewRoundStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.NewRoundStep)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // uint32 step = 3 [json_name = "step"];
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_step());
  }

  // int64 seconds_since_start_time = 4 [json_name = "secondsSinceStartTime"];
  if (this->_internal_seconds_since_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_seconds_since_start_time());
  }

  // int32 last_commit_round = 5 [json_name = "lastCommitRound"];
  if (this->_internal_last_commit_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_commit_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewRoundStep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewRoundStep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewRoundStep::GetClassData() const { return &_class_data_; }


void NewRoundStep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewRoundStep*>(&to_msg);
  auto& from = static_cast<const NewRoundStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.NewRoundStep)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  if (from._internal_seconds_since_start_time() != 0) {
    _this->_internal_set_seconds_since_start_time(from._internal_seconds_since_start_time());
  }
  if (from._internal_last_commit_round() != 0) {
    _this->_internal_set_last_commit_round(from._internal_last_commit_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewRoundStep::CopyFrom(const NewRoundStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.NewRoundStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewRoundStep::IsInitialized() const {
  return true;
}

void NewRoundStep::InternalSwap(NewRoundStep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewRoundStep, _impl_.last_commit_round_)
      + sizeof(NewRoundStep::_impl_.last_commit_round_)
      - PROTOBUF_FIELD_OFFSET(NewRoundStep, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewRoundStep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[0]);
}
// ===================================================================

class NewValidBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<NewValidBlock>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NewValidBlock, _impl_._has_bits_);
  static const ::tendermint::types::PartSetHeader& block_part_set_header(const NewValidBlock* msg);
  static void set_has_block_part_set_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::libs::bits::BitArray& block_parts(const NewValidBlock* msg);
  static void set_has_block_parts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::PartSetHeader&
NewValidBlock::_Internal::block_part_set_header(const NewValidBlock* msg) {
  return *msg->_impl_.block_part_set_header_;
}
const ::tendermint::libs::bits::BitArray&
NewValidBlock::_Internal::block_parts(const NewValidBlock* msg) {
  return *msg->_impl_.block_parts_;
}
void NewValidBlock::clear_block_part_set_header() {
  if (_impl_.block_part_set_header_ != nullptr) _impl_.block_part_set_header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NewValidBlock::clear_block_parts() {
  if (_impl_.block_parts_ != nullptr) _impl_.block_parts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NewValidBlock::NewValidBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.NewValidBlock)
}
NewValidBlock::NewValidBlock(const NewValidBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewValidBlock* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_part_set_header_){nullptr}
    , decltype(_impl_.block_parts_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.is_commit_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_part_set_header_ = new ::tendermint::types::PartSetHeader(*from._impl_.block_part_set_header_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.block_parts_ = new ::tendermint::libs::bits::BitArray(*from._impl_.block_parts_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_commit_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_commit_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.NewValidBlock)
}

inline void NewValidBlock::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_part_set_header_){nullptr}
    , decltype(_impl_.block_parts_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.is_commit_) { false }

  };
}

NewValidBlock::~NewValidBlock() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.NewValidBlock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewValidBlock::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_part_set_header_;
  if (this != internal_default_instance()) delete _impl_.block_parts_;
}

void NewValidBlock::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewValidBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.NewValidBlock)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_part_set_header_ != nullptr);
      _impl_.block_part_set_header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.block_parts_ != nullptr);
      _impl_.block_parts_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_commit_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.is_commit_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewValidBlock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.PartSetHeader block_part_set_header = 3 [json_name = "blockPartSetHeader", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_part_set_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.libs.bits.BitArray block_parts = 4 [json_name = "blockParts"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_parts(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_commit = 5 [json_name = "isCommit"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.is_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* NewValidBlock::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.NewValidBlock)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.PartSetHeader block_part_set_header = 3 [json_name = "blockPartSetHeader", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::block_part_set_header(this),
        _Internal::block_part_set_header(this).GetCachedSize(), target, stream);
  }

  // .tendermint.libs.bits.BitArray block_parts = 4 [json_name = "blockParts"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::block_parts(this),
        _Internal::block_parts(this).GetCachedSize(), target, stream);
  }

  // bool is_commit = 5 [json_name = "isCommit"];
  if (this->_internal_is_commit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.NewValidBlock)
  return target;
}

::size_t NewValidBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.NewValidBlock)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.PartSetHeader block_part_set_header = 3 [json_name = "blockPartSetHeader", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_part_set_header_);
    }

    // .tendermint.libs.bits.BitArray block_parts = 4 [json_name = "blockParts"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_parts_);
    }

  }
  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // bool is_commit = 5 [json_name = "isCommit"];
  if (this->_internal_is_commit() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewValidBlock::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewValidBlock::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewValidBlock::GetClassData() const { return &_class_data_; }


void NewValidBlock::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewValidBlock*>(&to_msg);
  auto& from = static_cast<const NewValidBlock&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.NewValidBlock)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_part_set_header()->::tendermint::types::PartSetHeader::MergeFrom(
          from._internal_block_part_set_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_block_parts()->::tendermint::libs::bits::BitArray::MergeFrom(
          from._internal_block_parts());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_is_commit() != 0) {
    _this->_internal_set_is_commit(from._internal_is_commit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewValidBlock::CopyFrom(const NewValidBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.NewValidBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewValidBlock::IsInitialized() const {
  return true;
}

void NewValidBlock::InternalSwap(NewValidBlock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewValidBlock, _impl_.is_commit_)
      + sizeof(NewValidBlock::_impl_.is_commit_)
      - PROTOBUF_FIELD_OFFSET(NewValidBlock, _impl_.block_part_set_header_)>(
          reinterpret_cast<char*>(&_impl_.block_part_set_header_),
          reinterpret_cast<char*>(&other->_impl_.block_part_set_header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewValidBlock::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[1]);
}
// ===================================================================

class Proposal::_Internal {
 public:
  using HasBits = decltype(std::declval<Proposal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Proposal, _impl_._has_bits_);
  static const ::tendermint::types::Proposal& proposal(const Proposal* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Proposal&
Proposal::_Internal::proposal(const Proposal* msg) {
  return *msg->_impl_.proposal_;
}
void Proposal::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Proposal::Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Proposal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_ = new ::tendermint::types::Proposal(*from._impl_.proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Proposal)
}

inline void Proposal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
  };
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Proposal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Proposal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_;
}

void Proposal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Proposal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposal_ != nullptr);
    _impl_.proposal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Proposal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Proposal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Proposal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Proposal)
  return target;
}

::size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Proposal)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Proposal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Proposal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Proposal::GetClassData() const { return &_class_data_; }


void Proposal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Proposal*>(&to_msg);
  auto& from = static_cast<const Proposal&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Proposal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(
        from._internal_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.proposal_, other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[2]);
}
// ===================================================================

class ProposalPOL::_Internal {
 public:
  using HasBits = decltype(std::declval<ProposalPOL>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ProposalPOL, _impl_._has_bits_);
  static const ::tendermint::libs::bits::BitArray& proposal_pol(const ProposalPOL* msg);
  static void set_has_proposal_pol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::libs::bits::BitArray&
ProposalPOL::_Internal::proposal_pol(const ProposalPOL* msg) {
  return *msg->_impl_.proposal_pol_;
}
void ProposalPOL::clear_proposal_pol() {
  if (_impl_.proposal_pol_ != nullptr) _impl_.proposal_pol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ProposalPOL::ProposalPOL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.ProposalPOL)
}
ProposalPOL::ProposalPOL(const ProposalPOL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProposalPOL* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_pol_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.proposal_pol_round_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_pol_ = new ::tendermint::libs::bits::BitArray(*from._impl_.proposal_pol_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.proposal_pol_round_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.proposal_pol_round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.ProposalPOL)
}

inline void ProposalPOL::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_pol_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.proposal_pol_round_) { 0 }

  };
}

ProposalPOL::~ProposalPOL() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.ProposalPOL)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProposalPOL::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_pol_;
}

void ProposalPOL::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProposalPOL::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.ProposalPOL)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposal_pol_ != nullptr);
    _impl_.proposal_pol_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.proposal_pol_round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.proposal_pol_round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProposalPOL::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 proposal_pol_round = 2 [json_name = "proposalPolRound"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.proposal_pol_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.libs.bits.BitArray proposal_pol = 3 [json_name = "proposalPol", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_pol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ProposalPOL::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.ProposalPOL)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 proposal_pol_round = 2 [json_name = "proposalPolRound"];
  if (this->_internal_proposal_pol_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_proposal_pol_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.libs.bits.BitArray proposal_pol = 3 [json_name = "proposalPol", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::proposal_pol(this),
        _Internal::proposal_pol(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.ProposalPOL)
  return target;
}

::size_t ProposalPOL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.ProposalPOL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.libs.bits.BitArray proposal_pol = 3 [json_name = "proposalPol", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_pol_);
  }

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 proposal_pol_round = 2 [json_name = "proposalPolRound"];
  if (this->_internal_proposal_pol_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_proposal_pol_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProposalPOL::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProposalPOL::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProposalPOL::GetClassData() const { return &_class_data_; }


void ProposalPOL::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProposalPOL*>(&to_msg);
  auto& from = static_cast<const ProposalPOL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.ProposalPOL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proposal_pol()->::tendermint::libs::bits::BitArray::MergeFrom(
        from._internal_proposal_pol());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_proposal_pol_round() != 0) {
    _this->_internal_set_proposal_pol_round(from._internal_proposal_pol_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProposalPOL::CopyFrom(const ProposalPOL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.ProposalPOL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposalPOL::IsInitialized() const {
  return true;
}

void ProposalPOL::InternalSwap(ProposalPOL* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProposalPOL, _impl_.proposal_pol_round_)
      + sizeof(ProposalPOL::_impl_.proposal_pol_round_)
      - PROTOBUF_FIELD_OFFSET(ProposalPOL, _impl_.proposal_pol_)>(
          reinterpret_cast<char*>(&_impl_.proposal_pol_),
          reinterpret_cast<char*>(&other->_impl_.proposal_pol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProposalPOL::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[3]);
}
// ===================================================================

class BlockPart::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockPart>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BlockPart, _impl_._has_bits_);
  static const ::tendermint::types::Part& part(const BlockPart* msg);
  static void set_has_part(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Part&
BlockPart::_Internal::part(const BlockPart* msg) {
  return *msg->_impl_.part_;
}
void BlockPart::clear_part() {
  if (_impl_.part_ != nullptr) _impl_.part_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BlockPart::BlockPart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.BlockPart)
}
BlockPart::BlockPart(const BlockPart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BlockPart* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.part_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.part_ = new ::tendermint::types::Part(*from._impl_.part_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.round_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.BlockPart)
}

inline void BlockPart::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.part_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

  };
}

BlockPart::~BlockPart() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.BlockPart)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlockPart::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.part_;
}

void BlockPart::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BlockPart::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.BlockPart)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.part_ != nullptr);
    _impl_.part_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.round_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.round_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockPart::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.Part part = 3 [json_name = "part", (.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_part(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* BlockPart::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.BlockPart)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Part part = 3 [json_name = "part", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::part(this),
        _Internal::part(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.BlockPart)
  return target;
}

::size_t BlockPart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.BlockPart)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Part part = 3 [json_name = "part", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.part_);
  }

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockPart::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BlockPart::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockPart::GetClassData() const { return &_class_data_; }


void BlockPart::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BlockPart*>(&to_msg);
  auto& from = static_cast<const BlockPart&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.BlockPart)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_part()->::tendermint::types::Part::MergeFrom(
        from._internal_part());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockPart::CopyFrom(const BlockPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.BlockPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPart::IsInitialized() const {
  return true;
}

void BlockPart::InternalSwap(BlockPart* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockPart, _impl_.round_)
      + sizeof(BlockPart::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(BlockPart, _impl_.part_)>(
          reinterpret_cast<char*>(&_impl_.part_),
          reinterpret_cast<char*>(&other->_impl_.part_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockPart::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[4]);
}
// ===================================================================

class Vote::_Internal {
 public:
  using HasBits = decltype(std::declval<Vote>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Vote, _impl_._has_bits_);
  static const ::tendermint::types::Vote& vote(const Vote* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Vote&
Vote::_Internal::vote(const Vote* msg) {
  return *msg->_impl_.vote_;
}
void Vote::clear_vote() {
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Vote::Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vote* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_ = new ::tendermint::types::Vote(*from._impl_.vote_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Vote)
}

inline void Vote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}
  };
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Vote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_;
}

void Vote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Vote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1 [json_name = "vote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Vote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Vote vote = 1 [json_name = "vote"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Vote)
  return target;
}

::size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Vote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.Vote vote = 1 [json_name = "vote"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vote::GetClassData() const { return &_class_data_; }


void Vote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vote*>(&to_msg);
  auto& from = static_cast<const Vote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Vote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(
        from._internal_vote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.vote_, other->_impl_.vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[5]);
}
// ===================================================================

class HasVote::_Internal {
 public:
};

HasVote::HasVote(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.HasVote)
}
HasVote::HasVote(const HasVote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.HasVote)
}

inline void HasVote::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.index_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HasVote::~HasVote() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.HasVote)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HasVote::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void HasVote::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HasVote::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.HasVote)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HasVote::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 index = 4 [json_name = "index"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HasVote::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.HasVote)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  // int32 index = 4 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.HasVote)
  return target;
}

::size_t HasVote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.HasVote)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 index = 4 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HasVote::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HasVote::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HasVote::GetClassData() const { return &_class_data_; }


void HasVote::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HasVote*>(&to_msg);
  auto& from = static_cast<const HasVote&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.HasVote)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HasVote::CopyFrom(const HasVote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.HasVote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HasVote::IsInitialized() const {
  return true;
}

void HasVote::InternalSwap(HasVote* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HasVote, _impl_.index_)
      + sizeof(HasVote::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(HasVote, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HasVote::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[6]);
}
// ===================================================================

class VoteSetMaj23::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteSetMaj23>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VoteSetMaj23, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const VoteSetMaj23* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::BlockID&
VoteSetMaj23::_Internal::block_id(const VoteSetMaj23* msg) {
  return *msg->_impl_.block_id_;
}
void VoteSetMaj23::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VoteSetMaj23::VoteSetMaj23(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.VoteSetMaj23)
}
VoteSetMaj23::VoteSetMaj23(const VoteSetMaj23& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteSetMaj23* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.VoteSetMaj23)
}

inline void VoteSetMaj23::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.type_) { 0 }

  };
}

VoteSetMaj23::~VoteSetMaj23() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.VoteSetMaj23)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteSetMaj23::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_id_;
}

void VoteSetMaj23::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteSetMaj23::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.VoteSetMaj23)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.block_id_ != nullptr);
    _impl_.block_id_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteSetMaj23::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VoteSetMaj23::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.VoteSetMaj23)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.VoteSetMaj23)
  return target;
}

::size_t VoteSetMaj23::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.VoteSetMaj23)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.block_id_);
  }

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteSetMaj23::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteSetMaj23::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteSetMaj23::GetClassData() const { return &_class_data_; }


void VoteSetMaj23::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteSetMaj23*>(&to_msg);
  auto& from = static_cast<const VoteSetMaj23&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.VoteSetMaj23)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
        from._internal_block_id());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteSetMaj23::CopyFrom(const VoteSetMaj23& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.VoteSetMaj23)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSetMaj23::IsInitialized() const {
  return true;
}

void VoteSetMaj23::InternalSwap(VoteSetMaj23* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteSetMaj23, _impl_.type_)
      + sizeof(VoteSetMaj23::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VoteSetMaj23, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteSetMaj23::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[7]);
}
// ===================================================================

class VoteSetBits::_Internal {
 public:
  using HasBits = decltype(std::declval<VoteSetBits>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VoteSetBits, _impl_._has_bits_);
  static const ::tendermint::types::BlockID& block_id(const VoteSetBits* msg);
  static void set_has_block_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::libs::bits::BitArray& votes(const VoteSetBits* msg);
  static void set_has_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::BlockID&
VoteSetBits::_Internal::block_id(const VoteSetBits* msg) {
  return *msg->_impl_.block_id_;
}
const ::tendermint::libs::bits::BitArray&
VoteSetBits::_Internal::votes(const VoteSetBits* msg) {
  return *msg->_impl_.votes_;
}
void VoteSetBits::clear_block_id() {
  if (_impl_.block_id_ != nullptr) _impl_.block_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void VoteSetBits::clear_votes() {
  if (_impl_.votes_ != nullptr) _impl_.votes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
VoteSetBits::VoteSetBits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.VoteSetBits)
}
VoteSetBits::VoteSetBits(const VoteSetBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VoteSetBits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.votes_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.block_id_ = new ::tendermint::types::BlockID(*from._impl_.block_id_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.votes_ = new ::tendermint::libs::bits::BitArray(*from._impl_.votes_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.VoteSetBits)
}

inline void VoteSetBits::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.block_id_){nullptr}
    , decltype(_impl_.votes_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.type_) { 0 }

  };
}

VoteSetBits::~VoteSetBits() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.VoteSetBits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VoteSetBits::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.block_id_;
  if (this != internal_default_instance()) delete _impl_.votes_;
}

void VoteSetBits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VoteSetBits::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.VoteSetBits)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.block_id_ != nullptr);
      _impl_.block_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.votes_ != nullptr);
      _impl_.votes_->Clear();
    }
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteSetBits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 2 [json_name = "round"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tendermint::types::SignedMsgType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_id(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.libs.bits.BitArray votes = 5 [json_name = "votes", (.gogoproto.nullable) = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_votes(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VoteSetBits::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.VoteSetBits)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_round(), target);
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::block_id(this),
        _Internal::block_id(this).GetCachedSize(), target, stream);
  }

  // .tendermint.libs.bits.BitArray votes = 5 [json_name = "votes", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::votes(this),
        _Internal::votes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.VoteSetBits)
  return target;
}

::size_t VoteSetBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.VoteSetBits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.BlockID block_id = 4 [json_name = "blockId", (.gogoproto.nullable) = false, (.gogoproto.customname) = "BlockID"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.block_id_);
    }

    // .tendermint.libs.bits.BitArray votes = 5 [json_name = "votes", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.votes_);
    }

  }
  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 2 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // .tendermint.types.SignedMsgType type = 3 [json_name = "type"];
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VoteSetBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VoteSetBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VoteSetBits::GetClassData() const { return &_class_data_; }


void VoteSetBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VoteSetBits*>(&to_msg);
  auto& from = static_cast<const VoteSetBits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.VoteSetBits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_block_id()->::tendermint::types::BlockID::MergeFrom(
          from._internal_block_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_votes()->::tendermint::libs::bits::BitArray::MergeFrom(
          from._internal_votes());
    }
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VoteSetBits::CopyFrom(const VoteSetBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.VoteSetBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteSetBits::IsInitialized() const {
  return true;
}

void VoteSetBits::InternalSwap(VoteSetBits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VoteSetBits, _impl_.type_)
      + sizeof(VoteSetBits::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(VoteSetBits, _impl_.block_id_)>(
          reinterpret_cast<char*>(&_impl_.block_id_),
          reinterpret_cast<char*>(&other->_impl_.block_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteSetBits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[8]);
}
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::Message, _impl_._oneof_case_);
  static const ::tendermint::consensus::NewRoundStep& new_round_step(const Message* msg);
  static const ::tendermint::consensus::NewValidBlock& new_valid_block(const Message* msg);
  static const ::tendermint::consensus::Proposal& proposal(const Message* msg);
  static const ::tendermint::consensus::ProposalPOL& proposal_pol(const Message* msg);
  static const ::tendermint::consensus::BlockPart& block_part(const Message* msg);
  static const ::tendermint::consensus::Vote& vote(const Message* msg);
  static const ::tendermint::consensus::HasVote& has_vote(const Message* msg);
  static const ::tendermint::consensus::VoteSetMaj23& vote_set_maj23(const Message* msg);
  static const ::tendermint::consensus::VoteSetBits& vote_set_bits(const Message* msg);
};

const ::tendermint::consensus::NewRoundStep&
Message::_Internal::new_round_step(const Message* msg) {
  return *msg->_impl_.sum_.new_round_step_;
}
const ::tendermint::consensus::NewValidBlock&
Message::_Internal::new_valid_block(const Message* msg) {
  return *msg->_impl_.sum_.new_valid_block_;
}
const ::tendermint::consensus::Proposal&
Message::_Internal::proposal(const Message* msg) {
  return *msg->_impl_.sum_.proposal_;
}
const ::tendermint::consensus::ProposalPOL&
Message::_Internal::proposal_pol(const Message* msg) {
  return *msg->_impl_.sum_.proposal_pol_;
}
const ::tendermint::consensus::BlockPart&
Message::_Internal::block_part(const Message* msg) {
  return *msg->_impl_.sum_.block_part_;
}
const ::tendermint::consensus::Vote&
Message::_Internal::vote(const Message* msg) {
  return *msg->_impl_.sum_.vote_;
}
const ::tendermint::consensus::HasVote&
Message::_Internal::has_vote(const Message* msg) {
  return *msg->_impl_.sum_.has_vote_;
}
const ::tendermint::consensus::VoteSetMaj23&
Message::_Internal::vote_set_maj23(const Message* msg) {
  return *msg->_impl_.sum_.vote_set_maj23_;
}
const ::tendermint::consensus::VoteSetBits&
Message::_Internal::vote_set_bits(const Message* msg) {
  return *msg->_impl_.sum_.vote_set_bits_;
}
void Message::set_allocated_new_round_step(::tendermint::consensus::NewRoundStep* new_round_step) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (new_round_step) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_round_step);
    if (message_arena != submessage_arena) {
      new_round_step = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_round_step, submessage_arena);
    }
    set_has_new_round_step();
    _impl_.sum_.new_round_step_ = new_round_step;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.new_round_step)
}
void Message::set_allocated_new_valid_block(::tendermint::consensus::NewValidBlock* new_valid_block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (new_valid_block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_valid_block);
    if (message_arena != submessage_arena) {
      new_valid_block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_valid_block, submessage_arena);
    }
    set_has_new_valid_block();
    _impl_.sum_.new_valid_block_ = new_valid_block;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.new_valid_block)
}
void Message::set_allocated_proposal(::tendermint::consensus::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    set_has_proposal();
    _impl_.sum_.proposal_ = proposal;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.proposal)
}
void Message::set_allocated_proposal_pol(::tendermint::consensus::ProposalPOL* proposal_pol) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (proposal_pol) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(proposal_pol);
    if (message_arena != submessage_arena) {
      proposal_pol = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal_pol, submessage_arena);
    }
    set_has_proposal_pol();
    _impl_.sum_.proposal_pol_ = proposal_pol;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.proposal_pol)
}
void Message::set_allocated_block_part(::tendermint::consensus::BlockPart* block_part) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (block_part) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(block_part);
    if (message_arena != submessage_arena) {
      block_part = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_part, submessage_arena);
    }
    set_has_block_part();
    _impl_.sum_.block_part_ = block_part;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.block_part)
}
void Message::set_allocated_vote(::tendermint::consensus::Vote* vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote);
    if (message_arena != submessage_arena) {
      vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote, submessage_arena);
    }
    set_has_vote();
    _impl_.sum_.vote_ = vote;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote)
}
void Message::set_allocated_has_vote(::tendermint::consensus::HasVote* has_vote) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (has_vote) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(has_vote);
    if (message_arena != submessage_arena) {
      has_vote = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, has_vote, submessage_arena);
    }
    set_has_has_vote();
    _impl_.sum_.has_vote_ = has_vote;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.has_vote)
}
void Message::set_allocated_vote_set_maj23(::tendermint::consensus::VoteSetMaj23* vote_set_maj23) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote_set_maj23) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_set_maj23);
    if (message_arena != submessage_arena) {
      vote_set_maj23 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_set_maj23, submessage_arena);
    }
    set_has_vote_set_maj23();
    _impl_.sum_.vote_set_maj23_ = vote_set_maj23;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote_set_maj23)
}
void Message::set_allocated_vote_set_bits(::tendermint::consensus::VoteSetBits* vote_set_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (vote_set_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vote_set_bits);
    if (message_arena != submessage_arena) {
      vote_set_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vote_set_bits, submessage_arena);
    }
    set_has_vote_set_bits();
    _impl_.sum_.vote_set_bits_ = vote_set_bits;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.Message.vote_set_bits)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kNewRoundStep: {
      _this->_internal_mutable_new_round_step()->::tendermint::consensus::NewRoundStep::MergeFrom(
          from._internal_new_round_step());
      break;
    }
    case kNewValidBlock: {
      _this->_internal_mutable_new_valid_block()->::tendermint::consensus::NewValidBlock::MergeFrom(
          from._internal_new_valid_block());
      break;
    }
    case kProposal: {
      _this->_internal_mutable_proposal()->::tendermint::consensus::Proposal::MergeFrom(
          from._internal_proposal());
      break;
    }
    case kProposalPol: {
      _this->_internal_mutable_proposal_pol()->::tendermint::consensus::ProposalPOL::MergeFrom(
          from._internal_proposal_pol());
      break;
    }
    case kBlockPart: {
      _this->_internal_mutable_block_part()->::tendermint::consensus::BlockPart::MergeFrom(
          from._internal_block_part());
      break;
    }
    case kVote: {
      _this->_internal_mutable_vote()->::tendermint::consensus::Vote::MergeFrom(
          from._internal_vote());
      break;
    }
    case kHasVote: {
      _this->_internal_mutable_has_vote()->::tendermint::consensus::HasVote::MergeFrom(
          from._internal_has_vote());
      break;
    }
    case kVoteSetMaj23: {
      _this->_internal_mutable_vote_set_maj23()->::tendermint::consensus::VoteSetMaj23::MergeFrom(
          from._internal_vote_set_maj23());
      break;
    }
    case kVoteSetBits: {
      _this->_internal_mutable_vote_set_bits()->::tendermint::consensus::VoteSetBits::MergeFrom(
          from._internal_vote_set_bits());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.consensus.Message)
  switch (sum_case()) {
    case kNewRoundStep: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.new_round_step_;
      }
      break;
    }
    case kNewValidBlock: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.new_valid_block_;
      }
      break;
    }
    case kProposal: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.proposal_;
      }
      break;
    }
    case kProposalPol: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.proposal_pol_;
      }
      break;
    }
    case kBlockPart: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.block_part_;
      }
      break;
    }
    case kVote: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.vote_;
      }
      break;
    }
    case kHasVote: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.has_vote_;
      }
      break;
    }
    case kVoteSetMaj23: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.vote_set_maj23_;
      }
      break;
    }
    case kVoteSetBits: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.vote_set_bits_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.consensus.NewRoundStep new_round_step = 1 [json_name = "newRoundStep"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_round_step(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.NewValidBlock new_valid_block = 2 [json_name = "newValidBlock"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_valid_block(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.Proposal proposal = 3 [json_name = "proposal"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.ProposalPOL proposal_pol = 4 [json_name = "proposalPol"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal_pol(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.BlockPart block_part = 5 [json_name = "blockPart"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_block_part(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.Vote vote = 6 [json_name = "vote"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.HasVote has_vote = 7 [json_name = "hasVote"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_has_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8 [json_name = "voteSetMaj23"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_set_maj23(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.VoteSetBits vote_set_bits = 9 [json_name = "voteSetBits"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote_set_bits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kNewRoundStep: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::new_round_step(this),
          _Internal::new_round_step(this).GetCachedSize(), target, stream);
      break;
    }
    case kNewValidBlock: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::new_valid_block(this),
          _Internal::new_valid_block(this).GetCachedSize(), target, stream);
      break;
    }
    case kProposal: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::proposal(this),
          _Internal::proposal(this).GetCachedSize(), target, stream);
      break;
    }
    case kProposalPol: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::proposal_pol(this),
          _Internal::proposal_pol(this).GetCachedSize(), target, stream);
      break;
    }
    case kBlockPart: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::block_part(this),
          _Internal::block_part(this).GetCachedSize(), target, stream);
      break;
    }
    case kVote: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::vote(this),
          _Internal::vote(this).GetCachedSize(), target, stream);
      break;
    }
    case kHasVote: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::has_vote(this),
          _Internal::has_vote(this).GetCachedSize(), target, stream);
      break;
    }
    case kVoteSetMaj23: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::vote_set_maj23(this),
          _Internal::vote_set_maj23(this).GetCachedSize(), target, stream);
      break;
    }
    case kVoteSetBits: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::vote_set_bits(this),
          _Internal::vote_set_bits(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.consensus.NewRoundStep new_round_step = 1 [json_name = "newRoundStep"];
    case kNewRoundStep: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.new_round_step_);
      break;
    }
    // .tendermint.consensus.NewValidBlock new_valid_block = 2 [json_name = "newValidBlock"];
    case kNewValidBlock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.new_valid_block_);
      break;
    }
    // .tendermint.consensus.Proposal proposal = 3 [json_name = "proposal"];
    case kProposal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.proposal_);
      break;
    }
    // .tendermint.consensus.ProposalPOL proposal_pol = 4 [json_name = "proposalPol"];
    case kProposalPol: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.proposal_pol_);
      break;
    }
    // .tendermint.consensus.BlockPart block_part = 5 [json_name = "blockPart"];
    case kBlockPart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.block_part_);
      break;
    }
    // .tendermint.consensus.Vote vote = 6 [json_name = "vote"];
    case kVote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.vote_);
      break;
    }
    // .tendermint.consensus.HasVote has_vote = 7 [json_name = "hasVote"];
    case kHasVote: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.has_vote_);
      break;
    }
    // .tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8 [json_name = "voteSetMaj23"];
    case kVoteSetMaj23: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.vote_set_maj23_);
      break;
    }
    // .tendermint.consensus.VoteSetBits vote_set_bits = 9 [json_name = "voteSetBits"];
    case kVoteSetBits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.vote_set_bits_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kNewRoundStep: {
      _this->_internal_mutable_new_round_step()->::tendermint::consensus::NewRoundStep::MergeFrom(
          from._internal_new_round_step());
      break;
    }
    case kNewValidBlock: {
      _this->_internal_mutable_new_valid_block()->::tendermint::consensus::NewValidBlock::MergeFrom(
          from._internal_new_valid_block());
      break;
    }
    case kProposal: {
      _this->_internal_mutable_proposal()->::tendermint::consensus::Proposal::MergeFrom(
          from._internal_proposal());
      break;
    }
    case kProposalPol: {
      _this->_internal_mutable_proposal_pol()->::tendermint::consensus::ProposalPOL::MergeFrom(
          from._internal_proposal_pol());
      break;
    }
    case kBlockPart: {
      _this->_internal_mutable_block_part()->::tendermint::consensus::BlockPart::MergeFrom(
          from._internal_block_part());
      break;
    }
    case kVote: {
      _this->_internal_mutable_vote()->::tendermint::consensus::Vote::MergeFrom(
          from._internal_vote());
      break;
    }
    case kHasVote: {
      _this->_internal_mutable_has_vote()->::tendermint::consensus::HasVote::MergeFrom(
          from._internal_has_vote());
      break;
    }
    case kVoteSetMaj23: {
      _this->_internal_mutable_vote_set_maj23()->::tendermint::consensus::VoteSetMaj23::MergeFrom(
          from._internal_vote_set_maj23());
      break;
    }
    case kVoteSetBits: {
      _this->_internal_mutable_vote_set_bits()->::tendermint::consensus::VoteSetBits::MergeFrom(
          from._internal_vote_set_bits());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2ftypes_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::consensus::NewRoundStep*
Arena::CreateMaybeMessage< ::tendermint::consensus::NewRoundStep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::NewRoundStep >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::NewValidBlock*
Arena::CreateMaybeMessage< ::tendermint::consensus::NewValidBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::NewValidBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Proposal*
Arena::CreateMaybeMessage< ::tendermint::consensus::Proposal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::ProposalPOL*
Arena::CreateMaybeMessage< ::tendermint::consensus::ProposalPOL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::ProposalPOL >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::BlockPart*
Arena::CreateMaybeMessage< ::tendermint::consensus::BlockPart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::BlockPart >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Vote*
Arena::CreateMaybeMessage< ::tendermint::consensus::Vote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::HasVote*
Arena::CreateMaybeMessage< ::tendermint::consensus::HasVote >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::HasVote >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::VoteSetMaj23*
Arena::CreateMaybeMessage< ::tendermint::consensus::VoteSetMaj23 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::VoteSetMaj23 >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::VoteSetBits*
Arena::CreateMaybeMessage< ::tendermint::consensus::VoteSetBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::VoteSetBits >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::Message*
Arena::CreateMaybeMessage< ::tendermint::consensus::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/wal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2fwal_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2fwal_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/consensus/types.pb.h"
#include "tendermint/types/events.pb.h"
#include "google/protobuf/duration.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fconsensus_2fwal_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fconsensus_2fwal_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2fconsensus_2fwal_2eproto;
namespace tendermint {
namespace consensus {
class EndHeight;
struct EndHeightDefaultTypeInternal;
extern EndHeightDefaultTypeInternal _EndHeight_default_instance_;
class MsgInfo;
struct MsgInfoDefaultTypeInternal;
extern MsgInfoDefaultTypeInternal _MsgInfo_default_instance_;
class TimedWALMessage;
struct TimedWALMessageDefaultTypeInternal;
extern TimedWALMessageDefaultTypeInternal _TimedWALMessage_default_instance_;
class TimeoutInfo;
struct TimeoutInfoDefaultTypeInternal;
extern TimeoutInfoDefaultTypeInternal _TimeoutInfo_default_instance_;
class WALMessage;
struct WALMessageDefaultTypeInternal;
extern WALMessageDefaultTypeInternal _WALMessage_default_instance_;
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::consensus::EndHeight* Arena::CreateMaybeMessage<::tendermint::consensus::EndHeight>(Arena*);
template <>
::tendermint::consensus::MsgInfo* Arena::CreateMaybeMessage<::tendermint::consensus::MsgInfo>(Arena*);
template <>
::tendermint::consensus::TimedWALMessage* Arena::CreateMaybeMessage<::tendermint::consensus::TimedWALMessage>(Arena*);
template <>
::tendermint::consensus::TimeoutInfo* Arena::CreateMaybeMessage<::tendermint::consensus::TimeoutInfo>(Arena*);
template <>
::tendermint::consensus::WALMessage* Arena::CreateMaybeMessage<::tendermint::consensus::WALMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace consensus {

// ===================================================================


// -------------------------------------------------------------------

class MsgInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.MsgInfo) */ {
 public:
  inline MsgInfo() : MsgInfo(nullptr) {}
  ~MsgInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MsgInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgInfo(const MsgInfo& from);
  MsgInfo(MsgInfo&& from) noexcept
    : MsgInfo() {
    *this = ::std::move(from);
  }

  inline MsgInfo& operator=(const MsgInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgInfo& operator=(MsgInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgInfo* internal_default_instance() {
    return reinterpret_cast<const MsgInfo*>(
               &_MsgInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgInfo& a, MsgInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgInfo& from) {
    MsgInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.consensus.MsgInfo";
  }
  protected:
  explicit MsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIdFieldNumber = 2,
    kMsgFieldNumber = 1,
  };
  // string peer_id = 2 [json_name = "peerId", (.gogoproto.customname) = "PeerID"];
  void clear_peer_id() ;
  const std::string& peer_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_peer_id(Arg_&& arg, Args_... args);
  std::string* mutable_peer_id();
  PROTOBUF_NODISCARD std::string* release_peer_id();
  void set_allocated_peer_id(std::string* ptr);

  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(
      const std::string& value);
  std::string* _internal_mutable_peer_id();

  public:
  // .tendermint.consensus.Message msg = 1 [json_name = "msg", (.gogoproto.nullable) = false];
  bool has_msg() const;
  void clear_msg() ;
  const ::tendermint::consensus::Message& msg() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::Message* release_msg();
  ::tendermint::consensus::Message* mutable_msg();
  void set_allocated_msg(::tendermint::consensus::Message* msg);
  private:
  const ::tendermint::consensus::Message& _internal_msg() const;
  ::tendermint::consensus::Message* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::tendermint::consensus::Message* msg);
  ::tendermint::consensus::Message* unsafe_arena_release_msg();
  // @@protoc_insertion_point(class_scope:tendermint.consensus.MsgInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
    ::tendermint::consensus::Message* msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fconsensus_2fwal_2eproto;
};// -------------------------------------------------------------------

class TimeoutInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.TimeoutInfo) */ {
 public:
  inline TimeoutInfo() : TimeoutInfo(nullptr) {}
  ~TimeoutInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeoutInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeoutInfo(const TimeoutInfo& from);
  TimeoutInfo(TimeoutInfo&& from) noexcept
    : TimeoutInfo() {
    *this = ::std::move(from);
  }

  inline TimeoutInfo& operator=(const TimeoutInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeoutInfo& operator=(TimeoutInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeoutInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeoutInfo* internal_default_instance() {
    return reinterpret_cast<const TimeoutInfo*>(
               &_TimeoutInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimeoutInfo& a, TimeoutInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeoutInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeoutInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeoutInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeoutInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeoutInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeoutInfo& from) {
    TimeoutInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeoutInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.consensus.TimeoutInfo";
  }
  protected:
  explicit TimeoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
    kHeightFieldNumber = 2,
    kRoundFieldNumber = 3,
    kStepFieldNumber = 4,
  };
  // .google.protobuf.Duration duration = 1 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  bool has_duration() const;
  void clear_duration() ;
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();
  // int64 height = 2 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int32 round = 3 [json_name = "round"];
  void clear_round() ;
  ::int32_t round() const;
  void set_round(::int32_t value);

  private:
  ::int32_t _internal_round() const;
  void _internal_set_round(::int32_t value);

  public:
  // uint32 step = 4 [json_name = "step"];
  void clear_step() ;
  ::uint32_t step() const;
  void set_step(::uint32_t value);

  private:
  ::uint32_t _internal_step() const;
  void _internal_set_step(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.consensus.TimeoutInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
    ::int64_t height_;
    ::int32_t round_;
    ::uint32_t step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fconsensus_2fwal_2eproto;
};// -------------------------------------------------------------------

class EndHeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.EndHeight) */ {
 public:
  inline EndHeight() : EndHeight(nullptr) {}
  ~EndHeight() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EndHeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndHeight(const EndHeight& from);
  EndHeight(EndHeight&& from) noexcept
    : EndHeight() {
    *this = ::std::move(from);
  }

  inline EndHeight& operator=(const EndHeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndHeight& operator=(EndHeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EndHeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndHeight* internal_default_instance() {
    return reinterpret_cast<const EndHeight*>(
               &_EndHeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EndHeight& a, EndHeight& b) {
    a.Swap(&b);
  }
  inline void Swap(EndHeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndHeight* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EndHeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EndHeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EndHeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EndHeight& from) {
    EndHeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndHeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.consensus.EndHeight";
  }
  protected:
  explicit EndHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.consensus.EndHeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fconsensus_2fwal_2eproto;
};// -------------------------------------------------------------------

class WALMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.WALMessage) */ {
 public:
  inline WALMessage() : WALMessage(nullptr) {}
  ~WALMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WALMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WALMessage(const WALMessage& from);
  WALMessage(WALMessage&& from) noexcept
    : WALMessage() {
    *this = ::std::move(from);
  }

  inline WALMessage& operator=(const WALMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline WALMessage& operator=(WALMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WALMessage& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kEventDataRoundState = 1,
    kMsgInfo = 2,
    kTimeoutInfo = 3,
    kEndHeight = 4,
    SUM_NOT_SET = 0,
  };

  static inline const WALMessage* internal_default_instance() {
    return reinterpret_cast<const WALMessage*>(
               &_WALMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WALMessage& a, WALMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(WALMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WALMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WALMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WALMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WALMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WALMessage& from) {
    WALMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WALMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.consensus.WALMessage";
  }
  protected:
  explicit WALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventDataRoundStateFieldNumber = 1,
    kMsgInfoFieldNumber = 2,
    kTimeoutInfoFieldNumber = 3,
    kEndHeightFieldNumber = 4,
  };
  // .tendermint.types.EventDataRoundState event_data_round_state = 1 [json_name = "eventDataRoundState"];
  bool has_event_data_round_state() const;
  private:
  bool _internal_has_event_data_round_state() const;

  public:
  void clear_event_data_round_state() ;
  const ::tendermint::types::EventDataRoundState& event_data_round_state() const;
  PROTOBUF_NODISCARD ::tendermint::types::EventDataRoundState* release_event_data_round_state();
  ::tendermint::types::EventDataRoundState* mutable_event_data_round_state();
  void set_allocated_event_data_round_state(::tendermint::types::EventDataRoundState* event_data_round_state);
  private:
  const ::tendermint::types::EventDataRoundState& _internal_event_data_round_state() const;
  ::tendermint::types::EventDataRoundState* _internal_mutable_event_data_round_state();
  public:
  void unsafe_arena_set_allocated_event_data_round_state(
      ::tendermint::types::EventDataRoundState* event_data_round_state);
  ::tendermint::types::EventDataRoundState* unsafe_arena_release_event_data_round_state();
  // .tendermint.consensus.MsgInfo msg_info = 2 [json_name = "msgInfo"];
  bool has_msg_info() const;
  private:
  bool _internal_has_msg_info() const;

  public:
  void clear_msg_info() ;
  const ::tendermint::consensus::MsgInfo& msg_info() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::MsgInfo* release_msg_info();
  ::tendermint::consensus::MsgInfo* mutable_msg_info();
  void set_allocated_msg_info(::tendermint::consensus::MsgInfo* msg_info);
  private:
  const ::tendermint::consensus::MsgInfo& _internal_msg_info() const;
  ::tendermint::consensus::MsgInfo* _internal_mutable_msg_info();
  public:
  void unsafe_arena_set_allocated_msg_info(
      ::tendermint::consensus::MsgInfo* msg_info);
  ::tendermint::consensus::MsgInfo* unsafe_arena_release_msg_info();
  // .tendermint.consensus.TimeoutInfo timeout_info = 3 [json_name = "timeoutInfo"];
  bool has_timeout_info() const;
  private:
  bool _internal_has_timeout_info() const;

  public:
  void clear_timeout_info() ;
  const ::tendermint::consensus::TimeoutInfo& timeout_info() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::TimeoutInfo* release_timeout_info();
  ::tendermint::consensus::TimeoutInfo* mutable_timeout_info();
  void set_allocated_timeout_info(::tendermint::consensus::TimeoutInfo* timeout_info);
  private:
  const ::tendermint::consensus::TimeoutInfo& _internal_timeout_info() const;
  ::tendermint::consensus::TimeoutInfo* _internal_mutable_timeout_info();
  public:
  void unsafe_arena_set_allocated_timeout_info(
      ::tendermint::consensus::TimeoutInfo* timeout_info);
  ::tendermint::consensus::TimeoutInfo* unsafe_arena_release_timeout_info();
  // .tendermint.consensus.EndHeight end_height = 4 [json_name = "endHeight"];
  bool has_end_height() const;
  private:
  bool _internal_has_end_height() const;

  public:
  void clear_end_height() ;
  const ::tendermint::consensus::EndHeight& end_height() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::EndHeight* release_end_height();
  ::tendermint::consensus::EndHeight* mutable_end_height();
  void set_allocated_end_height(::tendermint::consensus::EndHeight* end_height);
  private:
  const ::tendermint::consensus::EndHeight& _internal_end_height() const;
  ::tendermint::consensus::EndHeight* _internal_mutable_end_height();
  public:
  void unsafe_arena_set_allocated_end_height(
      ::tendermint::consensus::EndHeight* end_height);
  ::tendermint::consensus::EndHeight* unsafe_arena_release_end_height();
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.consensus.WALMessage)
 private:
  class _Internal;
  void set_has_event_data_round_state();
  void set_has_msg_info();
  void set_has_timeout_info();
  void set_has_end_height();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tendermint::types::EventDataRoundState* event_data_round_state_;
      ::tendermint::consensus::MsgInfo* msg_info_;
      ::tendermint::consensus::TimeoutInfo* timeout_info_;
      ::tendermint::consensus::EndHeight* end_height_;
    } sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fconsensus_2fwal_2eproto;
};// -------------------------------------------------------------------

class TimedWALMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.consensus.TimedWALMessage) */ {
 public:
  inline TimedWALMessage() : TimedWALMessage(nullptr) {}
  ~TimedWALMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimedWALMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimedWALMessage(const TimedWALMessage& from);
  TimedWALMessage(TimedWALMessage&& from) noexcept
    : TimedWALMessage() {
    *this = ::std::move(from);
  }

  inline TimedWALMessage& operator=(const TimedWALMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimedWALMessage& operator=(TimedWALMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimedWALMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimedWALMessage* internal_default_instance() {
    return reinterpret_cast<const TimedWALMessage*>(
               &_TimedWALMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TimedWALMessage& a, TimedWALMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TimedWALMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimedWALMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimedWALMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimedWALMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimedWALMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimedWALMessage& from) {
    TimedWALMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimedWALMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.consensus.TimedWALMessage";
  }
  protected:
  explicit TimedWALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_time() const;
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .tendermint.consensus.WALMessage msg = 2 [json_name = "msg"];
  bool has_msg() const;
  void clear_msg() ;
  const ::tendermint::consensus::WALMessage& msg() const;
  PROTOBUF_NODISCARD ::tendermint::consensus::WALMessage* release_msg();
  ::tendermint::consensus::WALMessage* mutable_msg();
  void set_allocated_msg(::tendermint::consensus::WALMessage* msg);
  private:
  const ::tendermint::consensus::WALMessage& _internal_msg() const;
  ::tendermint::consensus::WALMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::tendermint::consensus::WALMessage* msg);
  ::tendermint::consensus::WALMessage* unsafe_arena_release_msg();
  // @@protoc_insertion_point(class_scope:tendermint.consensus.TimedWALMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::tendermint::consensus::WALMessage* msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fconsensus_2fwal_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MsgInfo

// .tendermint.consensus.Message msg = 1 [json_name = "msg", (.gogoproto.nullable) = false];
inline bool MsgInfo::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline const ::tendermint::consensus::Message& MsgInfo::_internal_msg() const {
  const ::tendermint::consensus::Message* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::consensus::Message&>(
      ::tendermint::consensus::_Message_default_instance_);
}
inline const ::tendermint::consensus::Message& MsgInfo::msg() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.MsgInfo.msg)
  return _internal_msg();
}
inline void MsgInfo::unsafe_arena_set_allocated_msg(
    ::tendermint::consensus::Message* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.MsgInfo.msg)
}
inline ::tendermint::consensus::Message* MsgInfo::release_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::consensus::Message* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::consensus::Message* MsgInfo::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.MsgInfo.msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::consensus::Message* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::tendermint::consensus::Message* MsgInfo::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::consensus::Message>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::tendermint::consensus::Message* MsgInfo::mutable_msg() {
  ::tendermint::consensus::Message* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.MsgInfo.msg)
  return _msg;
}
inline void MsgInfo::set_allocated_msg(::tendermint::consensus::Message* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg));
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.MsgInfo.msg)
}

// string peer_id = 2 [json_name = "peerId", (.gogoproto.customname) = "PeerID"];
inline void MsgInfo::clear_peer_id() {
  _impl_.peer_id_.ClearToEmpty();
}
inline const std::string& MsgInfo::peer_id() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.MsgInfo.peer_id)
  return _internal_peer_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MsgInfo::set_peer_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.peer_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.consensus.MsgInfo.peer_id)
}
inline std::string* MsgInfo::mutable_peer_id() {
  std::string* _s = _internal_mutable_peer_id();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.MsgInfo.peer_id)
  return _s;
}
inline const std::string& MsgInfo::_internal_peer_id() const {
  return _impl_.peer_id_.Get();
}
inline void MsgInfo::_internal_set_peer_id(const std::string& value) {
  ;


  _impl_.peer_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgInfo::_internal_mutable_peer_id() {
  ;
  return _impl_.peer_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MsgInfo::release_peer_id() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.MsgInfo.peer_id)
  return _impl_.peer_id_.Release();
}
inline void MsgInfo::set_allocated_peer_id(std::string* value) {
  _impl_.peer_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.peer_id_.IsDefault()) {
          _impl_.peer_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.MsgInfo.peer_id)
}

// -------------------------------------------------------------------

// TimeoutInfo

// .google.protobuf.Duration duration = 1 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
inline bool TimeoutInfo::has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.duration_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimeoutInfo::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& TimeoutInfo::duration() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimeoutInfo.duration)
  return _internal_duration();
}
inline void TimeoutInfo::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  _impl_.duration_ = duration;
  if (duration) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.TimeoutInfo.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeoutInfo::release_duration() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeoutInfo::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.TimeoutInfo.duration)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.duration_;
  _impl_.duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeoutInfo::_internal_mutable_duration() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.duration_ = p;
  }
  return _impl_.duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* TimeoutInfo::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.TimeoutInfo.duration)
  return _msg;
}
inline void TimeoutInfo::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.TimeoutInfo.duration)
}

// int64 height = 2 [json_name = "height"];
inline void TimeoutInfo::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t TimeoutInfo::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimeoutInfo.height)
  return _internal_height();
}
inline void TimeoutInfo::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.TimeoutInfo.height)
}
inline ::int64_t TimeoutInfo::_internal_height() const {
  return _impl_.height_;
}
inline void TimeoutInfo::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int32 round = 3 [json_name = "round"];
inline void TimeoutInfo::clear_round() {
  _impl_.round_ = 0;
}
inline ::int32_t TimeoutInfo::round() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimeoutInfo.round)
  return _internal_round();
}
inline void TimeoutInfo::set_round(::int32_t value) {
  _internal_set_round(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.TimeoutInfo.round)
}
inline ::int32_t TimeoutInfo::_internal_round() const {
  return _impl_.round_;
}
inline void TimeoutInfo::_internal_set_round(::int32_t value) {
  ;
  _impl_.round_ = value;
}

// uint32 step = 4 [json_name = "step"];
inline void TimeoutInfo::clear_step() {
  _impl_.step_ = 0u;
}
inline ::uint32_t TimeoutInfo::step() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimeoutInfo.step)
  return _internal_step();
}
inline void TimeoutInfo::set_step(::uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.TimeoutInfo.step)
}
inline ::uint32_t TimeoutInfo::_internal_step() const {
  return _impl_.step_;
}
inline void TimeoutInfo::_internal_set_step(::uint32_t value) {
  ;
  _impl_.step_ = value;
}

// -------------------------------------------------------------------

// EndHeight

// int64 height = 1 [json_name = "height"];
inline void EndHeight::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t EndHeight::height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.EndHeight.height)
  return _internal_height();
}
inline void EndHeight::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.consensus.EndHeight.height)
}
inline ::int64_t EndHeight::_internal_height() const {
  return _impl_.height_;
}
inline void EndHeight::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// WALMessage

// .tendermint.types.EventDataRoundState event_data_round_state = 1 [json_name = "eventDataRoundState"];
inline bool WALMessage::has_event_data_round_state() const {
  return sum_case() == kEventDataRoundState;
}
inline bool WALMessage::_internal_has_event_data_round_state() const {
  return sum_case() == kEventDataRoundState;
}
inline void WALMessage::set_has_event_data_round_state() {
  _impl_._oneof_case_[0] = kEventDataRoundState;
}
inline ::tendermint::types::EventDataRoundState* WALMessage::release_event_data_round_state() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.WALMessage.event_data_round_state)
  if (sum_case() == kEventDataRoundState) {
    clear_has_sum();
    ::tendermint::types::EventDataRoundState* temp = _impl_.sum_.event_data_round_state_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.event_data_round_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::types::EventDataRoundState& WALMessage::_internal_event_data_round_state() const {
  return sum_case() == kEventDataRoundState
      ? *_impl_.sum_.event_data_round_state_
      : reinterpret_cast<::tendermint::types::EventDataRoundState&>(::tendermint::types::_EventDataRoundState_default_instance_);
}
inline const ::tendermint::types::EventDataRoundState& WALMessage::event_data_round_state() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.WALMessage.event_data_round_state)
  return _internal_event_data_round_state();
}
inline ::tendermint::types::EventDataRoundState* WALMessage::unsafe_arena_release_event_data_round_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.WALMessage.event_data_round_state)
  if (sum_case() == kEventDataRoundState) {
    clear_has_sum();
    ::tendermint::types::EventDataRoundState* temp = _impl_.sum_.event_data_round_state_;
    _impl_.sum_.event_data_round_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WALMessage::unsafe_arena_set_allocated_event_data_round_state(::tendermint::types::EventDataRoundState* event_data_round_state) {
  clear_sum();
  if (event_data_round_state) {
    set_has_event_data_round_state();
    _impl_.sum_.event_data_round_state_ = event_data_round_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.WALMessage.event_data_round_state)
}
inline ::tendermint::types::EventDataRoundState* WALMessage::_internal_mutable_event_data_round_state() {
  if (sum_case() != kEventDataRoundState) {
    clear_sum();
    set_has_event_data_round_state();
    _impl_.sum_.event_data_round_state_ = CreateMaybeMessage< ::tendermint::types::EventDataRoundState >(GetArenaForAllocation());
  }
  return _impl_.sum_.event_data_round_state_;
}
inline ::tendermint::types::EventDataRoundState* WALMessage::mutable_event_data_round_state() {
  ::tendermint::types::EventDataRoundState* _msg = _internal_mutable_event_data_round_state();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.WALMessage.event_data_round_state)
  return _msg;
}

// .tendermint.consensus.MsgInfo msg_info = 2 [json_name = "msgInfo"];
inline bool WALMessage::has_msg_info() const {
  return sum_case() == kMsgInfo;
}
inline bool WALMessage::_internal_has_msg_info() const {
  return sum_case() == kMsgInfo;
}
inline void WALMessage::set_has_msg_info() {
  _impl_._oneof_case_[0] = kMsgInfo;
}
inline void WALMessage::clear_msg_info() {
  if (sum_case() == kMsgInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.msg_info_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::MsgInfo* WALMessage::release_msg_info() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.WALMessage.msg_info)
  if (sum_case() == kMsgInfo) {
    clear_has_sum();
    ::tendermint::consensus::MsgInfo* temp = _impl_.sum_.msg_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.msg_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::MsgInfo& WALMessage::_internal_msg_info() const {
  return sum_case() == kMsgInfo
      ? *_impl_.sum_.msg_info_
      : reinterpret_cast<::tendermint::consensus::MsgInfo&>(::tendermint::consensus::_MsgInfo_default_instance_);
}
inline const ::tendermint::consensus::MsgInfo& WALMessage::msg_info() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.WALMessage.msg_info)
  return _internal_msg_info();
}
inline ::tendermint::consensus::MsgInfo* WALMessage::unsafe_arena_release_msg_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.WALMessage.msg_info)
  if (sum_case() == kMsgInfo) {
    clear_has_sum();
    ::tendermint::consensus::MsgInfo* temp = _impl_.sum_.msg_info_;
    _impl_.sum_.msg_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WALMessage::unsafe_arena_set_allocated_msg_info(::tendermint::consensus::MsgInfo* msg_info) {
  clear_sum();
  if (msg_info) {
    set_has_msg_info();
    _impl_.sum_.msg_info_ = msg_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.WALMessage.msg_info)
}
inline ::tendermint::consensus::MsgInfo* WALMessage::_internal_mutable_msg_info() {
  if (sum_case() != kMsgInfo) {
    clear_sum();
    set_has_msg_info();
    _impl_.sum_.msg_info_ = CreateMaybeMessage< ::tendermint::consensus::MsgInfo >(GetArenaForAllocation());
  }
  return _impl_.sum_.msg_info_;
}
inline ::tendermint::consensus::MsgInfo* WALMessage::mutable_msg_info() {
  ::tendermint::consensus::MsgInfo* _msg = _internal_mutable_msg_info();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.WALMessage.msg_info)
  return _msg;
}

// .tendermint.consensus.TimeoutInfo timeout_info = 3 [json_name = "timeoutInfo"];
inline bool WALMessage::has_timeout_info() const {
  return sum_case() == kTimeoutInfo;
}
inline bool WALMessage::_internal_has_timeout_info() const {
  return sum_case() == kTimeoutInfo;
}
inline void WALMessage::set_has_timeout_info() {
  _impl_._oneof_case_[0] = kTimeoutInfo;
}
inline void WALMessage::clear_timeout_info() {
  if (sum_case() == kTimeoutInfo) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.timeout_info_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::TimeoutInfo* WALMessage::release_timeout_info() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.WALMessage.timeout_info)
  if (sum_case() == kTimeoutInfo) {
    clear_has_sum();
    ::tendermint::consensus::TimeoutInfo* temp = _impl_.sum_.timeout_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.timeout_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::TimeoutInfo& WALMessage::_internal_timeout_info() const {
  return sum_case() == kTimeoutInfo
      ? *_impl_.sum_.timeout_info_
      : reinterpret_cast<::tendermint::consensus::TimeoutInfo&>(::tendermint::consensus::_TimeoutInfo_default_instance_);
}
inline const ::tendermint::consensus::TimeoutInfo& WALMessage::timeout_info() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.WALMessage.timeout_info)
  return _internal_timeout_info();
}
inline ::tendermint::consensus::TimeoutInfo* WALMessage::unsafe_arena_release_timeout_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.WALMessage.timeout_info)
  if (sum_case() == kTimeoutInfo) {
    clear_has_sum();
    ::tendermint::consensus::TimeoutInfo* temp = _impl_.sum_.timeout_info_;
    _impl_.sum_.timeout_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WALMessage::unsafe_arena_set_allocated_timeout_info(::tendermint::consensus::TimeoutInfo* timeout_info) {
  clear_sum();
  if (timeout_info) {
    set_has_timeout_info();
    _impl_.sum_.timeout_info_ = timeout_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.WALMessage.timeout_info)
}
inline ::tendermint::consensus::TimeoutInfo* WALMessage::_internal_mutable_timeout_info() {
  if (sum_case() != kTimeoutInfo) {
    clear_sum();
    set_has_timeout_info();
    _impl_.sum_.timeout_info_ = CreateMaybeMessage< ::tendermint::consensus::TimeoutInfo >(GetArenaForAllocation());
  }
  return _impl_.sum_.timeout_info_;
}
inline ::tendermint::consensus::TimeoutInfo* WALMessage::mutable_timeout_info() {
  ::tendermint::consensus::TimeoutInfo* _msg = _internal_mutable_timeout_info();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.WALMessage.timeout_info)
  return _msg;
}

// .tendermint.consensus.EndHeight end_height = 4 [json_name = "endHeight"];
inline bool WALMessage::has_end_height() const {
  return sum_case() == kEndHeight;
}
inline bool WALMessage::_internal_has_end_height() const {
  return sum_case() == kEndHeight;
}
inline void WALMessage::set_has_end_height() {
  _impl_._oneof_case_[0] = kEndHeight;
}
inline void WALMessage::clear_end_height() {
  if (sum_case() == kEndHeight) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.end_height_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::consensus::EndHeight* WALMessage::release_end_height() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.WALMessage.end_height)
  if (sum_case() == kEndHeight) {
    clear_has_sum();
    ::tendermint::consensus::EndHeight* temp = _impl_.sum_.end_height_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.end_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::consensus::EndHeight& WALMessage::_internal_end_height() const {
  return sum_case() == kEndHeight
      ? *_impl_.sum_.end_height_
      : reinterpret_cast<::tendermint::consensus::EndHeight&>(::tendermint::consensus::_EndHeight_default_instance_);
}
inline const ::tendermint::consensus::EndHeight& WALMessage::end_height() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.WALMessage.end_height)
  return _internal_end_height();
}
inline ::tendermint::consensus::EndHeight* WALMessage::unsafe_arena_release_end_height() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.consensus.WALMessage.end_height)
  if (sum_case() == kEndHeight) {
    clear_has_sum();
    ::tendermint::consensus::EndHeight* temp = _impl_.sum_.end_height_;
    _impl_.sum_.end_height_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void WALMessage::unsafe_arena_set_allocated_end_height(::tendermint::consensus::EndHeight* end_height) {
  clear_sum();
  if (end_height) {
    set_has_end_height();
    _impl_.sum_.end_height_ = end_height;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.WALMessage.end_height)
}
inline ::tendermint::consensus::EndHeight* WALMessage::_internal_mutable_end_height() {
  if (sum_case() != kEndHeight) {
    clear_sum();
    set_has_end_height();
    _impl_.sum_.end_height_ = CreateMaybeMessage< ::tendermint::consensus::EndHeight >(GetArenaForAllocation());
  }
  return _impl_.sum_.end_height_;
}
inline ::tendermint::consensus::EndHeight* WALMessage::mutable_end_height() {
  ::tendermint::consensus::EndHeight* _msg = _internal_mutable_end_height();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.WALMessage.end_height)
  return _msg;
}

inline bool WALMessage::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void WALMessage::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline WALMessage::SumCase WALMessage::sum_case() const {
  return WALMessage::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimedWALMessage

// .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool TimedWALMessage::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimedWALMessage::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& TimedWALMessage::time() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimedWALMessage.time)
  return _internal_time();
}
inline void TimedWALMessage::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  if (time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.TimedWALMessage.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimedWALMessage::release_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimedWALMessage::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.TimedWALMessage.time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimedWALMessage::_internal_mutable_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* TimedWALMessage::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.TimedWALMessage.time)
  return _msg;
}
inline void TimedWALMessage::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.TimedWALMessage.time)
}

// .tendermint.consensus.WALMessage msg = 2 [json_name = "msg"];
inline bool TimedWALMessage::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline void TimedWALMessage::clear_msg() {
  if (_impl_.msg_ != nullptr) _impl_.msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tendermint::consensus::WALMessage& TimedWALMessage::_internal_msg() const {
  const ::tendermint::consensus::WALMessage* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::consensus::WALMessage&>(
      ::tendermint::consensus::_WALMessage_default_instance_);
}
inline const ::tendermint::consensus::WALMessage& TimedWALMessage::msg() const {
  // @@protoc_insertion_point(field_get:tendermint.consensus.TimedWALMessage.msg)
  return _internal_msg();
}
inline void TimedWALMessage::unsafe_arena_set_allocated_msg(
    ::tendermint::consensus::WALMessage* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.consensus.TimedWALMessage.msg)
}
inline ::tendermint::consensus::WALMessage* TimedWALMessage::release_msg() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::consensus::WALMessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::consensus::WALMessage* TimedWALMessage::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:tendermint.consensus.TimedWALMessage.msg)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tendermint::consensus::WALMessage* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::tendermint::consensus::WALMessage* TimedWALMessage::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::consensus::WALMessage>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::tendermint::consensus::WALMessage* TimedWALMessage::mutable_msg() {
  ::tendermint::consensus::WALMessage* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:tendermint.consensus.TimedWALMessage.msg)
  return _msg;
}
inline void TimedWALMessage::set_allocated_msg(::tendermint::consensus::WALMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.TimedWALMessage.msg)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace consensus
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2fconsensus_2fwal_2eproto_2epb_2eh

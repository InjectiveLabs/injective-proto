// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/consensus/wal.proto

#include "tendermint/consensus/wal.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace consensus {
template <typename>
PROTOBUF_CONSTEXPR MsgInfo::MsgInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.peer_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.msg_)*/nullptr} {}
struct MsgInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgInfoDefaultTypeInternal() {}
  union {
    MsgInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgInfoDefaultTypeInternal _MsgInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TimeoutInfo::TimeoutInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_.round_)*/ 0

  , /*decltype(_impl_.step_)*/ 0u
} {}
struct TimeoutInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeoutInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeoutInfoDefaultTypeInternal() {}
  union {
    TimeoutInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeoutInfoDefaultTypeInternal _TimeoutInfo_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR EndHeight::EndHeight(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EndHeightDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EndHeightDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EndHeightDefaultTypeInternal() {}
  union {
    EndHeight _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EndHeightDefaultTypeInternal _EndHeight_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR WALMessage::WALMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WALMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WALMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WALMessageDefaultTypeInternal() {}
  union {
    WALMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WALMessageDefaultTypeInternal _WALMessage_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR TimedWALMessage::TimedWALMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.msg_)*/nullptr} {}
struct TimedWALMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimedWALMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimedWALMessageDefaultTypeInternal() {}
  union {
    TimedWALMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimedWALMessageDefaultTypeInternal _TimedWALMessage_default_instance_;
}  // namespace consensus
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fconsensus_2fwal_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fconsensus_2fwal_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fconsensus_2fwal_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, _impl_.msg_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::MsgInfo, _impl_.peer_id_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _impl_.round_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimeoutInfo, _impl_.step_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::EndHeight, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::EndHeight, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _impl_.sum_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::TimedWALMessage, _impl_.msg_),
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 10, -1, sizeof(::tendermint::consensus::MsgInfo)},
        { 12, 24, -1, sizeof(::tendermint::consensus::TimeoutInfo)},
        { 28, -1, -1, sizeof(::tendermint::consensus::EndHeight)},
        { 37, -1, -1, sizeof(::tendermint::consensus::WALMessage)},
        { 50, 60, -1, sizeof(::tendermint::consensus::TimedWALMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::consensus::_MsgInfo_default_instance_._instance,
    &::tendermint::consensus::_TimeoutInfo_default_instance_._instance,
    &::tendermint::consensus::_EndHeight_default_instance_._instance,
    &::tendermint::consensus::_WALMessage_default_instance_._instance,
    &::tendermint::consensus::_TimedWALMessage_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fconsensus_2fwal_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036tendermint/consensus/wal.proto\022\024tender"
    "mint.consensus\032\024gogoproto/gogo.proto\032 te"
    "ndermint/consensus/types.proto\032\035tendermi"
    "nt/types/events.proto\032\036google/protobuf/d"
    "uration.proto\032\037google/protobuf/timestamp"
    ".proto\"e\n\007MsgInfo\0225\n\003msg\030\001 \001(\0132\035.tenderm"
    "int.consensus.MessageB\004\310\336\037\000R\003msg\022#\n\007peer"
    "_id\030\002 \001(\tB\n\342\336\037\006PeerIDR\006peerId\"\220\001\n\013Timeou"
    "tInfo\022\?\n\010duration\030\001 \001(\0132\031.google.protobu"
    "f.DurationB\010\310\336\037\000\230\337\037\001R\010duration\022\026\n\006height"
    "\030\002 \001(\003R\006height\022\024\n\005round\030\003 \001(\005R\005round\022\022\n\004"
    "step\030\004 \001(\rR\004step\"#\n\tEndHeight\022\026\n\006height\030"
    "\001 \001(\003R\006height\"\267\002\n\nWALMessage\022\\\n\026event_da"
    "ta_round_state\030\001 \001(\0132%.tendermint.types."
    "EventDataRoundStateH\000R\023eventDataRoundSta"
    "te\022:\n\010msg_info\030\002 \001(\0132\035.tendermint.consen"
    "sus.MsgInfoH\000R\007msgInfo\022F\n\014timeout_info\030\003"
    " \001(\0132!.tendermint.consensus.TimeoutInfoH"
    "\000R\013timeoutInfo\022@\n\nend_height\030\004 \001(\0132\037.ten"
    "dermint.consensus.EndHeightH\000R\tendHeight"
    "B\005\n\003sum\"\177\n\017TimedWALMessage\0228\n\004time\030\001 \001(\013"
    "2\032.google.protobuf.TimestampB\010\310\336\037\000\220\337\037\001R\004"
    "time\0222\n\003msg\030\002 \001(\0132 .tendermint.consensus"
    ".WALMessageR\003msgB\316\001\n\030com.tendermint.cons"
    "ensusB\010WalProtoP\001Z7github.com/cometbft/c"
    "ometbft/proto/tendermint/consensus\242\002\003TCX"
    "\252\002\024Tendermint.Consensus\312\002\024Tendermint\\Con"
    "sensus\342\002 Tendermint\\Consensus\\GPBMetadat"
    "a\352\002\025Tendermint::Consensusb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fconsensus_2fwal_2eproto_deps[5] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_tendermint_2fconsensus_2ftypes_2eproto,
        &::descriptor_table_tendermint_2ftypes_2fevents_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fconsensus_2fwal_2eproto = {
    false,
    false,
    1153,
    descriptor_table_protodef_tendermint_2fconsensus_2fwal_2eproto,
    "tendermint/consensus/wal.proto",
    &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
    descriptor_table_tendermint_2fconsensus_2fwal_2eproto_deps,
    5,
    5,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fconsensus_2fwal_2eproto::offsets,
    file_level_metadata_tendermint_2fconsensus_2fwal_2eproto,
    file_level_enum_descriptors_tendermint_2fconsensus_2fwal_2eproto,
    file_level_service_descriptors_tendermint_2fconsensus_2fwal_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter() {
  return &descriptor_table_tendermint_2fconsensus_2fwal_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fconsensus_2fwal_2eproto(&descriptor_table_tendermint_2fconsensus_2fwal_2eproto);
namespace tendermint {
namespace consensus {
// ===================================================================

class MsgInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<MsgInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MsgInfo, _impl_._has_bits_);
  static const ::tendermint::consensus::Message& msg(const MsgInfo* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::consensus::Message&
MsgInfo::_Internal::msg(const MsgInfo* msg) {
  return *msg->_impl_.msg_;
}
void MsgInfo::clear_msg() {
  if (_impl_.msg_ != nullptr) _impl_.msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MsgInfo::MsgInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.MsgInfo)
}
MsgInfo::MsgInfo(const MsgInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peer_id_) {}

    , decltype(_impl_.msg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.peer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_peer_id().empty()) {
    _this->_impl_.peer_id_.Set(from._internal_peer_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.msg_ = new ::tendermint::consensus::Message(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.MsgInfo)
}

inline void MsgInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.peer_id_) {}

    , decltype(_impl_.msg_){nullptr}
  };
  _impl_.peer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.peer_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgInfo::~MsgInfo() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.MsgInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.peer_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void MsgInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.MsgInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.peer_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.msg_ != nullptr);
    _impl_.msg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.consensus.Message msg = 1 [json_name = "msg", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string peer_id = 2 [json_name = "peerId", (.gogoproto.customname) = "PeerID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_peer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.consensus.MsgInfo.peer_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MsgInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.MsgInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.consensus.Message msg = 1 [json_name = "msg", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  // string peer_id = 2 [json_name = "peerId", (.gogoproto.customname) = "PeerID"];
  if (!this->_internal_peer_id().empty()) {
    const std::string& _s = this->_internal_peer_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.consensus.MsgInfo.peer_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.MsgInfo)
  return target;
}

::size_t MsgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.MsgInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string peer_id = 2 [json_name = "peerId", (.gogoproto.customname) = "PeerID"];
  if (!this->_internal_peer_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_peer_id());
  }

  // .tendermint.consensus.Message msg = 1 [json_name = "msg", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgInfo::GetClassData() const { return &_class_data_; }


void MsgInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgInfo*>(&to_msg);
  auto& from = static_cast<const MsgInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.MsgInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_peer_id().empty()) {
    _this->_internal_set_peer_id(from._internal_peer_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_msg()->::tendermint::consensus::Message::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgInfo::CopyFrom(const MsgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.MsgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInfo::IsInitialized() const {
  return true;
}

void MsgInfo::InternalSwap(MsgInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peer_id_, lhs_arena,
                                       &other->_impl_.peer_id_, rhs_arena);
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[0]);
}
// ===================================================================

class TimeoutInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<TimeoutInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TimeoutInfo, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const TimeoutInfo* msg);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
TimeoutInfo::_Internal::duration(const TimeoutInfo* msg) {
  return *msg->_impl_.duration_;
}
void TimeoutInfo::clear_duration() {
  if (_impl_.duration_ != nullptr) _impl_.duration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TimeoutInfo::TimeoutInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.TimeoutInfo)
}
TimeoutInfo::TimeoutInfo(const TimeoutInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeoutInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.height_) {}

    , decltype(_impl_.round_) {}

    , decltype(_impl_.step_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.step_));
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.TimeoutInfo)
}

inline void TimeoutInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.duration_){nullptr}
    , decltype(_impl_.height_) { ::int64_t{0} }

    , decltype(_impl_.round_) { 0 }

    , decltype(_impl_.step_) { 0u }

  };
}

TimeoutInfo::~TimeoutInfo() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.TimeoutInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeoutInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void TimeoutInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeoutInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.TimeoutInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.duration_ != nullptr);
    _impl_.duration_->Clear();
  }
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.step_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeoutInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Duration duration = 1 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 height = 2 [json_name = "height"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 round = 3 [json_name = "round"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 step = 4 [json_name = "step"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimeoutInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.TimeoutInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Duration duration = 1 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_height(), target);
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_round(), target);
  }

  // uint32 step = 4 [json_name = "step"];
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_step(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.TimeoutInfo)
  return target;
}

::size_t TimeoutInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.TimeoutInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration duration = 1 [json_name = "duration", (.gogoproto.nullable) = false, (.gogoproto.stdduration) = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  // int64 height = 2 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  // int32 round = 3 [json_name = "round"];
  if (this->_internal_round() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_round());
  }

  // uint32 step = 4 [json_name = "step"];
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_step());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeoutInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeoutInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeoutInfo::GetClassData() const { return &_class_data_; }


void TimeoutInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeoutInfo*>(&to_msg);
  auto& from = static_cast<const TimeoutInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.TimeoutInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_round() != 0) {
    _this->_internal_set_round(from._internal_round());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeoutInfo::CopyFrom(const TimeoutInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.TimeoutInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeoutInfo::IsInitialized() const {
  return true;
}

void TimeoutInfo::InternalSwap(TimeoutInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeoutInfo, _impl_.step_)
      + sizeof(TimeoutInfo::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(TimeoutInfo, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeoutInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[1]);
}
// ===================================================================

class EndHeight::_Internal {
 public:
};

EndHeight::EndHeight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.EndHeight)
}
EndHeight::EndHeight(const EndHeight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.EndHeight)
}

inline void EndHeight::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.height_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EndHeight::~EndHeight() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.EndHeight)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EndHeight::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EndHeight::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EndHeight::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.EndHeight)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.height_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndHeight::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EndHeight::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.EndHeight)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.EndHeight)
  return target;
}

::size_t EndHeight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.EndHeight)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EndHeight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EndHeight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EndHeight::GetClassData() const { return &_class_data_; }


void EndHeight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EndHeight*>(&to_msg);
  auto& from = static_cast<const EndHeight&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.EndHeight)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EndHeight::CopyFrom(const EndHeight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.EndHeight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndHeight::IsInitialized() const {
  return true;
}

void EndHeight::InternalSwap(EndHeight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.height_, other->_impl_.height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndHeight::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[2]);
}
// ===================================================================

class WALMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::consensus::WALMessage, _impl_._oneof_case_);
  static const ::tendermint::types::EventDataRoundState& event_data_round_state(const WALMessage* msg);
  static const ::tendermint::consensus::MsgInfo& msg_info(const WALMessage* msg);
  static const ::tendermint::consensus::TimeoutInfo& timeout_info(const WALMessage* msg);
  static const ::tendermint::consensus::EndHeight& end_height(const WALMessage* msg);
};

const ::tendermint::types::EventDataRoundState&
WALMessage::_Internal::event_data_round_state(const WALMessage* msg) {
  return *msg->_impl_.sum_.event_data_round_state_;
}
const ::tendermint::consensus::MsgInfo&
WALMessage::_Internal::msg_info(const WALMessage* msg) {
  return *msg->_impl_.sum_.msg_info_;
}
const ::tendermint::consensus::TimeoutInfo&
WALMessage::_Internal::timeout_info(const WALMessage* msg) {
  return *msg->_impl_.sum_.timeout_info_;
}
const ::tendermint::consensus::EndHeight&
WALMessage::_Internal::end_height(const WALMessage* msg) {
  return *msg->_impl_.sum_.end_height_;
}
void WALMessage::set_allocated_event_data_round_state(::tendermint::types::EventDataRoundState* event_data_round_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (event_data_round_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_data_round_state));
    if (message_arena != submessage_arena) {
      event_data_round_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_data_round_state, submessage_arena);
    }
    set_has_event_data_round_state();
    _impl_.sum_.event_data_round_state_ = event_data_round_state;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.event_data_round_state)
}
void WALMessage::clear_event_data_round_state() {
  if (sum_case() == kEventDataRoundState) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.event_data_round_state_;
    }
    clear_has_sum();
  }
}
void WALMessage::set_allocated_msg_info(::tendermint::consensus::MsgInfo* msg_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (msg_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg_info);
    if (message_arena != submessage_arena) {
      msg_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_info, submessage_arena);
    }
    set_has_msg_info();
    _impl_.sum_.msg_info_ = msg_info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.msg_info)
}
void WALMessage::set_allocated_timeout_info(::tendermint::consensus::TimeoutInfo* timeout_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (timeout_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timeout_info);
    if (message_arena != submessage_arena) {
      timeout_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout_info, submessage_arena);
    }
    set_has_timeout_info();
    _impl_.sum_.timeout_info_ = timeout_info;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.timeout_info)
}
void WALMessage::set_allocated_end_height(::tendermint::consensus::EndHeight* end_height) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (end_height) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end_height);
    if (message_arena != submessage_arena) {
      end_height = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_height, submessage_arena);
    }
    set_has_end_height();
    _impl_.sum_.end_height_ = end_height;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.consensus.WALMessage.end_height)
}
WALMessage::WALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.WALMessage)
}
WALMessage::WALMessage(const WALMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WALMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kEventDataRoundState: {
      _this->_internal_mutable_event_data_round_state()->::tendermint::types::EventDataRoundState::MergeFrom(
          from._internal_event_data_round_state());
      break;
    }
    case kMsgInfo: {
      _this->_internal_mutable_msg_info()->::tendermint::consensus::MsgInfo::MergeFrom(
          from._internal_msg_info());
      break;
    }
    case kTimeoutInfo: {
      _this->_internal_mutable_timeout_info()->::tendermint::consensus::TimeoutInfo::MergeFrom(
          from._internal_timeout_info());
      break;
    }
    case kEndHeight: {
      _this->_internal_mutable_end_height()->::tendermint::consensus::EndHeight::MergeFrom(
          from._internal_end_height());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.WALMessage)
}

inline void WALMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

WALMessage::~WALMessage() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.WALMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WALMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void WALMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WALMessage::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.consensus.WALMessage)
  switch (sum_case()) {
    case kEventDataRoundState: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.event_data_round_state_;
      }
      break;
    }
    case kMsgInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.msg_info_;
      }
      break;
    }
    case kTimeoutInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.timeout_info_;
      }
      break;
    }
    case kEndHeight: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.end_height_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void WALMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.WALMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WALMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.EventDataRoundState event_data_round_state = 1 [json_name = "eventDataRoundState"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_data_round_state(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.MsgInfo msg_info = 2 [json_name = "msgInfo"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.TimeoutInfo timeout_info = 3 [json_name = "timeoutInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.EndHeight end_height = 4 [json_name = "endHeight"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_height(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* WALMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.WALMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kEventDataRoundState: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::event_data_round_state(this),
          _Internal::event_data_round_state(this).GetCachedSize(), target, stream);
      break;
    }
    case kMsgInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::msg_info(this),
          _Internal::msg_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kTimeoutInfo: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::timeout_info(this),
          _Internal::timeout_info(this).GetCachedSize(), target, stream);
      break;
    }
    case kEndHeight: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::end_height(this),
          _Internal::end_height(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.WALMessage)
  return target;
}

::size_t WALMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.WALMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.types.EventDataRoundState event_data_round_state = 1 [json_name = "eventDataRoundState"];
    case kEventDataRoundState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.event_data_round_state_);
      break;
    }
    // .tendermint.consensus.MsgInfo msg_info = 2 [json_name = "msgInfo"];
    case kMsgInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.msg_info_);
      break;
    }
    // .tendermint.consensus.TimeoutInfo timeout_info = 3 [json_name = "timeoutInfo"];
    case kTimeoutInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.timeout_info_);
      break;
    }
    // .tendermint.consensus.EndHeight end_height = 4 [json_name = "endHeight"];
    case kEndHeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.end_height_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WALMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WALMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WALMessage::GetClassData() const { return &_class_data_; }


void WALMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WALMessage*>(&to_msg);
  auto& from = static_cast<const WALMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.WALMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kEventDataRoundState: {
      _this->_internal_mutable_event_data_round_state()->::tendermint::types::EventDataRoundState::MergeFrom(
          from._internal_event_data_round_state());
      break;
    }
    case kMsgInfo: {
      _this->_internal_mutable_msg_info()->::tendermint::consensus::MsgInfo::MergeFrom(
          from._internal_msg_info());
      break;
    }
    case kTimeoutInfo: {
      _this->_internal_mutable_timeout_info()->::tendermint::consensus::TimeoutInfo::MergeFrom(
          from._internal_timeout_info());
      break;
    }
    case kEndHeight: {
      _this->_internal_mutable_end_height()->::tendermint::consensus::EndHeight::MergeFrom(
          from._internal_end_height());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WALMessage::CopyFrom(const WALMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.WALMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WALMessage::IsInitialized() const {
  return true;
}

void WALMessage::InternalSwap(WALMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WALMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[3]);
}
// ===================================================================

class TimedWALMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<TimedWALMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TimedWALMessage, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const TimedWALMessage* msg);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::consensus::WALMessage& msg(const TimedWALMessage* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TimedWALMessage::_Internal::time(const TimedWALMessage* msg) {
  return *msg->_impl_.time_;
}
const ::tendermint::consensus::WALMessage&
TimedWALMessage::_Internal::msg(const TimedWALMessage* msg) {
  return *msg->_impl_.msg_;
}
void TimedWALMessage::clear_time() {
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TimedWALMessage::TimedWALMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.consensus.TimedWALMessage)
}
TimedWALMessage::TimedWALMessage(const TimedWALMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimedWALMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.msg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.msg_ = new ::tendermint::consensus::WALMessage(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.consensus.TimedWALMessage)
}

inline void TimedWALMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.msg_){nullptr}
  };
}

TimedWALMessage::~TimedWALMessage() {
  // @@protoc_insertion_point(destructor:tendermint.consensus.TimedWALMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimedWALMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void TimedWALMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimedWALMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.consensus.TimedWALMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.msg_ != nullptr);
      _impl_.msg_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimedWALMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.consensus.WALMessage msg = 2 [json_name = "msg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* TimedWALMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.consensus.TimedWALMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .tendermint.consensus.WALMessage msg = 2 [json_name = "msg"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.consensus.TimedWALMessage)
  return target;
}

::size_t TimedWALMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.consensus.TimedWALMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .google.protobuf.Timestamp time = 1 [json_name = "time", (.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.time_);
    }

    // .tendermint.consensus.WALMessage msg = 2 [json_name = "msg"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimedWALMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimedWALMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimedWALMessage::GetClassData() const { return &_class_data_; }


void TimedWALMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimedWALMessage*>(&to_msg);
  auto& from = static_cast<const TimedWALMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.consensus.TimedWALMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_msg()->::tendermint::consensus::WALMessage::MergeFrom(
          from._internal_msg());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimedWALMessage::CopyFrom(const TimedWALMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.consensus.TimedWALMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimedWALMessage::IsInitialized() const {
  return true;
}

void TimedWALMessage::InternalSwap(TimedWALMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimedWALMessage, _impl_.msg_)
      + sizeof(TimedWALMessage::_impl_.msg_)
      - PROTOBUF_FIELD_OFFSET(TimedWALMessage, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimedWALMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_getter, &descriptor_table_tendermint_2fconsensus_2fwal_2eproto_once,
      file_level_metadata_tendermint_2fconsensus_2fwal_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace consensus
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::consensus::MsgInfo*
Arena::CreateMaybeMessage< ::tendermint::consensus::MsgInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::MsgInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::TimeoutInfo*
Arena::CreateMaybeMessage< ::tendermint::consensus::TimeoutInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::TimeoutInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::EndHeight*
Arena::CreateMaybeMessage< ::tendermint::consensus::EndHeight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::EndHeight >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::WALMessage*
Arena::CreateMaybeMessage< ::tendermint::consensus::WALMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::WALMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::consensus::TimedWALMessage*
Arena::CreateMaybeMessage< ::tendermint::consensus::TimedWALMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::consensus::TimedWALMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

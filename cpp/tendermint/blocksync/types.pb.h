// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/blocksync/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fblocksync_2ftypes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fblocksync_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "tendermint/types/block.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fblocksync_2ftypes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fblocksync_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2fblocksync_2ftypes_2eproto;
namespace tendermint {
namespace blocksync {
class BlockRequest;
struct BlockRequestDefaultTypeInternal;
extern BlockRequestDefaultTypeInternal _BlockRequest_default_instance_;
class BlockResponse;
struct BlockResponseDefaultTypeInternal;
extern BlockResponseDefaultTypeInternal _BlockResponse_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class NoBlockResponse;
struct NoBlockResponseDefaultTypeInternal;
extern NoBlockResponseDefaultTypeInternal _NoBlockResponse_default_instance_;
class StatusRequest;
struct StatusRequestDefaultTypeInternal;
extern StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
}  // namespace blocksync
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::blocksync::BlockRequest* Arena::CreateMaybeMessage<::tendermint::blocksync::BlockRequest>(Arena*);
template <>
::tendermint::blocksync::BlockResponse* Arena::CreateMaybeMessage<::tendermint::blocksync::BlockResponse>(Arena*);
template <>
::tendermint::blocksync::Message* Arena::CreateMaybeMessage<::tendermint::blocksync::Message>(Arena*);
template <>
::tendermint::blocksync::NoBlockResponse* Arena::CreateMaybeMessage<::tendermint::blocksync::NoBlockResponse>(Arena*);
template <>
::tendermint::blocksync::StatusRequest* Arena::CreateMaybeMessage<::tendermint::blocksync::StatusRequest>(Arena*);
template <>
::tendermint::blocksync::StatusResponse* Arena::CreateMaybeMessage<::tendermint::blocksync::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace blocksync {

// ===================================================================


// -------------------------------------------------------------------

class BlockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.blocksync.BlockRequest) */ {
 public:
  inline BlockRequest() : BlockRequest(nullptr) {}
  ~BlockRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockRequest(const BlockRequest& from);
  BlockRequest(BlockRequest&& from) noexcept
    : BlockRequest() {
    *this = ::std::move(from);
  }

  inline BlockRequest& operator=(const BlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockRequest& operator=(BlockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockRequest* internal_default_instance() {
    return reinterpret_cast<const BlockRequest*>(
               &_BlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockRequest& a, BlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockRequest& from) {
    BlockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.BlockRequest";
  }
  protected:
  explicit BlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.blocksync.BlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};// -------------------------------------------------------------------

class NoBlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.blocksync.NoBlockResponse) */ {
 public:
  inline NoBlockResponse() : NoBlockResponse(nullptr) {}
  ~NoBlockResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NoBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoBlockResponse(const NoBlockResponse& from);
  NoBlockResponse(NoBlockResponse&& from) noexcept
    : NoBlockResponse() {
    *this = ::std::move(from);
  }

  inline NoBlockResponse& operator=(const NoBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoBlockResponse& operator=(NoBlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoBlockResponse* internal_default_instance() {
    return reinterpret_cast<const NoBlockResponse*>(
               &_NoBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NoBlockResponse& a, NoBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NoBlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoBlockResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoBlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NoBlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NoBlockResponse& from) {
    NoBlockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoBlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.NoBlockResponse";
  }
  protected:
  explicit NoBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.blocksync.NoBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};// -------------------------------------------------------------------

class BlockResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.blocksync.BlockResponse) */ {
 public:
  inline BlockResponse() : BlockResponse(nullptr) {}
  ~BlockResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockResponse(const BlockResponse& from);
  BlockResponse(BlockResponse&& from) noexcept
    : BlockResponse() {
    *this = ::std::move(from);
  }

  inline BlockResponse& operator=(const BlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockResponse& operator=(BlockResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockResponse* internal_default_instance() {
    return reinterpret_cast<const BlockResponse*>(
               &_BlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BlockResponse& a, BlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BlockResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BlockResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BlockResponse& from) {
    BlockResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.BlockResponse";
  }
  protected:
  explicit BlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .tendermint.types.Block block = 1 [json_name = "block"];
  bool has_block() const;
  void clear_block() ;
  const ::tendermint::types::Block& block() const;
  PROTOBUF_NODISCARD ::tendermint::types::Block* release_block();
  ::tendermint::types::Block* mutable_block();
  void set_allocated_block(::tendermint::types::Block* block);
  private:
  const ::tendermint::types::Block& _internal_block() const;
  ::tendermint::types::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::tendermint::types::Block* block);
  ::tendermint::types::Block* unsafe_arena_release_block();
  // @@protoc_insertion_point(class_scope:tendermint.blocksync.BlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tendermint::types::Block* block_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};// -------------------------------------------------------------------

class StatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.blocksync.StatusRequest) */ {
 public:
  inline StatusRequest() : StatusRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusRequest(const StatusRequest& from);
  StatusRequest(StatusRequest&& from) noexcept
    : StatusRequest() {
    *this = ::std::move(from);
  }

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusRequest& operator=(StatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusRequest* internal_default_instance() {
    return reinterpret_cast<const StatusRequest*>(
               &_StatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StatusRequest& a, StatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StatusRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.StatusRequest";
  }
  protected:
  explicit StatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.blocksync.StatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.blocksync.StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatusResponse& from) {
    StatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kBaseFieldNumber = 2,
  };
  // int64 height = 1 [json_name = "height"];
  void clear_height() ;
  ::int64_t height() const;
  void set_height(::int64_t value);

  private:
  ::int64_t _internal_height() const;
  void _internal_set_height(::int64_t value);

  public:
  // int64 base = 2 [json_name = "base"];
  void clear_base() ;
  ::int64_t base() const;
  void set_base(::int64_t value);

  private:
  ::int64_t _internal_base() const;
  void _internal_set_base(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.blocksync.StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::int64_t height_;
    ::int64_t base_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};// -------------------------------------------------------------------

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.blocksync.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kBlockRequest = 1,
    kNoBlockResponse = 2,
    kBlockResponse = 3,
    kStatusRequest = 4,
    kStatusResponse = 5,
    SUM_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.blocksync.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockRequestFieldNumber = 1,
    kNoBlockResponseFieldNumber = 2,
    kBlockResponseFieldNumber = 3,
    kStatusRequestFieldNumber = 4,
    kStatusResponseFieldNumber = 5,
  };
  // .tendermint.blocksync.BlockRequest block_request = 1 [json_name = "blockRequest"];
  bool has_block_request() const;
  private:
  bool _internal_has_block_request() const;

  public:
  void clear_block_request() ;
  const ::tendermint::blocksync::BlockRequest& block_request() const;
  PROTOBUF_NODISCARD ::tendermint::blocksync::BlockRequest* release_block_request();
  ::tendermint::blocksync::BlockRequest* mutable_block_request();
  void set_allocated_block_request(::tendermint::blocksync::BlockRequest* block_request);
  private:
  const ::tendermint::blocksync::BlockRequest& _internal_block_request() const;
  ::tendermint::blocksync::BlockRequest* _internal_mutable_block_request();
  public:
  void unsafe_arena_set_allocated_block_request(
      ::tendermint::blocksync::BlockRequest* block_request);
  ::tendermint::blocksync::BlockRequest* unsafe_arena_release_block_request();
  // .tendermint.blocksync.NoBlockResponse no_block_response = 2 [json_name = "noBlockResponse"];
  bool has_no_block_response() const;
  private:
  bool _internal_has_no_block_response() const;

  public:
  void clear_no_block_response() ;
  const ::tendermint::blocksync::NoBlockResponse& no_block_response() const;
  PROTOBUF_NODISCARD ::tendermint::blocksync::NoBlockResponse* release_no_block_response();
  ::tendermint::blocksync::NoBlockResponse* mutable_no_block_response();
  void set_allocated_no_block_response(::tendermint::blocksync::NoBlockResponse* no_block_response);
  private:
  const ::tendermint::blocksync::NoBlockResponse& _internal_no_block_response() const;
  ::tendermint::blocksync::NoBlockResponse* _internal_mutable_no_block_response();
  public:
  void unsafe_arena_set_allocated_no_block_response(
      ::tendermint::blocksync::NoBlockResponse* no_block_response);
  ::tendermint::blocksync::NoBlockResponse* unsafe_arena_release_no_block_response();
  // .tendermint.blocksync.BlockResponse block_response = 3 [json_name = "blockResponse"];
  bool has_block_response() const;
  private:
  bool _internal_has_block_response() const;

  public:
  void clear_block_response() ;
  const ::tendermint::blocksync::BlockResponse& block_response() const;
  PROTOBUF_NODISCARD ::tendermint::blocksync::BlockResponse* release_block_response();
  ::tendermint::blocksync::BlockResponse* mutable_block_response();
  void set_allocated_block_response(::tendermint::blocksync::BlockResponse* block_response);
  private:
  const ::tendermint::blocksync::BlockResponse& _internal_block_response() const;
  ::tendermint::blocksync::BlockResponse* _internal_mutable_block_response();
  public:
  void unsafe_arena_set_allocated_block_response(
      ::tendermint::blocksync::BlockResponse* block_response);
  ::tendermint::blocksync::BlockResponse* unsafe_arena_release_block_response();
  // .tendermint.blocksync.StatusRequest status_request = 4 [json_name = "statusRequest"];
  bool has_status_request() const;
  private:
  bool _internal_has_status_request() const;

  public:
  void clear_status_request() ;
  const ::tendermint::blocksync::StatusRequest& status_request() const;
  PROTOBUF_NODISCARD ::tendermint::blocksync::StatusRequest* release_status_request();
  ::tendermint::blocksync::StatusRequest* mutable_status_request();
  void set_allocated_status_request(::tendermint::blocksync::StatusRequest* status_request);
  private:
  const ::tendermint::blocksync::StatusRequest& _internal_status_request() const;
  ::tendermint::blocksync::StatusRequest* _internal_mutable_status_request();
  public:
  void unsafe_arena_set_allocated_status_request(
      ::tendermint::blocksync::StatusRequest* status_request);
  ::tendermint::blocksync::StatusRequest* unsafe_arena_release_status_request();
  // .tendermint.blocksync.StatusResponse status_response = 5 [json_name = "statusResponse"];
  bool has_status_response() const;
  private:
  bool _internal_has_status_response() const;

  public:
  void clear_status_response() ;
  const ::tendermint::blocksync::StatusResponse& status_response() const;
  PROTOBUF_NODISCARD ::tendermint::blocksync::StatusResponse* release_status_response();
  ::tendermint::blocksync::StatusResponse* mutable_status_response();
  void set_allocated_status_response(::tendermint::blocksync::StatusResponse* status_response);
  private:
  const ::tendermint::blocksync::StatusResponse& _internal_status_response() const;
  ::tendermint::blocksync::StatusResponse* _internal_mutable_status_response();
  public:
  void unsafe_arena_set_allocated_status_response(
      ::tendermint::blocksync::StatusResponse* status_response);
  ::tendermint::blocksync::StatusResponse* unsafe_arena_release_status_response();
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.blocksync.Message)
 private:
  class _Internal;
  void set_has_block_request();
  void set_has_no_block_response();
  void set_has_block_response();
  void set_has_status_request();
  void set_has_status_response();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tendermint::blocksync::BlockRequest* block_request_;
      ::tendermint::blocksync::NoBlockResponse* no_block_response_;
      ::tendermint::blocksync::BlockResponse* block_response_;
      ::tendermint::blocksync::StatusRequest* status_request_;
      ::tendermint::blocksync::StatusResponse* status_response_;
    } sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fblocksync_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BlockRequest

// int64 height = 1 [json_name = "height"];
inline void BlockRequest::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t BlockRequest::height() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.BlockRequest.height)
  return _internal_height();
}
inline void BlockRequest::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.blocksync.BlockRequest.height)
}
inline ::int64_t BlockRequest::_internal_height() const {
  return _impl_.height_;
}
inline void BlockRequest::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// NoBlockResponse

// int64 height = 1 [json_name = "height"];
inline void NoBlockResponse::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t NoBlockResponse::height() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.NoBlockResponse.height)
  return _internal_height();
}
inline void NoBlockResponse::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.blocksync.NoBlockResponse.height)
}
inline ::int64_t NoBlockResponse::_internal_height() const {
  return _impl_.height_;
}
inline void NoBlockResponse::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// -------------------------------------------------------------------

// BlockResponse

// .tendermint.types.Block block = 1 [json_name = "block"];
inline bool BlockResponse::has_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.block_ != nullptr);
  return value;
}
inline const ::tendermint::types::Block& BlockResponse::_internal_block() const {
  const ::tendermint::types::Block* p = _impl_.block_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::types::Block&>(
      ::tendermint::types::_Block_default_instance_);
}
inline const ::tendermint::types::Block& BlockResponse::block() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.BlockResponse.block)
  return _internal_block();
}
inline void BlockResponse::unsafe_arena_set_allocated_block(
    ::tendermint::types::Block* block) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  _impl_.block_ = block;
  if (block) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.BlockResponse.block)
}
inline ::tendermint::types::Block* BlockResponse::release_block() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::types::Block* BlockResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.BlockResponse.block)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::types::Block* temp = _impl_.block_;
  _impl_.block_ = nullptr;
  return temp;
}
inline ::tendermint::types::Block* BlockResponse::_internal_mutable_block() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.block_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::types::Block>(GetArenaForAllocation());
    _impl_.block_ = p;
  }
  return _impl_.block_;
}
inline ::tendermint::types::Block* BlockResponse::mutable_block() {
  ::tendermint::types::Block* _msg = _internal_mutable_block();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.BlockResponse.block)
  return _msg;
}
inline void BlockResponse::set_allocated_block(::tendermint::types::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.block_);
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block));
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.block_ = block;
  // @@protoc_insertion_point(field_set_allocated:tendermint.blocksync.BlockResponse.block)
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusResponse

// int64 height = 1 [json_name = "height"];
inline void StatusResponse::clear_height() {
  _impl_.height_ = ::int64_t{0};
}
inline ::int64_t StatusResponse::height() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.StatusResponse.height)
  return _internal_height();
}
inline void StatusResponse::set_height(::int64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:tendermint.blocksync.StatusResponse.height)
}
inline ::int64_t StatusResponse::_internal_height() const {
  return _impl_.height_;
}
inline void StatusResponse::_internal_set_height(::int64_t value) {
  ;
  _impl_.height_ = value;
}

// int64 base = 2 [json_name = "base"];
inline void StatusResponse::clear_base() {
  _impl_.base_ = ::int64_t{0};
}
inline ::int64_t StatusResponse::base() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.StatusResponse.base)
  return _internal_base();
}
inline void StatusResponse::set_base(::int64_t value) {
  _internal_set_base(value);
  // @@protoc_insertion_point(field_set:tendermint.blocksync.StatusResponse.base)
}
inline ::int64_t StatusResponse::_internal_base() const {
  return _impl_.base_;
}
inline void StatusResponse::_internal_set_base(::int64_t value) {
  ;
  _impl_.base_ = value;
}

// -------------------------------------------------------------------

// Message

// .tendermint.blocksync.BlockRequest block_request = 1 [json_name = "blockRequest"];
inline bool Message::has_block_request() const {
  return sum_case() == kBlockRequest;
}
inline bool Message::_internal_has_block_request() const {
  return sum_case() == kBlockRequest;
}
inline void Message::set_has_block_request() {
  _impl_._oneof_case_[0] = kBlockRequest;
}
inline void Message::clear_block_request() {
  if (sum_case() == kBlockRequest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.block_request_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::blocksync::BlockRequest* Message::release_block_request() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.Message.block_request)
  if (sum_case() == kBlockRequest) {
    clear_has_sum();
    ::tendermint::blocksync::BlockRequest* temp = _impl_.sum_.block_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.block_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::blocksync::BlockRequest& Message::_internal_block_request() const {
  return sum_case() == kBlockRequest
      ? *_impl_.sum_.block_request_
      : reinterpret_cast<::tendermint::blocksync::BlockRequest&>(::tendermint::blocksync::_BlockRequest_default_instance_);
}
inline const ::tendermint::blocksync::BlockRequest& Message::block_request() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.Message.block_request)
  return _internal_block_request();
}
inline ::tendermint::blocksync::BlockRequest* Message::unsafe_arena_release_block_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.blocksync.Message.block_request)
  if (sum_case() == kBlockRequest) {
    clear_has_sum();
    ::tendermint::blocksync::BlockRequest* temp = _impl_.sum_.block_request_;
    _impl_.sum_.block_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_request(::tendermint::blocksync::BlockRequest* block_request) {
  clear_sum();
  if (block_request) {
    set_has_block_request();
    _impl_.sum_.block_request_ = block_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.Message.block_request)
}
inline ::tendermint::blocksync::BlockRequest* Message::_internal_mutable_block_request() {
  if (sum_case() != kBlockRequest) {
    clear_sum();
    set_has_block_request();
    _impl_.sum_.block_request_ = CreateMaybeMessage< ::tendermint::blocksync::BlockRequest >(GetArenaForAllocation());
  }
  return _impl_.sum_.block_request_;
}
inline ::tendermint::blocksync::BlockRequest* Message::mutable_block_request() {
  ::tendermint::blocksync::BlockRequest* _msg = _internal_mutable_block_request();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.Message.block_request)
  return _msg;
}

// .tendermint.blocksync.NoBlockResponse no_block_response = 2 [json_name = "noBlockResponse"];
inline bool Message::has_no_block_response() const {
  return sum_case() == kNoBlockResponse;
}
inline bool Message::_internal_has_no_block_response() const {
  return sum_case() == kNoBlockResponse;
}
inline void Message::set_has_no_block_response() {
  _impl_._oneof_case_[0] = kNoBlockResponse;
}
inline void Message::clear_no_block_response() {
  if (sum_case() == kNoBlockResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.no_block_response_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::blocksync::NoBlockResponse* Message::release_no_block_response() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.Message.no_block_response)
  if (sum_case() == kNoBlockResponse) {
    clear_has_sum();
    ::tendermint::blocksync::NoBlockResponse* temp = _impl_.sum_.no_block_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.no_block_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::blocksync::NoBlockResponse& Message::_internal_no_block_response() const {
  return sum_case() == kNoBlockResponse
      ? *_impl_.sum_.no_block_response_
      : reinterpret_cast<::tendermint::blocksync::NoBlockResponse&>(::tendermint::blocksync::_NoBlockResponse_default_instance_);
}
inline const ::tendermint::blocksync::NoBlockResponse& Message::no_block_response() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.Message.no_block_response)
  return _internal_no_block_response();
}
inline ::tendermint::blocksync::NoBlockResponse* Message::unsafe_arena_release_no_block_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.blocksync.Message.no_block_response)
  if (sum_case() == kNoBlockResponse) {
    clear_has_sum();
    ::tendermint::blocksync::NoBlockResponse* temp = _impl_.sum_.no_block_response_;
    _impl_.sum_.no_block_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_no_block_response(::tendermint::blocksync::NoBlockResponse* no_block_response) {
  clear_sum();
  if (no_block_response) {
    set_has_no_block_response();
    _impl_.sum_.no_block_response_ = no_block_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.Message.no_block_response)
}
inline ::tendermint::blocksync::NoBlockResponse* Message::_internal_mutable_no_block_response() {
  if (sum_case() != kNoBlockResponse) {
    clear_sum();
    set_has_no_block_response();
    _impl_.sum_.no_block_response_ = CreateMaybeMessage< ::tendermint::blocksync::NoBlockResponse >(GetArenaForAllocation());
  }
  return _impl_.sum_.no_block_response_;
}
inline ::tendermint::blocksync::NoBlockResponse* Message::mutable_no_block_response() {
  ::tendermint::blocksync::NoBlockResponse* _msg = _internal_mutable_no_block_response();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.Message.no_block_response)
  return _msg;
}

// .tendermint.blocksync.BlockResponse block_response = 3 [json_name = "blockResponse"];
inline bool Message::has_block_response() const {
  return sum_case() == kBlockResponse;
}
inline bool Message::_internal_has_block_response() const {
  return sum_case() == kBlockResponse;
}
inline void Message::set_has_block_response() {
  _impl_._oneof_case_[0] = kBlockResponse;
}
inline void Message::clear_block_response() {
  if (sum_case() == kBlockResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.block_response_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::blocksync::BlockResponse* Message::release_block_response() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.Message.block_response)
  if (sum_case() == kBlockResponse) {
    clear_has_sum();
    ::tendermint::blocksync::BlockResponse* temp = _impl_.sum_.block_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.block_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::blocksync::BlockResponse& Message::_internal_block_response() const {
  return sum_case() == kBlockResponse
      ? *_impl_.sum_.block_response_
      : reinterpret_cast<::tendermint::blocksync::BlockResponse&>(::tendermint::blocksync::_BlockResponse_default_instance_);
}
inline const ::tendermint::blocksync::BlockResponse& Message::block_response() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.Message.block_response)
  return _internal_block_response();
}
inline ::tendermint::blocksync::BlockResponse* Message::unsafe_arena_release_block_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.blocksync.Message.block_response)
  if (sum_case() == kBlockResponse) {
    clear_has_sum();
    ::tendermint::blocksync::BlockResponse* temp = _impl_.sum_.block_response_;
    _impl_.sum_.block_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_response(::tendermint::blocksync::BlockResponse* block_response) {
  clear_sum();
  if (block_response) {
    set_has_block_response();
    _impl_.sum_.block_response_ = block_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.Message.block_response)
}
inline ::tendermint::blocksync::BlockResponse* Message::_internal_mutable_block_response() {
  if (sum_case() != kBlockResponse) {
    clear_sum();
    set_has_block_response();
    _impl_.sum_.block_response_ = CreateMaybeMessage< ::tendermint::blocksync::BlockResponse >(GetArenaForAllocation());
  }
  return _impl_.sum_.block_response_;
}
inline ::tendermint::blocksync::BlockResponse* Message::mutable_block_response() {
  ::tendermint::blocksync::BlockResponse* _msg = _internal_mutable_block_response();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.Message.block_response)
  return _msg;
}

// .tendermint.blocksync.StatusRequest status_request = 4 [json_name = "statusRequest"];
inline bool Message::has_status_request() const {
  return sum_case() == kStatusRequest;
}
inline bool Message::_internal_has_status_request() const {
  return sum_case() == kStatusRequest;
}
inline void Message::set_has_status_request() {
  _impl_._oneof_case_[0] = kStatusRequest;
}
inline void Message::clear_status_request() {
  if (sum_case() == kStatusRequest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.status_request_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::blocksync::StatusRequest* Message::release_status_request() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.Message.status_request)
  if (sum_case() == kStatusRequest) {
    clear_has_sum();
    ::tendermint::blocksync::StatusRequest* temp = _impl_.sum_.status_request_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.status_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::blocksync::StatusRequest& Message::_internal_status_request() const {
  return sum_case() == kStatusRequest
      ? *_impl_.sum_.status_request_
      : reinterpret_cast<::tendermint::blocksync::StatusRequest&>(::tendermint::blocksync::_StatusRequest_default_instance_);
}
inline const ::tendermint::blocksync::StatusRequest& Message::status_request() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.Message.status_request)
  return _internal_status_request();
}
inline ::tendermint::blocksync::StatusRequest* Message::unsafe_arena_release_status_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.blocksync.Message.status_request)
  if (sum_case() == kStatusRequest) {
    clear_has_sum();
    ::tendermint::blocksync::StatusRequest* temp = _impl_.sum_.status_request_;
    _impl_.sum_.status_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_status_request(::tendermint::blocksync::StatusRequest* status_request) {
  clear_sum();
  if (status_request) {
    set_has_status_request();
    _impl_.sum_.status_request_ = status_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.Message.status_request)
}
inline ::tendermint::blocksync::StatusRequest* Message::_internal_mutable_status_request() {
  if (sum_case() != kStatusRequest) {
    clear_sum();
    set_has_status_request();
    _impl_.sum_.status_request_ = CreateMaybeMessage< ::tendermint::blocksync::StatusRequest >(GetArenaForAllocation());
  }
  return _impl_.sum_.status_request_;
}
inline ::tendermint::blocksync::StatusRequest* Message::mutable_status_request() {
  ::tendermint::blocksync::StatusRequest* _msg = _internal_mutable_status_request();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.Message.status_request)
  return _msg;
}

// .tendermint.blocksync.StatusResponse status_response = 5 [json_name = "statusResponse"];
inline bool Message::has_status_response() const {
  return sum_case() == kStatusResponse;
}
inline bool Message::_internal_has_status_response() const {
  return sum_case() == kStatusResponse;
}
inline void Message::set_has_status_response() {
  _impl_._oneof_case_[0] = kStatusResponse;
}
inline void Message::clear_status_response() {
  if (sum_case() == kStatusResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.status_response_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::blocksync::StatusResponse* Message::release_status_response() {
  // @@protoc_insertion_point(field_release:tendermint.blocksync.Message.status_response)
  if (sum_case() == kStatusResponse) {
    clear_has_sum();
    ::tendermint::blocksync::StatusResponse* temp = _impl_.sum_.status_response_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.status_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::blocksync::StatusResponse& Message::_internal_status_response() const {
  return sum_case() == kStatusResponse
      ? *_impl_.sum_.status_response_
      : reinterpret_cast<::tendermint::blocksync::StatusResponse&>(::tendermint::blocksync::_StatusResponse_default_instance_);
}
inline const ::tendermint::blocksync::StatusResponse& Message::status_response() const {
  // @@protoc_insertion_point(field_get:tendermint.blocksync.Message.status_response)
  return _internal_status_response();
}
inline ::tendermint::blocksync::StatusResponse* Message::unsafe_arena_release_status_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.blocksync.Message.status_response)
  if (sum_case() == kStatusResponse) {
    clear_has_sum();
    ::tendermint::blocksync::StatusResponse* temp = _impl_.sum_.status_response_;
    _impl_.sum_.status_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_status_response(::tendermint::blocksync::StatusResponse* status_response) {
  clear_sum();
  if (status_response) {
    set_has_status_response();
    _impl_.sum_.status_response_ = status_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.blocksync.Message.status_response)
}
inline ::tendermint::blocksync::StatusResponse* Message::_internal_mutable_status_response() {
  if (sum_case() != kStatusResponse) {
    clear_sum();
    set_has_status_response();
    _impl_.sum_.status_response_ = CreateMaybeMessage< ::tendermint::blocksync::StatusResponse >(GetArenaForAllocation());
  }
  return _impl_.sum_.status_response_;
}
inline ::tendermint::blocksync::StatusResponse* Message::mutable_status_response() {
  ::tendermint::blocksync::StatusResponse* _msg = _internal_mutable_status_response();
  // @@protoc_insertion_point(field_mutable:tendermint.blocksync.Message.status_response)
  return _msg;
}

inline bool Message::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Message::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline Message::SumCase Message::sum_case() const {
  return Message::SumCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace blocksync
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2fblocksync_2ftypes_2eproto_2epb_2eh

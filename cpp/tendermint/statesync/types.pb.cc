// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/statesync/types.proto

#include "tendermint/statesync/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace statesync {
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotsRequest::SnapshotsRequest(
    ::_pbi::ConstantInitialized) {}
struct SnapshotsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotsRequestDefaultTypeInternal() {}
  union {
    SnapshotsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotsRequestDefaultTypeInternal _SnapshotsRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SnapshotsResponse::SnapshotsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.format_)*/ 0u

  , /*decltype(_impl_.chunks_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotsResponseDefaultTypeInternal() {}
  union {
    SnapshotsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotsResponseDefaultTypeInternal _SnapshotsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChunkRequest::ChunkRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.format_)*/ 0u

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkRequestDefaultTypeInternal() {}
  union {
    ChunkRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ChunkResponse::ChunkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chunk_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.height_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.format_)*/ 0u

  , /*decltype(_impl_.index_)*/ 0u

  , /*decltype(_impl_.missing_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunkResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunkResponseDefaultTypeInternal() {}
  union {
    ChunkResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;
}  // namespace statesync
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fstatesync_2ftypes_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fstatesync_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fstatesync_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::Message, _impl_.sum_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _impl_.format_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _impl_.chunks_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _impl_.hash_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::SnapshotsResponse, _impl_.metadata_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkRequest, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkRequest, _impl_.format_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkRequest, _impl_.index_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _impl_.format_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _impl_.index_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _impl_.chunk_),
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::ChunkResponse, _impl_.missing_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::statesync::Message)},
        { 13, -1, -1, sizeof(::tendermint::statesync::SnapshotsRequest)},
        { 21, -1, -1, sizeof(::tendermint::statesync::SnapshotsResponse)},
        { 34, -1, -1, sizeof(::tendermint::statesync::ChunkRequest)},
        { 45, -1, -1, sizeof(::tendermint::statesync::ChunkResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::statesync::_Message_default_instance_._instance,
    &::tendermint::statesync::_SnapshotsRequest_default_instance_._instance,
    &::tendermint::statesync::_SnapshotsResponse_default_instance_._instance,
    &::tendermint::statesync::_ChunkRequest_default_instance_._instance,
    &::tendermint::statesync::_ChunkResponse_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fstatesync_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n tendermint/statesync/types.proto\022\024tend"
    "ermint.statesync\"\332\002\n\007Message\022U\n\021snapshot"
    "s_request\030\001 \001(\0132&.tendermint.statesync.S"
    "napshotsRequestH\000R\020snapshotsRequest\022X\n\022s"
    "napshots_response\030\002 \001(\0132\'.tendermint.sta"
    "tesync.SnapshotsResponseH\000R\021snapshotsRes"
    "ponse\022I\n\rchunk_request\030\003 \001(\0132\".tendermin"
    "t.statesync.ChunkRequestH\000R\014chunkRequest"
    "\022L\n\016chunk_response\030\004 \001(\0132#.tendermint.st"
    "atesync.ChunkResponseH\000R\rchunkResponseB\005"
    "\n\003sum\"\022\n\020SnapshotsRequest\"\213\001\n\021SnapshotsR"
    "esponse\022\026\n\006height\030\001 \001(\004R\006height\022\026\n\006forma"
    "t\030\002 \001(\rR\006format\022\026\n\006chunks\030\003 \001(\rR\006chunks\022"
    "\022\n\004hash\030\004 \001(\014R\004hash\022\032\n\010metadata\030\005 \001(\014R\010m"
    "etadata\"T\n\014ChunkRequest\022\026\n\006height\030\001 \001(\004R"
    "\006height\022\026\n\006format\030\002 \001(\rR\006format\022\024\n\005index"
    "\030\003 \001(\rR\005index\"\205\001\n\rChunkResponse\022\026\n\006heigh"
    "t\030\001 \001(\004R\006height\022\026\n\006format\030\002 \001(\rR\006format\022"
    "\024\n\005index\030\003 \001(\rR\005index\022\024\n\005chunk\030\004 \001(\014R\005ch"
    "unk\022\030\n\007missing\030\005 \001(\010R\007missingB\320\001\n\030com.te"
    "ndermint.statesyncB\nTypesProtoP\001Z7github"
    ".com/cometbft/cometbft/proto/tendermint/"
    "statesync\242\002\003TSX\252\002\024Tendermint.Statesync\312\002"
    "\024Tendermint\\Statesync\342\002 Tendermint\\State"
    "sync\\GPBMetadata\352\002\025Tendermint::Statesync"
    "b\006proto3"
};
static ::absl::once_flag descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fstatesync_2ftypes_2eproto = {
    false,
    false,
    1008,
    descriptor_table_protodef_tendermint_2fstatesync_2ftypes_2eproto,
    "tendermint/statesync/types.proto",
    &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fstatesync_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto,
    file_level_enum_descriptors_tendermint_2fstatesync_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fstatesync_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fstatesync_2ftypes_2eproto(&descriptor_table_tendermint_2fstatesync_2ftypes_2eproto);
namespace tendermint {
namespace statesync {
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::statesync::Message, _impl_._oneof_case_);
  static const ::tendermint::statesync::SnapshotsRequest& snapshots_request(const Message* msg);
  static const ::tendermint::statesync::SnapshotsResponse& snapshots_response(const Message* msg);
  static const ::tendermint::statesync::ChunkRequest& chunk_request(const Message* msg);
  static const ::tendermint::statesync::ChunkResponse& chunk_response(const Message* msg);
};

const ::tendermint::statesync::SnapshotsRequest&
Message::_Internal::snapshots_request(const Message* msg) {
  return *msg->_impl_.sum_.snapshots_request_;
}
const ::tendermint::statesync::SnapshotsResponse&
Message::_Internal::snapshots_response(const Message* msg) {
  return *msg->_impl_.sum_.snapshots_response_;
}
const ::tendermint::statesync::ChunkRequest&
Message::_Internal::chunk_request(const Message* msg) {
  return *msg->_impl_.sum_.chunk_request_;
}
const ::tendermint::statesync::ChunkResponse&
Message::_Internal::chunk_response(const Message* msg) {
  return *msg->_impl_.sum_.chunk_response_;
}
void Message::set_allocated_snapshots_request(::tendermint::statesync::SnapshotsRequest* snapshots_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (snapshots_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshots_request);
    if (message_arena != submessage_arena) {
      snapshots_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshots_request, submessage_arena);
    }
    set_has_snapshots_request();
    _impl_.sum_.snapshots_request_ = snapshots_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.Message.snapshots_request)
}
void Message::set_allocated_snapshots_response(::tendermint::statesync::SnapshotsResponse* snapshots_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (snapshots_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(snapshots_response);
    if (message_arena != submessage_arena) {
      snapshots_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, snapshots_response, submessage_arena);
    }
    set_has_snapshots_response();
    _impl_.sum_.snapshots_response_ = snapshots_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.Message.snapshots_response)
}
void Message::set_allocated_chunk_request(::tendermint::statesync::ChunkRequest* chunk_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (chunk_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk_request);
    if (message_arena != submessage_arena) {
      chunk_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_request, submessage_arena);
    }
    set_has_chunk_request();
    _impl_.sum_.chunk_request_ = chunk_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.Message.chunk_request)
}
void Message::set_allocated_chunk_response(::tendermint::statesync::ChunkResponse* chunk_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (chunk_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk_response);
    if (message_arena != submessage_arena) {
      chunk_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk_response, submessage_arena);
    }
    set_has_chunk_response();
    _impl_.sum_.chunk_response_ = chunk_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.statesync.Message.chunk_response)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.statesync.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kSnapshotsRequest: {
      _this->_internal_mutable_snapshots_request()->::tendermint::statesync::SnapshotsRequest::MergeFrom(
          from._internal_snapshots_request());
      break;
    }
    case kSnapshotsResponse: {
      _this->_internal_mutable_snapshots_response()->::tendermint::statesync::SnapshotsResponse::MergeFrom(
          from._internal_snapshots_response());
      break;
    }
    case kChunkRequest: {
      _this->_internal_mutable_chunk_request()->::tendermint::statesync::ChunkRequest::MergeFrom(
          from._internal_chunk_request());
      break;
    }
    case kChunkResponse: {
      _this->_internal_mutable_chunk_response()->::tendermint::statesync::ChunkResponse::MergeFrom(
          from._internal_chunk_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.statesync.Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.statesync.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.statesync.Message)
  switch (sum_case()) {
    case kSnapshotsRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.snapshots_request_;
      }
      break;
    }
    case kSnapshotsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.snapshots_response_;
      }
      break;
    }
    case kChunkRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.chunk_request_;
      }
      break;
    }
    case kChunkResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.chunk_response_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.statesync.Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.statesync.SnapshotsRequest snapshots_request = 1 [json_name = "snapshotsRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshots_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.statesync.SnapshotsResponse snapshots_response = 2 [json_name = "snapshotsResponse"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshots_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.statesync.ChunkRequest chunk_request = 3 [json_name = "chunkRequest"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.statesync.ChunkResponse chunk_response = 4 [json_name = "chunkResponse"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.statesync.Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kSnapshotsRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::snapshots_request(this),
          _Internal::snapshots_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSnapshotsResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::snapshots_response(this),
          _Internal::snapshots_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kChunkRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::chunk_request(this),
          _Internal::chunk_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kChunkResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::chunk_response(this),
          _Internal::chunk_response(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.statesync.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.statesync.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.statesync.SnapshotsRequest snapshots_request = 1 [json_name = "snapshotsRequest"];
    case kSnapshotsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.snapshots_request_);
      break;
    }
    // .tendermint.statesync.SnapshotsResponse snapshots_response = 2 [json_name = "snapshotsResponse"];
    case kSnapshotsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.snapshots_response_);
      break;
    }
    // .tendermint.statesync.ChunkRequest chunk_request = 3 [json_name = "chunkRequest"];
    case kChunkRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.chunk_request_);
      break;
    }
    // .tendermint.statesync.ChunkResponse chunk_response = 4 [json_name = "chunkResponse"];
    case kChunkResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.chunk_response_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.statesync.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kSnapshotsRequest: {
      _this->_internal_mutable_snapshots_request()->::tendermint::statesync::SnapshotsRequest::MergeFrom(
          from._internal_snapshots_request());
      break;
    }
    case kSnapshotsResponse: {
      _this->_internal_mutable_snapshots_response()->::tendermint::statesync::SnapshotsResponse::MergeFrom(
          from._internal_snapshots_response());
      break;
    }
    case kChunkRequest: {
      _this->_internal_mutable_chunk_request()->::tendermint::statesync::ChunkRequest::MergeFrom(
          from._internal_chunk_request());
      break;
    }
    case kChunkResponse: {
      _this->_internal_mutable_chunk_response()->::tendermint::statesync::ChunkResponse::MergeFrom(
          from._internal_chunk_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.statesync.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[0]);
}
// ===================================================================

class SnapshotsRequest::_Internal {
 public:
};

SnapshotsRequest::SnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.statesync.SnapshotsRequest)
}
SnapshotsRequest::SnapshotsRequest(const SnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SnapshotsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.statesync.SnapshotsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[1]);
}
// ===================================================================

class SnapshotsResponse::_Internal {
 public:
};

SnapshotsResponse::SnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.statesync.SnapshotsResponse)
}
SnapshotsResponse::SnapshotsResponse(const SnapshotsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.format_) {}

    , decltype(_impl_.chunks_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hash().empty()) {
    _this->_impl_.hash_.Set(from._internal_hash(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.chunks_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  // @@protoc_insertion_point(copy_constructor:tendermint.statesync.SnapshotsResponse)
}

inline void SnapshotsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_) {}

    , decltype(_impl_.metadata_) {}

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.format_) { 0u }

    , decltype(_impl_.chunks_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotsResponse::~SnapshotsResponse() {
  // @@protoc_insertion_point(destructor:tendermint.statesync.SnapshotsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_.Destroy();
  _impl_.metadata_.Destroy();
}

void SnapshotsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.statesync.SnapshotsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hash_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.chunks_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.chunks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 chunks = 3 [json_name = "chunks"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes hash = 4 [json_name = "hash"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata = 5 [json_name = "metadata"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SnapshotsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.statesync.SnapshotsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format(), target);
  }

  // uint32 chunks = 3 [json_name = "chunks"];
  if (this->_internal_chunks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_chunks(), target);
  }

  // bytes hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    const std::string& _s = this->_internal_hash();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bytes metadata = 5 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    const std::string& _s = this->_internal_metadata();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.statesync.SnapshotsResponse)
  return target;
}

::size_t SnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.statesync.SnapshotsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 4 [json_name = "hash"];
  if (!this->_internal_hash().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_hash());
  }

  // bytes metadata = 5 [json_name = "metadata"];
  if (!this->_internal_metadata().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format());
  }

  // uint32 chunks = 3 [json_name = "chunks"];
  if (this->_internal_chunks() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_chunks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotsResponse::GetClassData() const { return &_class_data_; }


void SnapshotsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotsResponse*>(&to_msg);
  auto& from = static_cast<const SnapshotsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.statesync.SnapshotsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hash().empty()) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_chunks() != 0) {
    _this->_internal_set_chunks(from._internal_chunks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotsResponse::CopyFrom(const SnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.statesync.SnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotsResponse::IsInitialized() const {
  return true;
}

void SnapshotsResponse::InternalSwap(SnapshotsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_, lhs_arena,
                                       &other->_impl_.hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_, lhs_arena,
                                       &other->_impl_.metadata_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotsResponse, _impl_.chunks_)
      + sizeof(SnapshotsResponse::_impl_.chunks_)
      - PROTOBUF_FIELD_OFFSET(SnapshotsResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[2]);
}
// ===================================================================

class ChunkRequest::_Internal {
 public:
};

ChunkRequest::ChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.statesync.ChunkRequest)
}
ChunkRequest::ChunkRequest(const ChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.statesync.ChunkRequest)
}

inline void ChunkRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.format_) { 0u }

    , decltype(_impl_.index_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChunkRequest::~ChunkRequest() {
  // @@protoc_insertion_point(destructor:tendermint.statesync.ChunkRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChunkRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.statesync.ChunkRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChunkRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.statesync.ChunkRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format(), target);
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.statesync.ChunkRequest)
  return target;
}

::size_t ChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.statesync.ChunkRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format());
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkRequest::GetClassData() const { return &_class_data_; }


void ChunkRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunkRequest*>(&to_msg);
  auto& from = static_cast<const ChunkRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.statesync.ChunkRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkRequest::CopyFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.statesync.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkRequest::IsInitialized() const {
  return true;
}

void ChunkRequest::InternalSwap(ChunkRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.index_)
      + sizeof(ChunkRequest::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ChunkRequest, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[3]);
}
// ===================================================================

class ChunkResponse::_Internal {
 public:
};

ChunkResponse::ChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.statesync.ChunkResponse)
}
ChunkResponse::ChunkResponse(const ChunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_) {}

    , decltype(_impl_.height_) {}

    , decltype(_impl_.format_) {}

    , decltype(_impl_.index_) {}

    , decltype(_impl_.missing_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk().empty()) {
    _this->_impl_.chunk_.Set(from._internal_chunk(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.missing_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.missing_));
  // @@protoc_insertion_point(copy_constructor:tendermint.statesync.ChunkResponse)
}

inline void ChunkResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.chunk_) {}

    , decltype(_impl_.height_) { ::uint64_t{0u} }

    , decltype(_impl_.format_) { 0u }

    , decltype(_impl_.index_) { 0u }

    , decltype(_impl_.missing_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chunk_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chunk_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChunkResponse::~ChunkResponse() {
  // @@protoc_insertion_point(destructor:tendermint.statesync.ChunkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunkResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chunk_.Destroy();
}

void ChunkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.statesync.ChunkResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chunk_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.missing_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.missing_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 height = 1 [json_name = "height"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 index = 3 [json_name = "index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes chunk = 4 [json_name = "chunk"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chunk();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool missing = 5 [json_name = "missing"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.missing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChunkResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.statesync.ChunkResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_height(), target);
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_format(), target);
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_index(), target);
  }

  // bytes chunk = 4 [json_name = "chunk"];
  if (!this->_internal_chunk().empty()) {
    const std::string& _s = this->_internal_chunk();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // bool missing = 5 [json_name = "missing"];
  if (this->_internal_missing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_missing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.statesync.ChunkResponse)
  return target;
}

::size_t ChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.statesync.ChunkResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chunk = 4 [json_name = "chunk"];
  if (!this->_internal_chunk().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_chunk());
  }

  // uint64 height = 1 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_height());
  }

  // uint32 format = 2 [json_name = "format"];
  if (this->_internal_format() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_format());
  }

  // uint32 index = 3 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_index());
  }

  // bool missing = 5 [json_name = "missing"];
  if (this->_internal_missing() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunkResponse::GetClassData() const { return &_class_data_; }


void ChunkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunkResponse*>(&to_msg);
  auto& from = static_cast<const ChunkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.statesync.ChunkResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chunk().empty()) {
    _this->_internal_set_chunk(from._internal_chunk());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_format() != 0) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_missing() != 0) {
    _this->_internal_set_missing(from._internal_missing());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunkResponse::CopyFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.statesync.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkResponse::IsInitialized() const {
  return true;
}

void ChunkResponse::InternalSwap(ChunkResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chunk_, lhs_arena,
                                       &other->_impl_.chunk_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.missing_)
      + sizeof(ChunkResponse::_impl_.missing_)
      - PROTOBUF_FIELD_OFFSET(ChunkResponse, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fstatesync_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fstatesync_2ftypes_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace statesync
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::statesync::Message*
Arena::CreateMaybeMessage< ::tendermint::statesync::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::statesync::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::statesync::SnapshotsRequest*
Arena::CreateMaybeMessage< ::tendermint::statesync::SnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::statesync::SnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::statesync::SnapshotsResponse*
Arena::CreateMaybeMessage< ::tendermint::statesync::SnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::statesync::SnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::statesync::ChunkRequest*
Arena::CreateMaybeMessage< ::tendermint::statesync::ChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::statesync::ChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::statesync::ChunkResponse*
Arena::CreateMaybeMessage< ::tendermint::statesync::ChunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::statesync::ChunkResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

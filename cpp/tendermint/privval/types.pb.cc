// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/privval/types.proto

#include "tendermint/privval/types.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace privval {
template <typename>
PROTOBUF_CONSTEXPR RemoteSignerError::RemoteSignerError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.description_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.code_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteSignerErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteSignerErrorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteSignerErrorDefaultTypeInternal() {}
  union {
    RemoteSignerError _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteSignerErrorDefaultTypeInternal _RemoteSignerError_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PubKeyRequest::PubKeyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PubKeyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PubKeyRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PubKeyRequestDefaultTypeInternal() {}
  union {
    PubKeyRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PubKeyRequestDefaultTypeInternal _PubKeyRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PubKeyResponse::PubKeyResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pub_key_)*/nullptr
  , /*decltype(_impl_.error_)*/nullptr} {}
struct PubKeyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PubKeyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PubKeyResponseDefaultTypeInternal() {}
  union {
    PubKeyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PubKeyResponseDefaultTypeInternal _PubKeyResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignVoteRequest::SignVoteRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.vote_)*/nullptr} {}
struct SignVoteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignVoteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignVoteRequestDefaultTypeInternal() {}
  union {
    SignVoteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignVoteRequestDefaultTypeInternal _SignVoteRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignedVoteResponse::SignedVoteResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vote_)*/nullptr
  , /*decltype(_impl_.error_)*/nullptr} {}
struct SignedVoteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedVoteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedVoteResponseDefaultTypeInternal() {}
  union {
    SignedVoteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedVoteResponseDefaultTypeInternal _SignedVoteResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignProposalRequest::SignProposalRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.chain_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.proposal_)*/nullptr} {}
struct SignProposalRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignProposalRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignProposalRequestDefaultTypeInternal() {}
  union {
    SignProposalRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignProposalRequestDefaultTypeInternal _SignProposalRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SignedProposalResponse::SignedProposalResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.proposal_)*/nullptr
  , /*decltype(_impl_.error_)*/nullptr} {}
struct SignedProposalResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SignedProposalResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SignedProposalResponseDefaultTypeInternal() {}
  union {
    SignedProposalResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SignedProposalResponseDefaultTypeInternal _SignedProposalResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PingRequest::PingRequest(
    ::_pbi::ConstantInitialized) {}
struct PingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingRequestDefaultTypeInternal() {}
  union {
    PingRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingRequestDefaultTypeInternal _PingRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PingResponse::PingResponse(
    ::_pbi::ConstantInitialized) {}
struct PingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingResponseDefaultTypeInternal() {}
  union {
    PingResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingResponseDefaultTypeInternal _PingResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace privval
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fprivval_2ftypes_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fprivval_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::RemoteSignerError, _impl_.description_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyRequest, _impl_.chain_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, _impl_.pub_key_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PubKeyResponse, _impl_.error_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, _impl_.vote_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignVoteRequest, _impl_.chain_id_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, _impl_.vote_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedVoteResponse, _impl_.error_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, _impl_.proposal_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignProposalRequest, _impl_.chain_id_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, _impl_.proposal_),
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::SignedProposalResponse, _impl_.error_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PingRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::PingResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::privval::RemoteSignerError)},
        { 10, -1, -1, sizeof(::tendermint::privval::PubKeyRequest)},
        { 19, 29, -1, sizeof(::tendermint::privval::PubKeyResponse)},
        { 31, 41, -1, sizeof(::tendermint::privval::SignVoteRequest)},
        { 43, 53, -1, sizeof(::tendermint::privval::SignedVoteResponse)},
        { 55, 65, -1, sizeof(::tendermint::privval::SignProposalRequest)},
        { 67, 77, -1, sizeof(::tendermint::privval::SignedProposalResponse)},
        { 79, -1, -1, sizeof(::tendermint::privval::PingRequest)},
        { 87, -1, -1, sizeof(::tendermint::privval::PingResponse)},
        { 95, -1, -1, sizeof(::tendermint::privval::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::privval::_RemoteSignerError_default_instance_._instance,
    &::tendermint::privval::_PubKeyRequest_default_instance_._instance,
    &::tendermint::privval::_PubKeyResponse_default_instance_._instance,
    &::tendermint::privval::_SignVoteRequest_default_instance_._instance,
    &::tendermint::privval::_SignedVoteResponse_default_instance_._instance,
    &::tendermint::privval::_SignProposalRequest_default_instance_._instance,
    &::tendermint::privval::_SignedProposalResponse_default_instance_._instance,
    &::tendermint::privval::_PingRequest_default_instance_._instance,
    &::tendermint::privval::_PingResponse_default_instance_._instance,
    &::tendermint::privval::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fprivval_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\036tendermint/privval/types.proto\022\022tender"
    "mint.privval\032\034tendermint/crypto/keys.pro"
    "to\032\034tendermint/types/types.proto\032\024gogopr"
    "oto/gogo.proto\"I\n\021RemoteSignerError\022\022\n\004c"
    "ode\030\001 \001(\005R\004code\022 \n\013description\030\002 \001(\tR\013de"
    "scription\"*\n\rPubKeyRequest\022\031\n\010chain_id\030\001"
    " \001(\tR\007chainId\"\212\001\n\016PubKeyResponse\022;\n\007pub_"
    "key\030\001 \001(\0132\034.tendermint.crypto.PublicKeyB"
    "\004\310\336\037\000R\006pubKey\022;\n\005error\030\002 \001(\0132%.tendermin"
    "t.privval.RemoteSignerErrorR\005error\"X\n\017Si"
    "gnVoteRequest\022*\n\004vote\030\001 \001(\0132\026.tendermint"
    ".types.VoteR\004vote\022\031\n\010chain_id\030\002 \001(\tR\007cha"
    "inId\"\203\001\n\022SignedVoteResponse\0220\n\004vote\030\001 \001("
    "\0132\026.tendermint.types.VoteB\004\310\336\037\000R\004vote\022;\n"
    "\005error\030\002 \001(\0132%.tendermint.privval.Remote"
    "SignerErrorR\005error\"h\n\023SignProposalReques"
    "t\0226\n\010proposal\030\001 \001(\0132\032.tendermint.types.P"
    "roposalR\010proposal\022\031\n\010chain_id\030\002 \001(\tR\007cha"
    "inId\"\223\001\n\026SignedProposalResponse\022<\n\010propo"
    "sal\030\001 \001(\0132\032.tendermint.types.ProposalB\004\310"
    "\336\037\000R\010proposal\022;\n\005error\030\002 \001(\0132%.tendermin"
    "t.privval.RemoteSignerErrorR\005error\"\r\n\013Pi"
    "ngRequest\"\016\n\014PingResponse\"\262\005\n\007Message\022K\n"
    "\017pub_key_request\030\001 \001(\0132!.tendermint.priv"
    "val.PubKeyRequestH\000R\rpubKeyRequest\022N\n\020pu"
    "b_key_response\030\002 \001(\0132\".tendermint.privva"
    "l.PubKeyResponseH\000R\016pubKeyResponse\022Q\n\021si"
    "gn_vote_request\030\003 \001(\0132#.tendermint.privv"
    "al.SignVoteRequestH\000R\017signVoteRequest\022Z\n"
    "\024signed_vote_response\030\004 \001(\0132&.tendermint"
    ".privval.SignedVoteResponseH\000R\022signedVot"
    "eResponse\022]\n\025sign_proposal_request\030\005 \001(\013"
    "2\'.tendermint.privval.SignProposalReques"
    "tH\000R\023signProposalRequest\022f\n\030signed_propo"
    "sal_response\030\006 \001(\0132*.tendermint.privval."
    "SignedProposalResponseH\000R\026signedProposal"
    "Response\022D\n\014ping_request\030\007 \001(\0132\037.tenderm"
    "int.privval.PingRequestH\000R\013pingRequest\022G"
    "\n\rping_response\030\010 \001(\0132 .tendermint.privv"
    "al.PingResponseH\000R\014pingResponseB\005\n\003sum*\250"
    "\001\n\006Errors\022\022\n\016ERRORS_UNKNOWN\020\000\022\036\n\032ERRORS_"
    "UNEXPECTED_RESPONSE\020\001\022\030\n\024ERRORS_NO_CONNE"
    "CTION\020\002\022\035\n\031ERRORS_CONNECTION_TIMEOUT\020\003\022\027"
    "\n\023ERRORS_READ_TIMEOUT\020\004\022\030\n\024ERRORS_WRITE_"
    "TIMEOUT\020\005B\304\001\n\026com.tendermint.privvalB\nTy"
    "pesProtoP\001Z5github.com/cometbft/cometbft"
    "/proto/tendermint/privval\242\002\003TPX\252\002\022Tender"
    "mint.Privval\312\002\022Tendermint\\Privval\342\002\036Tend"
    "ermint\\Privval\\GPBMetadata\352\002\023Tendermint:"
    ":Privvalb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fprivval_2ftypes_2eproto_deps[3] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
        &::descriptor_table_tendermint_2ftypes_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fprivval_2ftypes_2eproto = {
    false,
    false,
    1976,
    descriptor_table_protodef_tendermint_2fprivval_2ftypes_2eproto,
    "tendermint/privval/types.proto",
    &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
    descriptor_table_tendermint_2fprivval_2ftypes_2eproto_deps,
    3,
    10,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fprivval_2ftypes_2eproto::offsets,
    file_level_metadata_tendermint_2fprivval_2ftypes_2eproto,
    file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto,
    file_level_service_descriptors_tendermint_2fprivval_2ftypes_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter() {
  return &descriptor_table_tendermint_2fprivval_2ftypes_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fprivval_2ftypes_2eproto(&descriptor_table_tendermint_2fprivval_2ftypes_2eproto);
namespace tendermint {
namespace privval {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Errors_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tendermint_2fprivval_2ftypes_2eproto);
  return file_level_enum_descriptors_tendermint_2fprivval_2ftypes_2eproto[0];
}
bool Errors_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class RemoteSignerError::_Internal {
 public:
};

RemoteSignerError::RemoteSignerError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.RemoteSignerError)
}
RemoteSignerError::RemoteSignerError(const RemoteSignerError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteSignerError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.description_) {}

    , decltype(_impl_.code_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.RemoteSignerError)
}

inline void RemoteSignerError::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.description_) {}

    , decltype(_impl_.code_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.description_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteSignerError::~RemoteSignerError() {
  // @@protoc_insertion_point(destructor:tendermint.privval.RemoteSignerError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteSignerError::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.description_.Destroy();
}

void RemoteSignerError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteSignerError::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.RemoteSignerError)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.description_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteSignerError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 code = 1 [json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string description = 2 [json_name = "description"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.privval.RemoteSignerError.description"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteSignerError::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.RemoteSignerError)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_code(), target);
  }

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.privval.RemoteSignerError.description");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.RemoteSignerError)
  return target;
}

::size_t RemoteSignerError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.RemoteSignerError)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // int32 code = 1 [json_name = "code"];
  if (this->_internal_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteSignerError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteSignerError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteSignerError::GetClassData() const { return &_class_data_; }


void RemoteSignerError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteSignerError*>(&to_msg);
  auto& from = static_cast<const RemoteSignerError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.RemoteSignerError)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteSignerError::CopyFrom(const RemoteSignerError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.RemoteSignerError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteSignerError::IsInitialized() const {
  return true;
}

void RemoteSignerError::InternalSwap(RemoteSignerError* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, lhs_arena,
                                       &other->_impl_.description_, rhs_arena);

  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteSignerError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[0]);
}
// ===================================================================

class PubKeyRequest::_Internal {
 public:
};

PubKeyRequest::PubKeyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PubKeyRequest)
}
PubKeyRequest::PubKeyRequest(const PubKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PubKeyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chain_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PubKeyRequest)
}

inline void PubKeyRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.chain_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PubKeyRequest::~PubKeyRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.PubKeyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PubKeyRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
}

void PubKeyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PubKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.PubKeyRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKeyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string chain_id = 1 [json_name = "chainId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.privval.PubKeyRequest.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PubKeyRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.PubKeyRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain_id = 1 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.privval.PubKeyRequest.chain_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.PubKeyRequest)
  return target;
}

::size_t PubKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.PubKeyRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 1 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKeyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PubKeyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKeyRequest::GetClassData() const { return &_class_data_; }


void PubKeyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PubKeyRequest*>(&to_msg);
  auto& from = static_cast<const PubKeyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.PubKeyRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKeyRequest::CopyFrom(const PubKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.PubKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKeyRequest::IsInitialized() const {
  return true;
}

void PubKeyRequest::InternalSwap(PubKeyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKeyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[1]);
}
// ===================================================================

class PubKeyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PubKeyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PubKeyResponse, _impl_._has_bits_);
  static const ::tendermint::crypto::PublicKey& pub_key(const PubKeyResponse* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::privval::RemoteSignerError& error(const PubKeyResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::crypto::PublicKey&
PubKeyResponse::_Internal::pub_key(const PubKeyResponse* msg) {
  return *msg->_impl_.pub_key_;
}
const ::tendermint::privval::RemoteSignerError&
PubKeyResponse::_Internal::error(const PubKeyResponse* msg) {
  return *msg->_impl_.error_;
}
void PubKeyResponse::clear_pub_key() {
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PubKeyResponse::PubKeyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PubKeyResponse)
}
PubKeyResponse::PubKeyResponse(const PubKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PubKeyResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.error_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::tendermint::crypto::PublicKey(*from._impl_.pub_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.error_ = new ::tendermint::privval::RemoteSignerError(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PubKeyResponse)
}

inline void PubKeyResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pub_key_){nullptr}
    , decltype(_impl_.error_){nullptr}
  };
}

PubKeyResponse::~PubKeyResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.PubKeyResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PubKeyResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pub_key_;
  if (this != internal_default_instance()) delete _impl_.error_;
}

void PubKeyResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PubKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.PubKeyResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.pub_key_ != nullptr);
      _impl_.pub_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PubKeyResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PubKeyResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.PubKeyResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.PubKeyResponse)
  return target;
}

::size_t PubKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.PubKeyResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pub_key_);
    }

    // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PubKeyResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PubKeyResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PubKeyResponse::GetClassData() const { return &_class_data_; }


void PubKeyResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PubKeyResponse*>(&to_msg);
  auto& from = static_cast<const PubKeyResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.PubKeyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(
          from._internal_pub_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(
          from._internal_error());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PubKeyResponse::CopyFrom(const PubKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.PubKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubKeyResponse::IsInitialized() const {
  return true;
}

void PubKeyResponse::InternalSwap(PubKeyResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PubKeyResponse, _impl_.error_)
      + sizeof(PubKeyResponse::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(PubKeyResponse, _impl_.pub_key_)>(
          reinterpret_cast<char*>(&_impl_.pub_key_),
          reinterpret_cast<char*>(&other->_impl_.pub_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PubKeyResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[2]);
}
// ===================================================================

class SignVoteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SignVoteRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignVoteRequest, _impl_._has_bits_);
  static const ::tendermint::types::Vote& vote(const SignVoteRequest* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Vote&
SignVoteRequest::_Internal::vote(const SignVoteRequest* msg) {
  return *msg->_impl_.vote_;
}
void SignVoteRequest::clear_vote() {
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignVoteRequest::SignVoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignVoteRequest)
}
SignVoteRequest::SignVoteRequest(const SignVoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignVoteRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.vote_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_ = new ::tendermint::types::Vote(*from._impl_.vote_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignVoteRequest)
}

inline void SignVoteRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.vote_){nullptr}
  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignVoteRequest::~SignVoteRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignVoteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignVoteRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.vote_;
}

void SignVoteRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignVoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignVoteRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.vote_ != nullptr);
    _impl_.vote_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignVoteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1 [json_name = "vote"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.privval.SignVoteRequest.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignVoteRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignVoteRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Vote vote = 1 [json_name = "vote"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.privval.SignVoteRequest.chain_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignVoteRequest)
  return target;
}

::size_t SignVoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignVoteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  // .tendermint.types.Vote vote = 1 [json_name = "vote"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vote_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignVoteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignVoteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignVoteRequest::GetClassData() const { return &_class_data_; }


void SignVoteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignVoteRequest*>(&to_msg);
  auto& from = static_cast<const SignVoteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignVoteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(
        from._internal_vote());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignVoteRequest::CopyFrom(const SignVoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignVoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignVoteRequest::IsInitialized() const {
  return true;
}

void SignVoteRequest::InternalSwap(SignVoteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  swap(_impl_.vote_, other->_impl_.vote_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignVoteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[3]);
}
// ===================================================================

class SignedVoteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedVoteResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignedVoteResponse, _impl_._has_bits_);
  static const ::tendermint::types::Vote& vote(const SignedVoteResponse* msg);
  static void set_has_vote(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::privval::RemoteSignerError& error(const SignedVoteResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::Vote&
SignedVoteResponse::_Internal::vote(const SignedVoteResponse* msg) {
  return *msg->_impl_.vote_;
}
const ::tendermint::privval::RemoteSignerError&
SignedVoteResponse::_Internal::error(const SignedVoteResponse* msg) {
  return *msg->_impl_.error_;
}
void SignedVoteResponse::clear_vote() {
  if (_impl_.vote_ != nullptr) _impl_.vote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignedVoteResponse::SignedVoteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignedVoteResponse)
}
SignedVoteResponse::SignedVoteResponse(const SignedVoteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignedVoteResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.error_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.vote_ = new ::tendermint::types::Vote(*from._impl_.vote_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.error_ = new ::tendermint::privval::RemoteSignerError(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignedVoteResponse)
}

inline void SignedVoteResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vote_){nullptr}
    , decltype(_impl_.error_){nullptr}
  };
}

SignedVoteResponse::~SignedVoteResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignedVoteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedVoteResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vote_;
  if (this != internal_default_instance()) delete _impl_.error_;
}

void SignedVoteResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignedVoteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignedVoteResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.vote_ != nullptr);
      _impl_.vote_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedVoteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vote(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignedVoteResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignedVoteResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::vote(this),
        _Internal::vote(this).GetCachedSize(), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignedVoteResponse)
  return target;
}

::size_t SignedVoteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignedVoteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.Vote vote = 1 [json_name = "vote", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vote_);
    }

    // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedVoteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignedVoteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedVoteResponse::GetClassData() const { return &_class_data_; }


void SignedVoteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignedVoteResponse*>(&to_msg);
  auto& from = static_cast<const SignedVoteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignedVoteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_vote()->::tendermint::types::Vote::MergeFrom(
          from._internal_vote());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(
          from._internal_error());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedVoteResponse::CopyFrom(const SignedVoteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignedVoteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedVoteResponse::IsInitialized() const {
  return true;
}

void SignedVoteResponse::InternalSwap(SignedVoteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedVoteResponse, _impl_.error_)
      + sizeof(SignedVoteResponse::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(SignedVoteResponse, _impl_.vote_)>(
          reinterpret_cast<char*>(&_impl_.vote_),
          reinterpret_cast<char*>(&other->_impl_.vote_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedVoteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[4]);
}
// ===================================================================

class SignProposalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SignProposalRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignProposalRequest, _impl_._has_bits_);
  static const ::tendermint::types::Proposal& proposal(const SignProposalRequest* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::types::Proposal&
SignProposalRequest::_Internal::proposal(const SignProposalRequest* msg) {
  return *msg->_impl_.proposal_;
}
void SignProposalRequest::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignProposalRequest::SignProposalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignProposalRequest)
}
SignProposalRequest::SignProposalRequest(const SignProposalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignProposalRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.proposal_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_ = new ::tendermint::types::Proposal(*from._impl_.proposal_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignProposalRequest)
}

inline void SignProposalRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.chain_id_) {}

    , decltype(_impl_.proposal_){nullptr}
  };
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SignProposalRequest::~SignProposalRequest() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignProposalRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignProposalRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chain_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.proposal_;
}

void SignProposalRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignProposalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignProposalRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chain_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.proposal_ != nullptr);
    _impl_.proposal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignProposalRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1 [json_name = "proposal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string chain_id = 2 [json_name = "chainId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tendermint.privval.SignProposalRequest.chain_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignProposalRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignProposalRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Proposal proposal = 1 [json_name = "proposal"];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    const std::string& _s = this->_internal_chain_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "tendermint.privval.SignProposalRequest.chain_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignProposalRequest)
  return target;
}

::size_t SignProposalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignProposalRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain_id = 2 [json_name = "chainId"];
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_chain_id());
  }

  // .tendermint.types.Proposal proposal = 1 [json_name = "proposal"];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.proposal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignProposalRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignProposalRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignProposalRequest::GetClassData() const { return &_class_data_; }


void SignProposalRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignProposalRequest*>(&to_msg);
  auto& from = static_cast<const SignProposalRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignProposalRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(
        from._internal_proposal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignProposalRequest::CopyFrom(const SignProposalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignProposalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignProposalRequest::IsInitialized() const {
  return true;
}

void SignProposalRequest::InternalSwap(SignProposalRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chain_id_, lhs_arena,
                                       &other->_impl_.chain_id_, rhs_arena);
  swap(_impl_.proposal_, other->_impl_.proposal_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignProposalRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[5]);
}
// ===================================================================

class SignedProposalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SignedProposalResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SignedProposalResponse, _impl_._has_bits_);
  static const ::tendermint::types::Proposal& proposal(const SignedProposalResponse* msg);
  static void set_has_proposal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::tendermint::privval::RemoteSignerError& error(const SignedProposalResponse* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::tendermint::types::Proposal&
SignedProposalResponse::_Internal::proposal(const SignedProposalResponse* msg) {
  return *msg->_impl_.proposal_;
}
const ::tendermint::privval::RemoteSignerError&
SignedProposalResponse::_Internal::error(const SignedProposalResponse* msg) {
  return *msg->_impl_.error_;
}
void SignedProposalResponse::clear_proposal() {
  if (_impl_.proposal_ != nullptr) _impl_.proposal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SignedProposalResponse::SignedProposalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.SignedProposalResponse)
}
SignedProposalResponse::SignedProposalResponse(const SignedProposalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SignedProposalResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
    , decltype(_impl_.error_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.proposal_ = new ::tendermint::types::Proposal(*from._impl_.proposal_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.error_ = new ::tendermint::privval::RemoteSignerError(*from._impl_.error_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.SignedProposalResponse)
}

inline void SignedProposalResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.proposal_){nullptr}
    , decltype(_impl_.error_){nullptr}
  };
}

SignedProposalResponse::~SignedProposalResponse() {
  // @@protoc_insertion_point(destructor:tendermint.privval.SignedProposalResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SignedProposalResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.proposal_;
  if (this != internal_default_instance()) delete _impl_.error_;
}

void SignedProposalResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SignedProposalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.SignedProposalResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.proposal_ != nullptr);
      _impl_.proposal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.error_ != nullptr);
      _impl_.error_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SignedProposalResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_proposal(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SignedProposalResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.SignedProposalResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::proposal(this),
        _Internal::proposal(this).GetCachedSize(), target, stream);
  }

  // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error(this),
        _Internal::error(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.SignedProposalResponse)
  return target;
}

::size_t SignedProposalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.SignedProposalResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .tendermint.types.Proposal proposal = 1 [json_name = "proposal", (.gogoproto.nullable) = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.proposal_);
    }

    // .tendermint.privval.RemoteSignerError error = 2 [json_name = "error"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SignedProposalResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SignedProposalResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SignedProposalResponse::GetClassData() const { return &_class_data_; }


void SignedProposalResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SignedProposalResponse*>(&to_msg);
  auto& from = static_cast<const SignedProposalResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.SignedProposalResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_proposal()->::tendermint::types::Proposal::MergeFrom(
          from._internal_proposal());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_error()->::tendermint::privval::RemoteSignerError::MergeFrom(
          from._internal_error());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SignedProposalResponse::CopyFrom(const SignedProposalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.SignedProposalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedProposalResponse::IsInitialized() const {
  return true;
}

void SignedProposalResponse::InternalSwap(SignedProposalResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SignedProposalResponse, _impl_.error_)
      + sizeof(SignedProposalResponse::_impl_.error_)
      - PROTOBUF_FIELD_OFFSET(SignedProposalResponse, _impl_.proposal_)>(
          reinterpret_cast<char*>(&_impl_.proposal_),
          reinterpret_cast<char*>(&other->_impl_.proposal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SignedProposalResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[6]);
}
// ===================================================================

class PingRequest::_Internal {
 public:
};

PingRequest::PingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PingRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PingRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[7]);
}
// ===================================================================

class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PingResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.PingResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PingResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[8]);
}
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::privval::Message, _impl_._oneof_case_);
  static const ::tendermint::privval::PubKeyRequest& pub_key_request(const Message* msg);
  static const ::tendermint::privval::PubKeyResponse& pub_key_response(const Message* msg);
  static const ::tendermint::privval::SignVoteRequest& sign_vote_request(const Message* msg);
  static const ::tendermint::privval::SignedVoteResponse& signed_vote_response(const Message* msg);
  static const ::tendermint::privval::SignProposalRequest& sign_proposal_request(const Message* msg);
  static const ::tendermint::privval::SignedProposalResponse& signed_proposal_response(const Message* msg);
  static const ::tendermint::privval::PingRequest& ping_request(const Message* msg);
  static const ::tendermint::privval::PingResponse& ping_response(const Message* msg);
};

const ::tendermint::privval::PubKeyRequest&
Message::_Internal::pub_key_request(const Message* msg) {
  return *msg->_impl_.sum_.pub_key_request_;
}
const ::tendermint::privval::PubKeyResponse&
Message::_Internal::pub_key_response(const Message* msg) {
  return *msg->_impl_.sum_.pub_key_response_;
}
const ::tendermint::privval::SignVoteRequest&
Message::_Internal::sign_vote_request(const Message* msg) {
  return *msg->_impl_.sum_.sign_vote_request_;
}
const ::tendermint::privval::SignedVoteResponse&
Message::_Internal::signed_vote_response(const Message* msg) {
  return *msg->_impl_.sum_.signed_vote_response_;
}
const ::tendermint::privval::SignProposalRequest&
Message::_Internal::sign_proposal_request(const Message* msg) {
  return *msg->_impl_.sum_.sign_proposal_request_;
}
const ::tendermint::privval::SignedProposalResponse&
Message::_Internal::signed_proposal_response(const Message* msg) {
  return *msg->_impl_.sum_.signed_proposal_response_;
}
const ::tendermint::privval::PingRequest&
Message::_Internal::ping_request(const Message* msg) {
  return *msg->_impl_.sum_.ping_request_;
}
const ::tendermint::privval::PingResponse&
Message::_Internal::ping_response(const Message* msg) {
  return *msg->_impl_.sum_.ping_response_;
}
void Message::set_allocated_pub_key_request(::tendermint::privval::PubKeyRequest* pub_key_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pub_key_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pub_key_request);
    if (message_arena != submessage_arena) {
      pub_key_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key_request, submessage_arena);
    }
    set_has_pub_key_request();
    _impl_.sum_.pub_key_request_ = pub_key_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.pub_key_request)
}
void Message::set_allocated_pub_key_response(::tendermint::privval::PubKeyResponse* pub_key_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pub_key_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pub_key_response);
    if (message_arena != submessage_arena) {
      pub_key_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key_response, submessage_arena);
    }
    set_has_pub_key_response();
    _impl_.sum_.pub_key_response_ = pub_key_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.pub_key_response)
}
void Message::set_allocated_sign_vote_request(::tendermint::privval::SignVoteRequest* sign_vote_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (sign_vote_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sign_vote_request);
    if (message_arena != submessage_arena) {
      sign_vote_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_vote_request, submessage_arena);
    }
    set_has_sign_vote_request();
    _impl_.sum_.sign_vote_request_ = sign_vote_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.sign_vote_request)
}
void Message::set_allocated_signed_vote_response(::tendermint::privval::SignedVoteResponse* signed_vote_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (signed_vote_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signed_vote_response);
    if (message_arena != submessage_arena) {
      signed_vote_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_vote_response, submessage_arena);
    }
    set_has_signed_vote_response();
    _impl_.sum_.signed_vote_response_ = signed_vote_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.signed_vote_response)
}
void Message::set_allocated_sign_proposal_request(::tendermint::privval::SignProposalRequest* sign_proposal_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (sign_proposal_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sign_proposal_request);
    if (message_arena != submessage_arena) {
      sign_proposal_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_proposal_request, submessage_arena);
    }
    set_has_sign_proposal_request();
    _impl_.sum_.sign_proposal_request_ = sign_proposal_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.sign_proposal_request)
}
void Message::set_allocated_signed_proposal_response(::tendermint::privval::SignedProposalResponse* signed_proposal_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (signed_proposal_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signed_proposal_response);
    if (message_arena != submessage_arena) {
      signed_proposal_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signed_proposal_response, submessage_arena);
    }
    set_has_signed_proposal_response();
    _impl_.sum_.signed_proposal_response_ = signed_proposal_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.signed_proposal_response)
}
void Message::set_allocated_ping_request(::tendermint::privval::PingRequest* ping_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (ping_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping_request);
    if (message_arena != submessage_arena) {
      ping_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_request, submessage_arena);
    }
    set_has_ping_request();
    _impl_.sum_.ping_request_ = ping_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.ping_request)
}
void Message::set_allocated_ping_response(::tendermint::privval::PingResponse* ping_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (ping_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping_response);
    if (message_arena != submessage_arena) {
      ping_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_response, submessage_arena);
    }
    set_has_ping_response();
    _impl_.sum_.ping_response_ = ping_response;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.privval.Message.ping_response)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.privval.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kPubKeyRequest: {
      _this->_internal_mutable_pub_key_request()->::tendermint::privval::PubKeyRequest::MergeFrom(
          from._internal_pub_key_request());
      break;
    }
    case kPubKeyResponse: {
      _this->_internal_mutable_pub_key_response()->::tendermint::privval::PubKeyResponse::MergeFrom(
          from._internal_pub_key_response());
      break;
    }
    case kSignVoteRequest: {
      _this->_internal_mutable_sign_vote_request()->::tendermint::privval::SignVoteRequest::MergeFrom(
          from._internal_sign_vote_request());
      break;
    }
    case kSignedVoteResponse: {
      _this->_internal_mutable_signed_vote_response()->::tendermint::privval::SignedVoteResponse::MergeFrom(
          from._internal_signed_vote_response());
      break;
    }
    case kSignProposalRequest: {
      _this->_internal_mutable_sign_proposal_request()->::tendermint::privval::SignProposalRequest::MergeFrom(
          from._internal_sign_proposal_request());
      break;
    }
    case kSignedProposalResponse: {
      _this->_internal_mutable_signed_proposal_response()->::tendermint::privval::SignedProposalResponse::MergeFrom(
          from._internal_signed_proposal_response());
      break;
    }
    case kPingRequest: {
      _this->_internal_mutable_ping_request()->::tendermint::privval::PingRequest::MergeFrom(
          from._internal_ping_request());
      break;
    }
    case kPingResponse: {
      _this->_internal_mutable_ping_response()->::tendermint::privval::PingResponse::MergeFrom(
          from._internal_ping_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.privval.Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.privval.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.privval.Message)
  switch (sum_case()) {
    case kPubKeyRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.pub_key_request_;
      }
      break;
    }
    case kPubKeyResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.pub_key_response_;
      }
      break;
    }
    case kSignVoteRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.sign_vote_request_;
      }
      break;
    }
    case kSignedVoteResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.signed_vote_response_;
      }
      break;
    }
    case kSignProposalRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.sign_proposal_request_;
      }
      break;
    }
    case kSignedProposalResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.signed_proposal_response_;
      }
      break;
    }
    case kPingRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.ping_request_;
      }
      break;
    }
    case kPingResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.ping_response_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.privval.Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.privval.PubKeyRequest pub_key_request = 1 [json_name = "pubKeyRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.PubKeyResponse pub_key_response = 2 [json_name = "pubKeyResponse"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.SignVoteRequest sign_vote_request = 3 [json_name = "signVoteRequest"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign_vote_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.SignedVoteResponse signed_vote_response = 4 [json_name = "signedVoteResponse"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_vote_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.SignProposalRequest sign_proposal_request = 5 [json_name = "signProposalRequest"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign_proposal_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.SignedProposalResponse signed_proposal_response = 6 [json_name = "signedProposalResponse"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signed_proposal_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.PingRequest ping_request = 7 [json_name = "pingRequest"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.privval.PingResponse ping_response = 8 [json_name = "pingResponse"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.privval.Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kPubKeyRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::pub_key_request(this),
          _Internal::pub_key_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kPubKeyResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::pub_key_response(this),
          _Internal::pub_key_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignVoteRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::sign_vote_request(this),
          _Internal::sign_vote_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignedVoteResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::signed_vote_response(this),
          _Internal::signed_vote_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignProposalRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::sign_proposal_request(this),
          _Internal::sign_proposal_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kSignedProposalResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::signed_proposal_response(this),
          _Internal::signed_proposal_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kPingRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::ping_request(this),
          _Internal::ping_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kPingResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::ping_response(this),
          _Internal::ping_response(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.privval.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.privval.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.privval.PubKeyRequest pub_key_request = 1 [json_name = "pubKeyRequest"];
    case kPubKeyRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.pub_key_request_);
      break;
    }
    // .tendermint.privval.PubKeyResponse pub_key_response = 2 [json_name = "pubKeyResponse"];
    case kPubKeyResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.pub_key_response_);
      break;
    }
    // .tendermint.privval.SignVoteRequest sign_vote_request = 3 [json_name = "signVoteRequest"];
    case kSignVoteRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.sign_vote_request_);
      break;
    }
    // .tendermint.privval.SignedVoteResponse signed_vote_response = 4 [json_name = "signedVoteResponse"];
    case kSignedVoteResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.signed_vote_response_);
      break;
    }
    // .tendermint.privval.SignProposalRequest sign_proposal_request = 5 [json_name = "signProposalRequest"];
    case kSignProposalRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.sign_proposal_request_);
      break;
    }
    // .tendermint.privval.SignedProposalResponse signed_proposal_response = 6 [json_name = "signedProposalResponse"];
    case kSignedProposalResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.signed_proposal_response_);
      break;
    }
    // .tendermint.privval.PingRequest ping_request = 7 [json_name = "pingRequest"];
    case kPingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.ping_request_);
      break;
    }
    // .tendermint.privval.PingResponse ping_response = 8 [json_name = "pingResponse"];
    case kPingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.ping_response_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.privval.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kPubKeyRequest: {
      _this->_internal_mutable_pub_key_request()->::tendermint::privval::PubKeyRequest::MergeFrom(
          from._internal_pub_key_request());
      break;
    }
    case kPubKeyResponse: {
      _this->_internal_mutable_pub_key_response()->::tendermint::privval::PubKeyResponse::MergeFrom(
          from._internal_pub_key_response());
      break;
    }
    case kSignVoteRequest: {
      _this->_internal_mutable_sign_vote_request()->::tendermint::privval::SignVoteRequest::MergeFrom(
          from._internal_sign_vote_request());
      break;
    }
    case kSignedVoteResponse: {
      _this->_internal_mutable_signed_vote_response()->::tendermint::privval::SignedVoteResponse::MergeFrom(
          from._internal_signed_vote_response());
      break;
    }
    case kSignProposalRequest: {
      _this->_internal_mutable_sign_proposal_request()->::tendermint::privval::SignProposalRequest::MergeFrom(
          from._internal_sign_proposal_request());
      break;
    }
    case kSignedProposalResponse: {
      _this->_internal_mutable_signed_proposal_response()->::tendermint::privval::SignedProposalResponse::MergeFrom(
          from._internal_signed_proposal_response());
      break;
    }
    case kPingRequest: {
      _this->_internal_mutable_ping_request()->::tendermint::privval::PingRequest::MergeFrom(
          from._internal_ping_request());
      break;
    }
    case kPingResponse: {
      _this->_internal_mutable_ping_response()->::tendermint::privval::PingResponse::MergeFrom(
          from._internal_ping_response());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.privval.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_getter, &descriptor_table_tendermint_2fprivval_2ftypes_2eproto_once,
      file_level_metadata_tendermint_2fprivval_2ftypes_2eproto[9]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace privval
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::privval::RemoteSignerError*
Arena::CreateMaybeMessage< ::tendermint::privval::RemoteSignerError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::RemoteSignerError >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PubKeyRequest*
Arena::CreateMaybeMessage< ::tendermint::privval::PubKeyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PubKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PubKeyResponse*
Arena::CreateMaybeMessage< ::tendermint::privval::PubKeyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PubKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignVoteRequest*
Arena::CreateMaybeMessage< ::tendermint::privval::SignVoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignVoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignedVoteResponse*
Arena::CreateMaybeMessage< ::tendermint::privval::SignedVoteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignedVoteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignProposalRequest*
Arena::CreateMaybeMessage< ::tendermint::privval::SignProposalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignProposalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::SignedProposalResponse*
Arena::CreateMaybeMessage< ::tendermint::privval::SignedProposalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::SignedProposalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PingRequest*
Arena::CreateMaybeMessage< ::tendermint::privval::PingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::PingResponse*
Arena::CreateMaybeMessage< ::tendermint::privval::PingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::privval::Message*
Arena::CreateMaybeMessage< ::tendermint::privval::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::privval::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

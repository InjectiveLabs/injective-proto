// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/pex.proto

#include "tendermint/p2p/pex.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace p2p {
template <typename>
PROTOBUF_CONSTEXPR PexRequest::PexRequest(
    ::_pbi::ConstantInitialized) {}
struct PexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PexRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PexRequestDefaultTypeInternal() {}
  union {
    PexRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PexRequestDefaultTypeInternal _PexRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PexAddrs::PexAddrs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.addrs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PexAddrsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PexAddrsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PexAddrsDefaultTypeInternal() {}
  union {
    PexAddrs _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PexAddrsDefaultTypeInternal _PexAddrs_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Message::Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageDefaultTypeInternal _Message_default_instance_;
}  // namespace p2p
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fp2p_2fpex_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fp2p_2fpex_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fp2p_2fpex_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fp2p_2fpex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PexRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PexAddrs, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PexAddrs, _impl_.addrs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Message, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Message, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Message, _impl_.sum_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::p2p::PexRequest)},
        { 8, -1, -1, sizeof(::tendermint::p2p::PexAddrs)},
        { 17, -1, -1, sizeof(::tendermint::p2p::Message)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::p2p::_PexRequest_default_instance_._instance,
    &::tendermint::p2p::_PexAddrs_default_instance_._instance,
    &::tendermint::p2p::_Message_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fp2p_2fpex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\030tendermint/p2p/pex.proto\022\016tendermint.p"
    "2p\032\032tendermint/p2p/types.proto\032\024gogoprot"
    "o/gogo.proto\"\014\n\nPexRequest\"B\n\010PexAddrs\0226"
    "\n\005addrs\030\001 \003(\0132\032.tendermint.p2p.NetAddres"
    "sB\004\310\336\037\000R\005addrs\"\210\001\n\007Message\022=\n\013pex_reques"
    "t\030\001 \001(\0132\032.tendermint.p2p.PexRequestH\000R\np"
    "exRequest\0227\n\tpex_addrs\030\002 \001(\0132\030.tendermin"
    "t.p2p.PexAddrsH\000R\010pexAddrsB\005\n\003sumB\252\001\n\022co"
    "m.tendermint.p2pB\010PexProtoP\001Z1github.com"
    "/cometbft/cometbft/proto/tendermint/p2p\242"
    "\002\003TPX\252\002\016Tendermint.P2p\312\002\016Tendermint\\P2p\342"
    "\002\032Tendermint\\P2p\\GPBMetadata\352\002\017Tendermin"
    "t::P2pb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fp2p_2fpex_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_tendermint_2fp2p_2ftypes_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fp2p_2fpex_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fp2p_2fpex_2eproto = {
    false,
    false,
    494,
    descriptor_table_protodef_tendermint_2fp2p_2fpex_2eproto,
    "tendermint/p2p/pex.proto",
    &descriptor_table_tendermint_2fp2p_2fpex_2eproto_once,
    descriptor_table_tendermint_2fp2p_2fpex_2eproto_deps,
    2,
    3,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fp2p_2fpex_2eproto::offsets,
    file_level_metadata_tendermint_2fp2p_2fpex_2eproto,
    file_level_enum_descriptors_tendermint_2fp2p_2fpex_2eproto,
    file_level_service_descriptors_tendermint_2fp2p_2fpex_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fp2p_2fpex_2eproto_getter() {
  return &descriptor_table_tendermint_2fp2p_2fpex_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fp2p_2fpex_2eproto(&descriptor_table_tendermint_2fp2p_2fpex_2eproto);
namespace tendermint {
namespace p2p {
// ===================================================================

class PexRequest::_Internal {
 public:
};

PexRequest::PexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PexRequest)
}
PexRequest::PexRequest(const PexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PexRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PexRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PexRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fpex_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fpex_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fpex_2eproto[0]);
}
// ===================================================================

class PexAddrs::_Internal {
 public:
};

void PexAddrs::clear_addrs() {
  _internal_mutable_addrs()->Clear();
}
PexAddrs::PexAddrs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PexAddrs)
}
PexAddrs::PexAddrs(const PexAddrs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PexAddrs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){from._impl_.addrs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PexAddrs)
}

inline void PexAddrs::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.addrs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PexAddrs::~PexAddrs() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.PexAddrs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PexAddrs::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_addrs()->~RepeatedPtrField();
}

void PexAddrs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PexAddrs::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.PexAddrs)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_addrs()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PexAddrs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tendermint.p2p.NetAddress addrs = 1 [json_name = "addrs", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PexAddrs::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.PexAddrs)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tendermint.p2p.NetAddress addrs = 1 [json_name = "addrs", (.gogoproto.nullable) = false];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_addrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_addrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.PexAddrs)
  return target;
}

::size_t PexAddrs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.PexAddrs)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tendermint.p2p.NetAddress addrs = 1 [json_name = "addrs", (.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_addrs_size();
  for (const auto& msg : this->_internal_addrs()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PexAddrs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PexAddrs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PexAddrs::GetClassData() const { return &_class_data_; }


void PexAddrs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PexAddrs*>(&to_msg);
  auto& from = static_cast<const PexAddrs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.PexAddrs)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_addrs()->MergeFrom(from._internal_addrs());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PexAddrs::CopyFrom(const PexAddrs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.PexAddrs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PexAddrs::IsInitialized() const {
  return true;
}

void PexAddrs::InternalSwap(PexAddrs* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_addrs()->InternalSwap(other->_internal_mutable_addrs());
}

::PROTOBUF_NAMESPACE_ID::Metadata PexAddrs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fpex_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fpex_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fpex_2eproto[1]);
}
// ===================================================================

class Message::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Message, _impl_._oneof_case_);
  static const ::tendermint::p2p::PexRequest& pex_request(const Message* msg);
  static const ::tendermint::p2p::PexAddrs& pex_addrs(const Message* msg);
};

const ::tendermint::p2p::PexRequest&
Message::_Internal::pex_request(const Message* msg) {
  return *msg->_impl_.sum_.pex_request_;
}
const ::tendermint::p2p::PexAddrs&
Message::_Internal::pex_addrs(const Message* msg) {
  return *msg->_impl_.sum_.pex_addrs_;
}
void Message::set_allocated_pex_request(::tendermint::p2p::PexRequest* pex_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pex_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pex_request);
    if (message_arena != submessage_arena) {
      pex_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pex_request, submessage_arena);
    }
    set_has_pex_request();
    _impl_.sum_.pex_request_ = pex_request;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Message.pex_request)
}
void Message::set_allocated_pex_addrs(::tendermint::p2p::PexAddrs* pex_addrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (pex_addrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pex_addrs);
    if (message_arena != submessage_arena) {
      pex_addrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pex_addrs, submessage_arena);
    }
    set_has_pex_addrs();
    _impl_.sum_.pex_addrs_ = pex_addrs;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Message.pex_addrs)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kPexRequest: {
      _this->_internal_mutable_pex_request()->::tendermint::p2p::PexRequest::MergeFrom(
          from._internal_pex_request());
      break;
    }
    case kPexAddrs: {
      _this->_internal_mutable_pex_addrs()->::tendermint::p2p::PexAddrs::MergeFrom(
          from._internal_pex_addrs());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.Message)
}

inline void Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Message::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.p2p.Message)
  switch (sum_case()) {
    case kPexRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.pex_request_;
      }
      break;
    }
    case kPexAddrs: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.pex_addrs_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.p2p.PexRequest pex_request = 1 [json_name = "pexRequest"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pex_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.p2p.PexAddrs pex_addrs = 2 [json_name = "pexAddrs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pex_addrs(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kPexRequest: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::pex_request(this),
          _Internal::pex_request(this).GetCachedSize(), target, stream);
      break;
    }
    case kPexAddrs: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::pex_addrs(this),
          _Internal::pex_addrs(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.Message)
  return target;
}

::size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.p2p.PexRequest pex_request = 1 [json_name = "pexRequest"];
    case kPexRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.pex_request_);
      break;
    }
    // .tendermint.p2p.PexAddrs pex_addrs = 2 [json_name = "pexAddrs"];
    case kPexAddrs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.pex_addrs_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }


void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Message*>(&to_msg);
  auto& from = static_cast<const Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kPexRequest: {
      _this->_internal_mutable_pex_request()->::tendermint::p2p::PexRequest::MergeFrom(
          from._internal_pex_request());
      break;
    }
    case kPexAddrs: {
      _this->_internal_mutable_pex_addrs()->::tendermint::p2p::PexAddrs::MergeFrom(
          from._internal_pex_addrs());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fpex_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fpex_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fpex_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PexRequest*
Arena::CreateMaybeMessage< ::tendermint::p2p::PexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PexAddrs*
Arena::CreateMaybeMessage< ::tendermint::p2p::PexAddrs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PexAddrs >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::Message*
Arena::CreateMaybeMessage< ::tendermint::p2p::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/conn.proto

#include "tendermint/p2p/conn.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace tendermint {
namespace p2p {
template <typename>
PROTOBUF_CONSTEXPR PacketPing::PacketPing(
    ::_pbi::ConstantInitialized) {}
struct PacketPingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketPingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketPingDefaultTypeInternal() {}
  union {
    PacketPing _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketPingDefaultTypeInternal _PacketPing_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketPong::PacketPong(
    ::_pbi::ConstantInitialized) {}
struct PacketPongDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketPongDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketPongDefaultTypeInternal() {}
  union {
    PacketPong _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketPongDefaultTypeInternal _PacketPong_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR PacketMsg::PacketMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.channel_id_)*/ 0

  , /*decltype(_impl_.eof_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PacketMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketMsgDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketMsgDefaultTypeInternal() {}
  union {
    PacketMsg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketMsgDefaultTypeInternal _PacketMsg_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Packet::Packet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sum_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct PacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketDefaultTypeInternal() {}
  union {
    Packet _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketDefaultTypeInternal _Packet_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR AuthSigMessage::AuthSigMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sig_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.pub_key_)*/nullptr} {}
struct AuthSigMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthSigMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthSigMessageDefaultTypeInternal() {}
  union {
    AuthSigMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthSigMessageDefaultTypeInternal _AuthSigMessage_default_instance_;
}  // namespace p2p
}  // namespace tendermint
static ::_pb::Metadata file_level_metadata_tendermint_2fp2p_2fconn_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_tendermint_2fp2p_2fconn_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_tendermint_2fp2p_2fconn_2eproto = nullptr;
const ::uint32_t TableStruct_tendermint_2fp2p_2fconn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketPing, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketPong, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, _impl_.eof_),
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::PacketMsg, _impl_.data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _impl_.sum_),
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, _impl_.pub_key_),
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::AuthSigMessage, _impl_.sig_),
    0,
    ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::tendermint::p2p::PacketPing)},
        { 8, -1, -1, sizeof(::tendermint::p2p::PacketPong)},
        { 16, -1, -1, sizeof(::tendermint::p2p::PacketMsg)},
        { 27, -1, -1, sizeof(::tendermint::p2p::Packet)},
        { 39, 49, -1, sizeof(::tendermint::p2p::AuthSigMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::tendermint::p2p::_PacketPing_default_instance_._instance,
    &::tendermint::p2p::_PacketPong_default_instance_._instance,
    &::tendermint::p2p::_PacketMsg_default_instance_._instance,
    &::tendermint::p2p::_Packet_default_instance_._instance,
    &::tendermint::p2p::_AuthSigMessage_default_instance_._instance,
};
const char descriptor_table_protodef_tendermint_2fp2p_2fconn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031tendermint/p2p/conn.proto\022\016tendermint."
    "p2p\032\024gogoproto/gogo.proto\032\034tendermint/cr"
    "ypto/keys.proto\"\014\n\nPacketPing\"\014\n\nPacketP"
    "ong\"h\n\tPacketMsg\022,\n\nchannel_id\030\001 \001(\005B\r\342\336"
    "\037\tChannelIDR\tchannelId\022\031\n\003eof\030\002 \001(\010B\007\342\336\037"
    "\003EOFR\003eof\022\022\n\004data\030\003 \001(\014R\004data\"\311\001\n\006Packet"
    "\022=\n\013packet_ping\030\001 \001(\0132\032.tendermint.p2p.P"
    "acketPingH\000R\npacketPing\022=\n\013packet_pong\030\002"
    " \001(\0132\032.tendermint.p2p.PacketPongH\000R\npack"
    "etPong\022:\n\npacket_msg\030\003 \001(\0132\031.tendermint."
    "p2p.PacketMsgH\000R\tpacketMsgB\005\n\003sum\"_\n\016Aut"
    "hSigMessage\022;\n\007pub_key\030\001 \001(\0132\034.tendermin"
    "t.crypto.PublicKeyB\004\310\336\037\000R\006pubKey\022\020\n\003sig\030"
    "\002 \001(\014R\003sigB\253\001\n\022com.tendermint.p2pB\tConnP"
    "rotoP\001Z1github.com/cometbft/cometbft/pro"
    "to/tendermint/p2p\242\002\003TPX\252\002\016Tendermint.P2p"
    "\312\002\016Tendermint\\P2p\342\002\032Tendermint\\P2p\\GPBMe"
    "tadata\352\002\017Tendermint::P2pb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_tendermint_2fp2p_2fconn_2eproto_deps[2] =
    {
        &::descriptor_table_gogoproto_2fgogo_2eproto,
        &::descriptor_table_tendermint_2fcrypto_2fkeys_2eproto,
};
static ::absl::once_flag descriptor_table_tendermint_2fp2p_2fconn_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tendermint_2fp2p_2fconn_2eproto = {
    false,
    false,
    712,
    descriptor_table_protodef_tendermint_2fp2p_2fconn_2eproto,
    "tendermint/p2p/conn.proto",
    &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
    descriptor_table_tendermint_2fp2p_2fconn_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_tendermint_2fp2p_2fconn_2eproto::offsets,
    file_level_metadata_tendermint_2fp2p_2fconn_2eproto,
    file_level_enum_descriptors_tendermint_2fp2p_2fconn_2eproto,
    file_level_service_descriptors_tendermint_2fp2p_2fconn_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter() {
  return &descriptor_table_tendermint_2fp2p_2fconn_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tendermint_2fp2p_2fconn_2eproto(&descriptor_table_tendermint_2fp2p_2fconn_2eproto);
namespace tendermint {
namespace p2p {
// ===================================================================

class PacketPing::_Internal {
 public:
};

PacketPing::PacketPing(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketPing)
}
PacketPing::PacketPing(const PacketPing& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PacketPing* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketPing)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketPing::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PacketPing::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[0]);
}
// ===================================================================

class PacketPong::_Internal {
 public:
};

PacketPong::PacketPong(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketPong)
}
PacketPong::PacketPong(const PacketPong& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PacketPong* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketPong)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketPong::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketPong::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PacketPong::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[1]);
}
// ===================================================================

class PacketMsg::_Internal {
 public:
};

PacketMsg::PacketMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.PacketMsg)
}
PacketMsg::PacketMsg(const PacketMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PacketMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.channel_id_) {}

    , decltype(_impl_.eof_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.channel_id_, &from._impl_.channel_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.eof_) -
    reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.eof_));
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.PacketMsg)
}

inline void PacketMsg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.data_) {}

    , decltype(_impl_.channel_id_) { 0 }

    , decltype(_impl_.eof_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketMsg::~PacketMsg() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.PacketMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketMsg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void PacketMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.PacketMsg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.channel_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.eof_) -
      reinterpret_cast<char*>(&_impl_.channel_id_)) + sizeof(_impl_.eof_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel_id = 1 [json_name = "channelId", (.gogoproto.customname) = "ChannelID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool eof = 2 [json_name = "eof", (.gogoproto.customname) = "EOF"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.eof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes data = 3 [json_name = "data"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketMsg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.PacketMsg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel_id = 1 [json_name = "channelId", (.gogoproto.customname) = "ChannelID"];
  if (this->_internal_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_channel_id(), target);
  }

  // bool eof = 2 [json_name = "eof", (.gogoproto.customname) = "EOF"];
  if (this->_internal_eof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_eof(), target);
  }

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.PacketMsg)
  return target;
}

::size_t PacketMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.PacketMsg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_data());
  }

  // int32 channel_id = 1 [json_name = "channelId", (.gogoproto.customname) = "ChannelID"];
  if (this->_internal_channel_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_channel_id());
  }

  // bool eof = 2 [json_name = "eof", (.gogoproto.customname) = "EOF"];
  if (this->_internal_eof() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PacketMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PacketMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PacketMsg::GetClassData() const { return &_class_data_; }


void PacketMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PacketMsg*>(&to_msg);
  auto& from = static_cast<const PacketMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.PacketMsg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_channel_id() != 0) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_eof() != 0) {
    _this->_internal_set_eof(from._internal_eof());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PacketMsg::CopyFrom(const PacketMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.PacketMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketMsg::IsInitialized() const {
  return true;
}

void PacketMsg::InternalSwap(PacketMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PacketMsg, _impl_.eof_)
      + sizeof(PacketMsg::_impl_.eof_)
      - PROTOBUF_FIELD_OFFSET(PacketMsg, _impl_.channel_id_)>(
          reinterpret_cast<char*>(&_impl_.channel_id_),
          reinterpret_cast<char*>(&other->_impl_.channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[2]);
}
// ===================================================================

class Packet::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::tendermint::p2p::Packet, _impl_._oneof_case_);
  static const ::tendermint::p2p::PacketPing& packet_ping(const Packet* msg);
  static const ::tendermint::p2p::PacketPong& packet_pong(const Packet* msg);
  static const ::tendermint::p2p::PacketMsg& packet_msg(const Packet* msg);
};

const ::tendermint::p2p::PacketPing&
Packet::_Internal::packet_ping(const Packet* msg) {
  return *msg->_impl_.sum_.packet_ping_;
}
const ::tendermint::p2p::PacketPong&
Packet::_Internal::packet_pong(const Packet* msg) {
  return *msg->_impl_.sum_.packet_pong_;
}
const ::tendermint::p2p::PacketMsg&
Packet::_Internal::packet_msg(const Packet* msg) {
  return *msg->_impl_.sum_.packet_msg_;
}
void Packet::set_allocated_packet_ping(::tendermint::p2p::PacketPing* packet_ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_ping);
    if (message_arena != submessage_arena) {
      packet_ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_ping, submessage_arena);
    }
    set_has_packet_ping();
    _impl_.sum_.packet_ping_ = packet_ping;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_ping)
}
void Packet::set_allocated_packet_pong(::tendermint::p2p::PacketPong* packet_pong) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_pong) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_pong);
    if (message_arena != submessage_arena) {
      packet_pong = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_pong, submessage_arena);
    }
    set_has_packet_pong();
    _impl_.sum_.packet_pong_ = packet_pong;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_pong)
}
void Packet::set_allocated_packet_msg(::tendermint::p2p::PacketMsg* packet_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_sum();
  if (packet_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_msg);
    if (message_arena != submessage_arena) {
      packet_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_msg, submessage_arena);
    }
    set_has_packet_msg();
    _impl_.sum_.packet_msg_ = packet_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.Packet.packet_msg)
}
Packet::Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Packet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_sum();
  switch (from.sum_case()) {
    case kPacketPing: {
      _this->_internal_mutable_packet_ping()->::tendermint::p2p::PacketPing::MergeFrom(
          from._internal_packet_ping());
      break;
    }
    case kPacketPong: {
      _this->_internal_mutable_packet_pong()->::tendermint::p2p::PacketPong::MergeFrom(
          from._internal_packet_pong());
      break;
    }
    case kPacketMsg: {
      _this->_internal_mutable_packet_msg()->::tendermint::p2p::PacketMsg::MergeFrom(
          from._internal_packet_msg());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.Packet)
}

inline void Packet::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.sum_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_sum();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.Packet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Packet::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_sum()) {
    clear_sum();
  }
}

void Packet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Packet::clear_sum() {
// @@protoc_insertion_point(one_of_clear_start:tendermint.p2p.Packet)
  switch (sum_case()) {
    case kPacketPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.packet_ping_;
      }
      break;
    }
    case kPacketPong: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.packet_pong_;
      }
      break;
    }
    case kPacketMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.sum_.packet_msg_;
      }
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.Packet)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sum();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Packet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.p2p.PacketPing packet_ping = 1 [json_name = "packetPing"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_ping(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.p2p.PacketPong packet_pong = 2 [json_name = "packetPong"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_pong(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .tendermint.p2p.PacketMsg packet_msg = 3 [json_name = "packetMsg"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_msg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Packet::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.Packet)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (sum_case()) {
    case kPacketPing: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, _Internal::packet_ping(this),
          _Internal::packet_ping(this).GetCachedSize(), target, stream);
      break;
    }
    case kPacketPong: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::packet_pong(this),
          _Internal::packet_pong(this).GetCachedSize(), target, stream);
      break;
    }
    case kPacketMsg: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::packet_msg(this),
          _Internal::packet_msg(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.Packet)
  return target;
}

::size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.Packet)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sum_case()) {
    // .tendermint.p2p.PacketPing packet_ping = 1 [json_name = "packetPing"];
    case kPacketPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.packet_ping_);
      break;
    }
    // .tendermint.p2p.PacketPong packet_pong = 2 [json_name = "packetPong"];
    case kPacketPong: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.packet_pong_);
      break;
    }
    // .tendermint.p2p.PacketMsg packet_msg = 3 [json_name = "packetMsg"];
    case kPacketMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sum_.packet_msg_);
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Packet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Packet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Packet::GetClassData() const { return &_class_data_; }


void Packet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Packet*>(&to_msg);
  auto& from = static_cast<const Packet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.Packet)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sum_case()) {
    case kPacketPing: {
      _this->_internal_mutable_packet_ping()->::tendermint::p2p::PacketPing::MergeFrom(
          from._internal_packet_ping());
      break;
    }
    case kPacketPong: {
      _this->_internal_mutable_packet_pong()->::tendermint::p2p::PacketPong::MergeFrom(
          from._internal_packet_pong());
      break;
    }
    case kPacketMsg: {
      _this->_internal_mutable_packet_msg()->::tendermint::p2p::PacketMsg::MergeFrom(
          from._internal_packet_msg());
      break;
    }
    case SUM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sum_, other->_impl_.sum_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[3]);
}
// ===================================================================

class AuthSigMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthSigMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AuthSigMessage, _impl_._has_bits_);
  static const ::tendermint::crypto::PublicKey& pub_key(const AuthSigMessage* msg);
  static void set_has_pub_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::tendermint::crypto::PublicKey&
AuthSigMessage::_Internal::pub_key(const AuthSigMessage* msg) {
  return *msg->_impl_.pub_key_;
}
void AuthSigMessage::clear_pub_key() {
  if (_impl_.pub_key_ != nullptr) _impl_.pub_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AuthSigMessage::AuthSigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tendermint.p2p.AuthSigMessage)
}
AuthSigMessage::AuthSigMessage(const AuthSigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthSigMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sig_) {}

    , decltype(_impl_.pub_key_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig().empty()) {
    _this->_impl_.sig_.Set(from._internal_sig(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pub_key_ = new ::tendermint::crypto::PublicKey(*from._impl_.pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:tendermint.p2p.AuthSigMessage)
}

inline void AuthSigMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sig_) {}

    , decltype(_impl_.pub_key_){nullptr}
  };
  _impl_.sig_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sig_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthSigMessage::~AuthSigMessage() {
  // @@protoc_insertion_point(destructor:tendermint.p2p.AuthSigMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthSigMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sig_.Destroy();
  if (this != internal_default_instance()) delete _impl_.pub_key_;
}

void AuthSigMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthSigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tendermint.p2p.AuthSigMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sig_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pub_key_ != nullptr);
    _impl_.pub_key_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthSigMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pub_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes sig = 2 [json_name = "sig"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sig();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthSigMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tendermint.p2p.AuthSigMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pub_key(this),
        _Internal::pub_key(this).GetCachedSize(), target, stream);
  }

  // bytes sig = 2 [json_name = "sig"];
  if (!this->_internal_sig().empty()) {
    const std::string& _s = this->_internal_sig();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tendermint.p2p.AuthSigMessage)
  return target;
}

::size_t AuthSigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tendermint.p2p.AuthSigMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes sig = 2 [json_name = "sig"];
  if (!this->_internal_sig().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_sig());
  }

  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pub_key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthSigMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthSigMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthSigMessage::GetClassData() const { return &_class_data_; }


void AuthSigMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthSigMessage*>(&to_msg);
  auto& from = static_cast<const AuthSigMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tendermint.p2p.AuthSigMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig().empty()) {
    _this->_internal_set_sig(from._internal_sig());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_pub_key()->::tendermint::crypto::PublicKey::MergeFrom(
        from._internal_pub_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthSigMessage::CopyFrom(const AuthSigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tendermint.p2p.AuthSigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthSigMessage::IsInitialized() const {
  return true;
}

void AuthSigMessage::InternalSwap(AuthSigMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sig_, lhs_arena,
                                       &other->_impl_.sig_, rhs_arena);
  swap(_impl_.pub_key_, other->_impl_.pub_key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthSigMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tendermint_2fp2p_2fconn_2eproto_getter, &descriptor_table_tendermint_2fp2p_2fconn_2eproto_once,
      file_level_metadata_tendermint_2fp2p_2fconn_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketPing*
Arena::CreateMaybeMessage< ::tendermint::p2p::PacketPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketPing >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketPong*
Arena::CreateMaybeMessage< ::tendermint::p2p::PacketPong >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketPong >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::PacketMsg*
Arena::CreateMaybeMessage< ::tendermint::p2p::PacketMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::PacketMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::Packet*
Arena::CreateMaybeMessage< ::tendermint::p2p::Packet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::tendermint::p2p::AuthSigMessage*
Arena::CreateMaybeMessage< ::tendermint::p2p::AuthSigMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tendermint::p2p::AuthSigMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tendermint/p2p/conn.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fconn_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fconn_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "gogoproto/gogo.pb.h"
#include "tendermint/crypto/keys.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_tendermint_2fp2p_2fconn_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tendermint_2fp2p_2fconn_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_tendermint_2fp2p_2fconn_2eproto;
namespace tendermint {
namespace p2p {
class AuthSigMessage;
struct AuthSigMessageDefaultTypeInternal;
extern AuthSigMessageDefaultTypeInternal _AuthSigMessage_default_instance_;
class Packet;
struct PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class PacketMsg;
struct PacketMsgDefaultTypeInternal;
extern PacketMsgDefaultTypeInternal _PacketMsg_default_instance_;
class PacketPing;
struct PacketPingDefaultTypeInternal;
extern PacketPingDefaultTypeInternal _PacketPing_default_instance_;
class PacketPong;
struct PacketPongDefaultTypeInternal;
extern PacketPongDefaultTypeInternal _PacketPong_default_instance_;
}  // namespace p2p
}  // namespace tendermint
PROTOBUF_NAMESPACE_OPEN
template <>
::tendermint::p2p::AuthSigMessage* Arena::CreateMaybeMessage<::tendermint::p2p::AuthSigMessage>(Arena*);
template <>
::tendermint::p2p::Packet* Arena::CreateMaybeMessage<::tendermint::p2p::Packet>(Arena*);
template <>
::tendermint::p2p::PacketMsg* Arena::CreateMaybeMessage<::tendermint::p2p::PacketMsg>(Arena*);
template <>
::tendermint::p2p::PacketPing* Arena::CreateMaybeMessage<::tendermint::p2p::PacketPing>(Arena*);
template <>
::tendermint::p2p::PacketPong* Arena::CreateMaybeMessage<::tendermint::p2p::PacketPong>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace tendermint {
namespace p2p {

// ===================================================================


// -------------------------------------------------------------------

class PacketPing final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.p2p.PacketPing) */ {
 public:
  inline PacketPing() : PacketPing(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketPing(const PacketPing& from);
  PacketPing(PacketPing&& from) noexcept
    : PacketPing() {
    *this = ::std::move(from);
  }

  inline PacketPing& operator=(const PacketPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketPing& operator=(PacketPing&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketPing* internal_default_instance() {
    return reinterpret_cast<const PacketPing*>(
               &_PacketPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PacketPing& a, PacketPing& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketPing* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketPing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketPing>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PacketPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PacketPing& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.p2p.PacketPing";
  }
  protected:
  explicit PacketPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.p2p.PacketPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tendermint_2fp2p_2fconn_2eproto;
};// -------------------------------------------------------------------

class PacketPong final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:tendermint.p2p.PacketPong) */ {
 public:
  inline PacketPong() : PacketPong(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketPong(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketPong(const PacketPong& from);
  PacketPong(PacketPong&& from) noexcept
    : PacketPong() {
    *this = ::std::move(from);
  }

  inline PacketPong& operator=(const PacketPong& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketPong& operator=(PacketPong&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketPong& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketPong* internal_default_instance() {
    return reinterpret_cast<const PacketPong*>(
               &_PacketPong_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PacketPong& a, PacketPong& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketPong* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketPong* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketPong* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketPong>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PacketPong& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PacketPong& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.p2p.PacketPong";
  }
  protected:
  explicit PacketPong(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:tendermint.p2p.PacketPong)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tendermint_2fp2p_2fconn_2eproto;
};// -------------------------------------------------------------------

class PacketMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.PacketMsg) */ {
 public:
  inline PacketMsg() : PacketMsg(nullptr) {}
  ~PacketMsg() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PacketMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketMsg(const PacketMsg& from);
  PacketMsg(PacketMsg&& from) noexcept
    : PacketMsg() {
    *this = ::std::move(from);
  }

  inline PacketMsg& operator=(const PacketMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketMsg& operator=(PacketMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PacketMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketMsg* internal_default_instance() {
    return reinterpret_cast<const PacketMsg*>(
               &_PacketMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PacketMsg& a, PacketMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketMsg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PacketMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PacketMsg& from) {
    PacketMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.p2p.PacketMsg";
  }
  protected:
  explicit PacketMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kChannelIdFieldNumber = 1,
    kEofFieldNumber = 2,
  };
  // bytes data = 3 [json_name = "data"];
  void clear_data() ;
  const std::string& data() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // int32 channel_id = 1 [json_name = "channelId", (.gogoproto.customname) = "ChannelID"];
  void clear_channel_id() ;
  ::int32_t channel_id() const;
  void set_channel_id(::int32_t value);

  private:
  ::int32_t _internal_channel_id() const;
  void _internal_set_channel_id(::int32_t value);

  public:
  // bool eof = 2 [json_name = "eof", (.gogoproto.customname) = "EOF"];
  void clear_eof() ;
  bool eof() const;
  void set_eof(bool value);

  private:
  bool _internal_eof() const;
  void _internal_set_eof(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tendermint.p2p.PacketMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::int32_t channel_id_;
    bool eof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2fconn_2eproto;
};// -------------------------------------------------------------------

class Packet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.Packet) */ {
 public:
  inline Packet() : Packet(nullptr) {}
  ~Packet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Packet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Packet& default_instance() {
    return *internal_default_instance();
  }
  enum SumCase {
    kPacketPing = 1,
    kPacketPong = 2,
    kPacketMsg = 3,
    SUM_NOT_SET = 0,
  };

  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Packet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Packet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Packet& from) {
    Packet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.p2p.Packet";
  }
  protected:
  explicit Packet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPacketPingFieldNumber = 1,
    kPacketPongFieldNumber = 2,
    kPacketMsgFieldNumber = 3,
  };
  // .tendermint.p2p.PacketPing packet_ping = 1 [json_name = "packetPing"];
  bool has_packet_ping() const;
  private:
  bool _internal_has_packet_ping() const;

  public:
  void clear_packet_ping() ;
  const ::tendermint::p2p::PacketPing& packet_ping() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::PacketPing* release_packet_ping();
  ::tendermint::p2p::PacketPing* mutable_packet_ping();
  void set_allocated_packet_ping(::tendermint::p2p::PacketPing* packet_ping);
  private:
  const ::tendermint::p2p::PacketPing& _internal_packet_ping() const;
  ::tendermint::p2p::PacketPing* _internal_mutable_packet_ping();
  public:
  void unsafe_arena_set_allocated_packet_ping(
      ::tendermint::p2p::PacketPing* packet_ping);
  ::tendermint::p2p::PacketPing* unsafe_arena_release_packet_ping();
  // .tendermint.p2p.PacketPong packet_pong = 2 [json_name = "packetPong"];
  bool has_packet_pong() const;
  private:
  bool _internal_has_packet_pong() const;

  public:
  void clear_packet_pong() ;
  const ::tendermint::p2p::PacketPong& packet_pong() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::PacketPong* release_packet_pong();
  ::tendermint::p2p::PacketPong* mutable_packet_pong();
  void set_allocated_packet_pong(::tendermint::p2p::PacketPong* packet_pong);
  private:
  const ::tendermint::p2p::PacketPong& _internal_packet_pong() const;
  ::tendermint::p2p::PacketPong* _internal_mutable_packet_pong();
  public:
  void unsafe_arena_set_allocated_packet_pong(
      ::tendermint::p2p::PacketPong* packet_pong);
  ::tendermint::p2p::PacketPong* unsafe_arena_release_packet_pong();
  // .tendermint.p2p.PacketMsg packet_msg = 3 [json_name = "packetMsg"];
  bool has_packet_msg() const;
  private:
  bool _internal_has_packet_msg() const;

  public:
  void clear_packet_msg() ;
  const ::tendermint::p2p::PacketMsg& packet_msg() const;
  PROTOBUF_NODISCARD ::tendermint::p2p::PacketMsg* release_packet_msg();
  ::tendermint::p2p::PacketMsg* mutable_packet_msg();
  void set_allocated_packet_msg(::tendermint::p2p::PacketMsg* packet_msg);
  private:
  const ::tendermint::p2p::PacketMsg& _internal_packet_msg() const;
  ::tendermint::p2p::PacketMsg* _internal_mutable_packet_msg();
  public:
  void unsafe_arena_set_allocated_packet_msg(
      ::tendermint::p2p::PacketMsg* packet_msg);
  ::tendermint::p2p::PacketMsg* unsafe_arena_release_packet_msg();
  void clear_sum();
  SumCase sum_case() const;
  // @@protoc_insertion_point(class_scope:tendermint.p2p.Packet)
 private:
  class _Internal;
  void set_has_packet_ping();
  void set_has_packet_pong();
  void set_has_packet_msg();

  inline bool has_sum() const;
  inline void clear_has_sum();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union SumUnion {
      constexpr SumUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::tendermint::p2p::PacketPing* packet_ping_;
      ::tendermint::p2p::PacketPong* packet_pong_;
      ::tendermint::p2p::PacketMsg* packet_msg_;
    } sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2fconn_2eproto;
};// -------------------------------------------------------------------

class AuthSigMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tendermint.p2p.AuthSigMessage) */ {
 public:
  inline AuthSigMessage() : AuthSigMessage(nullptr) {}
  ~AuthSigMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AuthSigMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthSigMessage(const AuthSigMessage& from);
  AuthSigMessage(AuthSigMessage&& from) noexcept
    : AuthSigMessage() {
    *this = ::std::move(from);
  }

  inline AuthSigMessage& operator=(const AuthSigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthSigMessage& operator=(AuthSigMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthSigMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthSigMessage* internal_default_instance() {
    return reinterpret_cast<const AuthSigMessage*>(
               &_AuthSigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AuthSigMessage& a, AuthSigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthSigMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthSigMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthSigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthSigMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthSigMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthSigMessage& from) {
    AuthSigMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthSigMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "tendermint.p2p.AuthSigMessage";
  }
  protected:
  explicit AuthSigMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSigFieldNumber = 2,
    kPubKeyFieldNumber = 1,
  };
  // bytes sig = 2 [json_name = "sig"];
  void clear_sig() ;
  const std::string& sig() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sig(Arg_&& arg, Args_... args);
  std::string* mutable_sig();
  PROTOBUF_NODISCARD std::string* release_sig();
  void set_allocated_sig(std::string* ptr);

  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(
      const std::string& value);
  std::string* _internal_mutable_sig();

  public:
  // .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
  bool has_pub_key() const;
  void clear_pub_key() ;
  const ::tendermint::crypto::PublicKey& pub_key() const;
  PROTOBUF_NODISCARD ::tendermint::crypto::PublicKey* release_pub_key();
  ::tendermint::crypto::PublicKey* mutable_pub_key();
  void set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key);
  private:
  const ::tendermint::crypto::PublicKey& _internal_pub_key() const;
  ::tendermint::crypto::PublicKey* _internal_mutable_pub_key();
  public:
  void unsafe_arena_set_allocated_pub_key(
      ::tendermint::crypto::PublicKey* pub_key);
  ::tendermint::crypto::PublicKey* unsafe_arena_release_pub_key();
  // @@protoc_insertion_point(class_scope:tendermint.p2p.AuthSigMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
    ::tendermint::crypto::PublicKey* pub_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tendermint_2fp2p_2fconn_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PacketPing

// -------------------------------------------------------------------

// PacketPong

// -------------------------------------------------------------------

// PacketMsg

// int32 channel_id = 1 [json_name = "channelId", (.gogoproto.customname) = "ChannelID"];
inline void PacketMsg::clear_channel_id() {
  _impl_.channel_id_ = 0;
}
inline ::int32_t PacketMsg::channel_id() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.PacketMsg.channel_id)
  return _internal_channel_id();
}
inline void PacketMsg::set_channel_id(::int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.PacketMsg.channel_id)
}
inline ::int32_t PacketMsg::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline void PacketMsg::_internal_set_channel_id(::int32_t value) {
  ;
  _impl_.channel_id_ = value;
}

// bool eof = 2 [json_name = "eof", (.gogoproto.customname) = "EOF"];
inline void PacketMsg::clear_eof() {
  _impl_.eof_ = false;
}
inline bool PacketMsg::eof() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.PacketMsg.eof)
  return _internal_eof();
}
inline void PacketMsg::set_eof(bool value) {
  _internal_set_eof(value);
  // @@protoc_insertion_point(field_set:tendermint.p2p.PacketMsg.eof)
}
inline bool PacketMsg::_internal_eof() const {
  return _impl_.eof_;
}
inline void PacketMsg::_internal_set_eof(bool value) {
  ;
  _impl_.eof_ = value;
}

// bytes data = 3 [json_name = "data"];
inline void PacketMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& PacketMsg::data() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.PacketMsg.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketMsg::set_data(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.PacketMsg.data)
}
inline std::string* PacketMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.PacketMsg.data)
  return _s;
}
inline const std::string& PacketMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void PacketMsg::_internal_set_data(const std::string& value) {
  ;


  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* PacketMsg::_internal_mutable_data() {
  ;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* PacketMsg::release_data() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.PacketMsg.data)
  return _impl_.data_.Release();
}
inline void PacketMsg::set_allocated_data(std::string* value) {
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.PacketMsg.data)
}

// -------------------------------------------------------------------

// Packet

// .tendermint.p2p.PacketPing packet_ping = 1 [json_name = "packetPing"];
inline bool Packet::has_packet_ping() const {
  return sum_case() == kPacketPing;
}
inline bool Packet::_internal_has_packet_ping() const {
  return sum_case() == kPacketPing;
}
inline void Packet::set_has_packet_ping() {
  _impl_._oneof_case_[0] = kPacketPing;
}
inline void Packet::clear_packet_ping() {
  if (sum_case() == kPacketPing) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.packet_ping_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::p2p::PacketPing* Packet::release_packet_ping() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.Packet.packet_ping)
  if (sum_case() == kPacketPing) {
    clear_has_sum();
    ::tendermint::p2p::PacketPing* temp = _impl_.sum_.packet_ping_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.packet_ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::p2p::PacketPing& Packet::_internal_packet_ping() const {
  return sum_case() == kPacketPing
      ? *_impl_.sum_.packet_ping_
      : reinterpret_cast<::tendermint::p2p::PacketPing&>(::tendermint::p2p::_PacketPing_default_instance_);
}
inline const ::tendermint::p2p::PacketPing& Packet::packet_ping() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.Packet.packet_ping)
  return _internal_packet_ping();
}
inline ::tendermint::p2p::PacketPing* Packet::unsafe_arena_release_packet_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.p2p.Packet.packet_ping)
  if (sum_case() == kPacketPing) {
    clear_has_sum();
    ::tendermint::p2p::PacketPing* temp = _impl_.sum_.packet_ping_;
    _impl_.sum_.packet_ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_packet_ping(::tendermint::p2p::PacketPing* packet_ping) {
  clear_sum();
  if (packet_ping) {
    set_has_packet_ping();
    _impl_.sum_.packet_ping_ = packet_ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.Packet.packet_ping)
}
inline ::tendermint::p2p::PacketPing* Packet::_internal_mutable_packet_ping() {
  if (sum_case() != kPacketPing) {
    clear_sum();
    set_has_packet_ping();
    _impl_.sum_.packet_ping_ = CreateMaybeMessage< ::tendermint::p2p::PacketPing >(GetArenaForAllocation());
  }
  return _impl_.sum_.packet_ping_;
}
inline ::tendermint::p2p::PacketPing* Packet::mutable_packet_ping() {
  ::tendermint::p2p::PacketPing* _msg = _internal_mutable_packet_ping();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.Packet.packet_ping)
  return _msg;
}

// .tendermint.p2p.PacketPong packet_pong = 2 [json_name = "packetPong"];
inline bool Packet::has_packet_pong() const {
  return sum_case() == kPacketPong;
}
inline bool Packet::_internal_has_packet_pong() const {
  return sum_case() == kPacketPong;
}
inline void Packet::set_has_packet_pong() {
  _impl_._oneof_case_[0] = kPacketPong;
}
inline void Packet::clear_packet_pong() {
  if (sum_case() == kPacketPong) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.packet_pong_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::p2p::PacketPong* Packet::release_packet_pong() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.Packet.packet_pong)
  if (sum_case() == kPacketPong) {
    clear_has_sum();
    ::tendermint::p2p::PacketPong* temp = _impl_.sum_.packet_pong_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.packet_pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::p2p::PacketPong& Packet::_internal_packet_pong() const {
  return sum_case() == kPacketPong
      ? *_impl_.sum_.packet_pong_
      : reinterpret_cast<::tendermint::p2p::PacketPong&>(::tendermint::p2p::_PacketPong_default_instance_);
}
inline const ::tendermint::p2p::PacketPong& Packet::packet_pong() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.Packet.packet_pong)
  return _internal_packet_pong();
}
inline ::tendermint::p2p::PacketPong* Packet::unsafe_arena_release_packet_pong() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.p2p.Packet.packet_pong)
  if (sum_case() == kPacketPong) {
    clear_has_sum();
    ::tendermint::p2p::PacketPong* temp = _impl_.sum_.packet_pong_;
    _impl_.sum_.packet_pong_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_packet_pong(::tendermint::p2p::PacketPong* packet_pong) {
  clear_sum();
  if (packet_pong) {
    set_has_packet_pong();
    _impl_.sum_.packet_pong_ = packet_pong;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.Packet.packet_pong)
}
inline ::tendermint::p2p::PacketPong* Packet::_internal_mutable_packet_pong() {
  if (sum_case() != kPacketPong) {
    clear_sum();
    set_has_packet_pong();
    _impl_.sum_.packet_pong_ = CreateMaybeMessage< ::tendermint::p2p::PacketPong >(GetArenaForAllocation());
  }
  return _impl_.sum_.packet_pong_;
}
inline ::tendermint::p2p::PacketPong* Packet::mutable_packet_pong() {
  ::tendermint::p2p::PacketPong* _msg = _internal_mutable_packet_pong();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.Packet.packet_pong)
  return _msg;
}

// .tendermint.p2p.PacketMsg packet_msg = 3 [json_name = "packetMsg"];
inline bool Packet::has_packet_msg() const {
  return sum_case() == kPacketMsg;
}
inline bool Packet::_internal_has_packet_msg() const {
  return sum_case() == kPacketMsg;
}
inline void Packet::set_has_packet_msg() {
  _impl_._oneof_case_[0] = kPacketMsg;
}
inline void Packet::clear_packet_msg() {
  if (sum_case() == kPacketMsg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.sum_.packet_msg_;
    }
    clear_has_sum();
  }
}
inline ::tendermint::p2p::PacketMsg* Packet::release_packet_msg() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.Packet.packet_msg)
  if (sum_case() == kPacketMsg) {
    clear_has_sum();
    ::tendermint::p2p::PacketMsg* temp = _impl_.sum_.packet_msg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.sum_.packet_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tendermint::p2p::PacketMsg& Packet::_internal_packet_msg() const {
  return sum_case() == kPacketMsg
      ? *_impl_.sum_.packet_msg_
      : reinterpret_cast<::tendermint::p2p::PacketMsg&>(::tendermint::p2p::_PacketMsg_default_instance_);
}
inline const ::tendermint::p2p::PacketMsg& Packet::packet_msg() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.Packet.packet_msg)
  return _internal_packet_msg();
}
inline ::tendermint::p2p::PacketMsg* Packet::unsafe_arena_release_packet_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tendermint.p2p.Packet.packet_msg)
  if (sum_case() == kPacketMsg) {
    clear_has_sum();
    ::tendermint::p2p::PacketMsg* temp = _impl_.sum_.packet_msg_;
    _impl_.sum_.packet_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Packet::unsafe_arena_set_allocated_packet_msg(::tendermint::p2p::PacketMsg* packet_msg) {
  clear_sum();
  if (packet_msg) {
    set_has_packet_msg();
    _impl_.sum_.packet_msg_ = packet_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.Packet.packet_msg)
}
inline ::tendermint::p2p::PacketMsg* Packet::_internal_mutable_packet_msg() {
  if (sum_case() != kPacketMsg) {
    clear_sum();
    set_has_packet_msg();
    _impl_.sum_.packet_msg_ = CreateMaybeMessage< ::tendermint::p2p::PacketMsg >(GetArenaForAllocation());
  }
  return _impl_.sum_.packet_msg_;
}
inline ::tendermint::p2p::PacketMsg* Packet::mutable_packet_msg() {
  ::tendermint::p2p::PacketMsg* _msg = _internal_mutable_packet_msg();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.Packet.packet_msg)
  return _msg;
}

inline bool Packet::has_sum() const {
  return sum_case() != SUM_NOT_SET;
}
inline void Packet::clear_has_sum() {
  _impl_._oneof_case_[0] = SUM_NOT_SET;
}
inline Packet::SumCase Packet::sum_case() const {
  return Packet::SumCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AuthSigMessage

// .tendermint.crypto.PublicKey pub_key = 1 [json_name = "pubKey", (.gogoproto.nullable) = false];
inline bool AuthSigMessage::has_pub_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pub_key_ != nullptr);
  return value;
}
inline const ::tendermint::crypto::PublicKey& AuthSigMessage::_internal_pub_key() const {
  const ::tendermint::crypto::PublicKey* p = _impl_.pub_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::tendermint::crypto::PublicKey&>(
      ::tendermint::crypto::_PublicKey_default_instance_);
}
inline const ::tendermint::crypto::PublicKey& AuthSigMessage::pub_key() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.AuthSigMessage.pub_key)
  return _internal_pub_key();
}
inline void AuthSigMessage::unsafe_arena_set_allocated_pub_key(
    ::tendermint::crypto::PublicKey* pub_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  _impl_.pub_key_ = pub_key;
  if (pub_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tendermint.p2p.AuthSigMessage.pub_key)
}
inline ::tendermint::crypto::PublicKey* AuthSigMessage::release_pub_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tendermint::crypto::PublicKey* AuthSigMessage::unsafe_arena_release_pub_key() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.AuthSigMessage.pub_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tendermint::crypto::PublicKey* temp = _impl_.pub_key_;
  _impl_.pub_key_ = nullptr;
  return temp;
}
inline ::tendermint::crypto::PublicKey* AuthSigMessage::_internal_mutable_pub_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pub_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::tendermint::crypto::PublicKey>(GetArenaForAllocation());
    _impl_.pub_key_ = p;
  }
  return _impl_.pub_key_;
}
inline ::tendermint::crypto::PublicKey* AuthSigMessage::mutable_pub_key() {
  ::tendermint::crypto::PublicKey* _msg = _internal_mutable_pub_key();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.AuthSigMessage.pub_key)
  return _msg;
}
inline void AuthSigMessage::set_allocated_pub_key(::tendermint::crypto::PublicKey* pub_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pub_key_);
  }
  if (pub_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pub_key));
    if (message_arena != submessage_arena) {
      pub_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pub_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pub_key_ = pub_key;
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.AuthSigMessage.pub_key)
}

// bytes sig = 2 [json_name = "sig"];
inline void AuthSigMessage::clear_sig() {
  _impl_.sig_.ClearToEmpty();
}
inline const std::string& AuthSigMessage::sig() const {
  // @@protoc_insertion_point(field_get:tendermint.p2p.AuthSigMessage.sig)
  return _internal_sig();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthSigMessage::set_sig(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.sig_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tendermint.p2p.AuthSigMessage.sig)
}
inline std::string* AuthSigMessage::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:tendermint.p2p.AuthSigMessage.sig)
  return _s;
}
inline const std::string& AuthSigMessage::_internal_sig() const {
  return _impl_.sig_.Get();
}
inline void AuthSigMessage::_internal_set_sig(const std::string& value) {
  ;


  _impl_.sig_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthSigMessage::_internal_mutable_sig() {
  ;
  return _impl_.sig_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthSigMessage::release_sig() {
  // @@protoc_insertion_point(field_release:tendermint.p2p.AuthSigMessage.sig)
  return _impl_.sig_.Release();
}
inline void AuthSigMessage::set_allocated_sig(std::string* value) {
  _impl_.sig_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sig_.IsDefault()) {
          _impl_.sig_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tendermint.p2p.AuthSigMessage.sig)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace p2p
}  // namespace tendermint


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_tendermint_2fp2p_2fconn_2eproto_2epb_2eh

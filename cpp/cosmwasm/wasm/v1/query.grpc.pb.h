// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cosmwasm/wasm/v1/query.proto
#ifndef GRPC_cosmwasm_2fwasm_2fv1_2fquery_2eproto__INCLUDED
#define GRPC_cosmwasm_2fwasm_2fv1_2fquery_2eproto__INCLUDED

#include "cosmwasm/wasm/v1/query.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace cosmwasm {
namespace wasm {
namespace v1 {

// Query provides defines the gRPC querier service
class Query final {
 public:
  static constexpr char const* service_full_name() {
    return "cosmwasm.wasm.v1.Query";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ContractInfo gets the contract meta data
    virtual ::grpc::Status ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>> AsyncContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>>(AsyncContractInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>> PrepareAsyncContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>>(PrepareAsyncContractInfoRaw(context, request, cq));
    }
    // ContractHistory gets the contract code history
    virtual ::grpc::Status ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>> AsyncContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>>(AsyncContractHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>> PrepareAsyncContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>>(PrepareAsyncContractHistoryRaw(context, request, cq));
    }
    // ContractsByCode lists all smart contracts for a code id
    virtual ::grpc::Status ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>> AsyncContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>>(AsyncContractsByCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>> PrepareAsyncContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>>(PrepareAsyncContractsByCodeRaw(context, request, cq));
    }
    // AllContractState gets all raw store data for a single contract
    virtual ::grpc::Status AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>> AsyncAllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>>(AsyncAllContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>> PrepareAsyncAllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>>(PrepareAsyncAllContractStateRaw(context, request, cq));
    }
    // RawContractState gets single key from the raw store data of a contract
    virtual ::grpc::Status RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>> AsyncRawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>>(AsyncRawContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>> PrepareAsyncRawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>>(PrepareAsyncRawContractStateRaw(context, request, cq));
    }
    // SmartContractState get smart query result from the contract
    virtual ::grpc::Status SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>> AsyncSmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>>(AsyncSmartContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>> PrepareAsyncSmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>>(PrepareAsyncSmartContractStateRaw(context, request, cq));
    }
    // Code gets the binary code and metadata for a singe wasm code
    virtual ::grpc::Status Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::cosmwasm::wasm::v1::QueryCodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>> AsyncCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>>(AsyncCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>> PrepareAsyncCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>>(PrepareAsyncCodeRaw(context, request, cq));
    }
    // Codes gets the metadata for all stored wasm codes
    virtual ::grpc::Status Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::cosmwasm::wasm::v1::QueryCodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>> AsyncCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>>(AsyncCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>> PrepareAsyncCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>>(PrepareAsyncCodesRaw(context, request, cq));
    }
    // PinnedCodes gets the pinned code ids
    virtual ::grpc::Status PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>> AsyncPinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>>(AsyncPinnedCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>> PrepareAsyncPinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>>(PrepareAsyncPinnedCodesRaw(context, request, cq));
    }
    // Params gets the module params
    virtual ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::cosmwasm::wasm::v1::QueryParamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    // ContractsByCreator gets the contracts by creator
    virtual ::grpc::Status ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>> AsyncContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>>(AsyncContractsByCreatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>> PrepareAsyncContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>>(PrepareAsyncContractsByCreatorRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // ContractInfo gets the contract meta data
      virtual void ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ContractHistory gets the contract code history
      virtual void ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ContractsByCode lists all smart contracts for a code id
      virtual void ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // AllContractState gets all raw store data for a single contract
      virtual void AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // RawContractState gets single key from the raw store data of a contract
      virtual void RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SmartContractState get smart query result from the contract
      virtual void SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Code gets the binary code and metadata for a singe wasm code
      virtual void Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Codes gets the metadata for all stored wasm codes
      virtual void Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PinnedCodes gets the pinned code ids
      virtual void PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Params gets the module params
      virtual void Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ContractsByCreator gets the contracts by creator
      virtual void ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* AsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* PrepareAsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* AsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* PrepareAsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* AsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* PrepareAsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* AsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* PrepareAsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* AsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* PrepareAsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* AsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* PrepareAsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>* AsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodeResponse>* PrepareAsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>* AsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryCodesResponse>* PrepareAsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* AsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* PrepareAsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* AsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* PrepareAsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>> AsyncContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>>(AsyncContractInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>> PrepareAsyncContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>>(PrepareAsyncContractInfoRaw(context, request, cq));
    }
    ::grpc::Status ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>> AsyncContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>>(AsyncContractHistoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>> PrepareAsyncContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>>(PrepareAsyncContractHistoryRaw(context, request, cq));
    }
    ::grpc::Status ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>> AsyncContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>>(AsyncContractsByCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>> PrepareAsyncContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>>(PrepareAsyncContractsByCodeRaw(context, request, cq));
    }
    ::grpc::Status AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>> AsyncAllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>>(AsyncAllContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>> PrepareAsyncAllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>>(PrepareAsyncAllContractStateRaw(context, request, cq));
    }
    ::grpc::Status RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>> AsyncRawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>>(AsyncRawContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>> PrepareAsyncRawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>>(PrepareAsyncRawContractStateRaw(context, request, cq));
    }
    ::grpc::Status SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>> AsyncSmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>>(AsyncSmartContractStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>> PrepareAsyncSmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>>(PrepareAsyncSmartContractStateRaw(context, request, cq));
    }
    ::grpc::Status Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::cosmwasm::wasm::v1::QueryCodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>> AsyncCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>>(AsyncCodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>> PrepareAsyncCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>>(PrepareAsyncCodeRaw(context, request, cq));
    }
    ::grpc::Status Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::cosmwasm::wasm::v1::QueryCodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>> AsyncCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>>(AsyncCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>> PrepareAsyncCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>>(PrepareAsyncCodesRaw(context, request, cq));
    }
    ::grpc::Status PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>> AsyncPinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>>(AsyncPinnedCodesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>> PrepareAsyncPinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>>(PrepareAsyncPinnedCodesRaw(context, request, cq));
    }
    ::grpc::Status Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::cosmwasm::wasm::v1::QueryParamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>> AsyncParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>>(AsyncParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>> PrepareAsyncParams(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>>(PrepareAsyncParamsRaw(context, request, cq));
    }
    ::grpc::Status ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>> AsyncContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>>(AsyncContractsByCreatorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>> PrepareAsyncContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>>(PrepareAsyncContractsByCreatorRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void ContractInfo(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, std::function<void(::grpc::Status)>) override;
      void ContractHistory(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void ContractsByCode(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, std::function<void(::grpc::Status)>) override;
      void AllContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, std::function<void(::grpc::Status)>) override;
      void RawContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, std::function<void(::grpc::Status)>) override;
      void SmartContractState(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, std::function<void(::grpc::Status)>) override;
      void Code(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, std::function<void(::grpc::Status)>) override;
      void Codes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, std::function<void(::grpc::Status)>) override;
      void PinnedCodes(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, std::function<void(::grpc::Status)>) override;
      void Params(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, std::function<void(::grpc::Status)>) override;
      void ContractsByCreator(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* AsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* PrepareAsyncContractInfoRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* AsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* PrepareAsyncContractHistoryRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* AsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* PrepareAsyncContractsByCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* AsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* PrepareAsyncAllContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* AsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* PrepareAsyncRawContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* AsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* PrepareAsyncSmartContractStateRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>* AsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodeResponse>* PrepareAsyncCodeRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>* AsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryCodesResponse>* PrepareAsyncCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* AsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* PrepareAsyncPinnedCodesRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>* AsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryParamsResponse>* PrepareAsyncParamsRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* AsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* PrepareAsyncContractsByCreatorRaw(::grpc::ClientContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ContractInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_ContractHistory_;
    const ::grpc::internal::RpcMethod rpcmethod_ContractsByCode_;
    const ::grpc::internal::RpcMethod rpcmethod_AllContractState_;
    const ::grpc::internal::RpcMethod rpcmethod_RawContractState_;
    const ::grpc::internal::RpcMethod rpcmethod_SmartContractState_;
    const ::grpc::internal::RpcMethod rpcmethod_Code_;
    const ::grpc::internal::RpcMethod rpcmethod_Codes_;
    const ::grpc::internal::RpcMethod rpcmethod_PinnedCodes_;
    const ::grpc::internal::RpcMethod rpcmethod_Params_;
    const ::grpc::internal::RpcMethod rpcmethod_ContractsByCreator_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ContractInfo gets the contract meta data
    virtual ::grpc::Status ContractInfo(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response);
    // ContractHistory gets the contract code history
    virtual ::grpc::Status ContractHistory(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response);
    // ContractsByCode lists all smart contracts for a code id
    virtual ::grpc::Status ContractsByCode(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response);
    // AllContractState gets all raw store data for a single contract
    virtual ::grpc::Status AllContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response);
    // RawContractState gets single key from the raw store data of a contract
    virtual ::grpc::Status RawContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response);
    // SmartContractState get smart query result from the contract
    virtual ::grpc::Status SmartContractState(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response);
    // Code gets the binary code and metadata for a singe wasm code
    virtual ::grpc::Status Code(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response);
    // Codes gets the metadata for all stored wasm codes
    virtual ::grpc::Status Codes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response);
    // PinnedCodes gets the pinned code ids
    virtual ::grpc::Status PinnedCodes(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response);
    // Params gets the module params
    virtual ::grpc::Status Params(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response);
    // ContractsByCreator gets the contracts by creator
    virtual ::grpc::Status ContractsByCreator(::grpc::ServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ContractInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractInfo(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryContractInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ContractHistory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractHistory(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractsByCode(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllContractState() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllContractState(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RawContractState() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawContractState(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SmartContractState() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSmartContractState(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Code() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryCodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Codes() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCodes(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryCodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPinnedCodes(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Params() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryParamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractsByCreator(::grpc::ServerContext* context, ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::grpc::ServerAsyncResponseWriter< ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ContractInfo<WithAsyncMethod_ContractHistory<WithAsyncMethod_ContractsByCode<WithAsyncMethod_AllContractState<WithAsyncMethod_RawContractState<WithAsyncMethod_SmartContractState<WithAsyncMethod_Code<WithAsyncMethod_Codes<WithAsyncMethod_PinnedCodes<WithAsyncMethod_Params<WithAsyncMethod_ContractsByCreator<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ContractInfo() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* request, ::cosmwasm::wasm::v1::QueryContractInfoResponse* response) { return this->ContractInfo(context, request, response); }));}
    void SetMessageAllocatorFor_ContractInfo(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ContractHistory() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* request, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* response) { return this->ContractHistory(context, request, response); }));}
    void SetMessageAllocatorFor_ContractHistory(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* response) { return this->ContractsByCode(context, request, response); }));}
    void SetMessageAllocatorFor_ContractsByCode(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractsByCode(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllContractState() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* request, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* response) { return this->AllContractState(context, request, response); }));}
    void SetMessageAllocatorFor_AllContractState(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RawContractState() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* request, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* response) { return this->RawContractState(context, request, response); }));}
    void SetMessageAllocatorFor_RawContractState(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RawContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SmartContractState() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* request, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* response) { return this->SmartContractState(context, request, response); }));}
    void SetMessageAllocatorFor_SmartContractState(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SmartContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Code() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryCodeRequest* request, ::cosmwasm::wasm::v1::QueryCodeResponse* response) { return this->Code(context, request, response); }));}
    void SetMessageAllocatorFor_Code(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Codes() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryCodesRequest* request, ::cosmwasm::wasm::v1::QueryCodesResponse* response) { return this->Codes(context, request, response); }));}
    void SetMessageAllocatorFor_Codes(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Codes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* request, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* response) { return this->PinnedCodes(context, request, response); }));}
    void SetMessageAllocatorFor_PinnedCodes(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PinnedCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Params() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryParamsRequest* request, ::cosmwasm::wasm::v1::QueryParamsResponse* response) { return this->Params(context, request, response); }));}
    void SetMessageAllocatorFor_Params(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* request, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* response) { return this->ContractsByCreator(context, request, response); }));}
    void SetMessageAllocatorFor_ContractsByCreator(
        ::grpc::MessageAllocator< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractsByCreator(
      ::grpc::CallbackServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ContractInfo<WithCallbackMethod_ContractHistory<WithCallbackMethod_ContractsByCode<WithCallbackMethod_AllContractState<WithCallbackMethod_RawContractState<WithCallbackMethod_SmartContractState<WithCallbackMethod_Code<WithCallbackMethod_Codes<WithCallbackMethod_PinnedCodes<WithCallbackMethod_Params<WithCallbackMethod_ContractsByCreator<Service > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ContractInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ContractHistory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllContractState() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RawContractState() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SmartContractState() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Code() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Codes() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Params() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ContractInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ContractHistory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractHistory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractsByCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllContractState() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllContractState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RawContractState() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRawContractState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SmartContractState() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSmartContractState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Code() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Codes() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPinnedCodes(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Params() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestContractsByCreator(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ContractInfo() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ContractInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ContractHistory() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ContractHistory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractHistory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ContractsByCode(context, request, response); }));
    }
    ~WithRawCallbackMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractsByCode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllContractState() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllContractState(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RawContractState() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RawContractState(context, request, response); }));
    }
    ~WithRawCallbackMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RawContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SmartContractState() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SmartContractState(context, request, response); }));
    }
    ~WithRawCallbackMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SmartContractState(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Code() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Code(context, request, response); }));
    }
    ~WithRawCallbackMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Code(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Codes() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Codes(context, request, response); }));
    }
    ~WithRawCallbackMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Codes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PinnedCodes(context, request, response); }));
    }
    ~WithRawCallbackMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PinnedCodes(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Params() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Params(context, request, response); }));
    }
    ~WithRawCallbackMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Params(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ContractsByCreator(context, request, response); }));
    }
    ~WithRawCallbackMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ContractsByCreator(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ContractInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ContractInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryContractInfoRequest, ::cosmwasm::wasm::v1::QueryContractInfoResponse>* streamer) {
                       return this->StreamedContractInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ContractInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ContractInfo(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractInfoRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContractInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryContractInfoRequest,::cosmwasm::wasm::v1::QueryContractInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ContractHistory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ContractHistory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryContractHistoryRequest, ::cosmwasm::wasm::v1::QueryContractHistoryResponse>* streamer) {
                       return this->StreamedContractHistory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ContractHistory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ContractHistory(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractHistoryRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractHistoryResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContractHistory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryContractHistoryRequest,::cosmwasm::wasm::v1::QueryContractHistoryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ContractsByCode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ContractsByCode() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryContractsByCodeRequest, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* streamer) {
                       return this->StreamedContractsByCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ContractsByCode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ContractsByCode(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContractsByCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryContractsByCodeRequest,::cosmwasm::wasm::v1::QueryContractsByCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllContractState() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryAllContractStateRequest, ::cosmwasm::wasm::v1::QueryAllContractStateResponse>* streamer) {
                       return this->StreamedAllContractState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryAllContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryAllContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllContractState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryAllContractStateRequest,::cosmwasm::wasm::v1::QueryAllContractStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RawContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RawContractState() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryRawContractStateRequest, ::cosmwasm::wasm::v1::QueryRawContractStateResponse>* streamer) {
                       return this->StreamedRawContractState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RawContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RawContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryRawContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QueryRawContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRawContractState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryRawContractStateRequest,::cosmwasm::wasm::v1::QueryRawContractStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SmartContractState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SmartContractState() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QuerySmartContractStateRequest, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* streamer) {
                       return this->StreamedSmartContractState(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SmartContractState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SmartContractState(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QuerySmartContractStateRequest* /*request*/, ::cosmwasm::wasm::v1::QuerySmartContractStateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSmartContractState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QuerySmartContractStateRequest,::cosmwasm::wasm::v1::QuerySmartContractStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Code : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Code() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryCodeRequest, ::cosmwasm::wasm::v1::QueryCodeResponse>* streamer) {
                       return this->StreamedCode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Code() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Code(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodeRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryCodeRequest,::cosmwasm::wasm::v1::QueryCodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Codes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Codes() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryCodesRequest, ::cosmwasm::wasm::v1::QueryCodesResponse>* streamer) {
                       return this->StreamedCodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Codes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Codes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryCodesRequest,::cosmwasm::wasm::v1::QueryCodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PinnedCodes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PinnedCodes() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryPinnedCodesRequest, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* streamer) {
                       return this->StreamedPinnedCodes(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PinnedCodes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PinnedCodes(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryPinnedCodesRequest* /*request*/, ::cosmwasm::wasm::v1::QueryPinnedCodesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPinnedCodes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryPinnedCodesRequest,::cosmwasm::wasm::v1::QueryPinnedCodesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Params : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Params() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryParamsRequest, ::cosmwasm::wasm::v1::QueryParamsResponse>* streamer) {
                       return this->StreamedParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Params() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Params(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryParamsRequest* /*request*/, ::cosmwasm::wasm::v1::QueryParamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryParamsRequest,::cosmwasm::wasm::v1::QueryParamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ContractsByCreator : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ContractsByCreator() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* streamer) {
                       return this->StreamedContractsByCreator(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ContractsByCreator() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ContractsByCreator(::grpc::ServerContext* /*context*/, const ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest* /*request*/, ::cosmwasm::wasm::v1::QueryContractsByCreatorResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedContractsByCreator(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cosmwasm::wasm::v1::QueryContractsByCreatorRequest,::cosmwasm::wasm::v1::QueryContractsByCreatorResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ContractInfo<WithStreamedUnaryMethod_ContractHistory<WithStreamedUnaryMethod_ContractsByCode<WithStreamedUnaryMethod_AllContractState<WithStreamedUnaryMethod_RawContractState<WithStreamedUnaryMethod_SmartContractState<WithStreamedUnaryMethod_Code<WithStreamedUnaryMethod_Codes<WithStreamedUnaryMethod_PinnedCodes<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ContractsByCreator<Service > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ContractInfo<WithStreamedUnaryMethod_ContractHistory<WithStreamedUnaryMethod_ContractsByCode<WithStreamedUnaryMethod_AllContractState<WithStreamedUnaryMethod_RawContractState<WithStreamedUnaryMethod_SmartContractState<WithStreamedUnaryMethod_Code<WithStreamedUnaryMethod_Codes<WithStreamedUnaryMethod_PinnedCodes<WithStreamedUnaryMethod_Params<WithStreamedUnaryMethod_ContractsByCreator<Service > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace wasm
}  // namespace cosmwasm


#endif  // GRPC_cosmwasm_2fwasm_2fv1_2fquery_2eproto__INCLUDED
